/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/config-custom-azuriom/change-color.js":
/*!**************************************************!*\
  !*** ./js/config-custom-azuriom/change-color.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar jsColors = __webpack_require__(/*! ./colors */ \"./js/config-custom-azuriom/colors.js\");\n\nvar jsPage = __webpack_require__(/*! ./page */ \"./js/config-custom-azuriom/page.js\");\n\nvar PROJECT;\nvar IS_LOGGED = 1;\naxios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\nfunction onIframeLoad(page, cb) {\n  if (page.loadedIframeCheck && page.loadedIframeCheck == true) {\n    console.log('loaded-');\n    setTimeout(function () {\n      cb();\n    }, 1000);\n  } else {\n    window.onload = function () {\n      console.log('loaded--');\n      cb();\n    };\n  }\n}\n\n; //\n// async function asyncGetConfig() {\n//     const response = await axios({\n//         url: '/admin/themes/dofus-default/config',\n//         method: 'GET',\n//         dataType: 'json',\n//     })\n//     return response;\n// }\n\nfunction getConfig(cb) {\n  axios({\n    url: '/admin/themes/dofus-default/config',\n    method: 'GET',\n    dataType: 'json'\n  }).then(function (response) {\n    var getConfig = JSON.parse(response.data.split('<!DOCTYPE html>')[0]);\n\n    if (getConfig.color_themes_data && getConfig.color_themes_data !== '') {\n      PROJECT = {\n        colors: JSON.parse(getConfig.color_themes_data)\n      };\n    } else {\n      PROJECT = {\n        colors: ''\n      };\n    }\n\n    cb();\n  });\n}\n\n(function () {\n  var dataFrame = jsPage;\n  onIframeLoad(dataFrame, function () {\n    getConfig(function () {\n      dataFrame.loadGlobalsStyle(PROJECT);\n    });\n  });\n  /**********************\n   Input Color component\n   ***********************/\n\n  this.ColorInput = function (element) {\n    this.element = element;\n    this.inputColorHex = $(this.element).find('.js-app-color-picker__hex').find('input');\n    this.inputPreview = $(this.element).find('.js-app-color-picker__color');\n    this.inputColor = this.inputPreview.find('input');\n    this.inputColorSupported = inputColorSupported();\n    this.appColorSidebar = $(this.element).parents('.js-app-sidebar--globals');\n    this.hexValue = this.inputColorHex.val();\n    this.initColorInput();\n  };\n\n  ColorInput.prototype.initColorInput = function () {\n    var self = this; //hide/show element\n\n    this.inputColor.toggle(this.inputColorSupported); //listen to events\n    //color input - change\n\n    this.inputColor.on(\"input\", function (event) {\n      self.updateColor(event.target.value, true, true);\n    });\n    this.inputColor.on(\"change\", function (event) {\n      self.updateColor(event.target.value, true, true);\n    }); // text input - change -> hex\n\n    this.inputColorHex.on('focusout', function () {\n      if (self.hexValue == self.inputColorHex.val()) return;\n      self.updateColor($(this).val(), false, true);\n    });\n    this.inputColorHex.on('keyup', function (event) {\n      if (event.key === \"Enter\" && self.hexValue != self.inputColorHex.val()) {\n        self.updateColor($(this).val(), false, true);\n      }\n    });\n    $(this.element).on('update-picker', function (event, value) {\n      self.updateColor(chroma.hsl(value).hex(), false, false);\n    }); //this is triggered only by the contrast section in the colors global\n\n    $(this.element).on('update-contrast-picker', function (event, value1, value2) {\n      if ($(self.element).parents('.js-app-editor-section__bg-color-picker').length > 0) {\n        self.updateColor(chroma.hsl(value1).hex(), false, false);\n      } else if ($(self.element).parents('.js-app-editor-section__hc-color-picker').length > 0) {\n        self.updateColor(chroma.hsl(value2).hex(), false, false);\n      }\n    });\n  };\n\n  ColorInput.prototype.updateColor = function (color, bool, emitEvent) {\n    //first -> make sure no ; are inserted\n    color = color.replace(';', '');\n    var self = this;\n\n    if (color.indexOf('(') < 0 && color.indexOf('#') < 0) {\n      this.inputPreview.css('background-color', '#' + color);\n    } else {\n      this.inputPreview.css('background-color', color);\n    }\n\n    this.inputColorHex.val(color);\n    this.hexValue = color; //need to update the color preview next to the input element\n\n    if (!bool) {\n      this.inputColor.val(chroma(color).hex());\n    }\n\n    if (emitEvent && this.appColorSidebar.length > 0) {\n      this.appColorSidebar.trigger('color-picker-updated', [getHslFromHex(color), $(self.element)]);\n    }\n  };\n\n  function inputColorSupported() {\n    var colorInput = $('<input type=\"color\" value=\"!\" />')[0];\n    return colorInput.type === 'color' && colorInput.value !== '!';\n  }\n\n  ; //initialize the Modal objects\n\n  var colorInputs = document.getElementsByClassName('js-color-picker');\n\n  if (colorInputs.length > 0) {\n    for (var i = 0; i < colorInputs.length; i++) {\n      (function (i) {\n        new ColorInput(colorInputs[i]);\n      })(i);\n    }\n  }\n  /************************/\n\n  /* \tcolor selection popup */\n\n  /************************/\n\n\n  this.ColorSelection = function (element) {\n    this.element = element;\n    this.basicSwatches = $(this.element).find('.js-app-menu__color-swatches');\n    this.variationsSwatches = $(this.element).find('.js-app-menu__color-variations');\n    this.stateA = $(this.element).find('.js-app-menu__state-a');\n    this.stateB = $(this.element).find('.js-app-menu__state-b');\n    this.stateBCustomOpacity = this.stateB.find('.js-app-menu__color-custom-opacity');\n    this.customOpacityInput = this.stateBCustomOpacity.find('input');\n    this.primaryColors = []; //this is an array of 5 colors\n\n    this.accentColors = []; //this is an array of 5 colors\n\n    this.blackColors = []; //this is a color string\n\n    this.whiteColors = []; //this is a color string\n\n    this.contrastColors = []; //this is an array of 5 elements\n\n    this.warningColors = []; //this is an array of 5 elements\n\n    this.successColors = []; //this is an array of 5 elements\n\n    this.errorColors = []; //this is an array of 5 elements\n\n    this.opacities = [];\n    this.colorGroups = $('.js-app-editor-property__color-group'); //some default states\n\n    this.mainColorLabels = ['primary', 'accent', 'success', 'warning', 'error'];\n    this.mainColorVariationLabel = ['-lighter', '-light', '', '-dark', '-darker'];\n    this.customColorLabels = [];\n    this.contrastColorVariationLabel = ['-bg', '-contrast-lower', '-contrast-low', '-contrast-medium', '-contrast-high', '-contrast-higher'];\n    this.contrastVariations = getColorContrastPercentages();\n    this.gradientColorLabels = []; // this will have 'primary', 'secondary'\n\n    this.gradientColorIds = []; // this will have 'custom-0', 'custom-1'\n    // gradient sections\n\n    this.gradients = $(this.element).find('.js-app-menu__color-item--gradients');\n    this.gradientSwatches = this.gradients.find('.js-app-menu__color-swatch');\n    this.colorValues = []; //I'm going to pass this to the buttons object -> list of color values\n\n    this.loadPreset();\n    this.eventListener();\n  };\n\n  ColorSelection.prototype.loadPreset = function () {\n    //you should load this from the db\n    //for now just static\n    console.log(PROJECT);\n\n    if (PROJECT && PROJECT.colors) {\n      this.initColorsFromProject();\n    } else {\n      this.initColors();\n    }\n\n    this.initColorValues();\n    this.initUiColors();\n  };\n\n  ColorSelection.prototype.initColors = function () {\n    this.primaryColors = getDefaultMainColorVariation('primary');\n    this.accentColors = getDefaultMainColorVariation('accent');\n    this.warningColors = getDefaultMainColorVariation('warning');\n    this.successColors = getDefaultMainColorVariation('success');\n    this.errorColors = getDefaultMainColorVariation('error');\n    this.blackColors = [getHslFromHex('#1c1c21')];\n    this.whiteColors = [getHslFromHex('#ffffff')];\n    this.contrastColors = getContrastVariation('#35373b', '#FFFFFF', this.contrastVariations);\n  };\n\n  ColorSelection.prototype.initColorsFromProject = function () {\n    var colors = JSON.parse(PROJECT.colors);\n    this.mainColorLabels = Object.values(colors['mainColorLabels']);\n    if (colors['customColorLabels']) this.customColorLabels = Object.values(colors['customColorLabels']);\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      var obj = colors[this.mainColorLabels[i]];\n      if (!this[this.mainColorLabels[i] + 'Colors']) this[this.mainColorLabels[i] + 'Colors'] = [];\n\n      for (var j = 0; j < 5; j++) {\n        this[this.mainColorLabels[i] + 'Colors'].push(Object.values(obj[0][j]));\n      }\n    }\n\n    for (var i = 0; i < 3; i++) {\n      if (colors['blackColors'][0][i]) this.blackColors.push(Object.values(colors['blackColors'][0][i]));\n      if (colors['whiteColors'][0][i]) this.whiteColors.push(Object.values(colors['whiteColors'][0][i]));\n    }\n\n    for (var i = 0; i < 6; i++) {\n      this.contrastColors.push(Object.values(colors['contrastColors'][0][i]));\n    } // init gradient colors\n\n\n    if (colors['gradientColorLabels']) this.gradientColorLabels = Object.values(colors['gradientColorLabels']);\n    if (colors['gradientColorIds']) this.gradientColorIds = Object.values(colors['gradientColorIds']);\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      var obj = colors[this.gradientColorIds[i] + 'Gradients'];\n      this[this.gradientColorIds[i] + 'Gradients'] = [];\n\n      for (var j = 0; j < 2; j++) {\n        this[this.gradientColorIds[i] + 'Gradients'].push(Object.values(obj[0][j]));\n      }\n    }\n  };\n\n  ColorSelection.prototype.initColorValues = function () {\n    this.colorValues['not-specified'] = '';\n    this.colorValues['transparent'] = 'transparent';\n    this.colorValues['inherit'] = 'inherit'; //main + custom colors\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      for (var j = 0; j < this.mainColorVariationLabel.length; j++) {\n        this.colorValues['--color-' + this.mainColorLabels[i] + this.mainColorVariationLabel[j]] = getHslaFromHsl(this[this.mainColorLabels[i] + 'Colors'][j], 1);\n      }\n    } //black\n\n\n    for (var i = 0; i < this.blackColors.length; i++) {\n      this.colorValues['--color-black' + this.mainColorVariationLabel[2 - i]] = getHslaFromHsl(this.blackColors[i], 1);\n    } //white\n\n\n    for (var i = 0; i < this.whiteColors.length; i++) {\n      this.colorValues['--color-white' + this.mainColorVariationLabel[2 + i]] = getHslaFromHsl(this.whiteColors[i], 1);\n    } //contrasts\n\n\n    for (var i = 0; i < this.contrastColorVariationLabel.length; i++) {\n      this.colorValues['--color' + this.contrastColorVariationLabel[i]] = getHslaFromHsl(this.contrastColors[i], 1);\n    } // gradients\n\n\n    for (var i = 0; i < this.gradientColorLabels.length; i++) {\n      this.colorValues['--gradient-' + this.gradientColorLabels[i] + '-stop-1'] = getHslaFromHsl(this[this.gradientColorIds[i] + 'Gradients'][0], 1);\n      this.colorValues['--gradient-' + this.gradientColorLabels[i] + '-stop-2'] = getHslaFromHsl(this[this.gradientColorIds[i] + 'Gradients'][1], 1);\n    }\n  };\n\n  ColorSelection.prototype.initUiColors = function () {\n    this.initMainSwatches();\n    this.initBWSwatches();\n    this.initContrastSwatches();\n    this.initGradientSwatches();\n  };\n\n  ColorSelection.prototype.initMainSwatches = function () {\n    var mainSwatch = this.basicSwatches.filter('[data-colors=\"main\"]'),\n        children = mainSwatch.children('li');\n\n    for (var i = 0; i < 2; i++) {\n      children.eq(i).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + this.mainColorLabels[i]] + ';').attr('data-item', '--color-' + this.mainColorLabels[i]);\n    }\n\n    var clonesText = this.initCustomColorSwatches(children.eq(0), false);\n    mainSwatch.append(clonesText);\n    var feedbackSwatch = this.basicSwatches.filter('[data-colors=\"feedback\"]'),\n        children = feedbackSwatch.children('li');\n\n    for (var i = 0; i < 3; i++) {\n      var j = 2;\n      if (this.mainColorLabels[i + 2] == 'success') j = 0;\n      if (this.mainColorLabels[i + 2] == 'warning') j = 1;\n      children.eq(j).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + this.mainColorLabels[i + 2]] + ';').attr('data-item', '--color-' + this.mainColorLabels[i + 2]);\n    }\n\n    var feedbackCloneText = this.initCustomColorSwatches(children.eq(0), true);\n    feedbackSwatch.append(feedbackCloneText);\n  };\n\n  ColorSelection.prototype.initCustomColorSwatches = function (item, isFeedback) {\n    var clonesText = '';\n\n    if (this.mainColorLabels.length > 5) {\n      var clone = item.clone().removeClass('app-menu__color-preview--selected');\n\n      for (var i = 5; i < this.mainColorLabels.length; i++) {\n        if (isFeedback && this.mainColorLabels[i].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[i].indexOf('custom-fdb') < 0) {\n          clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + this.mainColorLabels[i]] + ';').attr('data-item', '--color-' + this.mainColorLabels[i]);\n          clone.children('.js-app-menu__color-tooltip').text(this.customColorLabels[i - 5]);\n          clonesText = clonesText + clone[0].outerHTML;\n        }\n      }\n    }\n\n    return clonesText;\n  };\n\n  ColorSelection.prototype.initBWSwatches = function () {\n    var bwSwatch = this.basicSwatches.filter('[data-colors=\"b&w\"]'),\n        children = bwSwatch.children('li');\n    children.eq(0).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-black'] + ';').attr('data-item', '--color-black');\n    children.eq(1).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-white'] + ';').attr('data-item', '--color-white');\n  };\n\n  ColorSelection.prototype.initContrastSwatches = function () {\n    var contrastSwatch = this.basicSwatches.filter('[data-colors=\"contrast\"]'),\n        children = contrastSwatch.children('li');\n\n    for (var i = 0; i < this.contrastColorVariationLabel.length; i++) {\n      children.eq(i).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color' + this.contrastColorVariationLabel[i]] + ';').attr('data-item', '--color' + this.contrastColorVariationLabel[i]);\n    }\n  };\n\n  ColorSelection.prototype.initGradientSwatches = function () {\n    var html = '';\n\n    for (var i = 0; i < this.gradientColorLabels.length; i++) {\n      for (var j = 0; j < 2; j++) {\n        var direction = j == 0 ? 'right' : 'bottom';\n        var swatch = this.gradientSwatches.eq(j).clone().removeClass('is-hidden');\n        swatch.find('.js-app-menu__color-tooltip').text('--gradient-' + this.gradientColorLabels[i] + ' (' + direction + ')');\n        swatch.find('.js-app-menu__color-preview').attr('style', getGradientsBgColor(this.gradientColorLabels[i], this.colorValues, j)).attr('data-item', '--gradient-' + this.gradientColorLabels[i] + '-' + direction);\n        html = html + swatch[0].outerHTML;\n      }\n    }\n\n    this.gradients.find('.js-app-menu__color-swatches').html(html);\n  };\n\n  ColorSelection.prototype.eventListener = function () {\n    var self = this; //listen to click on color-preview -> also need to show correct color selection\n\n    $(self.element).on('open-color-selector', function (event, target) {\n      // toggle gradients visibility\n      self.gradients.toggleClass('is-hidden', !(target.hasClass('js-app-editor-color-preview--bg') && self.gradientColorLabels.length > 0));\n\n      if (!$(self.element).hasClass('app-menu--is-hidden')) {// self.checkOpacity(false); //click on input when another one was open\n      }\n\n      var top = target.offset().top + 30;\n      if (top + 300 > $(window).height()) top = $(window).height() - 300;\n      $(self.element).removeClass('app-menu--is-hidden').css('top', top);\n      self.selectInitialColor(target.attr('style').replace('background-color', '').replace(';', '').replace(':', '').trim(), target);\n    }); //switch from state b to state a\n\n    self.stateB.on('click', '.js-app-menu', function (event) {\n      $(self.element).removeClass('app-menu--state-b');\n    }); //listen to selection of color in popup - state a\n\n    self.stateA.on('click', '.js-app-menu__color-preview', function (event) {\n      var isSelected = $(event.target).hasClass('app-menu__color-preview--selected');\n      self.clickOnColorSectionA($(event.target), isSelected, isSelected);\n    }); //listen to selection of color in popup - state b - variations\n\n    self.variationsSwatches.on('click', '.js-app-menu__color-preview', function (event) {\n      self.selectNewColor($(event.target), $(event.target).hasClass('app-menu__color-preview--selected'), true);\n    }); //listen to focusout -> close popup\n\n    $(self.element).on('close-color-selection', function (event) {\n      // \t//check if opacity need to be added\n      if ($(self.element).hasClass('app-menu--is-hidden')) return;\n      $(self.element).addClass('app-menu--is-hidden'); // \tself.checkOpacity(false);\n    }); //listen to new opacity included - keydown to update bg/enter to add dot\n\n    checkEndTyping(self.customOpacityInput, function () {\n      // var percentage = parseInt(self.customOpacityInput.val().replace('%', '')),\n      // \topacityLabel = getOpacitySuffix(percentage),\n      var opacityLabel = self.getOpInputForSelection(),\n          mainColorLabel = self.stateB.find('.app-menu__color-preview--selected').attr('data-item'),\n          mainColor = mainColorLabel + opacityLabel;\n      var cssVariable = mainColor;\n\n      if (mainColorLabel.indexOf('custom-') > -1) {\n        cssVariable = self.stateB.find('.app-menu__color-preview--selected').next('.js-app-menu__color-tooltip').text() + opacityLabel;\n      } // $('.js-app-sidebar-editor--buttons').trigger('new-opacity-created', [cssVariable, getNewOpacity(self.colorValues[mainColorLabel], percentage)]);\n\n\n      $('.js-app-sidebar-editor--buttons').trigger('new-color-selection', [mainColor, true]);\n    });\n    this.customOpacityInput.on('focusout', function () {\n      var opacityValue = self.customOpacityInput.val(),\n          resetOpacity = getPercentageFormat(opacityValue);\n      if (opacityValue != resetOpacity) self.customOpacityInput.val(resetOpacity);\n    });\n  }; //click on preview in stata a of popup, used when loading initial color as well\n\n\n  ColorSelection.prototype.clickOnColorSectionA = function (target, isSelected, isStateBSet) {\n    var section = target.parents('.js-app-menu__color-swatches').eq(0).attr('data-colors');\n    this.stateA.find('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');\n    target.addClass('app-menu__color-preview--selected');\n\n    if (!isSelected) {\n      // need to get opacity values as well\n      var opacity = this.getOpInputForSelection();\n      var color = target.attr('data-item');\n      if (color.indexOf('--gradient-') > -1) opacity = '';\n      this.sendColorSelection(color + opacity);\n    }\n\n    if (section == \"default\" || section == \"gradients\") {\n      $(this.element).removeClass('app-menu--state-b');\n      this.stateB.find('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');\n      return;\n    }\n\n    $(this.element).addClass('app-menu--state-b');\n    this.showStateB(target, section, isStateBSet);\n  };\n\n  ColorSelection.prototype.selectNewColor = function (target, isSelcted, sendColorSelection) {\n    if (isSelcted) return;\n    target.addClass('app-menu__color-preview--selected').parent().siblings().children('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');\n\n    if (sendColorSelection) {\n      var opacity = this.getOpInputForSelection();\n      var color = target.attr('data-item');\n      if (color.indexOf('--gradient-') > -1) opacity = '';\n      this.sendColorSelection(color + opacity);\n    }\n  };\n\n  ColorSelection.prototype.getOpInputForSelection = function () {\n    return getOpInputForSelection(this.customOpacityInput.val());\n  };\n\n  ColorSelection.prototype.selectInitialColor = function (color, target) {\n    var states = [false, false, false],\n        stateAColor,\n        stateBColor = false,\n        stateCColor = false;\n\n    if (color == 'undefined') {\n      stateAColor = this.stateA.find('.js-app-menu__color-preview').eq(0);\n    } else {\n      var colorName = target.attr('data-color-lb').split('-');\n      states = this.getAllStatesColor(colorName);\n      stateAColor = this.stateA.find('[data-item=\"' + states[0] + '\"]');\n    }\n\n    this.clickOnColorSectionA(stateAColor, true, false);\n    stateBColor = states[1] ? this.stateB.find('[data-item=\"' + states[1] + '\"]') : false; //trigger click on stateBcolor -> without sending update color\n\n    if (stateBColor) this.selectNewColor(stateBColor, false, false); //select opacity element\n\n    states[2] ? this.customOpacityInput.val(states[2].slice(-2) + '%') : this.customOpacityInput.val('100%');\n  };\n\n  ColorSelection.prototype.getAllStatesColor = function (color) {\n    var itemAName, itemBName, itemCName;\n\n    if (color[2] && color[2] == 'gradient') {\n      itemAName = '--gradient-' + color[3] + '-' + color[4];\n      return [itemAName, false, false];\n    }\n\n    if (color[3] && (color[3] == 'black' || color[3] == 'white')) {\n      itemAName = '--color-' + color[3];\n      nextItems = this.getStateBCColor(itemAName, color, 4);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && (color[3] == 'primary' || color[3] == 'accent' || color[3] == 'success' || color[3] == 'error' || color[3] == 'info' || color[3] == 'warning')) {\n      itemAName = '--color-' + color[3];\n      nextItems = this.getStateBCColor(itemAName, color, 4);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && color[3] == 'custom' && color[4] == 'fdb') {\n      itemAName = '--color-' + color[3] + '-' + color[4] + '-' + color[5];\n      nextItems = this.getStateBCColor(itemAName, color, 6);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && color[3] == 'custom') {\n      itemAName = '--color-' + color[3] + '-' + color[4];\n      nextItems = this.getStateBCColor(itemAName, color, 5);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && color[3] == 'bg') {\n      itemAName = '--color-bg';\n      itemBName = itemAName;\n      itemCName = color[4] ? itemBName + '-' + color[4] : false;\n    } else if (color[3] && color[3] == 'contrast') {\n      itemAName = '--color-' + color[3] + '-' + color[4];\n      itemBName = itemAName;\n      itemCName = color[5] ? itemBName + '-' + color[5] : false;\n    } else {\n      itemAName = color[0];\n    }\n\n    return [itemAName, itemBName, itemCName];\n  };\n\n  ColorSelection.prototype.getStateBCColor = function (itemAName, color, index) {\n    var itemBName, itemCName;\n\n    if (color[index] && (color[index] == 'light' || color[index] == 'lighter' || color[index] == 'dark' || color[index] == 'darker')) {\n      itemBName = itemAName + '-' + color[index];\n      itemCName = color[index + 1] ? itemBName + '-' + color[index + 1] : false;\n    } else {\n      itemBName = itemAName;\n      itemCName = color[index] ? itemBName + '-' + color[index] : false;\n    }\n\n    return [itemBName, itemCName];\n  };\n\n  ColorSelection.prototype.sendColorSelection = function (label) {\n    var sidebar = $('.js-app-sidebar-editor--buttons');\n\n    if (sidebar.length == 0) {\n      sidebar = $('.js-app-sidebar-editor--shared-styles');\n    }\n\n    sidebar.trigger('new-color-selection', [label, true]);\n  };\n\n  ColorSelection.prototype.showStateB = function (target, section, selected) {\n    var self = this;\n    if (selected) return;\n    var label = target.next().text();\n\n    switch (section) {\n      case 'main':\n        self.getVariationsMain(label, target.attr('data-item'));\n        break;\n\n      case 'b&w':\n        self.getVariationsBW(label);\n        break;\n\n      case 'contrast':\n        self.getVariationsContrast(label);\n        break;\n\n      default:\n        self.getVariationsMain(label, target.attr('data-item'));\n    }\n  };\n\n  ColorSelection.prototype.getVariationsMain = function (label, item) {\n    var value = item.replace('--color-', ''); //custom color\n\n    var clone = this.variationsSwatches.children('li').eq(0).clone(),\n        textClones = '';\n    clone.removeClass('app-menu__color-preview--selected').children('.js-app-menu__color-preview');\n\n    for (var i = 0; i < this.mainColorVariationLabel.length; i++) {\n      clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + value + this.mainColorVariationLabel[i]] + ';').attr('data-item', '--color-' + value + this.mainColorVariationLabel[i]).toggleClass('app-menu__color-preview--selected', i == 2);\n      clone.children('.js-app-menu__color-tooltip').text(label + this.mainColorVariationLabel[i]);\n      textClones = textClones + clone[0].outerHTML;\n    }\n\n    this.variationsSwatches.html(textClones);\n  };\n\n  ColorSelection.prototype.getVariationsBW = function (label) {\n    var clone = this.variationsSwatches.children('li').eq(0).clone(),\n        textClones = '';\n    clone.removeClass('app-menu__color-preview--selected').children('.js-app-menu__color-preview');\n\n    if (label == '--color-black') {\n      for (var i = 0; i < this.blackColors.length; i++) {\n        clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-black' + this.mainColorVariationLabel[2 - i]] + ';').attr('data-item', '--color-black' + this.mainColorVariationLabel[2 - i]).toggleClass('app-menu__color-preview--selected', i == 0);\n        clone.children('.js-app-menu__color-tooltip').text('--color-black' + this.mainColorVariationLabel[2 - i]);\n        textClones = textClones + clone[0].outerHTML;\n      }\n    } else {\n      for (var i = 0; i < this.whiteColors.length; i++) {\n        clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-white' + this.mainColorVariationLabel[2 + i]] + ';').attr('data-item', '--color-white' + this.mainColorVariationLabel[2 + i]).toggleClass('app-menu__color-preview--selected', i == 0);\n        clone.children('.js-app-menu__color-tooltip').text('--color-white' + this.mainColorVariationLabel[2 + i]);\n        textClones = textClones + clone[0].outerHTML;\n      }\n    }\n\n    this.variationsSwatches.html(textClones);\n  };\n\n  ColorSelection.prototype.getVariationsContrast = function (label) {\n    var clone = this.variationsSwatches.children('li').eq(0).clone();\n    clone.children('.js-app-menu__color-preview');\n    clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues[label] + ';').attr('data-item', label).addClass('app-menu__color-preview--selected');\n    clone.children('.js-app-menu__color-tooltip').text(label);\n    this.variationsSwatches.html(clone[0].outerHTML);\n  };\n\n  function getHslaFromHsl(hsl, opacity) {\n    return 'hsla(' + parseInt(hsl[0]) + ', ' + parseInt(hsl[1] * 100) + '%, ' + parseInt(hsl[2] * 100) + '%, ' + opacity + ')';\n  }\n\n  ;\n\n  function getNewOpacity(value, opacity) {\n    if (value) {\n      return value.replace('1)', (opacity / 100).toFixed(2) + ')');\n    }\n\n    return value;\n  }\n\n  ;\n\n  function sortNumber(a, b) {\n    return a - b;\n  }\n\n  ;\n\n  function checkEndTyping(input, cb) {\n    var typingTimer; //timer identifier\n\n    var doneTypingInterval = 400; //time in ms, 5 second for example\n    //on keyup, start the countdown\n\n    input.on('keyup', function () {\n      clearTimeout(typingTimer);\n      typingTimer = setTimeout(cb, doneTypingInterval);\n    }); //on keydown, clear the countdown\n\n    input.on('keydown', function () {\n      clearTimeout(typingTimer);\n    });\n  }\n\n  ;\n\n  function getOpInputForSelection(val) {\n    var opacity = '';\n    if (isNaN(parseInt(val))) return '';\n    if (parseInt(val) > 100) return '';\n    if (parseInt(val) != 100) opacity = '-a' + ('0' + val.replace('%', '')).slice(-2);\n    return opacity;\n  }\n\n  ;\n\n  function getGradientsBgColor(label, colorValues, direction) {\n    // label e.g. primary\n    // direction -> 0 right, 1 bottom\n    var angle = direction == 0 ? '90deg' : '180deg';\n    return 'background-image: linear-gradient(' + angle + ', ' + colorValues[\"--gradient-\" + label + \"-stop-1\"] + ', ' + colorValues[\"--gradient-\" + label + \"-stop-2\"] + ');';\n  }\n\n  ;\n  var colorSelection = document.getElementsByClassName('js-app-menu--color'),\n      colorSelectionObject;\n\n  if (colorSelection.length > 0) {\n    colorSelectionObject = new ColorSelection(colorSelection[0]);\n  }\n\n  function getPercentageFormat(value) {\n    var newVal = value;\n    if (isNaN(parseInt(newVal))) newVal = '100%';\n    if (parseInt(newVal) > 100) newVal = '100%';\n    if (newVal.indexOf('%') < 0) newVal = newVal + '%';\n    return newVal;\n  }\n\n  ;\n  /************************/\n\n  /* \tColors Interactions */\n\n  /************************/\n\n  this.Colors = function (element, bool) {\n    this.element = element; //set starting point\n\n    this.primaryColors = []; //this is an array of 5 colors\n\n    this.accentColors = []; //this is an array of 5 colors\n\n    this.downloadColors = []; //this is an array of 5 colors\n\n    this.blackColors = []; //this is a color string\n\n    this.whiteColors = []; //this is a color string\n\n    this.contrastColors = []; //this is an array of 5 elements\n\n    this.contrastPecentageColors = [];\n    this.infoColors = []; //this is an array of 5 elements\n\n    this.warningColors = []; //this is an array of 5 elements\n\n    this.successColors = []; //this is an array of 5 elements\n\n    this.errorColors = []; //this is an array of 5 elements\n\n    this.themes = [];\n    this.fontRendering = [];\n    this.colorLinks = []; //some default states\n    //this should include the custom colors, if user has already created them\n\n    this.mainColorLabels = ['primary', 'accent', 'download', 'info', 'warning', 'success', 'error'];\n    this.customColorLabels = [];\n    this.gradientColorLabels = []; // this will have 'primary', 'secondary'\n\n    this.gradientColorIds = []; // this will have 'custom-0', 'custom-1'\n\n    this.selectedColor = 'primary'; //store what color the user is interacting with (e.g., main, accent ...)\n\n    this.selectedTheme = 0; //used to get the color variations of black and white\n\n    this.blackVariations = [[0, 0], [0, 0.1], [0, 0.2]];\n    this.whiteVariations = [[0, 0], [0, -0.1], [0, -0.2]]; //contrast variations\n\n    this.contrastVariations = getColorContrastPercentages(); //store items\n\n    this.colorPicker = $(this.element).find('.js-color-picker'); //main colors\n\n    this.mainColorsSection = $(this.element).find('.js-app-editor--main-colors');\n    this.mainColorVariationsInput = $(this.element).find('.js-main-color-variation');\n    this.mainColorVariationsSidebar = $(this.element).find('.js-app-editor--main-colors'); //black&white\n\n    this.blackWhiteSection = $(this.element).find('.js-app-editor--black-white'); //contrast\n\n    this.contrastSection = $(this.element).find('.js-app-editor--contrast');\n    this.contrastInputs = this.contrastSection.find('.js-app-editor-section__contrast-inputs');\n    this.fontRenderingSection = this.contrastSection.find('.js-app-editor-section__font-rendering');\n    this.basicColorPicker = $(this.element).find('.js-app-editor-section__color-picker');\n    this.bgColorPicker = $(this.element).find('.js-app-editor-section__bg-color-picker');\n    this.hcColorPicker = $(this.element).find('.js-app-editor-section__hc-color-picker');\n    this.grColorPicker = $(this.element).find('.js-app-editor-section__gr-color-picker'); // i'll store also the subelements\n\n    this.grColorPickerItems = this.grColorPicker.find('.js-color-picker'); //check if the ui has been updated for that specific color variable\n\n    this.mainColorShown = '';\n    this.blackWhiteShown = '';\n    this.contrastShown = '';\n    this.gradientShown = '';\n    this.colorOpacities = []; //iframe\n\n    this.iframe = jsColors;\n    this.colorsLoaded = false;\n    if (bool) return; //check for the frame to be loaded\n\n    this.initFrame();\n    this.loadPreset();\n    this.eventListener(); //custom colors\n    //this.mainColorLabels = ['primary', 'accent', 'warning', 'success', 'error', 'custom-0']\n    //this.customColorLables = ['--color-secondary', ...]\n    //to access custom color -> this['custom-0Colors'][themeIndex]\n    //opacities -> this.colorOpacities['--color-custom-0'] = ['20', '40']\n  };\n\n  Colors.prototype.initFrame = function () {\n    var self = this; //listen for the onload event of the frame\n\n    onIframeLoad(jsPage, function () {\n      self.frameIsLoaded();\n    });\n  };\n\n  Colors.prototype.frameIsLoaded = function () {\n    var self = this;\n\n    if (self.colorsLoaded) {\n      loadProjectColorsForColors(this.iframe);\n      loadProjectTypographyForButtons(this.iframe);\n      loadProjectSpacingForButtons(this.iframe);\n      loadProjectButtonsForColors(this.iframe);\n      loadProjectFormsForColors(this.iframe);\n      self.updateColorsDemo(false);\n      self.updateColorLinks();\n    } else {\n      setTimeout(function () {\n        self.frameIsLoaded();\n      }, 100);\n    }\n  };\n\n  Colors.prototype.loadPreset = function () {\n    //this is the function that will retrieve saved data from the database\n    // if user has already created a color palette\n    // - load it - PROJECT.colors and PROJECT.color_opacities\n    // - update the Colors object\n    console.log(PROJECT);\n\n    if (PROJECT && PROJECT.colors) {\n      this.initColorsFromProject(JSON.parse(PROJECT.colors));\n    } else {\n      //if not saved in the db\n      this.themes = ['Default'];\n      this.initColors(0);\n    }\n\n    this.setThemeColors();\n    this.colorsLoaded = true;\n  };\n\n  Colors.prototype.setThemeColors = function () {\n    var self = this; //this function should be used to update the sidebar inputs -> main colors/ contrast / black and white\n    //when a new team is selected (or even when the first team is loaded - if there are )\n    //reset the variables for ui update\n\n    this.mainColorShown = '';\n    this.blackWhiteShown = '';\n    this.contrastShown = '';\n    this.gradientShown = ''; //set colors now - should use one of the followings according to this.selectedColor\n\n    switch (self.selectedColor) {\n      case 'black':\n        self.setBlackWhite();\n        break;\n\n      case 'white':\n        self.setBlackWhite();\n        break;\n\n      case 'contrast':\n        self.setContrast();\n        break;\n\n      default:\n        if (self.selectedColor.indexOf('gr-custom') > -1) {\n          self.setGradient();\n        } else {\n          self.setMainColors();\n        }\n\n    }\n  };\n\n  Colors.prototype.initColors = function (index) {\n    //index -> theme index\n    //set main colors\n    // if you update this -> you'll need to update the same in the ColorSelection as well\n    this.primaryColors[index] = getDefaultMainColorVariation('primary');\n    this.accentColors[index] = getDefaultMainColorVariation('accent');\n    this.downloadColors[index] = getDefaultMainColorVariation('download');\n    this.infoColors[index] = getDefaultMainColorVariation('info');\n    this.warningColors[index] = getDefaultMainColorVariation('warning');\n    this.successColors[index] = getDefaultMainColorVariation('success');\n    this.errorColors[index] = getDefaultMainColorVariation('error'); //set black and white\n\n    this.blackColors[index] = [getHslFromHex('#1c1c21')];\n    this.whiteColors[index] = [getHslFromHex('#ffffff')]; //set contrast\n\n    this.contrastPecentageColors[index] = this.contrastVariations.slice(0);\n    this.contrastColors[index] = getContrastVariation('#35373b', '#FFFFFF', this.contrastPecentageColors[this.selectedTheme]);\n    this.fontRendering[index] = false;\n  };\n\n  Colors.prototype.initColorsFromProject = function (colors) {\n    // var colors = JSON.parse(PROJECT.colors);\n    this.themes = [];\n    this.mainColorLabels = [];\n    this.customColorLabels = [];\n    this.fontRendering = [];\n    this.themes = Object.values(colors['themes']);\n    this.mainColorLabels = Object.values(colors['mainColorLabels']);\n    if (colors['customColorLabels']) this.customColorLabels = Object.values(colors['customColorLabels']);\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      var obj = colors[this.mainColorLabels[i]];\n      this[this.mainColorLabels[i] + 'Colors'] = this.convColorToArr(obj);\n    }\n\n    this.blackColors = this.convColorToArr(colors['blackColors']);\n    this.whiteColors = this.convColorToArr(colors['whiteColors']);\n    this.contrastColors = this.convColorToArr(colors['contrastColors']);\n    this.contrastPecentageColors = this.convPerceToArr(colors['contrastPecentageColors']); // font smoothing\n\n    if (colors['fontRendering']) {\n      this.fontRendering = Object.values(colors['fontRendering']);\n    } else {\n      // if it was not defined -> set it to false\n      for (var i = 0; i < this.themes.length; i++) {\n        this.fontRendering[i] = false;\n      }\n    } // color links among themes\n\n\n    if (colors['colorLinks']) {\n      for (var color in colors['colorLinks']) {\n        if (colors['colorLinks'].hasOwnProperty(color)) {\n          this.colorLinks[color] = colors['colorLinks'][color];\n        }\n      }\n    } // init gradient colors\n\n\n    if (colors['gradientColorLabels']) this.gradientColorLabels = Object.values(colors['gradientColorLabels']);\n    if (colors['gradientColorIds']) this.gradientColorIds = Object.values(colors['gradientColorIds']);\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      var obj = colors[this.gradientColorIds[i] + 'Gradients'];\n      this[this.gradientColorIds[i] + 'Gradients'] = this.convColorToArr(obj);\n    }\n  };\n\n  Colors.prototype.convColorToArr = function (obj) {\n    var array = [];\n\n    for (var property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        var subArray = [];\n        var subObj = obj[property];\n\n        for (var property2 in subObj) {\n          if (subObj.hasOwnProperty(property2)) {\n            subArray.push(Object.values(subObj[property2]));\n          }\n        }\n\n        array.push(subArray);\n      }\n    }\n\n    return array;\n  };\n\n  Colors.prototype.convPerceToArr = function (obj) {\n    var array = [];\n\n    for (var property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        array.push(Object.values(obj[property]));\n      }\n    }\n\n    return array;\n  };\n\n  Colors.prototype.initThemeColors = function (index) {\n    //set new theme equal to default color theme\n    this.primaryColors[index] = this.primaryColors[0].slice(0);\n    this.accentColors[index] = this.accentColors[0].slice(0);\n    this.downloadColors[index] = this.downloadColors[0].slice(0);\n    this.infoColors[index] = this.infoColors[0].slice(0);\n    this.warningColors[index] = this.warningColors[0].slice(0);\n    this.successColors[index] = this.successColors[0].slice(0);\n    this.errorColors[index] = this.errorColors[0].slice(0);\n    this.blackColors[index] = this.blackColors[0].slice(0);\n    this.whiteColors[index] = this.whiteColors[0].slice(0);\n    this.contrastPecentageColors[index] = this.contrastPecentageColors[0].slice(0);\n    this.contrastColors[index] = this.contrastColors[0].slice(0);\n    this.fontRendering[index] = false; //init custom colors if any\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      if (this.mainColorLabels[i].indexOf('custom-') > -1) {\n        this[this.mainColorLabels[i] + 'Colors'][index] = this[this.mainColorLabels[i] + 'Colors'][0].slice();\n      }\n    }\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      this[this.gradientColorIds[i] + 'Gradients'][index] = this[this.gradientColorIds[i] + 'Gradients'][0].slice();\n    }\n  };\n\n  Colors.prototype.setBtnColorCustomNiceLabels = function () {\n    this.iframe.setBtnColorCustomNiceLabels(this.mainColorLabels, this.customColorLabels);\n  };\n\n  Colors.prototype.setBtnGradientNiceLabels = function () {\n    this.iframe.setBtnGradientNiceLabels(this.gradientColorLabels);\n  };\n\n  Colors.prototype.eventListener = function () {\n    var self = this; //this event is triggered when one of the colors in the left sidebar is selected\n\n    $(this.element).on('content-selected', function (event, type, target, index) {\n      if (target.indexOf('gradient') > -1) {\n        self.selectNewColor(type, '--gradient-' + self.gradientColorIds[self.gradientColorLabels.indexOf(target.replace('--gradient-', ''))]);\n      } else {\n        self.selectNewColor(type, target);\n      }\n    }); //this is triggered when one of the inputs of the main color is updated\n\n    listenToParentInput($(this.mainColorVariationsSidebar), function (event) {\n      self.colorUpdated($(event.currentTarget), 'main');\n    }); //this is triggered when one of the inputs of the black/white color is updated\n\n    listenToParentInput(this.blackWhiteSection, function (event) {\n      self.colorUpdated($(event.currentTarget), 'bw');\n    }); //this is triggered when one of the inputs of the contrast color is updated\n\n    listenToParentInput(this.contrastInputs, function (event) {\n      self.contrastColorUpdated($(event.currentTarget));\n      self.updateColorsDemo(true, 'contrast');\n    }); // this is triggered when the font rendering option is changed\n\n    this.fontRenderingSection.on('change', function (event) {\n      self.updateFontRendering(event.target.value);\n      self.updateColorsDemo(true, 'fontRendering');\n    }); //this event is triggered when the color picker is updated\n\n    $(this.element).on('color-picker-updated', function (event, color, pickerElem) {\n      //new color has been selected\n      if (self.selectedColor.indexOf('gr-custom') > -1) {\n        self.setGradient(color, pickerElem);\n      } else if (self.mainColorLabels.indexOf(self.selectedColor) > -1) {\n        //check if we are changing a main color\n        self.setMainColors(color);\n      } else if (self.selectedColor == 'white' || self.selectedColor == 'black') {\n        self.setBlackWhite(color);\n      } else {\n        self.setContrast(color, pickerElem);\n      }\n\n      self.updateColorsDemo(true, self.selectedColor);\n    }); //this event is triggered when a new theme is added in the left sidebar\n\n    $(this.element).on('content-switch-added', function (event, type, title) {\n      if (type != 'colors') return;\n      self.themes.push(title);\n      self.selectedTheme = self.themes.length - 1;\n      self.initThemeColors(self.selectedTheme);\n      self.setThemeColors();\n      self.updateColorsDemo(true);\n    }); //this event is triggered when a new theme is selected in the left sidebar\n\n    $(this.element).on('content-switch-selected', function (event, type, index) {\n      if (type != 'colors') return;\n      self.selectedTheme = index; //if this is the first time (theme was already create and retrieved from the database)\n      // you should make sure the initial colors are already set\n\n      self.setThemeColors();\n      self.updateColorsDemo(false);\n    }); //this event is triggered when a theme is edited in the left sidebar\n\n    $(this.element).on('content-switch-edited', function (event, type, index, title) {\n      if (type != 'colors') return;\n      if (self.themes[index] != title && IS_LOGGED == '1') SaveAlert.yes();\n      self.themes[index] = title;\n    }); //this event is triggered when a theme is deleted in the left sidebar\n\n    $(this.element).on('content-switch-deleted', function (event, type, index, selected) {\n      if (type != 'colors') return;\n      self.removeTheme(type, index, selected);\n      self.updateColorsDemo(true);\n    }); //black&white events\n    //add a new black or white variation\n\n    this.blackWhiteSection.on('click', '.js-btn-create', function (event) {\n      self.createBlackWhiteVariation();\n      self.blackWhiteSection.children().eq(0).removeClass('app-editor-section__title--hide-body');\n      self.updateColorsDemo(true, self.selectedColor);\n    }); //remove a black or white variation\n\n    this.blackWhiteSection.on('click', '.js-btn-delete', function (event) {\n      self.deleteBlackWhiteVariation($(event.currentTarget).parents('.js-app-editor__color-bw').index());\n      self.updateColorsDemo(true, self.selectedColor);\n    }); //custom colors and gradients\n    //a new custom color has been created\n\n    $(this.element).on('custom-content-added', function (event, type, title, customLabel) {\n      if (type != 'colors') return;\n      var isGradient = customLabel.indexOf('gradient') > -1;\n\n      if (isGradient) {\n        var colorCustomLabel = customLabel.replace('#gradient-', ''); //create this new color for each theme\n\n        self[colorCustomLabel + 'Gradients'] = [];\n        var gradientValue = self.getInitialGradient();\n\n        for (var i = 0; i < self.themes.length; i++) {\n          self[colorCustomLabel + 'Gradients'][i] = gradientValue;\n        }\n\n        self.gradientColorLabels.push(title.replace('--gradient-', ''));\n        self.gradientColorIds.push(colorCustomLabel);\n        self.selectNewColor(type, '--gradient-' + colorCustomLabel);\n        self.updateColorsDemoNewCustom(self[colorCustomLabel + 'Gradients'][self.selectedTheme], title, colorCustomLabel);\n      } else {\n        var colorCustomLabel = customLabel.replace('#color-', ''); //create this new color for each theme\n\n        self[colorCustomLabel + 'Colors'] = [];\n\n        for (var i = 0; i < self.themes.length; i++) {\n          self[colorCustomLabel + 'Colors'][i] = self.primaryColors[0];\n        } //push the label to the main color labels\n\n\n        self.mainColorLabels.push(colorCustomLabel);\n        self.customColorLabels.push(title); //store labels somewhere\n\n        self.selectNewColor(type, '--color-' + colorCustomLabel);\n        self.updateColorsDemoNewCustom(self[colorCustomLabel + 'Colors'][self.selectedTheme], title, colorCustomLabel);\n      }\n    }); //a custom color name has been updated\n\n    $(this.element).on('custom-content-edited', function (event, type, index, title, section) {\n      if (type != 'colors') return;\n\n      if (section.indexOf('gradient') > -1) {\n        self.gradientColorLabels[self.gradientColorIds.indexOf(section.replace('#gradient-', ''))] = title.replace('--gradient-', '');\n      } else {\n        self.customColorLabels[self.mainColorLabels.indexOf(section.replace('#color-', '')) - 5] = title;\n      }\n\n      self.updateColorsDemoEditCustom(section, title);\n    }); //a custom color has been removed\n\n    $(this.element).on('custom-content-removed', function (event, type, index, labelId) {\n      if (type != 'colors') return;\n\n      if (labelId.indexOf('gradient') > -1) {\n        var label = labelId.replace('#gradient-', ''),\n            indexColor = self.gradientColorIds.indexOf(label);\n        self.gradientColorLabels.splice(indexColor, 1);\n        self.gradientColorIds.splice(indexColor, 1);\n        self[label + 'Gradients'] = [];\n        self.updateColorsDemoRemoveCustom('gr-' + label); // remove color from color link array\n\n        if (self.colorLinks['gr-' + label]) self.colorLinks['gr-' + label] = false;\n      } else {\n        var label = labelId.replace('#color-', ''),\n            indexColor = self.mainColorLabels.indexOf(label);\n        self.mainColorLabels.splice(indexColor, 1);\n        self.customColorLabels.splice(indexColor - 5, 1);\n        self[label + 'Colors'] = [];\n        self.updateColorsDemoRemoveCustom(label); // remove color from color link array\n\n        if (self.colorLinks[label]) self.colorLinks[label] = false;\n      }\n    }); // this event is triggered when the link button is clicked inside the color demo\n\n    $(this.element).on('updateColorLink', function (event, section, bool) {\n      if (section.indexOf('gradient') > -1) {\n        self.colorLinks[section.replace('#gradient-', 'gr-')] = bool; // e.g.self.colorLinks['gr-custom-0']\n      } else {\n        self.colorLinks[section.replace('#color-', '')] = bool;\n      }\n    });\n  };\n\n  Colors.prototype.getInitialGradient = function () {\n    var primary = this.primaryColors[0][2],\n        newHsl = primary[0] < 310 ? primary[0] + 50 : primary[0] - 50;\n    return [primary, [newHsl, primary[1], primary[2]]];\n  };\n\n  Colors.prototype.selectNewColor = function (type, target) {\n    if (type != 'colors') return;\n\n    if (target.indexOf('--color-black') > -1 || target.indexOf('--color-white') > -1) {\n      this.selectedColor = target.replace('--color-', '');\n      this.resetSidebarSections('black-white');\n      this.setBlackWhite();\n    } else if (target.indexOf('--color-') > -1) {\n      // this is a main color -> update it\n      this.selectedColor = target.replace('--color-', '');\n      this.resetSidebarSections('main');\n      this.setMainColors();\n    } else if (target.indexOf('--gradient-') > -1) {\n      this.selectedColor = target.replace('--gradient', 'gr'); // e.g., 'gr-custom-0'\n\n      this.resetSidebarSections('gradient');\n      this.setGradient();\n    } else {\n      // this is color contrast\n      this.selectedColor = 'contrast';\n      this.resetSidebarSections('contrast');\n      this.setContrast();\n    }\n  }; //TODO refacto class\n\n\n  Colors.prototype.resetSidebarSections = function (section) {\n    this.mainColorsSection.add(this.blackWhiteSection).add(this.contrastSection).add(this.basicColorPicker).add(this.bgColorPicker).add(this.hcColorPicker).add(this.grColorPicker).addClass('app-section--is-hidden');\n\n    switch (section) {\n      case 'black-white':\n        this.blackWhiteSection.add(this.basicColorPicker).removeClass('app-section--is-hidden');\n        break;\n\n      case 'contrast':\n        this.contrastSection.add(this.bgColorPicker).add(this.hcColorPicker).removeClass('app-section--is-hidden');\n        break;\n\n      case 'gradient':\n        this.grColorPicker.removeClass('app-section--is-hidden');\n        break;\n\n      default:\n        this.mainColorsSection.add(this.basicColorPicker).removeClass('app-section--is-hidden');\n    }\n  };\n\n  Colors.prototype.setMainColors = function (color) {\n    if (this.mainColorShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has not been set for this color yet\n      //or the color picker is being updated\n      this.mainColorShown = this.selectedColor;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        this.updateMultipleColorsInThemes(getMainColorVariation(color));\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; // this is used for main colors variation (primary/accent/secondary/warning/error/success)\n\n      for (var i = 0; i < 5; i++) {\n        this.setMainColor(colors[i], i);\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      this.colorPicker.trigger('update-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][2]]);\n    }\n  };\n\n  Colors.prototype.setBlackWhite = function (color) {\n    if (this.blackWhiteShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has ot been set for this color yet\n      this.blackWhiteShown = this.selectedColor;\n      var itemLength = this[this.selectedColor + 'Colors'][this.selectedTheme].length;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        this.updateMultipleColorsInThemes(this.getBlackWhiteVariation(color, itemLength)); // this[this.selectedColor+'Colors'][this.selectedTheme] = this.getBlackWhiteVariation(color, itemLength);\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; //first -> make sure there's the right number of inputs\n\n      this.checkBlackWhiteInputNumber(colors.length); // this is used for black/white colors variation\n\n      for (var i = 0; i < colors.length; i++) {\n        this.setBlackWhiteColor(colors[i], i);\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      //black and white -> main color is the first one\n      this.colorPicker.trigger('update-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][0]]);\n    }\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.updateMultipleColorsInThemes = function (value) {\n    if (this.colorLinks[this.selectedColor]) {\n      for (var i = 0; i < this.themes.length; i++) {\n        this[this.selectedColor + 'Colors'][i] = value;\n      }\n    } else {\n      this[this.selectedColor + 'Colors'][this.selectedTheme] = value;\n    }\n  };\n\n  Colors.prototype.setContrast = function (color, pickerElement) {\n    if (this.contrastShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has not been set for this color yet\n      //or the color picker is being updated\n      this.contrastShown = this.selectedColor;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        //first check if this is the bg or the hc color\n        var isBgColor = pickerElement.parents('.js-app-editor-section__bg-color-picker').length > 0;\n        var colorsScale = isBgColor ? [getHexFromHsl(color), getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][5])] : [getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][0]), getHexFromHsl(color)];\n        this[this.selectedColor + 'Colors'][this.selectedTheme] = getContrastVariation(colorsScale[0], colorsScale[1], this.contrastPecentageColors[this.selectedTheme]);\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; // this is used for contrast colors variation\n\n      for (var i = 0; i < 6; i++) {\n        this.setContrastColor(colors[i], this.contrastPecentageColors[this.selectedTheme][i], i);\n      }\n\n      this.updateFontRendering(false);\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      this.colorPicker.trigger('update-contrast-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][0], this[this.selectedColor + 'Colors'][this.selectedTheme][5]]);\n    }\n  };\n\n  Colors.prototype.setGradient = function (color, pickerElement) {\n    var gradientId = this.selectedColor.replace('gr-', '');\n\n    if (this.gradientShown.indexOf(gradientId) < 0 || color) {\n      //the ui has not been set for this color yet\n      this.gradientShown = gradientId;\n\n      if (color) {\n        var index = pickerElement.parents('.js-app-editor-section__gr-color-picker--stop-1').length > 0 ? 0 : 1;\n\n        if (this.colorLinks['gr-' + gradientId]) {\n          for (var i = 0; i < this.themes.length; i++) {\n            this[gradientId + 'Gradients'][i][index] = color;\n          }\n        } else {\n          this[gradientId + 'Gradients'][this.selectedTheme][index] = color;\n        }\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      //black and white -> main color is the first one\n      this.grColorPickerItems.eq(0).trigger('update-picker', [this[gradientId + 'Gradients'][this.selectedTheme][0]]);\n      this.grColorPickerItems.eq(1).trigger('update-picker', [this[gradientId + 'Gradients'][this.selectedTheme][1]]);\n    }\n  };\n\n  Colors.prototype.updateFontRendering = function (value) {\n    if (value) {\n      this.fontRendering[this.selectedTheme] = value;\n    }\n\n    !this.fontRendering[this.selectedTheme] ? this.fontRenderingSection.find('select').val(0) : this.fontRenderingSection.find('select').val(this.fontRendering[this.selectedTheme]);\n  };\n\n  Colors.prototype.checkBlackWhiteInputNumber = function (length) {\n    var wrappers = this.blackWhiteSection.find('.js-app-editor__color-bw');\n    if (wrappers.length == length) return;\n\n    if (wrappers.length < length) {\n      this.createBlackWhiteInputs(Number(length - wrappers.length));\n    } else {\n      this.removeBlackWhiteInputs(Number(wrappers.length - length));\n    }\n  };\n\n  Colors.prototype.createBlackWhiteInputs = function (number) {\n    var input = this.blackWhiteSection.find('.js-app-editor__color-bw').eq(0),\n        append = '';\n\n    for (var i = 0; i < number; i++) {\n      var clone = input.clone();\n      clone.removeClass('app-editor__color-item--locked app-editor__color-item--labelled').addClass('app-editor__color-item--removable');\n      append = append + clone[0].outerHTML;\n    }\n\n    this.blackWhiteSection.children('.js-app-editor-section__body').append(append);\n    this.blackWhiteInputsResetLabelClass();\n  };\n\n  Colors.prototype.removeBlackWhiteInputs = function (number) {\n    var inputs = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        tot = inputs.length;\n\n    for (var i = 0; i < number; i++) {\n      var index = tot - i - 1;\n      inputs.eq(index).remove();\n    }\n\n    this.blackWhiteInputsResetLabelClass();\n  };\n\n  Colors.prototype.blackWhiteInputsResetLabelClass = function () {\n    var inputs = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        lastItem = inputs.length - 1;\n    inputs.removeClass('app-editor__color-item--labelled').eq(lastItem).addClass('app-editor__color-item--labelled');\n  };\n\n  Colors.prototype.colorUpdated = function (target, type) {\n    //get the index of the color\n    var colorWrapper = target.parents('.js-main-color-variation'),\n        index = Number(colorWrapper.attr('data-order')),\n        inputs = colorWrapper.find('.js-hsl-color-input');\n    if (type == 'bw') index = target.parents('.js-app-editor__color-bw').index(); //update the array of colors\n\n    if (this.colorLinks[this.selectedColor]) {\n      var colorItems = type == 'bw' ? target.parents('.js-app-editor--variations-wrapper').eq(0).find('.js-app-editor__color-bw') : target.parents('.js-app-editor--variations-wrapper').eq(0).find('.js-main-color-variation');\n      this.updateColorVariationsInThemes(colorItems);\n    } else {\n      this[this.selectedColor + 'Colors'][this.selectedTheme][index] = [Number(inputs.eq(0).val()), convertStringToHsl(inputs.eq(1).val()), convertStringToHsl(inputs.eq(2).val())];\n    } //update the color preview\n\n\n    if (type == 'bw') {\n      this.setBlackWhiteColor(this[this.selectedColor + 'Colors'][this.selectedTheme][index], index);\n      this.updateColorsDemo(true);\n    } else {\n      this.setMainColor(this[this.selectedColor + 'Colors'][this.selectedTheme][index], index);\n      this.updateColorsDemo(true);\n    }\n  };\n\n  Colors.prototype.updateColorVariationsInThemes = function (colors) {\n    for (var i = 0; i < colors.length; i++) {\n      var inputs = colors.eq(i).find('.js-hsl-color-input');\n      this.updateColorInThemes(inputs, i);\n    }\n  };\n\n  Colors.prototype.updateColorInThemes = function (inputs, index) {\n    var value = Number(inputs.eq(0).val()),\n        valueHSL1 = convertStringToHsl(inputs.eq(1).val()),\n        valueHSL2 = convertStringToHsl(inputs.eq(2).val());\n\n    for (var i = 0; i < this.themes.length; i++) {\n      this[this.selectedColor + 'Colors'][i][index] = [value, valueHSL1, valueHSL2];\n      this[this.selectedColor + 'Colors'][i][index] = [Number(value), Number(valueHSL1), Number(valueHSL2)];\n    }\n  };\n\n  Colors.prototype.contrastColorUpdated = function (target) {\n    var index = target.parents('.js-app-editor__contrast-item').index(),\n        value = parseInt(target.val().replace('%', ''));\n    value = value < 0 ? 0 : value;\n    value = value > 100 ? 100 : value;\n    this.newContrastColorScale(value, index);\n  };\n\n  Colors.prototype.getBlackWhiteVariation = function (hsl, length) {\n    var blackWhiteVariations = [];\n\n    for (var i = 0; i < length; i++) {\n      blackWhiteVariations.push([hsl[0], checkPercentage(hsl[1] + this[this.selectedColor + 'Variations'][i][0]), checkPercentage(hsl[2] + this[this.selectedColor + 'Variations'][i][1])]);\n    }\n\n    return blackWhiteVariations;\n  };\n\n  Colors.prototype.getBlackWhiteSingleVariation = function (hsl, index) {\n    return [hsl[0], checkPercentage(hsl[1] + this[this.selectedColor + 'Variations'][index][0]), checkPercentage(hsl[2] + this[this.selectedColor + 'Variations'][index][1])];\n  };\n\n  Colors.prototype.setMainColor = function (color, index) {\n    var hue = parseInt(color[0]),\n        sat = Math.round(color[1] * 100),\n        lig = Math.round(color[2] * 100);\n    var inputs = this.mainColorVariationsInput.eq(index).find('.js-hsl-color-input'),\n        preview = this.mainColorVariationsInput.eq(index).find('.js-color-preview');\n    inputs.eq(0).val(hue);\n    inputs.eq(1).val(sat);\n    inputs.eq(2).val(lig);\n    preview.css('background-color', 'hsl(' + hue + ', ' + sat + '%, ' + lig + '%)');\n  };\n\n  Colors.prototype.setBlackWhiteColor = function (color, index) {\n    //first need to check if input exists\n    var hue = parseInt(color[0]),\n        sat = Math.round(color[1] * 100),\n        lig = Math.round(color[2] * 100);\n    var inputWrapper = this.blackWhiteSection.find('.js-app-editor__color-bw').eq(index),\n        inputs = inputWrapper.find('input'),\n        preview = inputWrapper.find('.js-color-preview');\n    inputs.eq(0).val(checkHue(hue));\n    inputs.eq(1).val(sat);\n    inputs.eq(2).val(lig);\n    preview.css('background-color', 'hsl(' + hue + ', ' + sat + '%, ' + lig + '%)');\n  };\n\n  Colors.prototype.setContrastColor = function (color, percentage, index) {\n    var wrapper = this.contrastInputs.find('.js-app-editor__contrast-item').eq(index),\n        input = wrapper.find('input'),\n        preview = wrapper.find('.js-color-preview');\n    input.val(percentage);\n    preview.css('background-color', 'hsl(' + parseInt(color[0]) + ', ' + parseInt(color[1] * 100) + '%, ' + parseInt(color[2] * 100) + '%)');\n  };\n\n  Colors.prototype.createBlackWhiteVariation = function () {\n    //create new item and append it\n    var variations = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        tot = variations.length,\n        clone = variations.eq(0).clone();\n    clone.removeClass('app-editor__color-item--locked app-editor__color-item--labelled').addClass('app-editor__color-item--removable');\n    clone.find('input').removeAttr('disabled');\n    this.blackWhiteSection.children('.js-app-editor-section__body').append(clone); //get the color variarion\n\n    var color = this.getBlackWhiteSingleVariation(this[this.selectedColor + 'Colors'][this.selectedTheme][0], tot); //update the variable storing the variations\n\n    this[this.selectedColor + 'Colors'][this.selectedTheme].push(color); //update the color of the input and the preview\n\n    this.setBlackWhiteColor(color, tot); //reset the list with the proper label classes\n\n    this.blackWhiteInputsResetLabelClass(); //if two variation visible -> remove plus action\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.deleteBlackWhiteVariation = function (index) {\n    //remove item from dom\n    this.blackWhiteSection.find('.js-app-editor__color-bw').eq(index).remove(); //update object stored variables\n\n    this[this.selectedColor + 'Colors'][this.selectedTheme].splice(index, 1); //reset plus visibility\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.resetBWActionVisibility = function () {\n    var sectionTitle = this.blackWhiteSection.find('.app-editor-section__title');\n    this.blackWhiteSection.find('.js-app-editor__color-bw').length > 2 ? sectionTitle.removeClass('app-editor-section__title--create') : sectionTitle.addClass('app-editor-section__title--create');\n  };\n\n  Colors.prototype.newContrastColorScale = function (value, index) {\n    var wrapper = this.contrastInputs.find('.js-app-editor__contrast-item').eq(index),\n        input = wrapper.find('input'),\n        preview = wrapper.find('.js-color-preview');\n    var color0hex = getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][0]),\n        color5hex = getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][5]);\n    var scaleColors = chroma.bezier([color0hex, color5hex]).scale().colors(101);\n    this.contrastPecentageColors[this.selectedTheme][index] = value;\n    var color = scaleColors[value],\n        hsl = chroma(color).hsl(); //need to convert to hsl\n\n    this.contrastColors[this.selectedTheme][index] = [checkHue(hsl[0]), checkPercentage(hsl[1]), checkPercentage(hsl[2])];\n    input.val(value);\n    preview.css('background-color', color);\n  };\n\n  Colors.prototype.removeTheme = function (type, index, selected) {\n    //first -> remove theme from array of stored elements\n    this.themes.splice(index, 1);\n    this.primaryColors.splice(index, 1);\n    this.accentColors.splice(index, 1);\n    this.downloadColors.splice(index, 1);\n    this.infoColors.splice(index, 1);\n    this.warningColors.splice(index, 1);\n    this.successColors.splice(index, 1);\n    this.errorColors.splice(index, 1);\n    this.blackColors.splice(index, 1);\n    this.whiteColors.splice(index, 1);\n    this.contrastColors.splice(index, 1); //remove custom color as well\n\n    if (this.mainColorLabels.length > 5) {\n      for (var i = 5; i < this.mainColorLabels.length; i++) {\n        this[this.mainColorLabels[i] + 'Colors'].splice(index, 1);\n      }\n    } // remove custom gradients\n\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      this[this.gradientColorIds[i] + 'Gradients'].splice(index, 1);\n    } //if theme was selected -> select new theme\n\n\n    if (selected) {\n      this.selectedTheme = 0;\n      this.setThemeColors();\n    }\n  };\n\n  Colors.prototype.updateColorsDemo = function (bool, label) {\n    var index = this.selectedTheme; //getArray of custom colors\n\n    var customArray = [];\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      if (this.mainColorLabels[i].indexOf('custom-') > -1) {\n        //custom color -> push in array\n        customArray.push([this.mainColorLabels[i], this[this.mainColorLabels[i] + 'Colors'][index]]);\n      }\n    }\n\n    var gradientValues = [];\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      gradientValues.push(this[this.gradientColorIds[i] + 'Gradients'][index]);\n    }\n\n    this.iframe.updateIframeColors(this.primaryColors[index], this.accentColors[index], this.downloadColors[index], this.blackColors[index], this.whiteColors[index], this.successColors[index], this.errorColors[index], this.infoColors[index], this.warningColors[index], this.contrastColors[index], this.fontRendering[index], customArray, this.customColorLabels, this.gradientColorLabels, this.gradientColorIds, gradientValues, label);\n    if (IS_LOGGED == '1' && bool) SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorLinks = function () {\n    this.iframe.updateIframeColorLinks(this.colorLinks);\n  };\n\n  Colors.prototype.updateColorsDemoNewCustom = function (array, title, customLabel) {\n    this.iframe.updateIframeColorsNewColor(array, title, customLabel);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorsDemoRemoveCustom = function (customLabel) {\n    this.iframe.updateIframeColorsRemoveColor(customLabel);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorsDemoEditCustom = function (section, title) {\n    this.iframe.updateIframeColorsEditColor(section, title);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateCopyCode = function (code) {\n    var completeCode = '',\n        spacing = '';\n\n    for (var i = 0; i < this.themes.length; i++) {\n      if (i > 0) spacing = '  '; //start from default theme\n\n      var codeMain = this.createBlockForMainColors(i, spacing),\n          codeCustom = this.createBlockForCustomColors(i, spacing, false),\n          codeBW = this.createBlockForBWColors(i, spacing),\n          codeFeedback = this.createBlockForFeedbackColors(i, spacing),\n          codeFeedbackCustom = this.createBlockForCustomColors(i, spacing, true),\n          codeContrast = this.createBlockForContrastColors(i, spacing),\n          codeGradient = this.createBlockForGradients(i, spacing);\n      var codeFontRendering = this.createBlockForFontRendering(i, spacing);\n      var themeCode = codeMain + codeCustom + codeBW + codeFeedback + codeFeedbackCustom + codeContrast + codeGradient;\n\n      if (i == 0) {\n        //default theme\n        themeCode = ':root, [data-theme=\"default\"] {\\n' + themeCode + '}';\n        if (codeFontRendering != '') themeCode = themeCode + '\\n\\nbody, [data-theme=\"default\"] {\\n' + codeFontRendering + '}';\n      } else {\n        if (codeFontRendering != '') codeFontRendering = '\\n' + codeFontRendering;\n        themeCode = '@supports(--css: variables) {\\n  [data-theme=\"' + this.themes[i].toLowerCase() + '\"] {\\n' + themeCode + codeFontRendering + '  }\\n}';\n      }\n\n      completeCode = completeCode + themeCode;\n      if (i < this.themes.length - 1) completeCode = completeCode + '\\n\\n'; // if( i == 0 ) {\n      // \tcompleteCode = completeCode + '[data-theme] {\\n  background-color: var(--color-bg);\\n  color: var(--color-contrast-high);\\n}\\n\\n';\n      // }\n    } // before returngin code -> check if need to add bg-color classes\n\n\n    completeCode = completeCode + this.getBgColorClasses();\n    return completeCode; // return code;\n  };\n\n  Colors.prototype.createBlockForMainColors = function (themeIndex, spacing) {\n    var code = spacing + '  // main\\n',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    for (var j = 0; j < 2; j++) {\n      for (var i = 0; i < 5; i++) {\n        var colorIndex = 4 - i;\n        var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n            hslCode = getHslCssFromHsl(hsl);\n        code = code + spacing + '  @include defineColorHSL(--color-' + this.mainColorLabels[j] + shades[i] + ', ' + hslCode + ');' + '\\n';\n      }\n\n      code = code + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForCustomColors = function (themeIndex, spacing, isFeedback) {\n    var code = '',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    if (this.mainColorLabels.length > 5) {\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        var label = this.customColorLabels[j];\n\n        if (isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') < 0) {\n          for (var i = 0; i < 5; i++) {\n            var colorIndex = 4 - i;\n            var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n                hslCode = getHslCssFromHsl(hsl);\n            code = code + spacing + '  @include defineColorHSL(' + this.customColorLabels[j - 5] + shades[i] + ', ' + hslCode + ');' + '\\n';\n          }\n\n          code = code + '\\n';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getCustomColorClasses = function (isFeedback) {\n    var code = '';\n\n    if (this.mainColorLabels.length > 5) {\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        var label = this.customColorLabels[j];\n\n        if (isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') < 0) {\n          code = code + '.' + this.customColorLabels[j - 5].replace('--', '') + ' { color: var(' + this.customColorLabels[j - 5] + ');}';\n          code = code + '\\n';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getCustomGradientClasses = function () {\n    var code = '';\n\n    if (this.gradientColorLabels.length > 0) {\n      for (var j = 0; j < this.gradientColorLabels.length; j++) {\n        code = code + '.bg-gradient-' + this.gradientColorLabels[j].replace('--', '') + '-right { background-image: linear-gradient(90deg, var(--gradient-' + this.gradientColorLabels[j] + '-stop-1), var(--gradient-' + this.gradientColorLabels[j] + '-stop-2));}';\n        code = code + '\\n';\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForBWColors = function (themeIndex, spacing) {\n    var code = '',\n        shadesBlack = ['', '-light', '-lighter'],\n        shadesWhite = ['', '-dark', '-darker']; //black\n\n    for (var i = 0; i < this.blackColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.blackColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-black' + shadesBlack[i] + ', ' + hslCode + ');' + '\\n';\n    } //white\n\n\n    for (var i = 0; i < this.whiteColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.whiteColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-white' + shadesWhite[i] + ', ' + hslCode + ');' + '\\n';\n    } //need to add opacities as well\n\n\n    code = code + '\\n';\n    return code;\n  };\n\n  Colors.prototype.createBlockForFeedbackColors = function (themeIndex, spacing) {\n    var code = spacing + '  // feedback\\n',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    for (var j = 2; j < 5; j++) {\n      for (var i = 0; i < 5; i++) {\n        var colorIndex = 4 - i;\n        var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n            hslCode = getHslCssFromHsl(hsl);\n        code = code + spacing + '  @include defineColorHSL(--color-' + this.mainColorLabels[j] + shades[i] + ', ' + hslCode + ');' + '\\n';\n      } //need to add opacities as well\n\n\n      code = code + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForContrastColors = function (themeIndex, spacing) {\n    var code = spacing + '  // color contrasts\\n',\n        shades = ['bg', 'contrast-lower', 'contrast-low', 'contrast-medium', 'contrast-high', 'contrast-higher'];\n\n    for (var i = 0; i < this.contrastColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.contrastColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-' + shades[i] + ', ' + hslCode + ');' + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForGradients = function (themeIndex, spacing) {\n    if (!this.gradientColorLabels || this.gradientColorLabels.length < 1) return '';\n    var code = '\\n' + spacing + '  // gradients\\n',\n        stops = ['-stop-1', '-stop-2'];\n\n    for (var i = 0; i < this.gradientColorLabels.length; i++) {\n      var stop1 = getHslCssFromHsl(this[this.gradientColorIds[i] + 'Gradients'][themeIndex][0]),\n          stop2 = getHslCssFromHsl(this[this.gradientColorIds[i] + 'Gradients'][themeIndex][1]);\n      code = code + spacing + '  @include defineColorHSL(--gradient-' + this.gradientColorLabels[i] + stops[0] + ', ' + stop1 + ');' + '\\n';\n      code = code + spacing + '  @include defineColorHSL(--gradient-' + this.gradientColorLabels[i] + stops[1] + ', ' + stop2 + ');' + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForFontRendering = function (themeIndex, spacing) {\n    var code = '';\n\n    if (this.fontRendering[themeIndex] && Number(this.fontRendering[themeIndex]) == 1) {\n      code = spacing + '  // font rendering\\n' + spacing + '  -webkit-font-smoothing: antialiased;\\n' + spacing + '  -moz-osx-font-smoothing: grayscale;\\n';\n    } else if (this.fontRendering[themeIndex] && Number(this.fontRendering[themeIndex]) == 2) {\n      code = spacing + '  // font rendering\\n' + spacing + '  -webkit-font-smoothing: auto;\\n' + spacing + '  -moz-osx-font-smoothing: auto;\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getArrayToSave = function () {\n    var colorsArray = [];\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      //store main colors + feedback colors\n      colorsArray[this.mainColorLabels[i]] = this[this.mainColorLabels[i] + 'Colors'];\n    }\n\n    colorsArray['mainColorLabels'] = this.mainColorLabels;\n\n    if (this.customColorLabels.length > 0) {\n      colorsArray['customColorLabels'] = this.customColorLabels;\n    }\n\n    colorsArray['blackColors'] = this.blackColors;\n    colorsArray['whiteColors'] = this.whiteColors;\n    colorsArray['contrastPecentageColors'] = this.contrastPecentageColors;\n    colorsArray['contrastColors'] = this.contrastColors;\n\n    if (this.fontRendering && this.fontRendering.length == this.themes.length) {\n      colorsArray['fontRendering'] = this.fontRendering;\n    } else {\n      colorsArray['fontRendering'] = [];\n\n      for (var i = 0; i < this.themes.length; i++) {\n        if (this.fontRendering[i]) colorsArray['fontRendering'][i] = this.fontRendering[i];else colorsArray['fontRendering'][i] = false;\n      }\n    }\n\n    colorsArray['themes'] = this.themes;\n    colorsArray['colorLinks'] = this.colorLinks; // gradients\n\n    if (this.gradientColorLabels.length > 0) {\n      colorsArray['gradientColorLabels'] = this.gradientColorLabels;\n    }\n\n    if (this.gradientColorIds.length > 0) {\n      colorsArray['gradientColorIds'] = this.gradientColorIds;\n\n      for (var i = 0; i < this.gradientColorIds.length; i++) {\n        //store main colors + feedback colors\n        colorsArray[this.gradientColorIds[i] + 'Gradients'] = this[this.gradientColorIds[i] + 'Gradients'];\n      }\n    }\n\n    return colorsArray;\n  };\n\n  Colors.prototype.getOpacitiesArrayToSave = function () {\n    var opacitiesArray = [];\n    opacitiesArray = this.colorOpacities;\n    return opacitiesArray;\n  };\n\n  Colors.prototype.getBgColorClasses = function () {\n    var code = '';\n    var shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    if (this.mainColorLabels.length > 5) {\n      // start from bg\n      code = '\\n\\n// background color\\n';\n\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        for (var i = 0; i < shades.length; i++) {\n          code = code + '.bg-' + this.customColorLabels[j - 5].replace('--color-', '') + shades[i] + ' { background-color: alpha(var(' + this.customColorLabels[j - 5] + shades[i] + '), var(--bg-o, 1)); }';\n          code = code + '\\n';\n        }\n      }\n    }\n\n    if (this.gradientColorLabels.length > 0) {\n      // background gradient\n      code = this.mainColorLabels.length > 5 ? code + '\\n' : code + '\\n\\n';\n      code = code + '// background gradient';\n\n      for (var i = 0; i < this.gradientColorLabels.length; i++) {\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + ' { background-image: radial-gradient(var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-top { background-image: linear-gradient(0deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-right { background-image: linear-gradient(90deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-bottom { background-image: linear-gradient(180deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-left { background-image: linear-gradient(270deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n      }\n\n      if (this.mainColorLabels.length > 5) code = code + '\\n';\n    }\n\n    if (this.mainColorLabels.length > 5) {\n      // add borders\n      code = code + '\\n// border color';\n\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        for (var i = 0; i < shades.length; i++) {\n          code = code + '\\n.border-' + this.customColorLabels[j - 5].replace('--color-', '') + shades[i] + ' { border-color: alpha(var(' + this.customColorLabels[j - 5] + shades[i] + '), var(--bg-o, 1)); }';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  function loadProjectColors(iframe) {\n    if (PROJECT && PROJECT.colors && PROJECT.colors !== '') iframe.loadColorStyle(JSON.parse(PROJECT.colors));\n  }\n\n  function loadProjectTypographyForSpacing(iframe) {\n    if (PROJECT && PROJECT.typography && PROJECT.typography !== '') iframe.loadTypographyForSpacing(JSON.parse(decodeSafeURIComponent(PROJECT.typography)), true);else iframe.loadTypographyForSpacing(false, true);\n  }\n\n  ;\n\n  function loadProjectTypographyForButtons(iframe) {\n    if (PROJECT && PROJECT.typography && PROJECT.typography !== '') iframe.loadTypographyForButtons(JSON.parse(decodeSafeURIComponent(PROJECT.typography)), true);else iframe.loadTypographyForButtons(false, true);\n  }\n\n  ;\n\n  function loadProjectSpacingForButtons(iframe) {\n    if (PROJECT && PROJECT.spacing && PROJECT.spacing !== '') iframe.loadSpacingForButtons(JSON.parse(decodeSafeURIComponent(PROJECT.spacing)), true);else iframe.loadSpacingForButtons(false, true);\n  }\n\n  ;\n\n  function loadProjectButtonsForForms(iframe) {\n    if (PROJECT && PROJECT.buttons && PROJECT.buttons !== '') iframe.loadButtonsForForms(JSON.parse(decodeSafeURIComponent(PROJECT.buttons)), true);else iframe.loadButtonsForForms(false, true);\n  }\n\n  ;\n\n  function loadProjectButtonsForColors(iframe) {\n    if (PROJECT && PROJECT.buttons && PROJECT.buttons !== '') iframe.loadButtonsForColors(JSON.parse(decodeSafeURIComponent(PROJECT.buttons)), true);else iframe.loadButtonsForColors(false, true);\n  }\n\n  ;\n\n  function loadProjectColorsForColors(iframe) {\n    if (PROJECT && PROJECT.colors && PROJECT.colors !== '') iframe.loadColorsForColors(JSON.parse(decodeSafeURIComponent(PROJECT.colors)), true);\n  }\n\n  ;\n\n  function loadProjectFormsForColors(iframe) {\n    if (PROJECT && PROJECT.form && PROJECT.form !== '') iframe.loadFormForColors(JSON.parse(decodeSafeURIComponent(PROJECT.form)), true);else iframe.loadFormForColors(false, true);\n  }\n\n  ;\n\n  function replaceEmpty(array) {\n    for (var i = 0; i < array.length; i++) {\n      if (array[i].length > 1) {\n        array[i] = replaceEmpty(array[i]);\n      } else {\n        if (array[i] == '') array[i] = false;\n      }\n    }\n\n    return array;\n  }\n\n  ;\n\n  function getColorContrastPercentages() {\n    return [0, 5, 17, 55, 89, 100];\n  }\n\n  ;\n\n  function getHslCssFromHsl(hsl) {\n    return Math.round(hsl[0]) + ', ' + Math.round(hsl[1] * 100) + '%, ' + Math.round(hsl[2] * 100) + '%';\n  }\n\n  ;\n\n  function getMainColorVariation(hsl) {\n    //used to get the main color variations starting from main color\n    var colorVariationsLogic = getMainColorVaraiationLogic(hsl);\n    var mainColorVariations = [];\n    hsl[0] = checkHue(hsl[0]);\n\n    for (var i = 0; i < 4; i++) {\n      mainColorVariations.push([hsl[0], checkPercentage(hsl[1] + colorVariationsLogic[i][0]), checkPercentage(hsl[2] + colorVariationsLogic[i][1])]);\n    }\n\n    mainColorVariations.splice(2, 0, hsl);\n    return mainColorVariations;\n  }\n\n  ;\n\n  function getMainColorVaraiationLogic(hsl) {\n    var lightVaraition = 0.1,\n        lightVaraitionS = 0.2;\n\n    if (hsl[2] > 0.8) {\n      lightVaraitionS = 1;\n      lightVaraition = parseFloat(((lightVaraitionS - hsl[2]) * 0.5).toFixed(2));\n    }\n\n    var darkVaraition = -0.1,\n        darkVaraitionS = -0.2;\n\n    if (hsl[2] < 0.2) {\n      darkVaraitionS = -hsl[2];\n      darkVaraition = parseFloat((-hsl[2] * 0.5).toFixed(2));\n    }\n\n    return [[0, lightVaraitionS], [0, lightVaraition], [0, darkVaraition], [0, darkVaraitionS]];\n  }\n\n  ;\n\n  function getContrastVariation(color1, color2, array) {\n    var contrastColorVariations = [];\n    var scaleColors = chroma.bezier([color1, color2]).scale().colors(101);\n\n    for (var i = 0; i < 6; i++) {\n      var index = array[i],\n          hsl = chroma(scaleColors[index]).hsl();\n      contrastColorVariations.push([checkHue(hsl[0]), checkPercentage(hsl[1]), checkPercentage(hsl[2])]);\n    }\n\n    return contrastColorVariations;\n  }\n\n  ;\n\n  function getDefaultMainColorVariation(type) {\n    var color = [];\n\n    switch (type) {\n      case 'accent':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      case 'download':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      case 'success':\n        color = [[94, 0.48, 0.74], [94, 0.48, 0.65], [94, 0.48, 0.56], [94, 0.48, 0.48], [94, 0.48, 0.42]];\n        break;\n\n      case 'warning':\n        color = [[46, 1, 0.80], [46, 1, 0.71], [46, 1, 0.61], [46, 1, 0.50], [46, 1, 0.47]];\n        break;\n\n      case 'error':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      case 'info':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      default:\n        // primary\n        color = [[204, 0.70, 0.33], [204, 0.70, 0.43], [204, 0.70, 0.53], [204, 0.70, 0.63], [204, 0.70, 0.73]];\n    }\n\n    return color;\n  }\n\n  ; //initialize the Colors objects\n\n  var colors = document.getElementsByClassName('js-app-sidebar-editor--colors'),\n      colorObject = [];\n\n  if (colors.length > 0) {\n    for (var i = 0; i < colors.length; i++) {\n      (function (i) {\n        colorObject.push(new Colors(colors[i]));\n      })(i);\n    }\n  }\n  /************************/\n\n  /* \tInput Event Listening */\n\n  /************************/\n\n\n  function listenToParentInput(parent, callback) {\n    parent.on('focusout input', 'input', function (event) {\n      callback(event);\n    });\n    parent.on('keyup', 'input', function (event) {\n      if (event.key && event.key.toLowerCase() === \"enter\" || event.keyCode && event.keyCode === \"13\") {\n        callback(event);\n      }\n    });\n  }\n\n  ;\n\n  function listenToParentString(parent, string, callback) {\n    parent.on('focusout', string, function (event) {\n      callback(event);\n    });\n    parent.on('keypress', string, function (event) {\n      if (event.key && event.key.toLowerCase() === \"enter\" || event.keyCode && event.keyCode === \"13\") {\n        event.preventDefault();\n        callback(event);\n      }\n    });\n  }\n\n  ;\n  /************************/\n\n  /* \tSidebar Interaction */\n\n  /************************/\n  //content switch - eg, themes in Colors\n\n  var contentSwitch = $('.js-app-content-switch');\n\n  if (contentSwitch.length > 0) {\n    var contentType = contentSwitch.attr('data-global').toLowerCase(),\n        contentList = contentSwitch.find('.js-app-content-switch__group'),\n        appSidebar = $('.js-app-sidebar--globals'); //open/close list of content\n\n    contentSwitch.on('click', '.js-app-content-item', function (event) {\n      if (!$(event.target).is('.js-add-content') && $(event.target).parents('.js-add-content').length == 0) {\n        contentSwitch.toggleClass('app-content-switch--is-open');\n      }\n    }); //listen for the click on 'add' button - new content item has been created\n\n    contentSwitch.on('click', '.js-add-content', function (event) {\n      contentSwitch.addClass('app-content-switch--is-open');\n      var initialLabel = 'Untitled';\n      contentList.find('.app-content-item--is-selected').removeClass('app-content-item--is-selected app-content-item--is-editing').children('em').attr('contenteditable', 'false');\n      var newContentItem = getNewContentSwitch(initialLabel, contentList);\n      contentList.find('.app-content-item--is-selected').children('em').attr('contenteditable', 'true').selectText();\n      appSidebar.trigger('content-switch-added', [contentType, initialLabel]);\n    }); //new content item has been selected\n\n    contentList.on('click', 'li', function (event) {\n      var selectedItem = contentList.children('.app-content-item--is-selected');\n\n      if (!selectedItem.is($(event.currentTarget)) && $(event.target).parents('.js-content-item__cta--remove').length < 1 && !$(event.target).is('.js-content-item__cta--remove')) {\n        contentList.children('.app-content-item--is-selected').removeClass('app-content-item--is-selected app-content-item--is-editing').children('em').attr('contenteditable', 'false');\n        $(event.currentTarget).addClass('app-content-item--is-selected'); //need to take care of updating content somewhere else -> trigger event\n\n        appSidebar.trigger('content-switch-selected', [contentType, $(event.currentTarget).index()]);\n      }\n    });\n    contentList.on('dblclick', 'li', function (event) {\n      if ($(event.currentTarget).hasClass('js-app-content-item--default')) return;\n      $(event.currentTarget).addClass('app-content-item--is-editing').children('em').eq(0).attr('contenteditable', 'true').focus().selectText();\n    });\n    listenToParentString(contentList, 'li', function (event) {\n      if ($(event.originalEvent.target).is('.js-content-item__cta--edit')) return;\n      $(event.currentTarget).removeClass('app-content-item--is-editing').find('em').attr('contenteditable', 'false');\n      appSidebar.trigger('content-switch-edited', [contentType, $(event.currentTarget).index(), $(event.currentTarget).find('em').text()]);\n    }); //--check if we need to load more themes\n\n    if (colorObject && colorObject[0]) {\n      //we are on the colors global\n      if (colorObject[0].themes.length > 0) {\n        for (var i = 1; i < colorObject[0].themes.length; i++) {\n          var newContentItem = getNewContentSwitch(colorObject[0].themes[i], contentList);\n          newContentItem.removeClass('app-content-item--is-selected app-content-item--is-editing');\n        }\n      }\n    }\n  }\n\n  function getNewContentSwitch(label, contentList) {\n    var newContentItem = contentList.children('li').eq(0).clone();\n    newContentItem.removeClass('js-app-content-item--default').addClass('app-content-item--is-editable app-content-item--is-editing app-content-item--is-selected').children('em').text(label);\n    contentList.append(newContentItem);\n    return newContentItem;\n  } //content groups\n\n\n  var appContentGroup = $('.js-app-content__group');\n\n  if (appContentGroup.length > 0) {\n    var contentType = appContentGroup.attr('data-global').toLowerCase(),\n        appSidebar = $('.js-app-sidebar--globals'),\n        contentItems = appContentGroup.children('li'); //listen to the click on the arrows/entire element - open/close group\n\n    appContentGroup.on('click', '.js-app-content-item--group', function (event) {\n      if (!$(event.target).is('.js-btn-create') && $(event.target).parents('.js-btn-create').length == 0) {\n        $(event.currentTarget).toggleClass('app-content-item--show-children');\n      }\n    }); //select a new content\n\n    appContentGroup.on('click', '.js-app-content-item', function (event) {\n      var sharedStyle = false; // we are gonna use this for the shared styles global only\n\n      if (!$(event.currentTarget).hasClass('app-content-item--is-selected')) {\n        //element is not already selected\n        //do not select if the item is being removed (click on trash icon)\n        if ($(event.target).is('.js-content-item__cta--delete') || $(event.target).parents('.js-content-item__cta--delete').length > 0) return;\n        appContentGroup.find('.app-content-item--is-selected').removeClass('app-content-item--is-selected');\n        $(event.currentTarget).addClass('app-content-item--is-selected'); //need to take care of updating content somewhere else -> trigger event\n        //if the content is a custom one ->pass index to bjects as well\n\n        var itemIndex = $(event.currentTarget).hasClass('js-app-content-item--is-editable') ? $(event.currentTarget).index() : false;\n        var targetLabel = $(event.currentTarget).children('.app-content-item__text').text();\n\n        if (contentType == 'colors' && $(event.currentTarget).attr('data-section').indexOf('color-custom') > -1) {\n          targetLabel = $(event.currentTarget).attr('data-section').replace('#color', '--color');\n        }\n\n        appSidebar.trigger('content-selected', [contentType, targetLabel, itemIndex, sharedStyle]);\n      }\n    });\n  } //right sidebar - generic interactions\n\n\n  var rightAppSidebar = $('.js-app-sidebar--globals');\n\n  if (rightAppSidebar.length > 0) {\n    var colorSelect = $('.js-app-menu--color');\n    rightAppSidebar.on('click', '.js-app-editor-section__title', function (event) {\n      if ($(event.target).is('.js-app-editor-section__title-cta') || $(event.target).parents('.js-app-editor-section__title-cta').length > 0) return;\n      $(event.currentTarget).toggleClass('app-editor-section__title--hide-body');\n    }); //in the sidebar - show the mq tab clicking on the mq button\n\n    rightAppSidebar.on('click', '.js-btn-responsive-rules', function (event) {\n      appSidebarEnableMq($(event.currentTarget));\n    }); //in the sidebar - remove the mq tab/reset mq clicking on delete button\n\n    rightAppSidebar.on('click', '.js-app-delete-mq', function (event) {\n      appSidebarDisableMq($(event.currentTarget), true);\n    }); //in the sidebar - select a new mq clicking on  new mq tab\n\n    rightAppSidebar.on('click', '.js-app-editor-tabs__item', function (event) {\n      appSidebarSelectMq($(event.currentTarget), true);\n    }); //in the right sidebar -> click on the reset link to reset property to default status (e.g., buttons)\n\n    rightAppSidebar.on('click', '.js-app-editor-section__reset-link', function (event) {\n      //remove edited section\n      var selectedSection = $(event.currentTarget).parents('.js-app-editor-section'),\n          mqDelete = selectedSection.find('.js-app-delete-mq');\n      selectedSection.removeClass('app-editor-section--content-edited'); // if(mqDelete.length > 0) appSidebarDisableAndResetMq(mqDelete);\n      //trigger reset of variables in js objects\n\n      rightAppSidebar.trigger('reset-status', [selectedSection]);\n    }); //color preview object\n\n    rightAppSidebar.on('click', '.js-app-editor-color-preview', function (event) {\n      colorSelect.trigger('open-color-selector', [$(event.target)]);\n    });\n\n    if (colorSelect.length > 0) {\n      $(window).on('click', function (event) {\n        if (!$(event.target).is('.js-app-editor-color-preview') && !$(event.target).is('.js-app-menu--color') && $(event.target).parents('.js-app-menu--color').length < 1) colorSelect.trigger('close-color-selection');\n      });\n      $(window).on('keyup', function (event) {\n        if (event.key && event.key.toLowerCase() === \"backspace\" || event.keyCode && event.keyCode === \"8\") {\n          colorSelect.trigger('delete-opacity');\n        }\n      });\n    } // shadow selection -> trigger custom fields\n\n\n    var shadowList = $('.js-shadow-list');\n\n    if (shadowList.length > 0) {\n      shadowList.on('change', function (event) {\n        resetShadowBlockAppearance($(event.target));\n      });\n    }\n  }\n  /* --------------------------------\n    copy code/view code function\n   --------------------------------- */\n  //copy code - detect if there's a copy code element available\n\n\n  if ($('.js-copy-code').length > 0) {\n    var clipboard = new ClipboardJS('.js-copy-code', {\n      text: function text(trigger) {\n        var format = $(trigger).attr('data-type'),\n            container = $(trigger).parents('.js-code-action-wrapper').eq(0);\n        return container.attr('data-' + format);\n      }\n    });\n    clipboard.on('success', function (event) {\n      showCopySuccess(event, false);\n      if ($(event.trigger).hasClass('js-copy-code--dependencies')) showDependenciesModal(event.trigger);\n    }); // switcher css/scss\n\n    if (localStorage.getItem('cd-copy-css') == 'css') {\n      // user wants to copy css by default\n      var splitBtn = $('.js-btn-split__label');\n      if (splitBtn) splitBtn.text('CSS').parent().attr('data-type', 'css');\n    }\n  }\n\n  if ($('.js-modal__copy').length > 0) {\n    var clipboard = new ClipboardJS('.js-modal__copy', {\n      text: function text(trigger) {\n        var format = $(trigger).attr('data-copy') ? $(trigger).attr('data-copy') : 'html',\n            code = $(trigger).prev().find('.js-modal__code').text();\n        console.log(code);\n        return code;\n      }\n    });\n    clipboard.on('success', function (event) {\n      showCopySuccess(event, true);\n    });\n  }\n\n  function showCopySuccess(event, bool) {\n    var target = $(event.trigger);\n\n    if (target.hasClass('js-copy-code--split')) {\n      // user clicked the tooltip of split btn\n      var popover = target.parents('.js-popover'),\n          codeType = target.attr('data-type'),\n          popoverControl = $('[aria-controls=\"' + popover.attr('id') + '\"]');\n      target = popoverControl.prev();\n      updateSplitCopy(target, codeType, popoverControl);\n    }\n\n    target.addClass('btn--state-b');\n    setTimeout(function () {\n      target.removeClass('btn--state-b');\n    }, 3000); //bind the google analytics event as well\n\n    var componentName = bool ? target.parents('.js-modal-code').eq(0).attr('data-component') : target.parents('.js-code-action-wrapper').eq(0).attr('data-demo');\n    ga('send', 'event', 'View Code', 'copyCode', componentName);\n  }\n\n  ;\n\n  function updateSplitCopy(target, codeType, popoverControl) {\n    target.find('.js-btn-split__label').text(codeType.toUpperCase());\n    target.attr('data-type', codeType);\n    popoverControl.trigger('click');\n    localStorage.setItem('cd-copy-css', codeType);\n  }\n\n  ;\n\n  function showDependenciesModal(trigger) {\n    var modal = $('.js-modal--dependencies');\n    modal.trigger('openModal', [trigger]);\n  }\n\n  ;\n\n  function showDependenciesModalViewCode(trigger, modal) {\n    if (trigger.attr('data-dep-titles') || trigger.attr('data-ext-dep') && trigger.attr('data-ext-dep') != '') {\n      // this is the component gallery - create list\n      resetDependenciesListViewCode(modal, trigger.attr('data-dep-url'), trigger.attr('data-dep-titles'), trigger.attr('data-ext-dep'));\n    }\n\n    modal.find('.js-app-info-banner').addClass('app-info-banner--is-visible');\n  }\n\n  ;\n  var copyCodeWrapper = $('.js-code-action-wrapper');\n\n  if (copyCodeWrapper.length > 0) {\n    if ($('.js-item-gallery').length > 0) {\n      $('.js-item-gallery').on('click', '.js-view-code', function (event) {\n        showViewCodeModal(event, $(event.currentTarget).parents('.js-code-action-wrapper').eq(0));\n      });\n    } else {\n      // detect click on view code\n      copyCodeWrapper.on('click', '.js-view-code', function (event) {\n        showViewCodeModal(event, $(event.delegateTarget));\n      });\n    }\n  }\n\n  function showViewCodeModal(event, parent) {\n    // var code = [];\n    var modal = $('.js-modal[data-modal-trigger=\"' + $(event.currentTarget).attr('data-modal') + '\"]'); //hide menu popup\n\n    $('.js-menu-popup.menu-popup--is-visible').removeClass('menu-popup--is-visible'); //modal is shown automatically using the proper object\n\n    if ($(event.currentTarget).hasClass('js-view-code--global')) {\n      //get code global -- need to modify i first\n      getGlobalCode(parent, '', function (data) {\n        // populate the modal now\n        modal.trigger('showGlobalCode', [data]);\n      });\n    } else {\n      getComponentCode(parent, '', function (data) {\n        if ($(event.currentTarget).hasClass('js-view-code--dependencies')) {\n          showDependenciesModalViewCode($(event.currentTarget), modal);\n        } else {\n          // need to hide the dependencies banner in the modal\n          modal.find('.js-app-info-banner').removeClass('app-info-banner--is-visible');\n        } // populate the modal now\n\n\n        modal.trigger('showCode');\n      });\n    } //bind the google analytics event as well\n\n\n    ga('send', 'event', 'View Code', 'showCode', parent.attr('data-demo'));\n  }\n\n  ;\n\n  function getComponentCode(container, type, callback) {\n    var array = [];\n\n    if (!container.attr('data-html') && !container.attr('data-scss') && !container.attr('data-js')) {\n      // this should be dynamic\n      if (type && type == 'globals') {\n        var componentName = container.attr('data-title').toLowerCase();\n      } else {\n        var componentName = container.attr('data-demo');\n      }\n\n      readFileContent(componentName, type, function (data) {\n        var code = JSON.parse(data);\n        container.attr('data-html', code.response.html);\n        container.attr('data-scss', code.response.scss);\n        container.attr('data-css', code.response.css);\n        container.attr('data-js', code.response.js);\n        callback(array);\n      });\n    } else {\n      array[0] = container.attr('data-html');\n      array[1] = container.attr('data-scss');\n      array[2] = container.attr('data-js');\n      array[3] = container.attr('data-css');\n      callback(array);\n    }\n  }\n\n  function getGlobalCode(container, type, callback) {\n    scss_code = modifyGlobalCode(container.attr('data-scss'), container.attr('data-demo'), container);\n    callback(scss_code);\n  }\n\n  function readFileContent(component, type, callback) {\n    if (type && type == 'globals') {\n      var url = 'post/getGlobalCode';\n    } else {\n      var url = 'post/getComponentCode';\n    }\n\n    $.ajax({\n      url: url,\n      data: 'component=' + component,\n      type: 'POST',\n      cache: 'false',\n      beforeSend: function beforeSend() {//show loader or similar\n      },\n      success: function success(data) {\n        callback(data);\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        callback('');\n      }\n    });\n  }\n\n  function modifyGlobalCode(code, global) {\n    //check the globals that needs to be modified\n    console.log(global);\n\n    switch (global.toLowerCase()) {\n      case 'colors':\n        code = modifyColorsCode(code);\n        break;\n\n      case 'buttons':\n        code = modifyButtonsCode(code);\n        break;\n\n      case 'forms':\n        code = modifyFormsCode(code);\n        break;\n\n      case 'spacing':\n        code = modifySpacingCode(code);\n        break;\n\n      case 'typography':\n        code = modifyTypographyCode(code);\n        break;\n\n      case 'shared styles':\n        code = modifySharedStylesCode(code);\n        break;\n\n      default:\n        code = code;\n        break;\n    }\n\n    return code;\n  }\n\n  ;\n\n  function modifyColorsCode(code) {\n    if (colorObject && colorObject.length > 0) {\n      code = colorObject[0].updateCopyCode(code);\n    }\n\n    return code;\n  }\n\n  ; // component dependencies -> close banner in view code\n\n  var closeBanner = $('.js-app-info-banner__close');\n\n  if (closeBanner.length > 0) {\n    closeBanner.on('click', function (event) {\n      event.preventDefault();\n      closeBanner.parents('.js-app-info-banner').removeClass('app-info-banner--is-visible');\n    });\n  }\n\n  function convArrToObj(array) {\n    var thisEleObj = new Object();\n\n    if (_typeof(array) == \"object\") {\n      for (var i in array) {\n        var thisEle = convArrToObj(array[i]);\n        thisEleObj[i] = thisEle;\n      }\n    } else {\n      thisEleObj = array;\n    }\n\n    return thisEleObj;\n  }\n\n  ; //reset globals function\n\n  var resetGlobal = document.getElementsByClassName('js-reset-global');\n\n  if (resetGlobal.length > 0) {\n    resetGlobal[0].addEventListener('click', function (event) {\n      var globalType = resetGlobal[0].getAttribute('data-global');\n      event.preventDefault();\n\n      if (window.confirm(\"Are you sure you want to reset the global \" + globalType + \"? All your custom changes will be removed.\")) {\n        resetGlobalFn(globalType.toLowerCase(), function () {\n          location.reload();\n        });\n      }\n    });\n  } //TODO Create btn save\n\n\n  $('.copy-globals-code').on('click', function () {\n    saveColorsCode(function () {\n      SaveAlert.no();\n    });\n  });\n\n  function saveColorsCode(callback) {\n    //need to define a string for colors\n    if (!colorObject || colorObject.length == 0) callback();\n    var colorsAll = colorObject[0].getArrayToSave();\n    var colorString = JSON.stringify(convArrToObj(colorsAll));\n    updateGlobalsProject(colorString, callback);\n  }\n\n  ;\n\n  function updateGlobalsProject(options, callback) {\n    var getCOnfig;\n    axios({\n      url: '/admin/themes/dofus-default/config',\n      method: 'GET',\n      dataType: 'json'\n    }).then(function (response) {\n      if (!colorObject || colorObject.length == 0) callback();\n      var colorsAll = colorObject[0].getArrayToSave();\n      var colorString = JSON.stringify(convArrToObj(colorsAll));\n      getCOnfig = JSON.parse(response.data.split('<!DOCTYPE html>')[0]);\n      getCOnfig.color_themes_data = colorString;\n      getCOnfig.color_themes = $('html').attr(\"style\");\n      console.log(getCOnfig.color_themes_data);\n      console.log(getCOnfig.color_themes);\n      axios.post('/admin/themes/dofus-default/config', {\n        discordId: getCOnfig.discordId,\n        headerIcons: getCOnfig.headerIcons,\n        headerVisibilityText: getCOnfig.headerVisibilityText,\n        sliders: getCOnfig.sliders,\n        articleLike: getCOnfig.articleLike,\n        articleComment: getCOnfig.articleComment,\n        voteIcons: getCOnfig.voteIcons,\n        cgu: getCOnfig.cgu,\n        cgu_link: getCOnfig.cgu_link,\n        cgv: getCOnfig.cgv,\n        cgv_link: getCOnfig.cgv_link,\n        download: getCOnfig.download,\n        download_link: getCOnfig.download_link,\n        footer_description: getCOnfig.footer_description,\n        footer_links: getCOnfig.footer_links,\n        color_themes: getCOnfig.color_themes,\n        color_themes_data: getCOnfig.color_themes_data\n      }).then(function (response) {\n        console.log(response);\n      })[\"catch\"](function (error) {\n        console.log(error);\n      })[\"finally\"](function () {});\n    })[\"catch\"](function (error) {\n      console.log(error);\n    })[\"finally\"](function () {});\n  }\n\n  ; // Save Alert\n\n  var SaveAlert = {\n    yes: function yes() {\n      window.onbeforeunload = function () {\n        return true;\n      };\n    },\n    no: function no() {\n      window.onbeforeunload = null;\n    }\n  };\n})();\n/**********************\n iOS banner\n ***********************/\n\n\n(function () {\n  var iosBanner = $('.js-ios-pivot');\n\n  if (iosBanner.length > 0) {\n    if (!!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform)) iosBanner.removeClass('ios-pivot--is-hidden');\n  }\n})(); //here define the functions that need to be used inside the app frame\n\n\nfunction checkPercentage(val) {\n  val = Number(val);\n  if (val < 0) val = 0;\n  if (val > 1) val = 1;\n  return Number(val.toFixed(2));\n}\n\n;\n\nfunction checkHue(hue) {\n  if (isNaN(hue)) hue = 0;\n  return Math.round(parseFloat(hue));\n}\n\n;\n\nfunction getHslFromHex(hex) {\n  if (hex.indexOf('hsl(') > -1) {\n    //format is already hsl(, , )\n    return getHslFromHslString(hex);\n  }\n\n  var color = chroma(hex).hsl();\n  if (isNaN(color[0])) color[0] = 0;\n  color[0] = Math.round(color[0]);\n  color[1] = Number(Math.round(color[1] * 100) / 100);\n  color[2] = Number(Math.round(color[2] * 100) / 100);\n  return color;\n}\n\n;\n\nfunction getHslFromHslString(hex) {\n  var color = hex.replace('hsl(', '').replace(')', '').split(',');\n  color[0] = Number(color[0].trim());\n  color[1] = parseFloat((Number(color[1].trim().replace('%', '')) / 100).toFixed(2));\n  color[2] = parseFloat((Number(color[2].trim().replace('%', '')) / 100).toFixed(2));\n  return color;\n}\n\n;\n\nfunction getHexFromHsl(hsl) {\n  return chroma.hsl(hsl[0], hsl[1], hsl[2]).hex();\n}\n\n;\n\nfunction convertStringToHsl(string) {\n  string = Number(string.replace('%', ''));\n  return Number((string / 100).toFixed(2));\n}\n\n;\n\nfunction selectSidebarSection(target) {\n  $('.js-app-content__group').trigger('selectSection', [target]);\n}\n\n;\n\nfunction closeActivePopups() {\n  var colorSelection = $('.js-app-menu--color'),\n      appMenu = $('.js-app-header-menu-toggle');\n  if (colorSelection.length > 0) colorSelection.trigger('close-color-selection');\n  if (appMenu.length > 0) appMenu.trigger('close-app-menu-popup');\n}\n\n;\n\nfunction toggleColorLink(colorSection, bool) {\n  $('.js-app-sidebar-editor--colors').trigger('updateColorLink', [colorSection, bool]);\n}\n\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/config-custom-azuriom/change-color.js\n");

/***/ }),

/***/ "./js/config-custom-azuriom/colors.js":
/*!********************************************!*\
  !*** ./js/config-custom-azuriom/colors.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"updateIframeColors\": () => (/* binding */ updateIframeColors),\n/* harmony export */   \"updateIframeColorLinks\": () => (/* binding */ updateIframeColorLinks),\n/* harmony export */   \"updateIframeColorsNewColor\": () => (/* binding */ updateIframeColorsNewColor),\n/* harmony export */   \"updateIframeColorsRemoveColor\": () => (/* binding */ updateIframeColorsRemoveColor),\n/* harmony export */   \"updateIframeColorsEditColor\": () => (/* binding */ updateIframeColorsEditColor),\n/* harmony export */   \"loadColorsForColors\": () => (/* binding */ loadColorsForColors),\n/* harmony export */   \"loadTypographyForButtons\": () => (/* binding */ loadTypographyForButtons),\n/* harmony export */   \"loadSpacingForButtons\": () => (/* binding */ loadSpacingForButtons),\n/* harmony export */   \"loadButtonsForColors\": () => (/* binding */ loadButtonsForColors),\n/* harmony export */   \"loadFormForColors\": () => (/* binding */ loadFormForColors)\n/* harmony export */ });\nvar Color = __webpack_require__(/*! ./colors */ \"./js/config-custom-azuriom/colors.js\");\n\nvar jsPage = __webpack_require__(/*! ./page */ \"./js/config-custom-azuriom/page.js\");\n\nvar colorPrimary = [],\n    colorAccent = [],\n    colorDownload = [],\n    colorBlack = '',\n    colorWhite = '',\n    colorSuccess = [],\n    colorError = [],\n    colorInfo = [],\n    colorWarning = [],\n    colorContrasts = [],\n    newColorCustom = [],\n    newGradientCustom = [],\n    colorCustoms = [],\n    gradientCustoms = [],\n    colorOpacities = [],\n    customColorLabels = [],\n    gradientColorIds = [],\n    gradientColorValues = [],\n    fontRenderingValue = '';\nfunction updateIframeColors(primary, accent, download, black, white, success, error, info, warning, contrasts, fontRendering, customs, customLabels, grLabels, grIds, grValues, label) {\n  colorPrimary = primary.slice();\n  colorAccent = accent.slice();\n  colorDownload = download.slice();\n  colorBlack = black.slice();\n  colorWhite = white.slice();\n  colorSuccess = success.slice();\n  colorError = error.slice();\n  colorInfo = info.slice();\n  colorWarning = warning.slice();\n  colorContrasts = contrasts.slice();\n  colorCustoms = customs.slice();\n  customColorLabels = customLabels;\n  gradientColorIds = grIds.slice();\n  gradientCustoms = grLabels.slice();\n  gradientColorValues = grValues.slice();\n  $('.js-cd-demo-container--colors').trigger('updateColors', [label]);\n}\n;\nfunction updateIframeColorLinks(links) {\n  $('.js-cd-demo-container--colors').trigger('updateColorLinks', [links]);\n}\n;\nfunction updateIframeColorsNewColor(array, title, customLabel) {\n  if (title.indexOf('gradient') > -1) {\n    newGradientCustom[customLabel] = array.slice();\n    $('.js-cd-demo-container--colors').trigger('createGradient', [title, customLabel]);\n  } else {\n    newColorCustom[customLabel] = array.slice();\n    $('.js-cd-demo-container--colors').trigger('createColor', [title, customLabel]);\n  }\n}\n;\nfunction updateIframeColorsRemoveColor(customLabel) {\n  if (customLabel.indexOf('gr') > -1) {\n    $('.js-cd-demo-container--colors').trigger('removeGradient', [customLabel]);\n  } else {\n    $('.js-cd-demo-container--colors').trigger('removeColor', [customLabel]);\n  }\n}\n;\nfunction updateIframeColorsEditColor(section, title) {\n  if (section.indexOf('gradient') > -1) {\n    $('.js-cd-demo-container--colors').trigger('updateGradient', [section, title]);\n  } else {\n    $('.js-cd-demo-container--colors').trigger('updateColor', [section, title]);\n  }\n}\n;\nvar projectTypography, projectSpacing, projectButtons, projectForms;\nfunction loadColorsForColors(colors) {\n  btnColorLabels = Object.values(colors['mainColorLabels']);\n  btnColorCustomNiceLabels = colors['customColorLabels'] ? Object.values(colors['customColorLabels']) : [];\n  btnGradientsCustomNiceLabels = colors['gradientColorLabels'] ? Object.values(colors['gradientColorLabels']) : [];\n}\n;\nfunction loadTypographyForButtons(typography) {\n  projectTypography = typography;\n  $('.js-cd-demo-container--colors').trigger('setTypographyStyle');\n}\n;\nfunction loadSpacingForButtons(spacing) {\n  projectSpacing = spacing;\n  $('.js-cd-demo-container--colors').trigger('setSpacingStyle');\n}\n;\nfunction loadButtonsForColors(buttons) {\n  projectButtons = buttons;\n  $('.js-cd-demo-container--colors').trigger('setButtonsStyle');\n}\n;\nfunction loadFormForColors(forms) {\n  projectForms = forms;\n  $('.js-cd-demo-container--colors').trigger('setFormStyle');\n}\n;\n\n(function () {\n  var colorsDemo = $('.js-cd-demo-container--colors');\n  var iframeParent = jsPage;\n  var accessibleContrastHeadings = document.getElementsByClassName('js-accessible-headings-contrast'),\n      accessibleContrastBody = document.getElementsByClassName('js-accessible-body-contrast');\n\n  if (!iframeParent) {\n    iframeParent = jsPage;\n  }\n\n  var styleTag = $('#font-rendering');\n\n  if (colorsDemo.length > 0) {\n    var resetSpaceTypo = function resetSpaceTypo(bool, mq) {\n      if (projectTypography) {\n        setTypographyStyle(bool, mq);\n      } else {\n        updateTypographyDefaultStyle(mq);\n      }\n\n      if (projectSpacing) {\n        setSpacingStyle(mq);\n      } else {\n        updateSpacingDefaultStyle(mq);\n      }\n    };\n\n    var setTypographyStyle = function setTypographyStyle(bool, mq) {\n      if (projectTypography) jsPage.loadTypographyStyle(projectTypography, bool, mq);else {\n        jsPage.loadTypographyDefaultStyle(bool, mq);\n        updateTypographyDefaultStyle(mq);\n      }\n    };\n\n    var updateTypographyDefaultStyle = function updateTypographyDefaultStyle(mq) {\n      var textBase = '1em',\n          textScale = '1.2';\n\n      if (mq >= 3) {\n        textBase = '1.25em';\n        textScale = '1.25';\n      }\n\n      jsPage.setCssVariable('--text-base-size', textBase);\n      jsPage.setCssVariable('--text-scale-ratio', textScale);\n    };\n\n    var setSpacingStyle = function setSpacingStyle(mq) {\n      if (projectSpacing) jsPage.loadSpacingStyle(projectSpacing, mq);else {\n        jsPage.loadSpacingDefaultStyle(mq);\n        updateSpacingDefaultStyle(mq);\n      }\n    };\n\n    var updateSpacingDefaultStyle = function updateSpacingDefaultStyle(mq) {\n      var spaceUnit = '1em';\n\n      if (mq >= 3) {\n        spaceUnit = '1.25em';\n      }\n\n      jsPage.setCssVariable('--space-unit', spaceUnit);\n    };\n\n    var setButtonsStyle = function setButtonsStyle(mq) {\n      if (projectButtons) jsPage.loadButtonsStyle(projectButtons, mq);else jsPage.loadButtonsDefaultStyle(mq);\n    };\n\n    var setFormsStyle = function setFormsStyle(mq) {\n      if (projectForms) jsPage.loadFormsStyle(projectForms, mq);else jsPage.loadFormsDefaultStyle(mq);\n    };\n\n    var blackWrapper = colorsDemo.find('.js-cd-demo-color__list--black'),\n        whiteWrapper = colorsDemo.find('.js-cd-demo-color__list--white');\n    var demoSwitcher = $('.js-demo-switcher');\n    colorsDemo.on('click', '.js-cd-demo-color__list', function (event) {\n      colorsDemo.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected cd-demo-item--selected');\n      $(event.currentTarget).addClass('cd-demo-color__list--selected');\n      iframeParent.selectSidebarSection($(event.currentTarget).attr('data-section'));\n    });\n    colorsDemo.on('updateColors', function (event, label) {\n      updateColorVariables(label);\n    });\n    colorsDemo.on('updateColorLinks', function (event, links) {\n      updateColorLinks(links);\n    });\n    demoSwitcher.on('click', 'button', function (event) {\n      if ($(event.target).hasClass('is-selected')) return;\n      demoSwitcher.children('.is-selected').removeClass('is-selected').siblings().addClass('is-selected');\n      $('.cd-demo-container--is-hidden').removeClass('cd-demo-container--is-hidden').siblings('[data-display]').addClass('cd-demo-container--is-hidden');\n    });\n    colorsDemo.on('createColor', function (event, title, customLabel) {\n      createCustomColor(title, customLabel);\n    });\n    colorsDemo.on('createGradient', function (event, title, customLabel) {\n      createCustomGradient(title, customLabel);\n    });\n    colorsDemo.on('removeColor', function (event, customLabel) {\n      colorsDemo.find('[data-section=\"#color-' + customLabel + '\"]').parent().remove();\n    });\n    colorsDemo.on('removeGradient', function (event, customLabel) {\n      colorsDemo.find('[data-section=\"#gradient-' + customLabel.replace('gr-', '') + '\"]').parent().remove();\n    });\n    colorsDemo.on('updateColor', function (event, section, title) {\n      updateCustomColor(section, title);\n    });\n    colorsDemo.on('updateGradient', function (event, section, title) {\n      updateCustomGradient(section, title);\n    });\n    colorsDemo.on('click', '.js-cd-demo-color__link-btn', function (event) {\n      event.preventDefault();\n      $(event.currentTarget).toggleClass('cd-demo-color__link-btn--is-active');\n      iframeParent.toggleColorLink($(event.currentTarget).parent().next().attr('data-section'), $(event.currentTarget).hasClass('cd-demo-color__link-btn--is-active'));\n    });\n    var MQRef = jsPage.getMq();\n    colorsDemo.one('setTypographyStyle', function () {\n      setTypographyStyle(true, MQRef);\n    });\n    colorsDemo.one('setSpacingStyle', function () {\n      setSpacingStyle(MQRef);\n    });\n    colorsDemo.one('setButtonsStyle', function () {\n      setButtonsStyle(MQRef);\n    });\n    colorsDemo.one('setFormStyle', function () {\n      setFormsStyle(MQRef);\n    });\n    colorsDemo.on('windowResizing', function () {\n      var mq = jsPage.getMq();\n\n      if (MQRef != mq) {\n        MQRef = mq;\n        resetSpaceTypo(false, MQRef);\n      }\n    });\n    ;\n    ;\n    ;\n    ;\n    ;\n    ;\n  }\n\n  function updateColorVariables(label) {\n    if (!label || label == 'primary') updateMainColor(colorPrimary, 'primary');\n    if (!label || label == 'accent') updateMainColor(colorAccent, 'accent');\n    if (!label || label == 'download') updateMainColor(colorDownload, 'download');\n    if (!label || label == 'success') updateMainColor(colorSuccess, 'success');\n    if (!label || label == 'error') updateMainColor(colorError, 'error');\n    if (!label || label == 'info') updateMainColor(colorInfo, 'info');\n    if (!label || label == 'warning') updateMainColor(colorWarning, 'warning');\n    if (!label || label == 'black') updateBlackWhite(colorBlack, blackWrapper, 'black');\n    if (!label || label == 'white') updateBlackWhite(colorWhite, whiteWrapper, 'white');\n    if (!label || label == 'contrast') updateContratColor();\n    if (!label || label.indexOf('custom') > -1 && label.indexOf('gr-custom') < 0) updateCustoms();\n    if (!label || label.indexOf('gr-custom') > -1) updateGradientCustoms();\n    if (!label || label == 'fontRendering') updateFontRendering();\n  }\n\n  ;\n\n  function setCompleteColorVariable(label, color) {\n    jsPage.setCssVariable(label, jsPage.getHSL(color));\n    jsPage.setColorPartVariables(label, color);\n  }\n\n  ;\n\n  function updateContratColor() {\n    setCompleteColorVariable('--color-bg', colorContrasts[0]);\n    setCompleteColorVariable('--color-contrast-lower', colorContrasts[1]);\n    setCompleteColorVariable('--color-contrast-low', colorContrasts[2]);\n    setCompleteColorVariable('--color-contrast-medium', colorContrasts[3]);\n    setCompleteColorVariable('--color-contrast-high', colorContrasts[4]);\n    setCompleteColorVariable('--color-contrast-higher', colorContrasts[5]);\n    var colorSection = colorsDemo.find('[data-section=\"#color-contrast\"]'),\n        colorLabels = colorSection.find('.js-demo-color__value');\n\n    for (var i = 0; i < colorContrasts.length; i++) {\n      colorLabels.eq(i).text(jsPage.getHSL(colorContrasts[i]));\n    }\n\n    updateAccessibleContrast();\n  }\n\n  ;\n\n  function updateFontRendering() {\n    var code = '';\n\n    if (fontRenderingValue && Number(fontRenderingValue == 1)) {\n      code = 'body{-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}';\n    } else if (fontRenderingValue && Number(fontRenderingValue == 2)) {\n      code = 'body{-webkit-font-smoothing: auto;-moz-osx-font-smoothing: auto;}';\n    }\n\n    styleTag.text(code);\n  }\n\n  ;\n\n  function updateMainColor(array, type) {\n    setCompleteColorVariable('--color-' + type + '-lighter', array[0]);\n    setCompleteColorVariable('--color-' + type + '-light', array[1]);\n    setCompleteColorVariable('--color-' + type, array[2]);\n    setCompleteColorVariable('--color-' + type + '-dark', array[3]);\n    setCompleteColorVariable('--color-' + type + '-darker', array[4]);\n    var colorSection = colorsDemo.find('[data-section=\"#color-' + type + '\"]'),\n        colorLabels = colorSection.find('.js-demo-color__value');\n\n    for (var i = 0; i < 5; i++) {\n      colorLabels.eq(i).text(jsPage.getHSL(array[i]));\n    }\n  }\n\n  ;\n\n  function updateCSSCustomColor(array, type) {\n    setCompleteColorVariable('--color-' + type + '-lighter', array[0]);\n    setCompleteColorVariable('--color-' + type + '-light', array[1]);\n    setCompleteColorVariable('--color-' + type, array[2]);\n    setCompleteColorVariable('--color-' + type + '-dark', array[3]);\n    setCompleteColorVariable('--color-' + type + '-darker', array[4]);\n  }\n\n  ;\n\n  function updateBlackWhite(array, parent, type) {\n    var children = parent.children();\n\n    if (children.length > array.length) {\n      children.eq(array.length - 1).nextAll().remove();\n    } else if (children.length < array.length) {\n      var cloneCode = children.eq(0).clone()[0].outerHTML,\n          itemsString = '';\n\n      for (var i = children.length; i < array.length; i++) {\n        itemsString = itemsString + cloneCode;\n      }\n\n      parent.append(itemsString);\n    }\n\n    children = parent.children();\n\n    for (var i = 0; i < array.length; i++) {\n      updateSingleColor(array[i], children.eq(i), getBWLabel(type, i), i);\n    }\n  }\n\n  ;\n\n  function updateSingleColor(color, item, label, index) {\n    var colorText = jsPage.getHSL(color);\n    setCompleteColorVariable('--' + label, color);\n    item.find('.js-demo-color__value').text(colorText).end().find('.js-css-variable-label').text('--' + label);\n    if (index != 0) item.children().eq(0).css('background-color', colorText);\n  }\n\n  ;\n\n  function updateCustoms() {\n    for (var i = 0; i < colorCustoms.length; i++) {\n      var customSection = $('[data-section=\"#color-' + colorCustoms[i][0] + '\"]');\n\n      if (customSection.length == 0) {\n        createCustomColorSection(customColorLabels[i], colorCustoms[i][0], false);\n      }\n\n      var colorSectionItems = $('[data-section=\"#color-' + colorCustoms[i][0] + '\"]').children(),\n          colorValues = [];\n\n      for (var j = 0; j < colorSectionItems.length; j++) {\n        var newColor = jsPage.getHSL(colorCustoms[i][1][j]);\n        colorSectionItems.eq(j).find('.js-cd-demo-color__preview').attr('style', 'background-color: ' + newColor + ';').end().find('.js-demo-color__value').text(newColor);\n        colorValues.push(newColor);\n      }\n\n      updateCSSCustomColor(colorCustoms[i][1], customColorLabels[i].replace('--color-', ''));\n    }\n  }\n\n  ;\n\n  function updateGradientCustoms() {\n    for (var i = 0; i < gradientCustoms.length; i++) {\n      var customSection = $('[data-section=\"#gradient-' + gradientColorIds[i] + '\"]');\n\n      if (customSection.length == 0) {\n        createCustomGradientSection(gradientCustoms[i], gradientColorIds[i], gradientColorValues[i], false);\n      }\n\n      var customSection = $('[data-section=\"#gradient-' + gradientColorIds[i] + '\"]');\n      var preview = customSection.find('.js-cd-demo-color__preview'),\n          values = customSection.find('.js-demo-color__value');\n      preview.attr('style', 'background-image: linear-gradient(90deg, ' + jsPage.getHSL(gradientColorValues[i][0]) + ', ' + jsPage.getHSL(gradientColorValues[i][1]) + ');');\n      values.eq(0).text(jsPage.getHSL(gradientColorValues[i][0]));\n      values.eq(1).text(jsPage.getHSL(gradientColorValues[i][1]));\n      setCompleteColorVariable('--gradient-' + gradientCustoms[i] + '-stop-1', gradientColorValues[i][0]);\n      setCompleteColorVariable('--gradient-' + gradientCustoms[i] + '-stop-2', gradientColorValues[i][1]);\n    }\n  }\n\n  ;\n\n  function getBWLabel(type, index) {\n    if (type == 'black') {\n      switch (index) {\n        case 1:\n          return 'color-black-light';\n          break;\n\n        case 2:\n          return 'color-black-lighter';\n          break;\n\n        default:\n          return 'color-black';\n      }\n    } else {\n      switch (index) {\n        case 1:\n          return 'color-white-dark';\n          break;\n\n        case 2:\n          return 'color-white-darker';\n          break;\n\n        default:\n          return 'color-white';\n      }\n    }\n  }\n\n  ;\n\n  function createCustomColor(title, customLabel) {\n    createCustomColorSection(title, customLabel, true);\n    selectIframeSection('#color-' + customLabel);\n  }\n\n  ;\n\n  function createCustomColorSection(title, customLabel, customize) {\n    var newColor = colorsDemo.children('.js-cd-demo-color').eq(0).clone(),\n        colorChildren = newColor.find('.js-cd-demo-color__preview');\n    newColor.addClass('js-cd-demo-color--custom').find('.js-cd-demo-title').text(getCustomTitleColor(title));\n    newColor.find('[data-section]').attr('data-section', '#color-' + customLabel);\n    newColor.find('.cd-demo-color__link-btn').removeClass('cd-demo-color__link-btn--is-active');\n\n    if (!customize) {\n      newColor.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n    }\n\n    if (customize) {\n      for (var i = 0; i < colorChildren.length; i++) {\n        colorChildren.eq(i).attr('style', 'background-color: ' + jsPage.getHSL(newColorCustom[customLabel][i]) + ';');\n        var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n        var cssVaraiableName = getVariableName(title);\n        labelItem.text(labelItem.text().replace('--color-primary', cssVaraiableName));\n      }\n    } else {\n      for (var i = 0; i < colorChildren.length; i++) {\n        var cssVaraiableName = getVariableName(title);\n        var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n        labelItem.text(labelItem.text().replace('--color-primary', cssVaraiableName));\n      }\n    }\n\n    if (customLabel.indexOf('custom-fdb') > -1) {\n      colorsDemo.find('.js-cd-demo-gradient').before(newColor);\n    } else {\n      colorsDemo.find('.js-cd-demo-color--black').before(newColor);\n    }\n  }\n\n  ;\n\n  function updateCustomColor(section, title) {\n    var customColorBlock = colorsDemo.find('[data-section=\"' + section + '\"]').parents('.js-cd-demo-color--custom').eq(0),\n        colorChildren = customColorBlock.find('.js-cd-demo-color__preview'),\n        oldLabel = colorChildren.eq(2).siblings('.js-css-variable-label').text();\n    customColorBlock.find('.js-cd-demo-title').text(getCustomTitleColor(title));\n\n    for (var i = 0; i < colorChildren.length; i++) {\n      var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n      var cssVaraiableName = getVariableName(title);\n      labelItem.text(labelItem.text().replace(oldLabel, cssVaraiableName));\n    }\n  }\n\n  ;\n\n  function createCustomGradient(title, customLabel) {\n    createCustomGradientSection(title, customLabel, newGradientCustom[customLabel], true);\n    selectIframeSection('#gradient-' + customLabel);\n  }\n\n  ;\n\n  function createCustomGradientSection(title, customLabel, customValue, customize) {\n    var newColor = colorsDemo.children('.js-cd-demo-gradient').eq(0).clone().removeClass('is-hidden'),\n        titleEl = newColor.find('.js-cd-demo-title'),\n        preview = newColor.find('.js-cd-demo-color__preview'),\n        values = newColor.find('.js-demo-color__value'),\n        labels = newColor.find('.js-css-variable-label');\n    titleEl.text(getCustomTitleGradient(title));\n    values.eq(0).text(jsPage.getHSL(customValue[0]));\n    values.eq(1).text(jsPage.getHSL(customValue[1]));\n    labels.eq(0).text(getGradientVariable(title) + '-stop-1');\n    labels.eq(1).text(getGradientVariable(title) + '-stop-2');\n    newColor.find('.js-cd-demo-gradient__list').attr('data-section', '#gradient-' + customLabel);\n\n    if (!customize) {\n      newColor.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n    }\n\n    if (customize) {\n      preview.attr('style', 'background-image: linear-gradient(90deg, ' + jsPage.getHSL(customValue[0]) + ', ' + jsPage.getHSL(customValue[1]) + ');');\n    }\n\n    colorsDemo.find('.js-cd-demo-color--contrast').before(newColor);\n  }\n\n  ;\n\n  function updateCustomGradient(section, title) {\n    var customGradientBlock = colorsDemo.find('[data-section=\"' + section + '\"]').parents('.js-cd-demo-gradient').eq(0),\n        titleEl = customGradientBlock.find('.js-cd-demo-title'),\n        labels = customGradientBlock.find('.js-css-variable-label');\n    titleEl.text(getCustomTitleGradient(title));\n    labels.eq(0).text(getGradientVariable(title) + '-stop-1');\n    labels.eq(1).text(getGradientVariable(title) + '-stop-2');\n  }\n\n  ;\n\n  function getCustomTitleColor(title) {\n    title = title.replace('--color-', '').replace(/-/, ' ');\n    return 'Color ' + title.charAt(0).toUpperCase() + title.slice(1);\n  }\n\n  ;\n\n  function getCustomTitleGradient(title) {\n    title = title.replace('--gradient-', '').replace(/-/, ' ');\n    return 'Gradient ' + title.charAt(0).toUpperCase() + title.slice(1);\n  }\n\n  ;\n\n  function getGradientVariable(title) {\n    if (title.indexOf('--gradient') > -1) return title;\n    return '--gradient-' + title;\n  }\n\n  ;\n\n  function getVariableName(title) {\n    title = title.replace(/ /, '-');\n    if (title.indexOf('--') != 0) title = '--' + title;\n    return title;\n  }\n\n  ;\n\n  function updateAccessibleContrast() {\n    var bgLuminance = jsPage.getLuminance(colorContrasts[0], iframeParent),\n        headingsLuminance = jsPage.getLuminance(colorContrasts[5], iframeParent),\n        bodyLuminance = jsPage.getLuminance(colorContrasts[4], iframeParent),\n        headingsContrast = bgLuminance > headingsLuminance ? (bgLuminance + 0.05) / (headingsLuminance + 0.05) : (headingsLuminance + 0.05) / (bgLuminance + 0.05),\n        bodyContrast = bgLuminance > bodyLuminance ? (bgLuminance + 0.05) / (bodyLuminance + 0.05) : (bodyLuminance + 0.05) / (bgLuminance + 0.05);\n    headingsContrast = parseFloat(headingsContrast).toFixed(2);\n    bodyContrast = parseFloat(bodyContrast).toFixed(2);\n    var headingsNote = getAccessibleContrastNote(headingsContrast),\n        bodyNote = getAccessibleContrastNote(bodyContrast);\n    if (accessibleContrastHeadings.length > 0) accessibleContrastHeadings[0].textContent = headingsNote;\n    if (accessibleContrastBody.length > 0) accessibleContrastBody[0].textContent = bodyNote;\n  }\n\n  ;\n\n  function getAccessibleContrastNote(value) {\n    var note = value >= 7 ? ' (AAA)' : ' (AA)';\n    if (value < 4.5) note = ' (low)';\n    return value + note;\n  }\n\n  ;\n\n  function updateColorLinks(links) {\n    for (var color in links) {\n      if (links.hasOwnProperty(color) && links[color]) {\n        if (color.indexOf('gr-') > -1) {\n          colorsDemo.find('[data-section=\"#gradient-' + color.replace('gr-', '') + '\"]').prev().find('.js-cd-demo-color__link-btn').addClass('cd-demo-color__link-btn--is-active');\n        } else {\n          colorsDemo.find('[data-section=\"#color-' + color + '\"]').prev().find('.js-cd-demo-color__link-btn').addClass('cd-demo-color__link-btn--is-active');\n        }\n      }\n    }\n  }\n\n  ;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/config-custom-azuriom/colors.js\n");

/***/ }),

/***/ "./js/config-custom-azuriom/page.js":
/*!******************************************!*\
  !*** ./js/config-custom-azuriom/page.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setBtnColorCustomNiceLabels\": () => (/* binding */ setBtnColorCustomNiceLabels),\n/* harmony export */   \"setBtnGradientNiceLabels\": () => (/* binding */ setBtnGradientNiceLabels),\n/* harmony export */   \"decodeSafeURIComponent\": () => (/* binding */ decodeSafeURIComponent),\n/* harmony export */   \"getCursorValue\": () => (/* binding */ getCursorValue),\n/* harmony export */   \"getBorderType\": () => (/* binding */ getBorderType),\n/* harmony export */   \"getBorderStyle\": () => (/* binding */ getBorderStyle),\n/* harmony export */   \"getTextTransform\": () => (/* binding */ getTextTransform),\n/* harmony export */   \"getTextDecoration\": () => (/* binding */ getTextDecoration),\n/* harmony export */   \"getFontSmoothing\": () => (/* binding */ getFontSmoothing),\n/* harmony export */   \"getBoxShadowType\": () => (/* binding */ getBoxShadowType),\n/* harmony export */   \"getTransitionProperty\": () => (/* binding */ getTransitionProperty),\n/* harmony export */   \"getTransitionEase\": () => (/* binding */ getTransitionEase),\n/* harmony export */   \"getTransitionDelay\": () => (/* binding */ getTransitionDelay),\n/* harmony export */   \"getTransformProperty\": () => (/* binding */ getTransformProperty),\n/* harmony export */   \"getOutlineStyle\": () => (/* binding */ getOutlineStyle),\n/* harmony export */   \"getOutlineOffset\": () => (/* binding */ getOutlineOffset),\n/* harmony export */   \"getColorValue\": () => (/* binding */ getColorValue),\n/* harmony export */   \"getColorValueFromList\": () => (/* binding */ getColorValueFromList),\n/* harmony export */   \"getNiceLabelForCustom\": () => (/* binding */ getNiceLabelForCustom),\n/* harmony export */   \"removeOpacityFromLabel\": () => (/* binding */ removeOpacityFromLabel),\n/* harmony export */   \"getOpacityDecFromLabel\": () => (/* binding */ getOpacityDecFromLabel),\n/* harmony export */   \"checkColorIsOpacity\": () => (/* binding */ checkColorIsOpacity),\n/* harmony export */   \"getColorFbIos\": () => (/* binding */ getColorFbIos),\n/* harmony export */   \"getHSL\": () => (/* binding */ getHSL),\n/* harmony export */   \"getHSLA\": () => (/* binding */ getHSLA),\n/* harmony export */   \"setHSLAfromHSL\": () => (/* binding */ setHSLAfromHSL),\n/* harmony export */   \"getHSLFromString\": () => (/* binding */ getHSLFromString),\n/* harmony export */   \"setCssVariable\": () => (/* binding */ setCssVariable),\n/* harmony export */   \"getCssVariable\": () => (/* binding */ getCssVariable),\n/* harmony export */   \"setBodyCssVariable\": () => (/* binding */ setBodyCssVariable),\n/* harmony export */   \"setElementCssVariable\": () => (/* binding */ setElementCssVariable),\n/* harmony export */   \"windowScrollTo\": () => (/* binding */ windowScrollTo),\n/* harmony export */   \"selectIframeSection\": () => (/* binding */ selectIframeSection),\n/* harmony export */   \"selectIframeTab\": () => (/* binding */ selectIframeTab),\n/* harmony export */   \"getMq\": () => (/* binding */ getMq),\n/* harmony export */   \"getScreenSize\": () => (/* binding */ getScreenSize),\n/* harmony export */   \"getValidResponsiveValue\": () => (/* binding */ getValidResponsiveValue),\n/* harmony export */   \"getValueUnit\": () => (/* binding */ getValueUnit),\n/* harmony export */   \"getBodyNotFalse\": () => (/* binding */ getBodyNotFalse),\n/* harmony export */   \"loadGlobalsStyle\": () => (/* binding */ loadGlobalsStyle),\n/* harmony export */   \"loadColorStyle\": () => (/* binding */ loadColorStyle),\n/* harmony export */   \"loadColorDefaultStyle\": () => (/* binding */ loadColorDefaultStyle),\n/* harmony export */   \"setColorPartVariables\": () => (/* binding */ setColorPartVariables),\n/* harmony export */   \"getBWArray\": () => (/* binding */ getBWArray),\n/* harmony export */   \"loadTypographyStyle\": () => (/* binding */ loadTypographyStyle),\n/* harmony export */   \"loadTypographyDefaultStyle\": () => (/* binding */ loadTypographyDefaultStyle),\n/* harmony export */   \"loadTypographyStyleTag\": () => (/* binding */ loadTypographyStyleTag),\n/* harmony export */   \"loadTypographyCssVarStyleGuide\": () => (/* binding */ loadTypographyCssVarStyleGuide),\n/* harmony export */   \"loadTypographyStyleStyleGuide\": () => (/* binding */ loadTypographyStyleStyleGuide),\n/* harmony export */   \"getTypographyScaleVar\": () => (/* binding */ getTypographyScaleVar),\n/* harmony export */   \"getTextUnit\": () => (/* binding */ getTextUnit),\n/* harmony export */   \"getTypographyScaleVarRes\": () => (/* binding */ getTypographyScaleVarRes),\n/* harmony export */   \"loadSpacingStyle\": () => (/* binding */ loadSpacingStyle),\n/* harmony export */   \"loadSpacingDefaultStyle\": () => (/* binding */ loadSpacingDefaultStyle),\n/* harmony export */   \"loadSpacingStyleTag\": () => (/* binding */ loadSpacingStyleTag),\n/* harmony export */   \"setTypographyCssVariables\": () => (/* binding */ setTypographyCssVariables),\n/* harmony export */   \"getTypographyArray\": () => (/* binding */ getTypographyArray),\n/* harmony export */   \"getTypographyStyle\": () => (/* binding */ getTypographyStyle),\n/* harmony export */   \"updateSpacingCssVariables\": () => (/* binding */ updateSpacingCssVariables),\n/* harmony export */   \"getSpacingValues\": () => (/* binding */ getSpacingValues),\n/* harmony export */   \"getSpacingMultiplier\": () => (/* binding */ getSpacingMultiplier),\n/* harmony export */   \"getSpacingCustomScaleRatio\": () => (/* binding */ getSpacingCustomScaleRatio),\n/* harmony export */   \"getSpacingValidResponsiveValueCustomRatio\": () => (/* binding */ getSpacingValidResponsiveValueCustomRatio),\n/* harmony export */   \"getSpaceRatioCustom\": () => (/* binding */ getSpaceRatioCustom),\n/* harmony export */   \"loadButtonsStyle\": () => (/* binding */ loadButtonsStyle),\n/* harmony export */   \"loadButtonsStyleStyleGuide\": () => (/* binding */ loadButtonsStyleStyleGuide),\n/* harmony export */   \"loadSharedStyleStyleGuide\": () => (/* binding */ loadSharedStyleStyleGuide),\n/* harmony export */   \"escapeCSScharacters\": () => (/* binding */ escapeCSScharacters),\n/* harmony export */   \"loadButtonsDefaultStyle\": () => (/* binding */ loadButtonsDefaultStyle),\n/* harmony export */   \"buttonVariables\": () => (/* binding */ buttonVariables),\n/* harmony export */   \"loadButtonsStyleTag\": () => (/* binding */ loadButtonsStyleTag),\n/* harmony export */   \"loadFormsStyle\": () => (/* binding */ loadFormsStyle),\n/* harmony export */   \"loadFormsStyleStyleGuide\": () => (/* binding */ loadFormsStyleStyleGuide),\n/* harmony export */   \"formVariables\": () => (/* binding */ formVariables),\n/* harmony export */   \"loadFormsDefaultStyle\": () => (/* binding */ loadFormsDefaultStyle),\n/* harmony export */   \"loadFormsStyleTag\": () => (/* binding */ loadFormsStyleTag),\n/* harmony export */   \"boxShadowIsDefined\": () => (/* binding */ boxShadowIsDefined),\n/* harmony export */   \"getButtonsArrayStyle\": () => (/* binding */ getButtonsArrayStyle),\n/* harmony export */   \"buttonsCodeStyle\": () => (/* binding */ buttonsCodeStyle),\n/* harmony export */   \"setStatusList\": () => (/* binding */ setStatusList),\n/* harmony export */   \"buttonIconCodeStyle\": () => (/* binding */ buttonIconCodeStyle),\n/* harmony export */   \"buttonsHasTransformStyle\": () => (/* binding */ buttonsHasTransformStyle),\n/* harmony export */   \"getButtonCode\": () => (/* binding */ getButtonCode),\n/* harmony export */   \"getButtonsAppearanceStyle\": () => (/* binding */ getButtonsAppearanceStyle),\n/* harmony export */   \"getGradientBgStyle\": () => (/* binding */ getGradientBgStyle),\n/* harmony export */   \"getButtonsPaddingStyle\": () => (/* binding */ getButtonsPaddingStyle),\n/* harmony export */   \"getButtonsPaddingValue\": () => (/* binding */ getButtonsPaddingValue),\n/* harmony export */   \"getButtonsMarginStyle\": () => (/* binding */ getButtonsMarginStyle),\n/* harmony export */   \"getButtonsBorderStyle\": () => (/* binding */ getButtonsBorderStyle),\n/* harmony export */   \"getButtonsTypographyStyle\": () => (/* binding */ getButtonsTypographyStyle),\n/* harmony export */   \"getButtonsTextShadowStyle\": () => (/* binding */ getButtonsTextShadowStyle),\n/* harmony export */   \"getButtonsShadowStyle\": () => (/* binding */ getButtonsShadowStyle),\n/* harmony export */   \"getButtonsOutlineStyle\": () => (/* binding */ getButtonsOutlineStyle),\n/* harmony export */   \"getButtonsTransformStyle\": () => (/* binding */ getButtonsTransformStyle),\n/* harmony export */   \"getButtonsTransitionStyle\": () => (/* binding */ getButtonsTransitionStyle),\n/* harmony export */   \"getButtonsPlaceholderStyle\": () => (/* binding */ getButtonsPlaceholderStyle),\n/* harmony export */   \"getButtonsFontSizeValue\": () => (/* binding */ getButtonsFontSizeValue),\n/* harmony export */   \"resetFormsStyleComponents\": () => (/* binding */ resetFormsStyleComponents),\n/* harmony export */   \"getSuffixOpacity\": () => (/* binding */ getSuffixOpacity),\n/* harmony export */   \"getLuminance\": () => (/* binding */ getLuminance),\n/* harmony export */   \"getRGBsrValues\": () => (/* binding */ getRGBsrValues),\n/* harmony export */   \"getRGBValues\": () => (/* binding */ getRGBValues),\n/* harmony export */   \"getRGBfromHSL\": () => (/* binding */ getRGBfromHSL),\n/* harmony export */   \"loadedIframeCheck\": () => (/* binding */ loadedIframeCheck),\n/* harmony export */   \"initFontList\": () => (/* binding */ initFontList)\n/* harmony export */ });\n//buttons/forms default values\nvar spacingArray = ['', '0', 'var(--space-xxxxs)', 'var(--space-xxxs)', 'var(--space-xxs)', 'var(--space-xs)', 'var(--space-sm)', 'var(--space-md)', 'var(--space-lg)', 'var(--space-xl)', 'var(--space-xxl)', 'var(--space-xxxl)', 'var(--space-xxxxl)'],\n    textArray = ['', 'var(--text-xs)', 'var(--text-sm)', 'var(--text-md)', 'var(--text-lg)', 'var(--text-xl)', 'var(--text-xxl)', 'var(--text-xxxl)', 'var(--text-xxxxl)', 'inherit'],\n    textArrayValues = ['', 'var(--text-xs)', 'var(--text-sm)', 'var(--text-md)', 'var(--text-lg)', 'var(--text-xl)', 'var(--text-xxl)', 'var(--text-xxxl)', 'inherit', '', 'var(--text-xxxxl)'] // fontArray = ['', '--font-primary'],\n// btnFontIds = [0, 1],\n// btnColorCustomNiceLabels = [],\n// btnGradientsCustomNiceLabels = [],\n// btnColorLabels = [\"primary\", \"accent\", \"download\", \"warning\", \"success\", \"error\", \"info\"],\n// shadowVariables = ['', '', 'var(--shadow-xs)', 'var(--shadow-sm)', 'var(--shadow-md)', 'var(--shadow-lg)', 'var(--shadow-xl)'],\n// borderRadiusValues = ['', 'var(--radius-sm)', 'var(--radius-md)', 'var(--radius-lg)']\n;\nfunction setBtnColorCustomNiceLabels(colors, customNice) {\n  if (colors) {\n    btnColorLabels = colors;\n  }\n\n  if (customNice) {\n    btnColorCustomNiceLabels = customNice;\n  }\n}\n;\nfunction setBtnGradientNiceLabels(gradients) {\n  if (gradients && gradients.length > 0) {\n    btnGradientsCustomNiceLabels = gradients;\n  }\n}\n;\nfunction decodeSafeURIComponent(string) {\n  return decodeURIComponent(string.replace(/%\"/g, '%25\"'));\n}\n;\nfunction getCursorValue(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'auto';\n      break;\n\n    case 2:\n      return 'pointer';\n      break;\n\n    case 3:\n      return 'not-allowed';\n      break;\n\n    default:\n      return 'auto';\n  }\n}\n;\nfunction getBorderType(index) {\n  switch (index) {\n    case 0:\n      return 'border';\n      break;\n\n    case 1:\n      return 'border-top';\n      break;\n\n    case 2:\n      return 'border-right';\n      break;\n\n    case 3:\n      return 'border-bottom';\n      break;\n\n    case 4:\n      return 'border-left';\n      break;\n\n    default:\n      return 'border';\n  }\n}\n;\nfunction getBorderStyle(index) {\n  switch (index) {\n    case 0:\n      return 'none';\n      break;\n\n    case 1:\n      return 'solid';\n      break;\n\n    case 2:\n      return 'dashed';\n      break;\n\n    case 3:\n      return 'dotted';\n      break;\n\n    default:\n      return 'solid';\n  }\n}\n;\nfunction getTextTransform(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'capitalize';\n      break;\n\n    case 3:\n      return 'uppercase';\n      break;\n\n    case 4:\n      return 'lowercase';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getTextDecoration(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'underline';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getFontSmoothing() {\n  return '-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;';\n}\n;\nfunction getBoxShadowType(index) {\n  if (index == 0) return '';else return 'inset ';\n}\n;\nfunction getTransitionProperty(index) {\n  switch (index) {\n    case 0:\n      return 'all';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'background';\n      break;\n\n    case 3:\n      return 'opacity';\n      break;\n\n    case 4:\n      return 'border';\n      break;\n\n    case 5:\n      return 'box-shadow';\n      break;\n\n    case 6:\n      return 'outline';\n      break;\n\n    case 7:\n      return 'transform';\n      break;\n\n    case 8:\n      return 'color';\n      break;\n\n    default:\n      return 'all';\n  }\n}\n;\nfunction getTransitionEase(index) {\n  switch (index) {\n    case 0:\n      return 'ease';\n      break;\n\n    case 1:\n      return 'linear';\n      break;\n\n    case 2:\n      return 'ease-in';\n      break;\n\n    case 3:\n      return 'ease-out';\n      break;\n\n    case 4:\n      return 'var(--ease-in-out)';\n      break;\n\n    case 5:\n      return 'var(--ease-in)';\n      break;\n\n    case 6:\n      return 'var(--ease-out)';\n      break;\n\n    case 7:\n      return 'var(--ease-out-back)';\n      break;\n\n    default:\n      return 'ease';\n  }\n}\n;\nfunction getTransitionDelay(val) {\n  if (val == '') return '';\n  return ' ' + val + 's';\n}\n;\nfunction getTransformProperty(index) {\n  switch (index) {\n    case 0:\n      return 'none';\n      break;\n\n    case 1:\n      return 'translate';\n      break;\n\n    case 2:\n      return 'translateX';\n      break;\n\n    case 3:\n      return 'translateY';\n      break;\n\n    case 4:\n      return 'translateZ';\n      break;\n\n    case 5:\n      return 'scale';\n      break;\n\n    case 6:\n      return 'scaleX';\n      break;\n\n    case 7:\n      return 'scaleY';\n      break;\n\n    case 8:\n      return 'scaleZ';\n      break;\n\n    case 9:\n      return 'rotate';\n      break;\n\n    case 10:\n      return 'rotateX';\n      break;\n\n    case 11:\n      return 'rotateY';\n      break;\n\n    case 12:\n      return 'rotateZ';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getOutlineStyle(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'auto';\n      break;\n\n    case 2:\n      return 'dotted';\n      break;\n\n    case 3:\n      return 'dashed';\n      break;\n\n    case 4:\n      return 'solid';\n      break;\n\n    case 5:\n      return 'double';\n      break;\n\n    case 6:\n      return 'inset';\n      break;\n\n    case 7:\n      return 'outset';\n      break;\n\n    case 8:\n      return 'none';\n      break;\n\n    default:\n      return '';\n  }\n}\n;\nfunction getOutlineOffset(val) {\n  if (val == '') return '';\n  return 'outline-offset: ' + val + ';';\n}\n;\nfunction getColorValue(val, reset) {\n  if (!val || val == null) return ''; // check if inherit/transparent/default\n\n  if (val == 'transparent' || val.indexOf('transparent') == 0) return 'transparent';\n  if (val == 'inherit' || val.indexOf('inherit') == 0) return 'inherit';\n  if (val == '' || val.indexOf('-a') == 0) return ''; //check if custom color\n\n  return getColorValueFromList(val, reset);\n}\n;\nfunction getColorValueFromList(label, reset) {\n  var fallback = '';\n  if (!label || label == null) return '';\n  label = getNiceLabelForCustom(label);\n  if (!label) return ''; //check if this is an opacity value and provide fallback\n\n  if (checkColorIsOpacity(label)) {\n    if (reset && reset == true) {\n      //need to return css value\n      var basicLabel = removeOpacityFromLabel(label);\n      return 'hsla(var(' + basicLabel + '-h), var(' + basicLabel + '-s), var(' + basicLabel + '-l), ' + getOpacityDecFromLabel(label) + ')';\n    } else {\n      //return sass mixin\n      return 'alpha(var(' + removeOpacityFromLabel(label) + '), ' + getOpacityDecFromLabel(label) + ')';\n    }\n  } else {\n    return 'var(' + label + ')';\n  }\n}\n;\nfunction getNiceLabelForCustom(label) {\n  if (label.indexOf('custom-') > -1) {\n    var prefix = label.indexOf('custom-fdb-') > -1 ? 'custom-fdb-' : 'custom-';\n    var labelArray = label.split(prefix),\n        split = labelArray[1].split('-');\n\n    if (split.length > 1) {\n      var customLabel = prefix + split[0];\n      label = btnColorCustomNiceLabels[btnColorLabels.indexOf(customLabel) - 5] + labelArray[1].replace(split[0], '');\n    } else {\n      var customLabel = prefix + labelArray[1];\n      label = btnColorCustomNiceLabels[btnColorLabels.indexOf(customLabel) - 5];\n    }\n  }\n\n  return label;\n}\n;\nfunction removeOpacityFromLabel(label) {\n  return label.slice(0, -4);\n}\n;\nfunction getOpacityDecFromLabel(label) {\n  var opacity = parseInt(label.slice(-4).replace('-a', ''));\n  if (isNaN(opacity)) return 1;\n  return parseFloat((opacity / 100).toFixed(2));\n}\n;\nfunction checkColorIsOpacity(label) {\n  var array = label.split('-');\n\n  if (array.length > 0 && array[array.length - 1].indexOf('a') == 0 && array[array.length - 1].length == 3) {\n    return true;\n  }\n\n  return false;\n}\n;\nfunction getColorFbIos($color, $varLabel, $spacing, $reset) {\n  if (!$color || $color == null) return ['', ''];\n  if ($color == 'transparent' || $color == 'inherit' || $color == '') return ['', $color];\n  return ['', getColorValue($color, $reset)];\n}\n; //if you updates this -> you'll need to update the same in the app-global.js as well\n\nvar paddingVariables = ['--space-xxxxs', '--space-xxxs', '--space-xxs', '--space-xs', '--space-sm', '--space-md', '--space-lg', '--space-xl', '--space-xxl', '--space-xxxl', '--space-xxxxl'],\n    fibonacciSeq = [0.125, 0.25, 0.375, 0.5, 0.75, 1.25, 2, 3.25, 5.25, 8.5, 13.75],\n    prFourth = [0.237, 0.316, 0.422, 0.563, 0.75, 1, 1.333, 1.777, 2.369, 3.157, 4.21],\n    auFourth = [0.177, 0.25, 0.354, 0.5, 0.707, 1, 1.414, 1.999, 2.827, 3.998, 5.65],\n    prFifth = [0.133, 0.2, 0.296, 0.444, 0.667, 1, 1.5, 2.25, 3.375, 5.063, 7.59],\n    goldenRatio = [0.09, 0.146, 0.236, 0.382, 0.618, 1, 1.618, 2.618, 4.236, 6.854, 11.08],\n    spaceRatioUnit = [false, fibonacciSeq, prFourth, auFourth, prFifth, goldenRatio, ''];\nfunction getHSL(color) {\n  if (isNaN(color[0])) color[0] = 0;\n  return 'hsl(' + Math.round(color[0]) + ', ' + Math.round(color[1] * 100) + '%, ' + Math.round(color[2] * 100) + '%)';\n}\n;\nfunction getHSLA(color, opacity) {\n  if (isNaN(color[0])) color[0] = 0;\n  return 'hsla(' + Math.round(color[0]) + ', ' + Math.round(color[1] * 100) + '%, ' + Math.round(color[2] * 100) + '%, ' + parseFloat((Number(opacity) / 100).toFixed(2)) + ')';\n}\n;\nfunction setHSLAfromHSL(color, opacity) {\n  color = color.replace('hsl(', 'hsla(');\n  color = color.replace(')', ', ' + parseFloat((Number(opacity) / 100).toFixed(2)) + ')');\n  return color;\n}\n;\nfunction getHSLFromString(color) {\n  var array = color.replace('hsl(', '').replace(')', '').split(',');\n\n  if (array && array.length > 1) {\n    return [Number(array[0].trim()), parseFloat((array[1].trim().replace('%', '') / 100).toFixed(2)), parseFloat((array[2].trim().replace('%', '') / 100).toFixed(2))];\n  } else {\n    return '';\n  }\n}\n;\nfunction setCssVariable(variable, value, priority) {\n  var root = document.documentElement;\n\n  if (priority) {\n    root.style.setProperty(variable, value, priority);\n  } else {\n    root.style.setProperty(variable, value);\n  }\n}\n;\nfunction getCssVariable(variable) {\n  return getComputedStyle(document.documentElement).getPropertyValue(variable);\n}\n;\nfunction setBodyCssVariable(variable, value) {\n  var body = document.getElementsByTagName('body')[0];\n  body.style.setProperty(variable, value);\n}\n;\nfunction setElementCssVariable(className, variable, value) {\n  var element = document.getElementsByClassName(className);\n\n  if (element.length > 0) {\n    element[0].style.setProperty(variable, value);\n  }\n}\n;\nfunction windowScrollTo(val) {\n  window.scrollTo(0, val);\n}\n;\nfunction selectIframeSection(val) {\n  var section = $('[data-section=\"' + val + '\"]');\n  $('.cd-demo-item--selected').removeClass('cd-demo-item--selected');\n\n  if (section.length > 0) {\n    section.addClass('cd-demo-item--selected');\n\n    if ($('.cd-demo-color__list--selected').length > 0) {\n      $('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n      section.addClass('cd-demo-color__list--selected');\n    }\n\n    windowScrollTo(section.parent().offset().top - 20);\n  }\n}\n;\nfunction selectIframeTab(val) {\n  //remove the selection effect\n  $('.cd-demo-item--selected').removeClass('cd-demo-item--selected');\n  var section = $('[data-tab]');\n\n  if (section.length > 0) {\n    section.addClass('cd-demo-item--is-hidden');\n    section.filter('[data-tab=\"' + val + '\"]').removeClass('cd-demo-item--is-hidden');\n\n    if (val == 'tab-lh-crop') {\n      //lhcrop in typograpgy -> select --font-primary\n      selectIframeSection('--font-1');\n    }\n  }\n}\n;\nfunction getMq() {\n  var windowWidth = $(window).outerWidth(),\n      mq = 0,\n      string = ''; // check if you can get external document width\n\n  if (window.parent && window.parent.document && window.parent.document.body && window.parent.document.body.clientWidth) {\n    windowWidth = window.parent.document.body.clientWidth;\n  }\n\n  switch (true) {\n    case windowWidth >= 1440:\n      mq = 5;\n      string = 'Visible mq: > 1440px';\n      break;\n\n    case windowWidth >= 1280:\n      mq = 4;\n      string = 'Visible mq: > 1280px';\n      break;\n\n    case windowWidth >= 1024:\n      mq = 3;\n      string = 'Visible mq: > 1024px';\n      break;\n\n    case windowWidth >= 600:\n      mq = 2;\n      string = 'Visible mq: > 600px';\n      break;\n\n    case windowWidth >= 480:\n      mq = 1;\n      string = 'Visible mq: > 480px';\n      break;\n\n    default:\n      mq = 0;\n      string = 'None';\n  }\n\n  $('.js-width').text(string);\n  return mq;\n}\n;\nfunction getScreenSize() {\n  if (window.parent && window.parent.document && window.parent.document.body && window.parent.document.body.clientWidth) {\n    return [window.parent.document.body.clientWidth, $(window).outerHeight()];\n  } else {\n    return [$(window).outerWidth(), $(window).outerHeight()];\n  }\n}\n;\nfunction getValidResponsiveValue(spaceArray, index, subIndex) {\n  var item = subIndex !== false ? spaceArray[index][subIndex] : spaceArray[index];\n  if (index == 0) return item;\n\n  if (item !== false && item !== '') {\n    return item;\n  } else {\n    return getValidResponsiveValue(spaceArray, index - 1, subIndex);\n  }\n}\n;\nfunction getValueUnit(value) {\n  if (!value || value == '') return [false, false];\n  var number = parseFloat(value),\n      unit = value.replace(number, '');\n  return [number, unit];\n}\n;\nfunction getBodyNotFalse(array, mq) {\n  var newArray = [];\n\n  for (var i = 0; i < 3; i++) {\n    newArray[i] = getValidResponsiveValue(array, mq, i);\n  }\n\n  return newArray;\n}\n;\nvar projectLoaded = '';\nvar MQ = getMq();\nfunction loadGlobalsStyle(project) {\n  //for components -> load project style\n  if (project) {\n    $('.js-cd-demo').trigger('globalsUpdating');\n    projectLoaded = project;\n  }\n\n  if (project.colors && project.colors !== '' && Object.values) {\n    //colors were saved and need to be modified\n    loadColorStyle(JSON.parse(project.colors));\n  } else {\n    loadColorDefaultStyle();\n  }\n\n  if (project.typography && project.typography !== '' && Object.values) {\n    //typography was saved and need to be modified\n    loadTypographyStyle(JSON.parse(decodeSafeURIComponent(project.typography)), true, MQ);\n  } else {\n    loadTypographyDefaultStyle(true, MQ);\n  } //do the same for the other globals\n\n\n  if (project.spacing && project.spacing !== '' && Object.values) {\n    loadSpacingStyle(JSON.parse(decodeSafeURIComponent(project.spacing)), MQ);\n  } else {\n    loadSpacingDefaultStyle(MQ);\n  }\n\n  if (project.buttons && project.buttons !== '' && Object.values) {\n    loadButtonsStyle(JSON.parse(decodeSafeURIComponent(project.buttons)), MQ);\n  } else {\n    loadButtonsDefaultStyle(MQ);\n  }\n\n  if (project.form && project.form !== '' && Object.values) {\n    loadFormsStyle(JSON.parse(decodeSafeURIComponent(project.form)), MQ);\n  } else {\n    loadFormsDefaultStyle(MQ);\n  } //if you need to update style on resize\n\n\n  if (project) {\n    $('.js-cd-demo').trigger('globalsUpdate');\n  }\n\n  $('.js-cd-demo').trigger('showComponent');\n}\n;\nfunction loadColorStyle(colors) {\n  //no need to do this for custom opacities as only default one are used in components\n  var variations = ['-lighter', '-light', '', '-dark', '-darker'];\n  btnColorLabels = Object.values(colors['mainColorLabels']);\n  btnColorCustomNiceLabels = colors['customColorLabels'] ? Object.values(colors['customColorLabels']) : [];\n  btnGradientsCustomNiceLabels = colors['gradientColorLabels'] ? Object.values(colors['gradientColorLabels']) : []; //set main colors - including custom colors as well\n\n  for (var i = 0; i < btnColorLabels.length; i++) {\n    var cssVarLab = i > 4 ? btnColorCustomNiceLabels[i - 5] : '--color-' + btnColorLabels[i];\n\n    for (var j = 0; j < variations.length; j++) {\n      setCssVariable(cssVarLab + variations[j], getHSL(Object.values(colors[btnColorLabels[i]][0][j])));\n      setColorPartVariables(cssVarLab + variations[j], Object.values(colors[btnColorLabels[i]][0][j]));\n    }\n  } //set black & white\n\n\n  var bVariations = ['', '-light', '-lighter'],\n      blackArray = getBWArray(colors['blackColors'][0]),\n      whiteArray = getBWArray(colors['whiteColors'][0]);\n\n  for (var i = 0; i < blackArray.length; i++) {\n    setCssVariable('--color-black' + bVariations[i], getHSL(blackArray[i]));\n    setColorPartVariables('--color-black' + bVariations[i], blackArray[i]);\n  }\n\n  var wVariations = ['', '-dark', '-darker'];\n\n  for (var i = 0; i < whiteArray.length; i++) {\n    setCssVariable('--color-white' + wVariations[i], getHSL(whiteArray[i]));\n    setColorPartVariables('--color-white' + wVariations[i], whiteArray[i]);\n  } //set contrasts\n\n\n  var contrastLabels = ['-bg', '-contrast-lower', '-contrast-low', '-contrast-medium', '-contrast-high', '-contrast-higher'];\n\n  for (var i = 0; i < contrastLabels.length; i++) {\n    setCssVariable('--color' + contrastLabels[i], getHSL(Object.values(colors['contrastColors'][0][i])));\n    setColorPartVariables('--color' + contrastLabels[i], Object.values(colors['contrastColors'][0][i]));\n  } // set gradients\n\n\n  for (var i = 0; i < btnGradientsCustomNiceLabels.length; i++) {\n    var cssVarLab = '--gradient-' + btnGradientsCustomNiceLabels[i],\n        gradientId = colors['gradientColorIds'][i] + 'Gradients';\n    setCssVariable(cssVarLab + '-stop-1', getHSL(Object.values(colors[gradientId][0][0])));\n    setColorPartVariables(cssVarLab + '-stop-1', Object.values(colors[gradientId][0][0]));\n    setCssVariable(cssVarLab + '-stop-2', getHSL(Object.values(colors[gradientId][0][1])));\n    setColorPartVariables(cssVarLab + '-stop-2', Object.values(colors[gradientId][0][1]));\n  } //font rendering\n\n\n  var fontRenderingCode = '';\n\n  if (colors['fontRendering'] && colors['fontRendering'][0]) {\n    if (Number(colors['fontRendering'][0]) == 1) fontRenderingCode = 'body{-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}';else if (Number(colors['fontRendering'][0]) == 2) fontRenderingCode = 'body{-webkit-font-smoothing: auto;-moz-osx-font-smoothing: auto;}';\n  }\n\n  var style = '<style id=\"font-rendering-style\">' + fontRenderingCode + '</style>';\n  $('#font-rendering-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\n;\nfunction loadColorDefaultStyle() {\n  // colors array\n  var defaultColors = [['--color-primary-darker', [220, 0.9, 0.42]], ['--color-primary-dark', [220, 0.9, 0.49]], ['--color-primary', [220, 0.9, 0.56]], ['--color-primary-light', [220, 0.9, 0.63]], ['--color-primary-lighter', [220, 0.9, 0.70]], ['--color-accent-darker', [349, 0.75, 0.36]], ['--color-accent-dark', [349, 0.75, 0.44]], ['--color-accent', [349, 0.75, 0.51]], ['--color-accent-light', [349, 0.75, 0.59]], ['--color-accent-lighter', [349, 0.75, 0.67]], ['--color-download-darker', [349, 0.75, 0.36]], ['--color-download-dark', [349, 0.75, 0.44]], ['--color-download', [349, 0.75, 0.51]], ['--color-download-light', [349, 0.75, 0.59]], ['--color-download-lighter', [349, 0.75, 0.67]], ['--color-black', [240, 0.08, 0.12]], ['--color-white', [0, 0, 1]], ['--color-success-darker', [94, 0.48, 0.42]], ['--color-success-dark', [94, 0.48, 0.48]], ['--color-success', [94, 0.48, 0.56]], ['--color-success-light', [94, 0.48, 0.65]], ['--color-success-lighter', [94, 0.48, 0.74]], ['--color-error-darker', [349, 0.75, 0.36]], ['--color-error-dark', [349, 0.75, 0.44]], ['--color-error', [349, 0.75, 0.51]], ['--color-error-light', [349, 0.75, 0.59]], ['--color-error-lighter', [349, 0.75, 0.67]], ['--color-info-darker', [349, 0.75, 0.36]], ['--color-info-dark', [349, 0.75, 0.44]], ['--color-info', [349, 0.75, 0.51]], ['--color-info-light', [349, 0.75, 0.59]], ['--color-info-lighter', [349, 0.75, 0.67]], ['--color-warning-darker', [46, 1, 0.47]], ['--color-warning-dark', [46, 1, 0.50]], ['--color-warning', [46, 1, 0.61]], ['--color-warning-light', [46, 1, 0.71]], ['--color-warning-lighter', [46, 1, 0.80]], ['--color-bg', [0, 0, 1]], ['--color-contrast-lower', [0, 0, 0.95]], ['--color-contrast-low', [240, 0.01, 0.83]], ['--color-contrast-medium', [240, 0.01, 0.48]], ['--color-contrast-high', [240, 0.04, 0.2]], ['--color-contrast-higher', [240, 0.08, 0.12]]];\n\n  for (var i = 0; i < defaultColors.length; i++) {\n    setCssVariable(defaultColors[i][0], getHSL(defaultColors[i][1]));\n    setColorPartVariables(defaultColors[i][0], defaultColors[i][1]);\n  }\n}\n;\nfunction setColorPartVariables(label, colorArray) {\n  setCssVariable(label + '-h', Math.round(colorArray[0]));\n  setCssVariable(label + '-s', Math.round(colorArray[1] * 100) + '%');\n  setCssVariable(label + '-l', Math.round(colorArray[2] * 100) + '%');\n}\n;\nfunction getBWArray(obj) {\n  var array = [];\n\n  for (var property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      array.push(Object.values(obj[property]));\n    }\n  }\n\n  return array;\n}\n;\nfunction loadTypographyStyle(typography, bool, mq) {\n  if (bool) {\n    //not responsive things\n    if (typography['fontCode'] && typography != '') $(typography['fontCode']).appendTo($('head'));\n\n    for (var property in typography['fontFamilies']) {\n      if (typography['fontFamilies'].hasOwnProperty(property) && typography['fontFamilyLabels'].hasOwnProperty(property)) {\n        setBodyCssVariable(typography['fontFamilyLabels'][property], typography['fontFamilies'][property]);\n      }\n    }\n\n    if (typography['lhCropCapitalLetter']) {\n      var lhcropArray = Object.values(typography['lhCropCapitalLetter']);\n      if (lhcropArray.length > 0) setCssVariable('--font-primary-capital-letter', lhcropArray[0]);\n    }\n\n    fontArray = [''];\n    btnFontIds = [0];\n\n    for (var property in typography['fontFamilyLabels']) {\n      if (typography['fontFamilyLabels'].hasOwnProperty(property)) {\n        fontArray.push(typography['fontFamilyLabels'][property]);\n        btnFontIds.push(typography['fontFamilyIds'][property]);\n      }\n    }\n  } //body/heading style\n\n\n  var headingValues = getBodyNotFalse(getTypographyArray(typography['headingInfo']), mq),\n      bodyValues = getBodyNotFalse(getTypographyArray(typography['bodyInfo']), mq);\n  var textVariables = 'root, *{--text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));}';\n  loadTypographyStyleTag(textVariables + getTypographyStyle(headingValues, 'h1, h2, h3, h4', typography) + getTypographyStyle(bodyValues, 'body', typography));\n  setTypographyCssVariables(headingValues, bodyValues, typography, mq);\n}\n;\nfunction loadTypographyDefaultStyle(bool, mq) {\n  // set variables - get values for --text-base-size and --text-scale-ratio\n  var bodyStyle = '--font-primary: Inter, system-ui, sans-serif;--text-base-size: 1em;--text-scale-ratio: 1.2;--text-unit: 1em;--body-line-height: 1.4;--heading-line-height: 1.2;--font-primary-capital-letter: 1;',\n      allStyle = ' --text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));';\n  bodyStyle = ':root{' + bodyStyle + '}';\n  allStyle = ':root, *{' + allStyle + '}';\n  var bodyResStyle = '@media (min-width:64rem){:root{--text-base-size: 1.25em;--text-scale-ratio: 1.25;}}';\n  var headingStyle = 'h1, h2, h3, h4 {font-family: var(--font-primary);font-weight: 700;}';\n  loadTypographyStyleTag(bodyStyle + allStyle + headingStyle + bodyResStyle); // append font link\n\n  var fontLink = '<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">';\n  var typographyStyle = $('#typography-style');\n  $(fontLink).insertAfter(typographyStyle);\n}\n;\nfunction loadTypographyStyleTag(styleContent) {\n  var defaultStyle = 'mark {background-color: hsla(var(--color-accent-h), var(--color-accent-s), var(--color-accent-l), 0.2);color: inherit;}.text-component {--line-height-multiplier: 1;--text-vspace-multiplier: 1;}.text-component blockquote {padding-left: 1em;border-left: 4px solid var(--color-contrast-low);}.text-component hr {background: var(--color-contrast-low);height: 1px;}.text-component figcaption {font-size: var(--text-sm);color: var(--color-contrast-medium);}.article {--body-line-height: 1.58;--text-vspace-multiplier: 1.2;}';\n  var style = '<style id=\"typography-style\">' + styleContent + defaultStyle + '</style>';\n  $('#typography-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\nfunction loadTypographyCssVarStyleGuide(typography) {\n  var code = ':root {'; // font family definition\n\n  var fontFamilies = '',\n      fontFamilyClasses = '';\n  var scale = '';\n  var textVariables = '';\n  var scaleResponsive = '';\n\n  if (typography['fontFamilies'] && typography['fontFamilyLabels']) {\n    for (var i = 0; i < typography['fontFamilies'].length; i++) {\n      if (typography['fontFamilyLabels'][i]) {\n        fontFamilies = fontFamilies + typography['fontFamilyLabels'][i] + ': ' + typography['fontFamilies'][i] + ';';\n        fontFamilyClasses = fontFamilyClasses + typography['fontFamilyLabels'][i].replace('--', '.') + '{font-family: var(' + typography['fontFamilyLabels'][i] + ');}';\n      }\n    }\n  }\n\n  code = code + fontFamilies;\n\n  if (typography['baseSize'] && typography['scaleRatio'] && typography['bodyInfo'] && typography['headingInfo']) {\n    scale = getTypographyScaleVar(typography, 0);\n    scaleResponsive = getTypographyScaleVarRes(typography);\n    textVariables = 'root, * {--text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));}';\n  }\n\n  code = code + scale + '}' + textVariables + scaleResponsive + fontFamilyClasses;\n  return code;\n}\n;\nfunction loadTypographyStyleStyleGuide(typography) {\n  var mq = ['', '32rem', '48rem', '64rem', '80rem', '90rem'];\n  var code = '';\n\n  if (typography['bodyInfo'] && typography['headingInfo']) {\n    for (var i = 0; i < mq.length; i++) {\n      var style = '';\n\n      if (typography['bodyInfo'][i]) {\n        var bodyStyle = getTypographyStyle(typography['bodyInfo'][i], 'body', typography);\n        style = i > 0 ? style + '@media (min-width:' + mq[i] + ') {' + bodyStyle + '}' : style + bodyStyle;\n      }\n\n      if (typography['headingInfo'][i]) {\n        var headingStyle = getTypographyStyle(typography['headingInfo'][i], 'h1, h2, h3, h4', typography);\n        style = i > 0 ? style + '@media (min-width:' + mq[i] + ') {' + headingStyle + '}' : style + headingStyle;\n      }\n\n      code = code + style;\n    }\n  }\n\n  return code;\n}\n;\nfunction getTypographyScaleVar(typography, index) {\n  var code = '';\n  if (typography['baseSize'][index]) code = code + '--text-base-size: ' + typography['baseSize'][index] + ';';\n  if (typography['scaleRatio'][index]) code = code + '--text-scale-ratio: ' + typography['scaleRatio'][index] + ';';\n  if (typography['bodyInfo'][index] && typography['bodyInfo'][index][2]) code = code + '--body-line-height: ' + typography['bodyInfo'][index][2] + ';';\n  if (typography['headingInfo'][index] && typography['headingInfo'][index][2]) code = code + '--heading-line-height: ' + typography['headingInfo'][index][2] + ';';\n  if (index == 0) code = code + '--text-unit: ' + getTextUnit(typography);\n  return code;\n}\nfunction getTextUnit(typography) {\n  var textUnit = '1em';\n  if (typography['baseSize'][0] && (typography['baseSize'][0].indexOf('px') > -1 || typography['baseSize'][0].indexOf('rem') > -1)) textUnit = 'var(--text-base-size)';\n  return textUnit;\n}\n;\nfunction getTypographyScaleVarRes(typography) {\n  var mq = ['', '32rem', '48rem', '64rem', '80rem', '90rem'];\n  var code = '';\n\n  for (var i = 1; i < mq.length; i++) {\n    code = code + '@media (min-width:' + mq[i] + ') {:root{' + getTypographyScaleVar(typography, i) + '}}';\n  }\n\n  return code;\n}\nfunction loadSpacingStyle(spacing, mq) {\n  var spaceUnit = getValidResponsiveValue(Object.values(spacing['spaceUnit']), mq, false),\n      spaceRatioCustom = getSpaceRatioCustom(spacing['customSpaceRatio']); // var srList = getSpacingValues(Object.values(spacing['spaceRatio']), spaceUnit, mq, spaceRatioCustom),\n  // this will return only the list of the multiplier (not including the --space-unit)\n\n  var srList = getSpacingMultiplier(Object.values(spacing['spaceRatio']), mq, spaceRatioCustom),\n      paddingVariable = srList[getValidResponsiveValue(Object.values(spacing['padding']), mq, false) - 1];\n  updateSpacingCssVariables(srList, paddingVariable, spaceUnit);\n}\n;\nfunction loadSpacingDefaultStyle(mq) {\n  var responsiveSpacing = '@media (min-width:64rem){:root{--space-unit:  1.25em;}}'; // var style = '<style id=\"spacing-style\">'+responsiveSpacing+'</style>';\n  // $('#spacing-style').remove();\n  // var baseStyle = $('#cd-base-part-1');\n  // $(style).insertAfter(baseStyle);\n  // load after component style -> this will need to overwrite the default spacing style\n  // $('head').append(style);\n\n  loadSpacingStyleTag(responsiveSpacing);\n}\n;\nfunction loadSpacingStyleTag(style) {\n  var style = '<style id=\"spacing-style\">' + style + '</style>';\n  $('#spacing-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\n;\nfunction setTypographyCssVariables(headingValues, bodyValues, typography, mq) {\n  //css variables\n  if (headingValues[2] && headingValues[2] != '') {\n    setCssVariable('--heading-line-height', headingValues[2]); // setElementCssVariable('text-component', '--heading-line-height', headingValues[2]);\n  }\n\n  if (bodyValues[2] && bodyValues[2] != '') {\n    setCssVariable('--body-line-height', bodyValues[2]); // setElementCssVariable('text-component', '--body-line-height', bodyValues[2]);\n  }\n\n  setCssVariable('--text-base-size', getValidResponsiveValue(Object.values(typography['baseSize']), mq, false));\n  setCssVariable('--text-scale-ratio', getValidResponsiveValue(Object.values(typography['scaleRatio']), mq, false));\n  setCssVariable('--text-unit', getTextUnit(typography));\n}\n;\nfunction getTypographyArray(obj) {\n  var arr = [];\n\n  for (var i = 0; i < 6; i++) {\n    arr.push(Object.values(obj[i]));\n  }\n\n  return arr;\n}\n;\nfunction getTypographyStyle(array, selector, typography) {\n  var style = '';\n\n  if (parseInt(array[0]) && parseInt(array[0]) != 0) {\n    var fontIds = Object.values(typography['fontFamilyIds']); // importantCss = selector == 'body' ? '!important' : '';\n\n    style = style + 'font-family: ' + typography['fontFamilies'][fontIds.indexOf(parseInt(array[0]))] + ';';\n  }\n\n  if (array[1] && array[1] != '') style = style + 'font-weight: ' + array[1] + ';';\n  return selector + '{' + style + '}';\n}\n; // export function updateSpacingCssVariables(list, padding, spaceUnit) {\n// \tsetCssVariable('--space-unit', spaceUnit);\n// \tsetCssVariable('--component-padding', padding);\n// \tfor(var i = 0; i < list.length; i++) {\n// \t\tsetCssVariable(paddingVariables[i], list[i]);\n// \t}\n// };\n\nfunction updateSpacingCssVariables(list, padding, spaceUnit) {\n  setCssVariable('--space-unit', spaceUnit);\n  var spacingVariables = '--component-padding:' + 'calc(' + padding + ' * var(--space-unit));';\n\n  for (var i = 0; i < list.length; i++) {\n    spacingVariables = spacingVariables + paddingVariables[i] + ': calc(' + list[i] + ' * var(--space-unit));';\n  }\n\n  spacingVariables = 'root, *{' + spacingVariables + '}';\n  loadSpacingStyleTag(spacingVariables);\n}\n;\nfunction getSpacingValues(spaceRatio, su, mq, spaceRatioCustom) {\n  var list = spaceRatioUnit[getValidResponsiveValue(spaceRatio, mq, false)];\n\n  if (list == '') {\n    //custom scale\n    list = getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio);\n  }\n\n  var spaceList = [];\n  var suArray = getValueUnit(su);\n\n  if (suArray[0] === false) {\n    suArray[0] = 1;\n    suArray[1] = 'em';\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    var updated = Math.round(list[i] * suArray[0] * 1000) / 1000;\n    spaceList.push(updated + suArray[1]);\n  }\n\n  return spaceList;\n}\n;\nfunction getSpacingMultiplier(spaceRatio, mq, spaceRatioCustom) {\n  var list = spaceRatioUnit[getValidResponsiveValue(spaceRatio, mq, false)];\n\n  if (list == '') {\n    //custom scale\n    list = getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio);\n  }\n\n  return list;\n}\n;\nfunction getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio) {\n  var array = [];\n\n  for (var i = 0; i < spaceRatioUnit[1].length; i++) {\n    array[i] = getSpacingValidResponsiveValueCustomRatio(spaceRatioCustom[i], mq, spaceRatio);\n  }\n\n  return array;\n}\n;\nfunction getSpacingValidResponsiveValueCustomRatio(spaceArray, index, spaceRatio) {\n  if (index == 0) return spaceArray[0];\n  var item = spaceArray[index];\n\n  if (item !== false && item !== '' && spaceRatio[index] == 6) {\n    //item defined and space ratio set to custom\n    return item;\n  } else {\n    return getSpacingValidResponsiveValueCustomRatio(spaceArray, index - 1, spaceRatio);\n  }\n}\n;\nfunction getSpaceRatioCustom(obj) {\n  var arr = [];\n\n  for (var i = 0; i < 11; i++) {\n    arr.push(Object.values(obj[i]));\n  }\n\n  return arr;\n}\n;\nfunction loadButtonsStyle(buttons) {\n  //convert obj to array;\n  var buttonsArray = getButtonsArrayStyle(buttons['style']);\n  var btnsList = ['btn', 'btn--primary', 'btn--subtle', 'btn--accent', 'btn--disabled', 'btn--sm', 'btn--md', 'btn--lg'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      code = '';\n\n  for (var i = 0; i < btnsList.length; i++) {\n    code = code + buttonsCodeStyle(buttonsArray[btnsList[i]], btnsList[i], statusList, statusPriorityList, false, true);\n  } // get code for btn--icon\n\n\n  var btnIconCode = buttonIconCodeStyle(buttonsArray['btn']); // get code for button variables\n\n  var btnVariables = buttonVariables(buttonsArray);\n  loadButtonsStyleTag(btnVariables + code + btnIconCode);\n}\n;\nfunction loadButtonsStyleStyleGuide(buttons) {\n  // buttonsArray = buttons['btnStyle']\n  if (!buttons['btnStyle']) return '';\n  var buttonsArray = buttons['btnStyle']; // button-icon class\n\n  var btnIconCode = '';\n\n  if (buttonsArray['btn']) {\n    btnIconCode = buttonIconCodeStyle(buttonsArray['btn']);\n  } // button CSS variables\n\n\n  var btnVariables = buttonVariables(buttonsArray); // buttons style\n\n  var btnsList = ['btn', 'btn--primary', 'btn--subtle', 'btn--accent', 'btn--disabled', 'btn--sm', 'btn--md', 'btn--lg'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      btnStyle = ''; // default btns style\n\n  for (var i = 0; i < btnsList.length; i++) {\n    btnStyle = btnStyle + buttonsCodeStyle(buttonsArray[btnsList[i]], btnsList[i], statusList, statusPriorityList, false, true);\n  } // custom btns code\n\n\n  if (buttons['customBtns'] && buttons['customBtns'].length > 0) {\n    for (var i = 0; i < buttons['customBtns'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(buttonsArray[buttons['customBtns'][i][1]], buttons['customBtns'][i][0], statusList, statusPriorityList, false, true);\n    }\n  }\n\n  return btnVariables + btnStyle + btnIconCode;\n}\n;\nfunction loadSharedStyleStyleGuide(shared_style) {\n  var statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      btnStyle = '';\n\n  if (shared_style['customStyles'] && shared_style['customStyles'].length > 0) {\n    for (var i = 0; i < shared_style['customStyles'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(shared_style.customStyleArray[shared_style['customStyles'][i][1]], escapeCSScharacters(shared_style['customStyles'][i][0]), statusList, statusPriorityList, false);\n    }\n  }\n\n  if (shared_style['customTextStyles'] && shared_style['customTextStyles'].length > 0) {\n    for (var i = 0; i < shared_style['customTextStyles'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(shared_style.customTextStyleArray[shared_style['customTextStyles'][i][1]], escapeCSScharacters(shared_style['customTextStyles'][i][0]), statusList, statusPriorityList, false);\n    }\n  }\n\n  return btnStyle;\n}\n;\nfunction escapeCSScharacters(label) {\n  label = label.replace(/\\:/g, '\\\\:');\n  label = label.replace(/\\%/g, '\\\\%');\n  label = label.replace(/\\//g, '\\\\/');\n  return label;\n}\n;\nfunction loadButtonsDefaultStyle(mq) {\n  var btnsStyle = ':root {--btn-font-size: 1em;--btn-padding-x: var(--space-sm); --btn-padding-y: var(--space-xxs); -btn-radius: 0.25em;}.btn {line-height: 1.2;box-shadow: var(--shadow-xs);-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;transition: .2s; will-change: transform;}.btn:hover {cursor: pointer;box-shadow: var(--shadow-sm);}.btn:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-contrast-higher-h), var(--color-contrast-higher-s), var(--color-contrast-higher-l), 0.15);outline: none;}.btn:active {transform: translateY(2px);}.btn--primary {background-color: var(--color-primary);color: var(--color-white)}.btn--primary:hover {background-color: var(--color-primary-dark);}.btn--primary:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-primary-h), var(--color-primary-s), var(--color-primary-l), 0.2);}.btn--subtle {background-color: var(--color-contrast-lower);color: var(--color-contrast-higher);}.btn--accent {background-color: var(--color-accent);color: var(--color-white);}.btn--accent:hover {background-color: var(--color-accent-dark);}.btn--accent:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-accent-h), var(--color-accent-s), var(--color-accent-l), 0.2);}.btn--disabled, .btn[disabled], .btn[readonly] {opacity: 0.6;cursor: not-allowed;}.btn--sm{font-size: 0.8em;}.btn--md{font-size: 1.2em;}.btn--lg{font-size: 1.4em;}';\n  loadButtonsStyleTag(btnsStyle);\n}\n;\nfunction buttonVariables(btnStyle) {\n  var sizes = [['btn', ''], ['btn--sm', '-sm'], ['btn--md', '-md'], ['btn--lg', '-lg']];\n  var string = '';\n\n  for (var i = 0; i < sizes.length; i++) {\n    if (btnStyle[sizes[i][0]] && btnStyle[sizes[i][0]]['none'] && btnStyle[sizes[i][0]]['none']['typography']) {\n      var fontBase = getButtonsFontSizeValue(btnStyle[sizes[i][0]]['none']['typography']);\n      if (fontBase != '') string = string + '--btn-font-size' + sizes[i][1] + ':' + fontBase + ';';\n    }\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['padding'] && btnStyle['btn']['none']['padding'][1]) {\n    string = string + '--btn-padding-x:' + getButtonsPaddingValue(btnStyle['btn']['none']['padding'][1]) + ';';\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['padding'] && btnStyle['btn']['none']['padding'][0]) {\n    string = string + '--btn-padding-y:' + getButtonsPaddingValue(btnStyle['btn']['none']['padding'][0]) + ';';\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['appearance']) {\n    if (btnStyle['btn']['none']['appearance'][2]) {\n      string = string + '--btn-radius:' + btnStyle['btn']['none']['appearance'][2] + ';';\n    } else {\n      string = string + '--btn-radius: 0em;';\n    }\n  }\n\n  return ':root{' + string + '}';\n}\n;\nfunction loadButtonsStyleTag(style) {\n  var styleEl = '<style id=\"buttons-style\">' + style + '</style>';\n  var baseStyle = $('#cd-base-part-1');\n  $(styleEl).insertAfter(baseStyle); // $('head').append(styleEl);\n}\n;\nfunction loadFormsStyle(forms) {\n  var formsArray = getButtonsArrayStyle(forms['style']);\n  var formsList = ['form-control', '[disabled]', '[aria-invalid]', 'legend', 'form-label'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      code = '';\n  code = resetFormsStyleComponents();\n\n  for (var i = 0; i < formsList.length; i++) {\n    code = code + buttonsCodeStyle(formsArray[formsList[i]], formsList[i], statusList, statusPriorityList, true);\n  } // get code for form variables\n\n\n  var btnVariables = formVariables(formsArray['form-control']);\n  loadFormsStyleTag(btnVariables + code);\n}\n;\nfunction loadFormsStyleStyleGuide(form) {\n  // form elements style\n  if (!form['btnStyle']) return '';\n  var formsArray = form['btnStyle'];\n  var formsList = ['form-control', '[disabled]', '[aria-invalid]', 'legend', 'form-label'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      formStyle = '';\n\n  for (var i = 0; i < formsList.length; i++) {\n    formStyle = formStyle + buttonsCodeStyle(formsArray[formsList[i]], formsList[i], statusList, statusPriorityList, true);\n  } // get code for form variables\n\n\n  var formCSSVariables = formVariables(formsArray['form-control']);\n  return formStyle + formCSSVariables;\n}\n;\nfunction formVariables(formStyle) {\n  var string = '';\n\n  if (formStyle && formStyle['none'] && formStyle['none']['padding'] && formStyle['none']['padding'][1]) {\n    string = string + '--form-control-padding-x:' + getButtonsPaddingValue(formStyle['none']['padding'][1]) + ';';\n  }\n\n  if (formStyle && formStyle['none'] && formStyle['none']['padding'] && formStyle['none']['padding'][0]) {\n    string = string + '--form-control-padding-y:' + getButtonsPaddingValue(formStyle['none']['padding'][0]) + ';';\n  }\n\n  if (formStyle && formStyle['none'] && formStyle['none']['appearance']) {\n    if (formStyle['none']['appearance'][2]) {\n      string = string + '--form-control-radius:' + formStyle['none']['appearance'][2] + ';';\n    } else {\n      string = string + '--form-control-radius: 0em;';\n    }\n  }\n\n  return ':root{' + string + '}';\n}\n;\nfunction loadFormsDefaultStyle(mq) {\n  var formStyle = ':root {--form-control-padding-x: var(--space-xs);--form-control-padding-y: var(--space-xxs);--form-control-radius: 0.25em;}.form-control {line-height: 1.2;background-color: var(--color-bg);border: 2px solid var(--color-contrast-low);transition: 0.2s;}.form-control:focus {border-color: var(--color-primary);box-shadow: 0px 0px 0px 2px hsla(var(--color-primary-h), var(--color-primary-s),var(--color-primary-l), 0.2);outline: none;}.form-control[aria-invalid=\"true\"], .form-control--error {border-color: var(--color-error);}.form-control[aria-invalid=\"true\"]:focus, .form-control--error:focus {border-color: var(--color-error);box-shadow: 0px 0px 0px 2px hsla(var(--color-error-h), var(--color-error-s),var(--color-error-l), 0.2);}.form-control--disabled, .form-control[disabled], .form-control[readonly] {cursor: not-allowed;}.form-label {font-size: var(--text-sm);}.form-legend{font-size: var(--text-md);}';\n  formStyle = formStyle + '.form-control::placeholder{opacity: 1;color: var(--color-contrast-medium);}';\n  loadFormsStyleTag(formStyle);\n}\n;\nfunction loadFormsStyleTag(style) {\n  var defaultStyle = '.form-error-msg {background-color: hsla(var(--color-error-h),var(--color-error-s), var(--color-error-l), 0.2);color: inherit;border-radius: var(--radius-md);padding: var(--space-xs);}';\n  var styleEl = '<style id=\"forms-style\">' + style + defaultStyle + '</style>';\n  var baseStyle = $('#cd-base-part-1');\n  $(styleEl).insertAfter(baseStyle); // $('head').append(styleEl);\n}\n;\nfunction boxShadowIsDefined(array) {\n  return array && array[0] && array[0][1] && array[0][1] != '';\n}\n;\nfunction getButtonsArrayStyle(obj) {\n  var array = [];\n\n  for (var property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      array[property] = [];\n\n      for (var subproperty in obj[property]) {\n        if (obj[property].hasOwnProperty(subproperty)) {\n          array[property][subproperty] = [];\n\n          for (var val in obj[property][subproperty]) {\n            if (obj[property][subproperty].hasOwnProperty(val)) {\n              if (val == 'border' || val == 'textShadow' || val == 'shadow' || val == 'transform' || val == 'transition') {\n                array[property][subproperty][val] = [];\n\n                for (var subVal in obj[property][subproperty][val]) {\n                  if (obj[property][subproperty][val].hasOwnProperty(subVal)) {\n                    array[property][subproperty][val][subVal] = Object.values(obj[property][subproperty][val][subVal]);\n                  }\n                }\n              } else {\n                array[property][subproperty][val] = Object.values(obj[property][subproperty][val]);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return array;\n}\n;\nfunction buttonsCodeStyle(style, btnLabel, statusList, statusPriorityList, isDemoReset, isButton) {\n  var string = '';\n  if (!style) return string;\n  var btnLabelmodified = btnLabel;\n\n  if (btnLabel == '[disabled]') {\n    btnLabelmodified = 'form-control--disabled, .form-control[disabled], .form-control[readonly]';\n  } else if (btnLabel == '[aria-invalid]') {\n    btnLabelmodified = 'form-control[aria-invalid=\"true\"], .form-control--error';\n  } else if (btnLabel == 'legend') {\n    btnLabelmodified = 'form-legend';\n  } else if (btnLabel == 'btn--disabled') {\n    btnLabelmodified = 'btn--disabled, .btn[disabled], .btn[readonly]';\n  }\n\n  var btnHasTransform = isButton && buttonsHasTransformStyle(style, statusPriorityList);\n\n  for (var i = 0; i < statusPriorityList.length; i++) {\n    var styleLabel = i == 0 ? '.' + btnLabelmodified : setStatusList('.' + btnLabelmodified, statusPriorityList[i]);\n    var newCode = getButtonCode(style[statusPriorityList[i]], '', true, btnLabel, statusPriorityList[i], isDemoReset, btnHasTransform && i == 0);\n    newCode = newCode.trim();\n\n    if (newCode.slice(-1) == '}') {\n      string = string + styleLabel + '{' + newCode;\n    } else {\n      string = string + styleLabel + '{' + newCode + '}';\n    }\n  }\n\n  string = string.replace(/\\n/g, '');\n  return string;\n}\n;\nfunction setStatusList(label, status) {\n  // e.g., if label = '.form-control[aria-invalid=\"true\"], .form-control--error' and status = ':focus', return '.form-control[aria-invalid=\"true\"]:focus, .form-control--error:focus'\n  var labelArray = label.split(',');\n\n  if (labelArray.length == 1) {\n    return label + status;\n  } else {\n    var newLabel = '';\n\n    for (var i = 0; i < labelArray.length; i++) {\n      if (i > 0) newLabel = newLabel + ',';\n      newLabel = newLabel + labelArray[i] + status;\n    }\n\n    return newLabel;\n  }\n}\n;\nfunction buttonIconCodeStyle(btnStyle) {\n  var code = '';\n\n  if (btnStyle && btnStyle['none'] && btnStyle['none']['padding'] && btnStyle['none']['padding'][0] && btnStyle['none']['padding'][0] != 0) {\n    code = '.btn--icon {padding: ' + spacingArray[btnStyle['none']['padding'][0]] + ';}';\n  }\n\n  return code;\n}\n;\nfunction buttonsHasTransformStyle(style, priorityList) {\n  var hasTransform = false;\n\n  for (var i = 1; i < priorityList.length; i++) {\n    if (!style[priorityList[i]]) return;\n    var transform = style[priorityList[i]]['transform'];\n\n    if (transform.length > 1 || transform.length > 0 && transform[0][0] != 0) {\n      hasTransform = true;\n      break;\n    }\n  }\n\n  return hasTransform;\n}\n;\nfunction getButtonCode(array, spacing, reset, btnLabel, btnStatus, isDemoReset, btnHasTransform) {\n  var string = '';\n\n  for (var property in array) {\n    switch (property) {\n      case 'appearance':\n        string = string + getButtonsAppearanceStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'padding':\n        string = string + getButtonsPaddingStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'margin':\n        string = string + getButtonsMarginStyle(array[property], spacing, reset);\n        break;\n\n      case 'border':\n        string = string + getButtonsBorderStyle(array[property], spacing, reset);\n        break;\n\n      case 'typography':\n        string = string + getButtonsTypographyStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'textShadow':\n        string = string + getButtonsTextShadowStyle(array[property], spacing, reset);\n        break;\n\n      case 'shadow':\n        string = string + getButtonsShadowStyle(array[property], spacing, reset, isDemoReset);\n        break;\n\n      case 'outline':\n        string = string + getButtonsOutlineStyle(array[property], spacing, reset);\n        break;\n\n      case 'transform':\n        string = string + getButtonsTransformStyle(array[property], spacing, reset);\n        break;\n\n      case 'transition':\n        string = string + getButtonsTransitionStyle(array[property], spacing, reset);\n        break;\n\n      case 'placeholder':\n        string = string + getButtonsPlaceholderStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n    }\n  }\n\n  if (btnHasTransform) string = string + '\\n' + spacing + 'will-change: transform;';\n  return string;\n}\n;\nfunction getButtonsAppearanceStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n\n  if (array[0]) {\n    if (array[0].indexOf('--gradient-') > -1) {\n      string = string + '\\n' + spacing + getGradientBgStyle(array[0]);\n    } else {\n      string = string + '\\n' + spacing + 'background: ' + getColorValue(array[0], reset) + ';';\n    }\n  }\n\n  if (array[1]) string = string + '\\n' + spacing + 'color: ' + getColorValue(array[1], reset) + ';';\n\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {// for copy code -> no need to add border-radius in code -> css variables already set\n  } else {\n    if (array[7] && array[7] > 0) {\n      string = string + '\\n' + spacing + 'border-radius: ' + borderRadiusValues[array[7]] + ';';\n    } else if (array[2] && array[2] != '') {\n      string = string + '\\n' + spacing + 'border-radius: ' + array[2] + ';';\n    }\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'opacity: ' + array[3] + ';';\n  if (array[4] && array[4] != 0) string = string + '\\n' + spacing + 'cursor: ' + getCursorValue(array[4]) + ';';\n  return string;\n}\n;\nfunction getGradientBgStyle(label) {\n  var angle = label.indexOf('-right') > -1 ? '90deg' : '180deg',\n      niceLabel = label.replace('-right', '').replace('-bottom', '');\n  return 'background: linear-gradient(' + angle + ', var(' + niceLabel + '-stop-1), var(' + niceLabel + '-stop-2));';\n}\n;\nfunction getButtonsPaddingStyle(array, spacing, reset, btnLabel, btnStatus) {\n  //Y - X\n  // for copy code -> no need to add padding in code -> css variables already set\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) return '';\n  var string = '';\n  if (array.length < 1) return string;\n\n  if (array[0] != 0 && array[1] != 0) {\n    string = string + '\\n' + spacing + 'padding: ' + spacingArray[array[0]] + ' ' + spacingArray[array[1]] + ';';\n  } else {\n    if (array[0] != 0) string = string + '\\n' + spacing + 'padding-top: ' + spacingArray[array[0]] + ';\\n' + spacing + 'padding-bottom: ' + spacingArray[array[0]] + ';';\n    if (array[1] != 0) string = string + '\\n' + spacing + 'padding-left: ' + spacingArray[array[1]] + ';\\n' + spacing + 'padding-right: ' + spacingArray[array[1]] + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsPaddingValue(value) {\n  // setting css variables for copy code only\n  var padding = '';\n  if (value != 0) padding = spacingArray[value];\n  return padding;\n}\n;\nfunction getButtonsMarginStyle(array, spacing, reset) {\n  //top left right bottom\n  var string = '';\n  if (array.length < 1) return string;\n\n  if (array[0] != 0 && array[1] != 0 && array[2] != 0 && array[3] != 0) {\n    string = string + '\\n' + spacing + 'margin: ' + spacingArray[array[0]] + ' ' + spacingArray[array[2]] + ' ' + spacingArray[array[3]] + ' ' + spacingArray[array[1]] + ';';\n  } else {\n    if (array[0] != 0) string = string + '\\n' + spacing + 'margin-top: ' + spacingArray[array[0]] + ';';\n    if (array[1] != 0) string = string + '\\n' + spacing + 'margin-left: ' + spacingArray[array[1]] + ';';\n    if (array[2] != 0) string = string + '\\n' + spacing + 'margin-right: ' + spacingArray[array[2]] + ';';\n    if (array[3] != 0) string = string + '\\n' + spacing + 'margin-bottom: ' + spacingArray[array[3]] + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsBorderStyle(array, spacing, reset) {\n  var string = '',\n      colorVariables = '';\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][3] == 0) string = string + '\\n' + spacing + getBorderType(array[i][1]) + ': none;';else if (array[i][2] == '') {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][0], '--color-border' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      string = string + '\\n' + spacing + getBorderType(array[i][1]) + '-color: ' + variable[1] + ';';\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][0], '--color-border' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      string = string + '\\n' + spacing + getBorderType(array[i][1]) + ': ' + array[i][2] + ' ' + getBorderStyle(array[i][3]) + ' ' + variable[1] + ';'; // string = string + '\\n'+spacing+getBorderType(array[i][1])+': '+array[i][2]+' '+getBorderStyle(array[i][3])+' '+getColorValue(array[i][0], reset)+';';\n    }\n  }\n\n  return colorVariables + string;\n}\n;\nfunction getButtonsTypographyStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n  if (array[0]) string = string + '\\n' + spacing + 'font-family: var(' + fontArray[btnFontIds.indexOf(array[0])] + ');';\n\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {// for copy code -> no need to add font-size in code -> css variables already set\n  } else {\n    if (array[1] && array[1] != 0) {\n      var fontSize = array[1] == 9 ? array[2] : textArrayValues[array[1]];\n\n      if (btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {\n        if (btnLabel == 'btn') string = string + '\\n' + spacing + '--btn-font-size: ' + fontSize + ';';else string = string + '\\n' + spacing + '--form-control-font-size: ' + fontSize + ';';\n      } else {\n        string = string + '\\n' + spacing + 'font-size: ' + fontSize + ';';\n      }\n    }\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'font-weight: ' + array[3] + ';';\n  if (array[4] && array[4] != 0) string = string + '\\n' + spacing + 'text-transform: ' + getTextTransform(array[4]) + ';';\n  if (array[5] && array[5] != 0) string = string + '\\n' + spacing + 'text-decoration: ' + getTextDecoration(array[5]) + ';';\n  if (btnLabel == 'btn' && btnStatus == 'none' && (!array[5] || array[5] == 0)) string = string + '\\n' + spacing + 'text-decoration: none;';\n  if (array[6] && array[6] != '') string = string + '\\n' + spacing + 'line-height: ' + array[6] + ';';\n  if (array[7] && array[7] != '') string = string + '\\n' + spacing + 'letter-spacing: ' + array[7] + ';';\n\n  if (array[8] && array[8] != 0) {\n    if (reset && reset === true) {\n      string = string + '\\n' + spacing + getFontSmoothing();\n    } else {\n      string = string + '\\n' + spacing + '@include fontSmooth;';\n    }\n  }\n\n  return string;\n}\n;\nfunction getButtonsTextShadowStyle(array, spacing, reset) {\n  var string = '',\n      colorVariables = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'text-shadow: none;';\n      set = false;\n      break;\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][1], '--color-text-shadow' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      if (i > 0) string = string + ', ';\n      string = string + array[i][2] + ' ' + variable[1];\n      set = true;\n    }\n  }\n\n  if (set) string = colorVariables + '\\n' + spacing + 'text-shadow: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsShadowStyle(array, spacing, reset, isDemoReset) {\n  var string = '',\n      colorVariables = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'box-shadow: none;';\n      if (isDemoReset) string = '\\n' + spacing + 'box-shadow: none !important;';\n      set = false;\n      break;\n    } else if (array[i][3] > 1) {\n      // custom shadow with framework variables\n      if (i > 0) string = string + ', ';\n      string = string + shadowVariables[array[i][3]];\n      set = true;\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][1], '--color-shadow' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      if (i > 0) string = string + ', ';\n      string = string + getBoxShadowType(array[i][3]) + array[i][2] + ' ' + variable[1];\n      set = true;\n    }\n  }\n\n  if (set) {\n    // isDemoReset -> when loading forms for components, make sure to add important to box shadow to make sure the custom shadow is showed\n    if (isDemoReset) string = string + ' !important';\n    string = colorVariables + '\\n' + spacing + 'box-shadow: ' + string + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsOutlineStyle(array, spacing, reset) {\n  var string = '';\n\n  if (array[1] && array[1] != 0) {\n    if (array[1] == 8) string = string + '\\n' + spacing + 'outline: none;';else string = string + '\\n' + spacing + 'outline: ' + array[2] + ' ' + getOutlineStyle(array[1]) + ' ' + getColorValue(array[0], reset) + ';';\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'outline-offset: ' + array[3] + ';';\n  return string;\n}\n;\nfunction getButtonsTransformStyle(array, spacing, reset) {\n  var string = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 0) {\n      string = '\\n' + spacing + 'transform: none;';\n      break;\n    } else {\n      if (i > 0) string = string + ' ';\n      string = string + getTransformProperty(array[i][0]) + '(' + array[i][1] + ')';\n      set = true;\n    }\n  }\n\n  if (set) string = '\\n' + spacing + 'transform: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsTransitionStyle(array, spacing, reset) {\n  var string = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'transition: none;';\n      break;\n    } else {\n      if (i > 0) string = string + ', ';\n      string = string + getTransitionProperty(array[i][0]) + ' ' + array[i][1] + 's ' + getTransitionEase(array[i][2]);\n      if (array[i][3] != '') string = string + ' ' + array[i][3] + 's';\n      set = true;\n    }\n  }\n\n  if (set) string = '\\n' + spacing + 'transition: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsPlaceholderStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n  if (array.length < 1 || !array[0] || array[0] == '') return '';\n  var style = '\\n' + spacing + '  color: ' + getColorValue(array[0], reset) + ';';\n\n  if (reset && reset === true) {\n    string = string + '}';\n    var selector = '.' + btnLabel;\n    if (btnStatus != 'none') selector = selector + btnStatus;\n    string = string + selector + '::placeholder {\\n' + spacing + '  opacity: 1;' + spacing + style + '\\n' + spacing + '}';\n  } else {\n    string = string + '\\n\\n' + spacing + '&::placeholder {\\n' + spacing + '  opacity: 1;' + spacing + style + '\\n' + spacing + '}';\n  }\n\n  return string;\n}\n;\nfunction getButtonsFontSizeValue(array) {\n  var fontSize = '';\n\n  if (array[1] && array[1] != 0) {\n    fontSize = array[1] == 9 ? array[2] : textArrayValues[array[1]];\n  }\n\n  return fontSize;\n}\n;\nfunction resetFormsStyleComponents() {\n  var style = '';\n  style = style + '.form-legend {color: inherit;line-height: normal;}';\n  return style;\n}\n;\nfunction getSuffixOpacity(value) {\n  if (value == 0) return '-a00';\n  if (value < 10) return '-a0' + value;\n  return '-a' + value;\n}\n;\nfunction getLuminance(hsl, iframe) {\n  if (hsl[0] == 0 && hsl[1] == 0 && hsl[2] == 1) return 1; // white\n\n  if (hsl[0] == 0 && hsl[1] == 0 && hsl[2] == 0) return 0; // black\n\n  var rgbSr = getRGBsrValues(hsl, iframe);\n  return 0.2126 * rgbSr[0] + 0.7152 * rgbSr[1] + 0.0722 * rgbSr[2];\n}\n;\nfunction getRGBsrValues(value, iframe) {\n  var rgb = getRGBValues(value, iframe);\n  var rSr = rgb[0] <= 0.03928 ? rgb[0] / 12.92 : Math.pow((rgb[0] + 0.055) / 1.055, 2.4);\n  var gSr = rgb[1] <= 0.03928 ? rgb[1] / 12.92 : Math.pow((rgb[1] + 0.055) / 1.055, 2.4);\n  var bSr = rgb[2] <= 0.03928 ? rgb[2] / 12.92 : Math.pow((rgb[2] + 0.055) / 1.055, 2.4);\n  return [rSr, gSr, bSr];\n}\n;\nfunction getRGBValues(hsl, iframe) {\n  var rgb = getRGBfromHSL(hsl);\n  return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255];\n}\n;\nfunction getRGBfromHSL(hsl) {\n  return chroma.hsl(hsl).rgb();\n}\n;\nvar loadedIframeCheck = false; //select text of a contentEditable element\n\njQuery.fn.selectText = function () {\n  var doc = document;\n  var element = this[0];\n\n  if (doc.body.createTextRange) {\n    var range = document.body.createTextRange();\n    range.moveToElementText(element);\n    range.select();\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    var range = document.createRange();\n    range.selectNodeContents(element);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n};\n\nfunction initFontList(typography) {\n  fontArray = [''];\n  btnFontIds = [0];\n\n  for (var property in typography['fontFamilyLabels']) {\n    if (typography['fontFamilyLabels'].hasOwnProperty(property)) {\n      fontArray.push(typography['fontFamilyLabels'][property]);\n      btnFontIds.push(typography['fontFamilyIds'][property]);\n    }\n  }\n}\n;\n\n(function () {\n  var demoContainer = $('.js-cd-demo-container'),\n      demoViewport = $('.js-cd-demo-viewport-size'); //when double-clicking on variables -> select all text\n\n  demoContainer.on('dblclick', '.js-css-variable-label', function (event) {\n    $(event.currentTarget).selectText();\n  }); //detect click on iframe and send to main to close popups\n\n  var iframeParent = window.parent;\n\n  if (!iframeParent) {\n    iframeParent = parent;\n  }\n\n  if (iframeParent) {\n    $(window).on('click', function () {\n      if (iframeParent.closeActivePopups != null) iframeParent.closeActivePopups();\n    }); // detect shortcut for search modal\n\n    window.addEventListener('keydown', function (event) {\n      if (event.keyCode && event.keyCode == 69 || event.key && event.key.toLowerCase() == 'e') {\n        if (event.ctrlKey || event.metaKey) iframeParent.openSiteSearch();\n      }\n    });\n  } //detect resize of the page and reset iframe height\n\n\n  var resizing = false,\n      resizingID = false,\n      mqLabels = ['xs', 'sm', 'md', 'lg', 'xl'];\n\n  if (demoViewport.length > 0) {\n    window.addEventListener(\"resize\", function (event) {\n      if (!resizing) {\n        resizing = true;\n        window.requestAnimationFrame(updateLabelSizeWindow);\n      }\n    });\n  }\n\n  $('.js-cd-demo').on('globalsUpdate', function () {\n    updateComponentGlobals();\n  });\n  $('.js-cd-demo').on('showComponent', function () {\n    var compScript = $('#comp-script');\n\n    if (compScript) {\n      var newScript = compScript.clone();\n      newScript = compScript.attr('src', compScript.attr('data-src'));\n      newScript.removeAttr('data-src');\n      newScript.removeAttr('id');\n      newScript.insertBefore(compScript);\n    }\n\n    setTimeout(function () {\n      if (iframeParent) iframeParent.revealComponent();\n    }, 300);\n  });\n\n  function updateLabelSizeWindow() {\n    var mq = getMq(),\n        sizes = getScreenSize();\n\n    if (resizing) {\n      demoContainer.trigger('windowResizing');\n      var mqLabelText = mq > 0 ? ' (' + mqLabels[mq - 1] + ')' : '';\n      demoViewport.text(sizes[0] + 'px x ' + sizes[1] + 'px' + mqLabelText).show();\n      if (resizingID) clearInterval(resizingID);\n      resizingID = setTimeout(function () {\n        demoViewport.hide();\n      }, 1000);\n    }\n\n    resizing = false;\n  }\n\n  ;\n\n  function updateComponentGlobals() {\n    //components -> if there's a project set, we should listen for changes in the viewport width as well\n    //typography and spacing are the only responsive globals\n    if (projectLoaded && (projectLoaded.typography || projectLoaded.spacing)) {\n      window.addEventListener(\"resize\", function (event) {\n        if (!resizing) {\n          resizing = true;\n          window.requestAnimationFrame(updateGlobals);\n        }\n      });\n    }\n  }\n\n  ;\n\n  function updateGlobals() {\n    var mq = getMq();\n\n    if (mq == MQ) {\n      resizing = false;\n      return;\n    }\n\n    MQ = mq;\n\n    if (projectLoaded.typography && projectLoaded.typography !== '') {\n      //typography was saved and need to be modified\n      loadTypographyStyle(JSON.parse(decodeSafeURIComponent(projectLoaded.typography)), false, mq);\n    }\n\n    if (projectLoaded.spacing && projectLoaded.spacing !== '') {\n      //typography was saved and need to be modified\n      loadSpacingStyle(JSON.parse(decodeSafeURIComponent(projectLoaded.spacing)), mq);\n    }\n\n    resizing = false;\n  }\n\n  ;\n  loadedIframeCheck = true;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/config-custom-azuriom/page.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/config-custom-azuriom/change-color.js");
/******/ 	
/******/ })()
;