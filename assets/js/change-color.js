/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/config-custom-azuriom/change-color.js":
/*!**************************************************!*\
  !*** ./js/config-custom-azuriom/change-color.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar jsColors = __webpack_require__(/*! ./colors */ \"./js/config-custom-azuriom/colors.js\");\n\nvar jsPage = __webpack_require__(/*! ./page */ \"./js/config-custom-azuriom/page.js\");\n\nvar PROJECT;\nvar IS_LOGGED = 1;\naxios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\nfunction onIframeLoad(page, cb) {\n  console.log('%c ========================================================================', 'color: #0a49c7');\n\n  if (page.loadedIframeCheck && page.loadedIframeCheck == true) {\n    console.log('%c Theme color load by Latshow: https://discord.gg/QF2AtgHJXY -', 'color: #FFF; font-size: 15px');\n    setTimeout(function () {\n      cb();\n    }, 500);\n  } else {\n    window.onload = function () {\n      console.log('%c Theme color load Latshow: https://discord.gg/QF2AtgHJXY --', 'color: #0a49c7');\n      cb();\n    };\n  }\n\n  console.log('%c ========================================================================', 'color: #0a49c7');\n}\n\n;\n\n(function () {\n  window.PROJECT;\n  var dataFrame = jsPage;\n  axios({\n    url: '/admin/themes/dofus-default/config',\n    method: 'GET',\n    dataType: 'json'\n  }).then(function (response) {\n    var getConfig = JSON.parse(response.data.split('<!DOCTYPE html>')[0]);\n\n    if (getConfig.project.color_themes_data && getConfig.project.color_themes_data !== '') {\n      PROJECT = {\n        colors: getConfig.project.color_themes_data\n      };\n    } else {\n      PROJECT = {\n        colors: ''\n      };\n    }\n\n    window.PROJECT = PROJECT;\n  });\n  PROJECT = window.PROJECT;\n  onIframeLoad(dataFrame, function () {\n    dataFrame.loadGlobalsStyle(PROJECT);\n  });\n  /**********************\n   Input Color component\n   ***********************/\n\n  this.ColorInput = function (element) {\n    this.element = element;\n    this.inputColorHex = $(this.element).find('.js-app-color-picker__hex').find('input');\n    this.inputPreview = $(this.element).find('.js-app-color-picker__color');\n    this.inputColor = this.inputPreview.find('input');\n    this.inputColorSupported = inputColorSupported();\n    this.appColorSidebar = $(this.element).parents('.js-app-sidebar--globals');\n    this.hexValue = this.inputColorHex.val();\n    this.initColorInput();\n  };\n\n  ColorInput.prototype.initColorInput = function () {\n    var self = this; //hide/show element\n\n    this.inputColor.toggle(this.inputColorSupported); //listen to events\n    //color input - change\n\n    this.inputColor.on(\"input\", function (event) {\n      self.updateColor(event.target.value, true, true);\n    });\n    this.inputColor.on(\"change\", function (event) {\n      self.updateColor(event.target.value, true, true);\n    }); // text input - change -> hex\n\n    this.inputColorHex.on('focusout', function () {\n      if (self.hexValue == self.inputColorHex.val()) return;\n      self.updateColor($(this).val(), false, true);\n    });\n    this.inputColorHex.on('keyup', function (event) {\n      if (event.key === \"Enter\" && self.hexValue != self.inputColorHex.val()) {\n        self.updateColor($(this).val(), false, true);\n      }\n    });\n    $(this.element).on('update-picker', function (event, value) {\n      self.updateColor(chroma.hsl(value).hex(), false, false);\n    }); //this is triggered only by the contrast section in the colors global\n\n    $(this.element).on('update-contrast-picker', function (event, value1, value2) {\n      if ($(self.element).parents('.js-app-editor-section__bg-color-picker').length > 0) {\n        self.updateColor(chroma.hsl(value1).hex(), false, false);\n      } else if ($(self.element).parents('.js-app-editor-section__hc-color-picker').length > 0) {\n        self.updateColor(chroma.hsl(value2).hex(), false, false);\n      }\n    });\n  };\n\n  ColorInput.prototype.updateColor = function (color, bool, emitEvent) {\n    //first -> make sure no ; are inserted\n    color = color.replace(';', '');\n    var self = this;\n\n    if (color.indexOf('(') < 0 && color.indexOf('#') < 0) {\n      this.inputPreview.css('background-color', '#' + color);\n    } else {\n      this.inputPreview.css('background-color', color);\n    }\n\n    this.inputColorHex.val(color);\n    this.hexValue = color; //need to update the color preview next to the input element\n\n    if (!bool) {\n      this.inputColor.val(chroma(color).hex());\n    }\n\n    if (emitEvent && this.appColorSidebar.length > 0) {\n      this.appColorSidebar.trigger('color-picker-updated', [getHslFromHex(color), $(self.element)]);\n    }\n  };\n\n  function inputColorSupported() {\n    var colorInput = $('<input type=\"color\" value=\"!\" />')[0];\n    return colorInput.type === 'color' && colorInput.value !== '!';\n  }\n\n  ; //initialize the Modal objects\n\n  var colorInputs = document.getElementsByClassName('js-color-picker');\n\n  if (colorInputs.length > 0) {\n    for (var i = 0; i < colorInputs.length; i++) {\n      (function (i) {\n        new ColorInput(colorInputs[i]);\n      })(i);\n    }\n  }\n  /************************/\n\n  /* \tcolor selection popup */\n\n  /************************/\n\n\n  this.ColorSelection = function (element) {\n    this.element = element;\n    this.basicSwatches = $(this.element).find('.js-app-menu__color-swatches');\n    this.variationsSwatches = $(this.element).find('.js-app-menu__color-variations');\n    this.stateA = $(this.element).find('.js-app-menu__state-a');\n    this.stateB = $(this.element).find('.js-app-menu__state-b');\n    this.stateBCustomOpacity = this.stateB.find('.js-app-menu__color-custom-opacity');\n    this.customOpacityInput = this.stateBCustomOpacity.find('input');\n    this.primaryColors = []; //this is an array of 5 colors\n\n    this.accentColors = []; //this is an array of 5 colors\n\n    this.blackColors = []; //this is a color string\n\n    this.whiteColors = []; //this is a color string\n\n    this.contrastColors = []; //this is an array of 5 elements\n\n    this.warningColors = []; //this is an array of 5 elements\n\n    this.successColors = []; //this is an array of 5 elements\n\n    this.errorColors = []; //this is an array of 5 elements\n\n    this.opacities = [];\n    this.colorGroups = $('.js-app-editor-property__color-group'); //some default states\n\n    this.mainColorLabels = ['primary', 'accent', 'success', 'warning', 'error'];\n    this.mainColorVariationLabel = ['-lighter', '-light', '', '-dark', '-darker'];\n    this.customColorLabels = [];\n    this.contrastColorVariationLabel = ['-bg', '-contrast-lower', '-contrast-low', '-contrast-medium', '-contrast-high', '-contrast-higher'];\n    this.contrastVariations = getColorContrastPercentages();\n    this.gradientColorLabels = []; // this will have 'primary', 'secondary'\n\n    this.gradientColorIds = []; // this will have 'custom-0', 'custom-1'\n    // gradient sections\n\n    this.gradients = $(this.element).find('.js-app-menu__color-item--gradients');\n    this.gradientSwatches = this.gradients.find('.js-app-menu__color-swatch');\n    this.colorValues = []; //I'm going to pass this to the buttons object -> list of color values\n\n    this.loadPreset();\n    this.eventListener();\n  };\n\n  ColorSelection.prototype.loadPreset = function () {\n    //you should load this from the db\n    //for now just static\n    if (PROJECT && PROJECT.colors) {\n      this.initColorsFromProject();\n    } else {\n      this.initColors();\n    }\n\n    this.initColorValues();\n    this.initUiColors();\n  };\n\n  ColorSelection.prototype.initColors = function () {\n    this.primaryColors = getDefaultMainColorVariation('primary');\n    this.accentColors = getDefaultMainColorVariation('accent');\n    this.warningColors = getDefaultMainColorVariation('warning');\n    this.successColors = getDefaultMainColorVariation('success');\n    this.errorColors = getDefaultMainColorVariation('error');\n    this.blackColors = [getHslFromHex('#1c1c21')];\n    this.whiteColors = [getHslFromHex('#ffffff')];\n    this.contrastColors = getContrastVariation('#35373b', '#FFFFFF', this.contrastVariations);\n  };\n\n  ColorSelection.prototype.initColorsFromProject = function () {\n    var colors = JSON.parse(PROJECT.colors);\n    this.mainColorLabels = Object.values(colors['mainColorLabels']);\n    if (colors['customColorLabels']) this.customColorLabels = Object.values(colors['customColorLabels']);\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      var obj = colors[this.mainColorLabels[i]];\n      if (!this[this.mainColorLabels[i] + 'Colors']) this[this.mainColorLabels[i] + 'Colors'] = [];\n\n      for (var j = 0; j < 5; j++) {\n        this[this.mainColorLabels[i] + 'Colors'].push(Object.values(obj[0][j]));\n      }\n    }\n\n    for (var i = 0; i < 3; i++) {\n      if (colors['blackColors'][0][i]) this.blackColors.push(Object.values(colors['blackColors'][0][i]));\n      if (colors['whiteColors'][0][i]) this.whiteColors.push(Object.values(colors['whiteColors'][0][i]));\n    }\n\n    for (var i = 0; i < 6; i++) {\n      this.contrastColors.push(Object.values(colors['contrastColors'][0][i]));\n    } // init gradient colors\n\n\n    if (colors['gradientColorLabels']) this.gradientColorLabels = Object.values(colors['gradientColorLabels']);\n    if (colors['gradientColorIds']) this.gradientColorIds = Object.values(colors['gradientColorIds']);\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      var obj = colors[this.gradientColorIds[i] + 'Gradients'];\n      this[this.gradientColorIds[i] + 'Gradients'] = [];\n\n      for (var j = 0; j < 2; j++) {\n        this[this.gradientColorIds[i] + 'Gradients'].push(Object.values(obj[0][j]));\n      }\n    }\n  };\n\n  ColorSelection.prototype.initColorValues = function () {\n    this.colorValues['not-specified'] = '';\n    this.colorValues['transparent'] = 'transparent';\n    this.colorValues['inherit'] = 'inherit'; //main + custom colors\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      for (var j = 0; j < this.mainColorVariationLabel.length; j++) {\n        this.colorValues['--color-' + this.mainColorLabels[i] + this.mainColorVariationLabel[j]] = getHslaFromHsl(this[this.mainColorLabels[i] + 'Colors'][j], 1);\n      }\n    } //black\n\n\n    for (var i = 0; i < this.blackColors.length; i++) {\n      this.colorValues['--color-black' + this.mainColorVariationLabel[2 - i]] = getHslaFromHsl(this.blackColors[i], 1);\n    } //white\n\n\n    for (var i = 0; i < this.whiteColors.length; i++) {\n      this.colorValues['--color-white' + this.mainColorVariationLabel[2 + i]] = getHslaFromHsl(this.whiteColors[i], 1);\n    } //contrasts\n\n\n    for (var i = 0; i < this.contrastColorVariationLabel.length; i++) {\n      this.colorValues['--color' + this.contrastColorVariationLabel[i]] = getHslaFromHsl(this.contrastColors[i], 1);\n    } // gradients\n\n\n    for (var i = 0; i < this.gradientColorLabels.length; i++) {\n      this.colorValues['--gradient-' + this.gradientColorLabels[i] + '-stop-1'] = getHslaFromHsl(this[this.gradientColorIds[i] + 'Gradients'][0], 1);\n      this.colorValues['--gradient-' + this.gradientColorLabels[i] + '-stop-2'] = getHslaFromHsl(this[this.gradientColorIds[i] + 'Gradients'][1], 1);\n    }\n  };\n\n  ColorSelection.prototype.initUiColors = function () {\n    this.initMainSwatches();\n    this.initBWSwatches();\n    this.initContrastSwatches();\n    this.initGradientSwatches();\n  };\n\n  ColorSelection.prototype.initMainSwatches = function () {\n    var mainSwatch = this.basicSwatches.filter('[data-colors=\"main\"]'),\n        children = mainSwatch.children('li');\n\n    for (var i = 0; i < 2; i++) {\n      children.eq(i).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + this.mainColorLabels[i]] + ';').attr('data-item', '--color-' + this.mainColorLabels[i]);\n    }\n\n    var clonesText = this.initCustomColorSwatches(children.eq(0), false);\n    mainSwatch.append(clonesText);\n    var feedbackSwatch = this.basicSwatches.filter('[data-colors=\"feedback\"]'),\n        children = feedbackSwatch.children('li');\n\n    for (var i = 0; i < 3; i++) {\n      var j = 2;\n      if (this.mainColorLabels[i + 2] == 'success') j = 0;\n      if (this.mainColorLabels[i + 2] == 'warning') j = 1;\n      children.eq(j).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + this.mainColorLabels[i + 2]] + ';').attr('data-item', '--color-' + this.mainColorLabels[i + 2]);\n    }\n\n    var feedbackCloneText = this.initCustomColorSwatches(children.eq(0), true);\n    feedbackSwatch.append(feedbackCloneText);\n  };\n\n  ColorSelection.prototype.initCustomColorSwatches = function (item, isFeedback) {\n    var clonesText = '';\n\n    if (this.mainColorLabels.length > 5) {\n      var clone = item.clone().removeClass('app-menu__color-preview--selected');\n\n      for (var i = 5; i < this.mainColorLabels.length; i++) {\n        if (isFeedback && this.mainColorLabels[i].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[i].indexOf('custom-fdb') < 0) {\n          clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + this.mainColorLabels[i]] + ';').attr('data-item', '--color-' + this.mainColorLabels[i]);\n          clone.children('.js-app-menu__color-tooltip').text(this.customColorLabels[i - 5]);\n          clonesText = clonesText + clone[0].outerHTML;\n        }\n      }\n    }\n\n    return clonesText;\n  };\n\n  ColorSelection.prototype.initBWSwatches = function () {\n    var bwSwatch = this.basicSwatches.filter('[data-colors=\"b&w\"]'),\n        children = bwSwatch.children('li');\n    children.eq(0).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-black'] + ';').attr('data-item', '--color-black');\n    children.eq(1).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-white'] + ';').attr('data-item', '--color-white');\n  };\n\n  ColorSelection.prototype.initContrastSwatches = function () {\n    var contrastSwatch = this.basicSwatches.filter('[data-colors=\"contrast\"]'),\n        children = contrastSwatch.children('li');\n\n    for (var i = 0; i < this.contrastColorVariationLabel.length; i++) {\n      children.eq(i).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color' + this.contrastColorVariationLabel[i]] + ';').attr('data-item', '--color' + this.contrastColorVariationLabel[i]);\n    }\n  };\n\n  ColorSelection.prototype.initGradientSwatches = function () {\n    var html = '';\n\n    for (var i = 0; i < this.gradientColorLabels.length; i++) {\n      for (var j = 0; j < 2; j++) {\n        var direction = j == 0 ? 'right' : 'bottom';\n        var swatch = this.gradientSwatches.eq(j).clone().removeClass('is-hidden');\n        swatch.find('.js-app-menu__color-tooltip').text('--gradient-' + this.gradientColorLabels[i] + ' (' + direction + ')');\n        swatch.find('.js-app-menu__color-preview').attr('style', getGradientsBgColor(this.gradientColorLabels[i], this.colorValues, j)).attr('data-item', '--gradient-' + this.gradientColorLabels[i] + '-' + direction);\n        html = html + swatch[0].outerHTML;\n      }\n    }\n\n    this.gradients.find('.js-app-menu__color-swatches').html(html);\n  };\n\n  ColorSelection.prototype.eventListener = function () {\n    var self = this; //listen to click on color-preview -> also need to show correct color selection\n\n    $(self.element).on('open-color-selector', function (event, target) {\n      // toggle gradients visibility\n      self.gradients.toggleClass('is-hidden', !(target.hasClass('js-app-editor-color-preview--bg') && self.gradientColorLabels.length > 0));\n\n      if (!$(self.element).hasClass('app-menu--is-hidden')) {// self.checkOpacity(false); //click on input when another one was open\n      }\n\n      var top = target.offset().top + 30;\n      if (top + 300 > $(window).height()) top = $(window).height() - 300;\n      $(self.element).removeClass('app-menu--is-hidden').css('top', top);\n      self.selectInitialColor(target.attr('style').replace('background-color', '').replace(';', '').replace(':', '').trim(), target);\n    }); //switch from state b to state a\n\n    self.stateB.on('click', '.js-app-menu', function (event) {\n      $(self.element).removeClass('app-menu--state-b');\n    }); //listen to selection of color in popup - state a\n\n    self.stateA.on('click', '.js-app-menu__color-preview', function (event) {\n      var isSelected = $(event.target).hasClass('app-menu__color-preview--selected');\n      self.clickOnColorSectionA($(event.target), isSelected, isSelected);\n    }); //listen to selection of color in popup - state b - variations\n\n    self.variationsSwatches.on('click', '.js-app-menu__color-preview', function (event) {\n      self.selectNewColor($(event.target), $(event.target).hasClass('app-menu__color-preview--selected'), true);\n    }); //listen to focusout -> close popup\n\n    $(self.element).on('close-color-selection', function (event) {\n      // \t//check if opacity need to be added\n      if ($(self.element).hasClass('app-menu--is-hidden')) return;\n      $(self.element).addClass('app-menu--is-hidden'); // \tself.checkOpacity(false);\n    }); //listen to new opacity included - keydown to update bg/enter to add dot\n\n    checkEndTyping(self.customOpacityInput, function () {\n      // var percentage = parseInt(self.customOpacityInput.val().replace('%', '')),\n      // \topacityLabel = getOpacitySuffix(percentage),\n      var opacityLabel = self.getOpInputForSelection(),\n          mainColorLabel = self.stateB.find('.app-menu__color-preview--selected').attr('data-item'),\n          mainColor = mainColorLabel + opacityLabel;\n      var cssVariable = mainColor;\n\n      if (mainColorLabel.indexOf('custom-') > -1) {\n        cssVariable = self.stateB.find('.app-menu__color-preview--selected').next('.js-app-menu__color-tooltip').text() + opacityLabel;\n      } // $('.js-app-sidebar-editor--buttons').trigger('new-opacity-created', [cssVariable, getNewOpacity(self.colorValues[mainColorLabel], percentage)]);\n\n\n      $('.js-app-sidebar-editor--buttons').trigger('new-color-selection', [mainColor, true]);\n    });\n    this.customOpacityInput.on('focusout', function () {\n      var opacityValue = self.customOpacityInput.val(),\n          resetOpacity = getPercentageFormat(opacityValue);\n      if (opacityValue != resetOpacity) self.customOpacityInput.val(resetOpacity);\n    });\n  }; //click on preview in stata a of popup, used when loading initial color as well\n\n\n  ColorSelection.prototype.clickOnColorSectionA = function (target, isSelected, isStateBSet) {\n    var section = target.parents('.js-app-menu__color-swatches').eq(0).attr('data-colors');\n    this.stateA.find('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');\n    target.addClass('app-menu__color-preview--selected');\n\n    if (!isSelected) {\n      // need to get opacity values as well\n      var opacity = this.getOpInputForSelection();\n      var color = target.attr('data-item');\n      if (color.indexOf('--gradient-') > -1) opacity = '';\n      this.sendColorSelection(color + opacity);\n    }\n\n    if (section == \"default\" || section == \"gradients\") {\n      $(this.element).removeClass('app-menu--state-b');\n      this.stateB.find('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');\n      return;\n    }\n\n    $(this.element).addClass('app-menu--state-b');\n    this.showStateB(target, section, isStateBSet);\n  };\n\n  ColorSelection.prototype.selectNewColor = function (target, isSelcted, sendColorSelection) {\n    if (isSelcted) return;\n    target.addClass('app-menu__color-preview--selected').parent().siblings().children('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');\n\n    if (sendColorSelection) {\n      var opacity = this.getOpInputForSelection();\n      var color = target.attr('data-item');\n      if (color.indexOf('--gradient-') > -1) opacity = '';\n      this.sendColorSelection(color + opacity);\n    }\n  };\n\n  ColorSelection.prototype.getOpInputForSelection = function () {\n    return getOpInputForSelection(this.customOpacityInput.val());\n  };\n\n  ColorSelection.prototype.selectInitialColor = function (color, target) {\n    var states = [false, false, false],\n        stateAColor,\n        stateBColor = false,\n        stateCColor = false;\n\n    if (color == 'undefined') {\n      stateAColor = this.stateA.find('.js-app-menu__color-preview').eq(0);\n    } else {\n      var colorName = target.attr('data-color-lb').split('-');\n      states = this.getAllStatesColor(colorName);\n      stateAColor = this.stateA.find('[data-item=\"' + states[0] + '\"]');\n    }\n\n    this.clickOnColorSectionA(stateAColor, true, false);\n    stateBColor = states[1] ? this.stateB.find('[data-item=\"' + states[1] + '\"]') : false; //trigger click on stateBcolor -> without sending update color\n\n    if (stateBColor) this.selectNewColor(stateBColor, false, false); //select opacity element\n\n    states[2] ? this.customOpacityInput.val(states[2].slice(-2) + '%') : this.customOpacityInput.val('100%');\n  };\n\n  ColorSelection.prototype.getAllStatesColor = function (color) {\n    var itemAName, itemBName, itemCName;\n\n    if (color[2] && color[2] == 'gradient') {\n      itemAName = '--gradient-' + color[3] + '-' + color[4];\n      return [itemAName, false, false];\n    }\n\n    if (color[3] && (color[3] == 'black' || color[3] == 'white')) {\n      itemAName = '--color-' + color[3];\n      nextItems = this.getStateBCColor(itemAName, color, 4);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && (color[3] == 'primary' || color[3] == 'accent' || color[3] == 'success' || color[3] == 'error' || color[3] == 'info' || color[3] == 'warning')) {\n      itemAName = '--color-' + color[3];\n      nextItems = this.getStateBCColor(itemAName, color, 4);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && color[3] == 'custom' && color[4] == 'fdb') {\n      itemAName = '--color-' + color[3] + '-' + color[4] + '-' + color[5];\n      nextItems = this.getStateBCColor(itemAName, color, 6);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && color[3] == 'custom') {\n      itemAName = '--color-' + color[3] + '-' + color[4];\n      nextItems = this.getStateBCColor(itemAName, color, 5);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && color[3] == 'bg') {\n      itemAName = '--color-bg';\n      itemBName = itemAName;\n      itemCName = color[4] ? itemBName + '-' + color[4] : false;\n    } else if (color[3] && color[3] == 'contrast') {\n      itemAName = '--color-' + color[3] + '-' + color[4];\n      itemBName = itemAName;\n      itemCName = color[5] ? itemBName + '-' + color[5] : false;\n    } else {\n      itemAName = color[0];\n    }\n\n    return [itemAName, itemBName, itemCName];\n  };\n\n  ColorSelection.prototype.getStateBCColor = function (itemAName, color, index) {\n    var itemBName, itemCName;\n\n    if (color[index] && (color[index] == 'light' || color[index] == 'lighter' || color[index] == 'dark' || color[index] == 'darker')) {\n      itemBName = itemAName + '-' + color[index];\n      itemCName = color[index + 1] ? itemBName + '-' + color[index + 1] : false;\n    } else {\n      itemBName = itemAName;\n      itemCName = color[index] ? itemBName + '-' + color[index] : false;\n    }\n\n    return [itemBName, itemCName];\n  };\n\n  ColorSelection.prototype.sendColorSelection = function (label) {\n    var sidebar = $('.js-app-sidebar-editor--buttons');\n\n    if (sidebar.length == 0) {\n      sidebar = $('.js-app-sidebar-editor--shared-styles');\n    }\n\n    sidebar.trigger('new-color-selection', [label, true]);\n  };\n\n  ColorSelection.prototype.showStateB = function (target, section, selected) {\n    var self = this;\n    if (selected) return;\n    var label = target.next().text();\n\n    switch (section) {\n      case 'main':\n        self.getVariationsMain(label, target.attr('data-item'));\n        break;\n\n      case 'b&w':\n        self.getVariationsBW(label);\n        break;\n\n      case 'contrast':\n        self.getVariationsContrast(label);\n        break;\n\n      default:\n        self.getVariationsMain(label, target.attr('data-item'));\n    }\n  };\n\n  ColorSelection.prototype.getVariationsMain = function (label, item) {\n    var value = item.replace('--color-', ''); //custom color\n\n    var clone = this.variationsSwatches.children('li').eq(0).clone(),\n        textClones = '';\n    clone.removeClass('app-menu__color-preview--selected').children('.js-app-menu__color-preview');\n\n    for (var i = 0; i < this.mainColorVariationLabel.length; i++) {\n      clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + value + this.mainColorVariationLabel[i]] + ';').attr('data-item', '--color-' + value + this.mainColorVariationLabel[i]).toggleClass('app-menu__color-preview--selected', i == 2);\n      clone.children('.js-app-menu__color-tooltip').text(label + this.mainColorVariationLabel[i]);\n      textClones = textClones + clone[0].outerHTML;\n    }\n\n    this.variationsSwatches.html(textClones);\n  };\n\n  ColorSelection.prototype.getVariationsBW = function (label) {\n    var clone = this.variationsSwatches.children('li').eq(0).clone(),\n        textClones = '';\n    clone.removeClass('app-menu__color-preview--selected').children('.js-app-menu__color-preview');\n\n    if (label == '--color-black') {\n      for (var i = 0; i < this.blackColors.length; i++) {\n        clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-black' + this.mainColorVariationLabel[2 - i]] + ';').attr('data-item', '--color-black' + this.mainColorVariationLabel[2 - i]).toggleClass('app-menu__color-preview--selected', i == 0);\n        clone.children('.js-app-menu__color-tooltip').text('--color-black' + this.mainColorVariationLabel[2 - i]);\n        textClones = textClones + clone[0].outerHTML;\n      }\n    } else {\n      for (var i = 0; i < this.whiteColors.length; i++) {\n        clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-white' + this.mainColorVariationLabel[2 + i]] + ';').attr('data-item', '--color-white' + this.mainColorVariationLabel[2 + i]).toggleClass('app-menu__color-preview--selected', i == 0);\n        clone.children('.js-app-menu__color-tooltip').text('--color-white' + this.mainColorVariationLabel[2 + i]);\n        textClones = textClones + clone[0].outerHTML;\n      }\n    }\n\n    this.variationsSwatches.html(textClones);\n  };\n\n  ColorSelection.prototype.getVariationsContrast = function (label) {\n    var clone = this.variationsSwatches.children('li').eq(0).clone();\n    clone.children('.js-app-menu__color-preview');\n    clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues[label] + ';').attr('data-item', label).addClass('app-menu__color-preview--selected');\n    clone.children('.js-app-menu__color-tooltip').text(label);\n    this.variationsSwatches.html(clone[0].outerHTML);\n  };\n\n  function getHslaFromHsl(hsl, opacity) {\n    return 'hsla(' + parseInt(hsl[0]) + ', ' + parseInt(hsl[1] * 100) + '%, ' + parseInt(hsl[2] * 100) + '%, ' + opacity + ')';\n  }\n\n  ;\n\n  function getNewOpacity(value, opacity) {\n    if (value) {\n      return value.replace('1)', (opacity / 100).toFixed(2) + ')');\n    }\n\n    return value;\n  }\n\n  ;\n\n  function sortNumber(a, b) {\n    return a - b;\n  }\n\n  ;\n\n  function checkEndTyping(input, cb) {\n    var typingTimer; //timer identifier\n\n    var doneTypingInterval = 400; //time in ms, 5 second for example\n    //on keyup, start the countdown\n\n    input.on('keyup', function () {\n      clearTimeout(typingTimer);\n      typingTimer = setTimeout(cb, doneTypingInterval);\n    }); //on keydown, clear the countdown\n\n    input.on('keydown', function () {\n      clearTimeout(typingTimer);\n    });\n  }\n\n  ;\n\n  function getOpInputForSelection(val) {\n    var opacity = '';\n    if (isNaN(parseInt(val))) return '';\n    if (parseInt(val) > 100) return '';\n    if (parseInt(val) != 100) opacity = '-a' + ('0' + val.replace('%', '')).slice(-2);\n    return opacity;\n  }\n\n  ;\n\n  function getGradientsBgColor(label, colorValues, direction) {\n    // label e.g. primary\n    // direction -> 0 right, 1 bottom\n    var angle = direction == 0 ? '90deg' : '180deg';\n    return 'background-image: linear-gradient(' + angle + ', ' + colorValues[\"--gradient-\" + label + \"-stop-1\"] + ', ' + colorValues[\"--gradient-\" + label + \"-stop-2\"] + ');';\n  }\n\n  ;\n  var colorSelection = document.getElementsByClassName('js-app-menu--color'),\n      colorSelectionObject;\n\n  if (colorSelection.length > 0) {\n    colorSelectionObject = new ColorSelection(colorSelection[0]);\n  }\n\n  function getPercentageFormat(value) {\n    var newVal = value;\n    if (isNaN(parseInt(newVal))) newVal = '100%';\n    if (parseInt(newVal) > 100) newVal = '100%';\n    if (newVal.indexOf('%') < 0) newVal = newVal + '%';\n    return newVal;\n  }\n\n  ;\n  /************************/\n\n  /* \tColors Interactions */\n\n  /************************/\n\n  this.Colors = function (element, bool) {\n    this.element = element; //set starting point\n\n    this.primaryColors = []; //this is an array of 5 colors\n\n    this.accentColors = []; //this is an array of 5 colors\n\n    this.downloadColors = []; //this is an array of 5 colors\n\n    this.blackColors = []; //this is a color string\n\n    this.whiteColors = []; //this is a color string\n\n    this.contrastColors = []; //this is an array of 5 elements\n\n    this.contrastPecentageColors = [];\n    this.infoColors = []; //this is an array of 5 elements\n\n    this.warningColors = []; //this is an array of 5 elements\n\n    this.successColors = []; //this is an array of 5 elements\n\n    this.errorColors = []; //this is an array of 5 elements\n\n    this.themes = [];\n    this.fontRendering = [];\n    this.colorLinks = []; //some default states\n    //this should include the custom colors, if user has already created them\n\n    this.mainColorLabels = ['primary', 'accent', 'download', 'info', 'warning', 'success', 'error'];\n    this.customColorLabels = [];\n    this.gradientColorLabels = []; // this will have 'primary', 'secondary'\n\n    this.gradientColorIds = []; // this will have 'custom-0', 'custom-1'\n\n    this.selectedColor = 'primary'; //store what color the user is interacting with (e.g., main, accent ...)\n\n    this.selectedTheme = 0; //used to get the color variations of black and white\n\n    this.blackVariations = [[0, 0], [0, 0.1], [0, 0.2]];\n    this.whiteVariations = [[0, 0], [0, -0.1], [0, -0.2]]; //contrast variations\n\n    this.contrastVariations = getColorContrastPercentages(); //store items\n\n    this.colorPicker = $(this.element).find('.js-color-picker'); //main colors\n\n    this.mainColorsSection = $(this.element).find('.js-app-editor--main-colors');\n    this.mainColorVariationsInput = $(this.element).find('.js-main-color-variation');\n    this.mainColorVariationsSidebar = $(this.element).find('.js-app-editor--main-colors'); //black&white\n\n    this.blackWhiteSection = $(this.element).find('.js-app-editor--black-white'); //contrast\n\n    this.contrastSection = $(this.element).find('.js-app-editor--contrast');\n    this.contrastInputs = this.contrastSection.find('.js-app-editor-section__contrast-inputs');\n    this.fontRenderingSection = this.contrastSection.find('.js-app-editor-section__font-rendering');\n    this.basicColorPicker = $(this.element).find('.js-app-editor-section__color-picker');\n    this.bgColorPicker = $(this.element).find('.js-app-editor-section__bg-color-picker');\n    this.hcColorPicker = $(this.element).find('.js-app-editor-section__hc-color-picker');\n    this.grColorPicker = $(this.element).find('.js-app-editor-section__gr-color-picker'); // i'll store also the subelements\n\n    this.grColorPickerItems = this.grColorPicker.find('.js-color-picker'); //check if the ui has been updated for that specific color variable\n\n    this.mainColorShown = '';\n    this.blackWhiteShown = '';\n    this.contrastShown = '';\n    this.gradientShown = '';\n    this.colorOpacities = []; //iframe\n\n    this.iframe = jsColors;\n    this.colorsLoaded = false;\n    if (bool) return; //check for the frame to be loaded\n\n    this.initFrame();\n    this.loadPreset();\n    this.eventListener(); //custom colors\n    //this.mainColorLabels = ['primary', 'accent', 'warning', 'success', 'error', 'custom-0']\n    //this.customColorLables = ['--color-secondary', ...]\n    //to access custom color -> this['custom-0Colors'][themeIndex]\n    //opacities -> this.colorOpacities['--color-custom-0'] = ['20', '40']\n  };\n\n  Colors.prototype.initFrame = function () {\n    var self = this; //listen for the onload event of the frame\n\n    onIframeLoad(jsPage, function () {\n      self.frameIsLoaded();\n    });\n  };\n\n  Colors.prototype.frameIsLoaded = function () {\n    var self = this;\n\n    if (self.colorsLoaded) {\n      loadProjectColorsForColors(this.iframe);\n      loadProjectTypographyForButtons(this.iframe);\n      loadProjectSpacingForButtons(this.iframe);\n      loadProjectButtonsForColors(this.iframe);\n      loadProjectFormsForColors(this.iframe);\n      self.updateColorsDemo(false);\n      self.updateColorLinks();\n    } else {\n      setTimeout(function () {\n        self.frameIsLoaded();\n      }, 100);\n    }\n  };\n\n  Colors.prototype.loadPreset = function () {\n    //this is the function that will retrieve saved data from the database\n    // if user has already created a color palette\n    // - load it - PROJECT.colors and PROJECT.color_opacities\n    // - update the Colors object\n    if (PROJECT && PROJECT.colors) {\n      this.initColorsFromProject(JSON.parse(PROJECT.colors));\n    } else {\n      //if not saved in the db\n      this.themes = ['Default'];\n      this.initColors(0);\n    }\n\n    this.setThemeColors();\n    this.colorsLoaded = true;\n  };\n\n  Colors.prototype.setThemeColors = function () {\n    var self = this; //this function should be used to update the sidebar inputs -> main colors/ contrast / black and white\n    //when a new team is selected (or even when the first team is loaded - if there are )\n    //reset the variables for ui update\n\n    this.mainColorShown = '';\n    this.blackWhiteShown = '';\n    this.contrastShown = '';\n    this.gradientShown = ''; //set colors now - should use one of the followings according to this.selectedColor\n\n    switch (self.selectedColor) {\n      case 'black':\n        self.setBlackWhite();\n        break;\n\n      case 'white':\n        self.setBlackWhite();\n        break;\n\n      case 'contrast':\n        self.setContrast();\n        break;\n\n      default:\n        if (self.selectedColor.indexOf('gr-custom') > -1) {\n          self.setGradient();\n        } else {\n          self.setMainColors();\n        }\n\n    }\n  };\n\n  Colors.prototype.initColors = function (index) {\n    //index -> theme index\n    //set main colors\n    // if you update this -> you'll need to update the same in the ColorSelection as well\n    this.primaryColors[index] = getDefaultMainColorVariation('primary');\n    this.accentColors[index] = getDefaultMainColorVariation('accent');\n    this.downloadColors[index] = getDefaultMainColorVariation('download');\n    this.infoColors[index] = getDefaultMainColorVariation('info');\n    this.warningColors[index] = getDefaultMainColorVariation('warning');\n    this.successColors[index] = getDefaultMainColorVariation('success');\n    this.errorColors[index] = getDefaultMainColorVariation('error'); //set black and white\n\n    this.blackColors[index] = [getHslFromHex('#1c1c21')];\n    this.whiteColors[index] = [getHslFromHex('#ffffff')]; //set contrast\n\n    this.contrastPecentageColors[index] = this.contrastVariations.slice(0);\n    this.contrastColors[index] = getContrastVariation('#35373b', '#FFFFFF', this.contrastPecentageColors[this.selectedTheme]);\n    this.fontRendering[index] = false;\n  };\n\n  Colors.prototype.initColorsFromProject = function (colors) {\n    // var colors = JSON.parse(PROJECT.colors);\n    this.themes = [];\n    this.mainColorLabels = [];\n    this.customColorLabels = [];\n    this.fontRendering = [];\n    this.themes = Object.values(colors['themes']);\n    this.mainColorLabels = Object.values(colors['mainColorLabels']);\n    if (colors['customColorLabels']) this.customColorLabels = Object.values(colors['customColorLabels']);\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      var obj = colors[this.mainColorLabels[i]];\n      this[this.mainColorLabels[i] + 'Colors'] = this.convColorToArr(obj);\n    }\n\n    this.blackColors = this.convColorToArr(colors['blackColors']);\n    this.whiteColors = this.convColorToArr(colors['whiteColors']);\n    this.contrastColors = this.convColorToArr(colors['contrastColors']);\n    this.contrastPecentageColors = this.convPerceToArr(colors['contrastPecentageColors']); // font smoothing\n\n    if (colors['fontRendering']) {\n      this.fontRendering = Object.values(colors['fontRendering']);\n    } else {\n      // if it was not defined -> set it to false\n      for (var i = 0; i < this.themes.length; i++) {\n        this.fontRendering[i] = false;\n      }\n    } // color links among themes\n\n\n    if (colors['colorLinks']) {\n      for (var color in colors['colorLinks']) {\n        if (colors['colorLinks'].hasOwnProperty(color)) {\n          this.colorLinks[color] = colors['colorLinks'][color];\n        }\n      }\n    } // init gradient colors\n\n\n    if (colors['gradientColorLabels']) this.gradientColorLabels = Object.values(colors['gradientColorLabels']);\n    if (colors['gradientColorIds']) this.gradientColorIds = Object.values(colors['gradientColorIds']);\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      var obj = colors[this.gradientColorIds[i] + 'Gradients'];\n      this[this.gradientColorIds[i] + 'Gradients'] = this.convColorToArr(obj);\n    }\n  };\n\n  Colors.prototype.convColorToArr = function (obj) {\n    var array = [];\n\n    for (var property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        var subArray = [];\n        var subObj = obj[property];\n\n        for (var property2 in subObj) {\n          if (subObj.hasOwnProperty(property2)) {\n            subArray.push(Object.values(subObj[property2]));\n          }\n        }\n\n        array.push(subArray);\n      }\n    }\n\n    return array;\n  };\n\n  Colors.prototype.convPerceToArr = function (obj) {\n    var array = [];\n\n    for (var property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        array.push(Object.values(obj[property]));\n      }\n    }\n\n    return array;\n  };\n\n  Colors.prototype.initThemeColors = function (index) {\n    //set new theme equal to default color theme\n    this.primaryColors[index] = this.primaryColors[0].slice(0);\n    this.accentColors[index] = this.accentColors[0].slice(0);\n    this.downloadColors[index] = this.downloadColors[0].slice(0);\n    this.infoColors[index] = this.infoColors[0].slice(0);\n    this.warningColors[index] = this.warningColors[0].slice(0);\n    this.successColors[index] = this.successColors[0].slice(0);\n    this.errorColors[index] = this.errorColors[0].slice(0);\n    this.blackColors[index] = this.blackColors[0].slice(0);\n    this.whiteColors[index] = this.whiteColors[0].slice(0);\n    this.contrastPecentageColors[index] = this.contrastPecentageColors[0].slice(0);\n    this.contrastColors[index] = this.contrastColors[0].slice(0);\n    this.fontRendering[index] = false; //init custom colors if any\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      if (this.mainColorLabels[i].indexOf('custom-') > -1) {\n        this[this.mainColorLabels[i] + 'Colors'][index] = this[this.mainColorLabels[i] + 'Colors'][0].slice();\n      }\n    }\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      this[this.gradientColorIds[i] + 'Gradients'][index] = this[this.gradientColorIds[i] + 'Gradients'][0].slice();\n    }\n  };\n\n  Colors.prototype.setBtnColorCustomNiceLabels = function () {\n    this.iframe.setBtnColorCustomNiceLabels(this.mainColorLabels, this.customColorLabels);\n  };\n\n  Colors.prototype.setBtnGradientNiceLabels = function () {\n    this.iframe.setBtnGradientNiceLabels(this.gradientColorLabels);\n  };\n\n  Colors.prototype.eventListener = function () {\n    var self = this; //this event is triggered when one of the colors in the left sidebar is selected\n\n    $(this.element).on('content-selected', function (event, type, target, index) {\n      if (target.indexOf('gradient') > -1) {\n        self.selectNewColor(type, '--gradient-' + self.gradientColorIds[self.gradientColorLabels.indexOf(target.replace('--gradient-', ''))]);\n      } else {\n        self.selectNewColor(type, target);\n      }\n    }); //this is triggered when one of the inputs of the main color is updated\n\n    listenToParentInput($(this.mainColorVariationsSidebar), function (event) {\n      self.colorUpdated($(event.currentTarget), 'main');\n    }); //this is triggered when one of the inputs of the black/white color is updated\n\n    listenToParentInput(this.blackWhiteSection, function (event) {\n      self.colorUpdated($(event.currentTarget), 'bw');\n    }); //this is triggered when one of the inputs of the contrast color is updated\n\n    listenToParentInput(this.contrastInputs, function (event) {\n      self.contrastColorUpdated($(event.currentTarget));\n      self.updateColorsDemo(true, 'contrast');\n    }); // this is triggered when the font rendering option is changed\n\n    this.fontRenderingSection.on('change', function (event) {\n      self.updateFontRendering(event.target.value);\n      self.updateColorsDemo(true, 'fontRendering');\n    }); //this event is triggered when the color picker is updated\n\n    $(this.element).on('color-picker-updated', function (event, color, pickerElem) {\n      //new color has been selected\n      if (self.selectedColor.indexOf('gr-custom') > -1) {\n        self.setGradient(color, pickerElem);\n      } else if (self.mainColorLabels.indexOf(self.selectedColor) > -1) {\n        //check if we are changing a main color\n        self.setMainColors(color);\n      } else if (self.selectedColor == 'white' || self.selectedColor == 'black') {\n        self.setBlackWhite(color);\n      } else {\n        self.setContrast(color, pickerElem);\n      }\n\n      self.updateColorsDemo(true, self.selectedColor);\n    }); //this event is triggered when a new theme is added in the left sidebar\n\n    $(this.element).on('content-switch-added', function (event, type, title) {\n      if (type != 'colors') return;\n      self.themes.push(title);\n      self.selectedTheme = self.themes.length - 1;\n      self.initThemeColors(self.selectedTheme);\n      self.setThemeColors();\n      self.updateColorsDemo(true);\n    }); //this event is triggered when a new theme is selected in the left sidebar\n\n    $(this.element).on('content-switch-selected', function (event, type, index) {\n      if (type != 'colors') return;\n      self.selectedTheme = index; //if this is the first time (theme was already create and retrieved from the database)\n      // you should make sure the initial colors are already set\n\n      self.setThemeColors();\n      self.updateColorsDemo(false);\n    }); //this event is triggered when a theme is edited in the left sidebar\n\n    $(this.element).on('content-switch-edited', function (event, type, index, title) {\n      if (type != 'colors') return;\n      if (self.themes[index] != title && IS_LOGGED == '1') SaveAlert.yes();\n      self.themes[index] = title;\n    }); //this event is triggered when a theme is deleted in the left sidebar\n\n    $(this.element).on('content-switch-deleted', function (event, type, index, selected) {\n      if (type != 'colors') return;\n      self.removeTheme(type, index, selected);\n      self.updateColorsDemo(true);\n    }); //black&white events\n    //add a new black or white variation\n\n    this.blackWhiteSection.on('click', '.js-btn-create', function (event) {\n      self.createBlackWhiteVariation();\n      self.blackWhiteSection.children().eq(0).removeClass('app-editor-section__title--hide-body');\n      self.updateColorsDemo(true, self.selectedColor);\n    }); //remove a black or white variation\n\n    this.blackWhiteSection.on('click', '.js-btn-delete', function (event) {\n      self.deleteBlackWhiteVariation($(event.currentTarget).parents('.js-app-editor__color-bw').index());\n      self.updateColorsDemo(true, self.selectedColor);\n    }); //custom colors and gradients\n    //a new custom color has been created\n\n    $(this.element).on('custom-content-added', function (event, type, title, customLabel) {\n      if (type != 'colors') return;\n      var isGradient = customLabel.indexOf('gradient') > -1;\n\n      if (isGradient) {\n        var colorCustomLabel = customLabel.replace('#gradient-', ''); //create this new color for each theme\n\n        self[colorCustomLabel + 'Gradients'] = [];\n        var gradientValue = self.getInitialGradient();\n\n        for (var i = 0; i < self.themes.length; i++) {\n          self[colorCustomLabel + 'Gradients'][i] = gradientValue;\n        }\n\n        self.gradientColorLabels.push(title.replace('--gradient-', ''));\n        self.gradientColorIds.push(colorCustomLabel);\n        self.selectNewColor(type, '--gradient-' + colorCustomLabel);\n        self.updateColorsDemoNewCustom(self[colorCustomLabel + 'Gradients'][self.selectedTheme], title, colorCustomLabel);\n      } else {\n        var colorCustomLabel = customLabel.replace('#color-', ''); //create this new color for each theme\n\n        self[colorCustomLabel + 'Colors'] = [];\n\n        for (var i = 0; i < self.themes.length; i++) {\n          self[colorCustomLabel + 'Colors'][i] = self.primaryColors[0];\n        } //push the label to the main color labels\n\n\n        self.mainColorLabels.push(colorCustomLabel);\n        self.customColorLabels.push(title); //store labels somewhere\n\n        self.selectNewColor(type, '--color-' + colorCustomLabel);\n        self.updateColorsDemoNewCustom(self[colorCustomLabel + 'Colors'][self.selectedTheme], title, colorCustomLabel);\n      }\n    }); //a custom color name has been updated\n\n    $(this.element).on('custom-content-edited', function (event, type, index, title, section) {\n      if (type != 'colors') return;\n\n      if (section.indexOf('gradient') > -1) {\n        self.gradientColorLabels[self.gradientColorIds.indexOf(section.replace('#gradient-', ''))] = title.replace('--gradient-', '');\n      } else {\n        self.customColorLabels[self.mainColorLabels.indexOf(section.replace('#color-', '')) - 5] = title;\n      }\n\n      self.updateColorsDemoEditCustom(section, title);\n    }); //a custom color has been removed\n\n    $(this.element).on('custom-content-removed', function (event, type, index, labelId) {\n      if (type != 'colors') return;\n\n      if (labelId.indexOf('gradient') > -1) {\n        var label = labelId.replace('#gradient-', ''),\n            indexColor = self.gradientColorIds.indexOf(label);\n        self.gradientColorLabels.splice(indexColor, 1);\n        self.gradientColorIds.splice(indexColor, 1);\n        self[label + 'Gradients'] = [];\n        self.updateColorsDemoRemoveCustom('gr-' + label); // remove color from color link array\n\n        if (self.colorLinks['gr-' + label]) self.colorLinks['gr-' + label] = false;\n      } else {\n        var label = labelId.replace('#color-', ''),\n            indexColor = self.mainColorLabels.indexOf(label);\n        self.mainColorLabels.splice(indexColor, 1);\n        self.customColorLabels.splice(indexColor - 5, 1);\n        self[label + 'Colors'] = [];\n        self.updateColorsDemoRemoveCustom(label); // remove color from color link array\n\n        if (self.colorLinks[label]) self.colorLinks[label] = false;\n      }\n    }); // this event is triggered when the link button is clicked inside the color demo\n\n    $(this.element).on('updateColorLink', function (event, section, bool) {\n      if (section.indexOf('gradient') > -1) {\n        self.colorLinks[section.replace('#gradient-', 'gr-')] = bool; // e.g.self.colorLinks['gr-custom-0']\n      } else {\n        self.colorLinks[section.replace('#color-', '')] = bool;\n      }\n    });\n  };\n\n  Colors.prototype.getInitialGradient = function () {\n    var primary = this.primaryColors[0][2],\n        newHsl = primary[0] < 310 ? primary[0] + 50 : primary[0] - 50;\n    return [primary, [newHsl, primary[1], primary[2]]];\n  };\n\n  Colors.prototype.selectNewColor = function (type, target) {\n    if (type != 'colors') return;\n\n    if (target.indexOf('--color-black') > -1 || target.indexOf('--color-white') > -1) {\n      this.selectedColor = target.replace('--color-', '');\n      this.resetSidebarSections('black-white');\n      this.setBlackWhite();\n    } else if (target.indexOf('--color-') > -1) {\n      // this is a main color -> update it\n      this.selectedColor = target.replace('--color-', '');\n      this.resetSidebarSections('main');\n      this.setMainColors();\n    } else if (target.indexOf('--gradient-') > -1) {\n      this.selectedColor = target.replace('--gradient', 'gr'); // e.g., 'gr-custom-0'\n\n      this.resetSidebarSections('gradient');\n      this.setGradient();\n    } else {\n      // this is color contrast\n      this.selectedColor = 'contrast';\n      this.resetSidebarSections('contrast');\n      this.setContrast();\n    }\n  }; //TODO refacto class\n\n\n  Colors.prototype.resetSidebarSections = function (section) {\n    this.mainColorsSection.add(this.blackWhiteSection).add(this.contrastSection).add(this.basicColorPicker).add(this.bgColorPicker).add(this.hcColorPicker).add(this.grColorPicker).addClass('app-section--is-hidden');\n\n    switch (section) {\n      case 'black-white':\n        this.blackWhiteSection.add(this.basicColorPicker).removeClass('app-section--is-hidden');\n        break;\n\n      case 'contrast':\n        this.contrastSection.add(this.bgColorPicker).add(this.hcColorPicker).removeClass('app-section--is-hidden');\n        break;\n\n      case 'gradient':\n        this.grColorPicker.removeClass('app-section--is-hidden');\n        break;\n\n      default:\n        this.mainColorsSection.add(this.basicColorPicker).removeClass('app-section--is-hidden');\n    }\n  };\n\n  Colors.prototype.setMainColors = function (color) {\n    if (this.mainColorShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has not been set for this color yet\n      //or the color picker is being updated\n      this.mainColorShown = this.selectedColor;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        this.updateMultipleColorsInThemes(getMainColorVariation(color));\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; // this is used for main colors variation (primary/accent/secondary/warning/error/success)\n\n      for (var i = 0; i < 5; i++) {\n        this.setMainColor(colors[i], i);\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      this.colorPicker.trigger('update-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][2]]);\n    }\n  };\n\n  Colors.prototype.setBlackWhite = function (color) {\n    if (this.blackWhiteShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has ot been set for this color yet\n      this.blackWhiteShown = this.selectedColor;\n      var itemLength = this[this.selectedColor + 'Colors'][this.selectedTheme].length;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        this.updateMultipleColorsInThemes(this.getBlackWhiteVariation(color, itemLength)); // this[this.selectedColor+'Colors'][this.selectedTheme] = this.getBlackWhiteVariation(color, itemLength);\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; //first -> make sure there's the right number of inputs\n\n      this.checkBlackWhiteInputNumber(colors.length); // this is used for black/white colors variation\n\n      for (var i = 0; i < colors.length; i++) {\n        this.setBlackWhiteColor(colors[i], i);\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      //black and white -> main color is the first one\n      this.colorPicker.trigger('update-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][0]]);\n    }\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.updateMultipleColorsInThemes = function (value) {\n    if (this.colorLinks[this.selectedColor]) {\n      for (var i = 0; i < this.themes.length; i++) {\n        this[this.selectedColor + 'Colors'][i] = value;\n      }\n    } else {\n      this[this.selectedColor + 'Colors'][this.selectedTheme] = value;\n    }\n  };\n\n  Colors.prototype.setContrast = function (color, pickerElement) {\n    if (this.contrastShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has not been set for this color yet\n      //or the color picker is being updated\n      this.contrastShown = this.selectedColor;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        //first check if this is the bg or the hc color\n        var isBgColor = pickerElement.parents('.js-app-editor-section__bg-color-picker').length > 0;\n        var colorsScale = isBgColor ? [getHexFromHsl(color), getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][5])] : [getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][0]), getHexFromHsl(color)];\n        this[this.selectedColor + 'Colors'][this.selectedTheme] = getContrastVariation(colorsScale[0], colorsScale[1], this.contrastPecentageColors[this.selectedTheme]);\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; // this is used for contrast colors variation\n\n      for (var i = 0; i < 6; i++) {\n        this.setContrastColor(colors[i], this.contrastPecentageColors[this.selectedTheme][i], i);\n      }\n\n      this.updateFontRendering(false);\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      this.colorPicker.trigger('update-contrast-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][0], this[this.selectedColor + 'Colors'][this.selectedTheme][5]]);\n    }\n  };\n\n  Colors.prototype.setGradient = function (color, pickerElement) {\n    var gradientId = this.selectedColor.replace('gr-', '');\n\n    if (this.gradientShown.indexOf(gradientId) < 0 || color) {\n      //the ui has not been set for this color yet\n      this.gradientShown = gradientId;\n\n      if (color) {\n        var index = pickerElement.parents('.js-app-editor-section__gr-color-picker--stop-1').length > 0 ? 0 : 1;\n\n        if (this.colorLinks['gr-' + gradientId]) {\n          for (var i = 0; i < this.themes.length; i++) {\n            this[gradientId + 'Gradients'][i][index] = color;\n          }\n        } else {\n          this[gradientId + 'Gradients'][this.selectedTheme][index] = color;\n        }\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      //black and white -> main color is the first one\n      this.grColorPickerItems.eq(0).trigger('update-picker', [this[gradientId + 'Gradients'][this.selectedTheme][0]]);\n      this.grColorPickerItems.eq(1).trigger('update-picker', [this[gradientId + 'Gradients'][this.selectedTheme][1]]);\n    }\n  };\n\n  Colors.prototype.updateFontRendering = function (value) {\n    if (value) {\n      this.fontRendering[this.selectedTheme] = value;\n    }\n\n    !this.fontRendering[this.selectedTheme] ? this.fontRenderingSection.find('select').val(0) : this.fontRenderingSection.find('select').val(this.fontRendering[this.selectedTheme]);\n  };\n\n  Colors.prototype.checkBlackWhiteInputNumber = function (length) {\n    var wrappers = this.blackWhiteSection.find('.js-app-editor__color-bw');\n    if (wrappers.length == length) return;\n\n    if (wrappers.length < length) {\n      this.createBlackWhiteInputs(Number(length - wrappers.length));\n    } else {\n      this.removeBlackWhiteInputs(Number(wrappers.length - length));\n    }\n  };\n\n  Colors.prototype.createBlackWhiteInputs = function (number) {\n    var input = this.blackWhiteSection.find('.js-app-editor__color-bw').eq(0),\n        append = '';\n\n    for (var i = 0; i < number; i++) {\n      var clone = input.clone();\n      clone.removeClass('app-editor__color-item--locked app-editor__color-item--labelled').addClass('app-editor__color-item--removable');\n      append = append + clone[0].outerHTML;\n    }\n\n    this.blackWhiteSection.children('.js-app-editor-section__body').append(append);\n    this.blackWhiteInputsResetLabelClass();\n  };\n\n  Colors.prototype.removeBlackWhiteInputs = function (number) {\n    var inputs = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        tot = inputs.length;\n\n    for (var i = 0; i < number; i++) {\n      var index = tot - i - 1;\n      inputs.eq(index).remove();\n    }\n\n    this.blackWhiteInputsResetLabelClass();\n  };\n\n  Colors.prototype.blackWhiteInputsResetLabelClass = function () {\n    var inputs = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        lastItem = inputs.length - 1;\n    inputs.removeClass('app-editor__color-item--labelled').eq(lastItem).addClass('app-editor__color-item--labelled');\n  };\n\n  Colors.prototype.colorUpdated = function (target, type) {\n    //get the index of the color\n    var colorWrapper = target.parents('.js-main-color-variation'),\n        index = Number(colorWrapper.attr('data-order')),\n        inputs = colorWrapper.find('.js-hsl-color-input');\n    if (type == 'bw') index = target.parents('.js-app-editor__color-bw').index(); //update the array of colors\n\n    if (this.colorLinks[this.selectedColor]) {\n      var colorItems = type == 'bw' ? target.parents('.js-app-editor--variations-wrapper').eq(0).find('.js-app-editor__color-bw') : target.parents('.js-app-editor--variations-wrapper').eq(0).find('.js-main-color-variation');\n      this.updateColorVariationsInThemes(colorItems);\n    } else {\n      this[this.selectedColor + 'Colors'][this.selectedTheme][index] = [Number(inputs.eq(0).val()), convertStringToHsl(inputs.eq(1).val()), convertStringToHsl(inputs.eq(2).val())];\n    } //update the color preview\n\n\n    if (type == 'bw') {\n      this.setBlackWhiteColor(this[this.selectedColor + 'Colors'][this.selectedTheme][index], index);\n      this.updateColorsDemo(true);\n    } else {\n      this.setMainColor(this[this.selectedColor + 'Colors'][this.selectedTheme][index], index);\n      this.updateColorsDemo(true);\n    }\n  };\n\n  Colors.prototype.updateColorVariationsInThemes = function (colors) {\n    for (var i = 0; i < colors.length; i++) {\n      var inputs = colors.eq(i).find('.js-hsl-color-input');\n      this.updateColorInThemes(inputs, i);\n    }\n  };\n\n  Colors.prototype.updateColorInThemes = function (inputs, index) {\n    var value = Number(inputs.eq(0).val()),\n        valueHSL1 = convertStringToHsl(inputs.eq(1).val()),\n        valueHSL2 = convertStringToHsl(inputs.eq(2).val());\n\n    for (var i = 0; i < this.themes.length; i++) {\n      this[this.selectedColor + 'Colors'][i][index] = [value, valueHSL1, valueHSL2];\n      this[this.selectedColor + 'Colors'][i][index] = [Number(value), Number(valueHSL1), Number(valueHSL2)];\n    }\n  };\n\n  Colors.prototype.contrastColorUpdated = function (target) {\n    var index = target.parents('.js-app-editor__contrast-item').index(),\n        value = parseInt(target.val().replace('%', ''));\n    value = value < 0 ? 0 : value;\n    value = value > 100 ? 100 : value;\n    this.newContrastColorScale(value, index);\n  };\n\n  Colors.prototype.getBlackWhiteVariation = function (hsl, length) {\n    var blackWhiteVariations = [];\n\n    for (var i = 0; i < length; i++) {\n      blackWhiteVariations.push([hsl[0], checkPercentage(hsl[1] + this[this.selectedColor + 'Variations'][i][0]), checkPercentage(hsl[2] + this[this.selectedColor + 'Variations'][i][1])]);\n    }\n\n    return blackWhiteVariations;\n  };\n\n  Colors.prototype.getBlackWhiteSingleVariation = function (hsl, index) {\n    return [hsl[0], checkPercentage(hsl[1] + this[this.selectedColor + 'Variations'][index][0]), checkPercentage(hsl[2] + this[this.selectedColor + 'Variations'][index][1])];\n  };\n\n  Colors.prototype.setMainColor = function (color, index) {\n    var hue = parseInt(color[0]),\n        sat = Math.round(color[1] * 100),\n        lig = Math.round(color[2] * 100);\n    var inputs = this.mainColorVariationsInput.eq(index).find('.js-hsl-color-input'),\n        preview = this.mainColorVariationsInput.eq(index).find('.js-color-preview');\n    inputs.eq(0).val(hue);\n    inputs.eq(1).val(sat);\n    inputs.eq(2).val(lig);\n    preview.css('background-color', 'hsl(' + hue + ', ' + sat + '%, ' + lig + '%)');\n  };\n\n  Colors.prototype.setBlackWhiteColor = function (color, index) {\n    //first need to check if input exists\n    var hue = parseInt(color[0]),\n        sat = Math.round(color[1] * 100),\n        lig = Math.round(color[2] * 100);\n    var inputWrapper = this.blackWhiteSection.find('.js-app-editor__color-bw').eq(index),\n        inputs = inputWrapper.find('input'),\n        preview = inputWrapper.find('.js-color-preview');\n    inputs.eq(0).val(checkHue(hue));\n    inputs.eq(1).val(sat);\n    inputs.eq(2).val(lig);\n    preview.css('background-color', 'hsl(' + hue + ', ' + sat + '%, ' + lig + '%)');\n  };\n\n  Colors.prototype.setContrastColor = function (color, percentage, index) {\n    var wrapper = this.contrastInputs.find('.js-app-editor__contrast-item').eq(index),\n        input = wrapper.find('input'),\n        preview = wrapper.find('.js-color-preview');\n    input.val(percentage);\n    preview.css('background-color', 'hsl(' + parseInt(color[0]) + ', ' + parseInt(color[1] * 100) + '%, ' + parseInt(color[2] * 100) + '%)');\n  };\n\n  Colors.prototype.createBlackWhiteVariation = function () {\n    //create new item and append it\n    var variations = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        tot = variations.length,\n        clone = variations.eq(0).clone();\n    clone.removeClass('app-editor__color-item--locked app-editor__color-item--labelled').addClass('app-editor__color-item--removable');\n    clone.find('input').removeAttr('disabled');\n    this.blackWhiteSection.children('.js-app-editor-section__body').append(clone); //get the color variarion\n\n    var color = this.getBlackWhiteSingleVariation(this[this.selectedColor + 'Colors'][this.selectedTheme][0], tot); //update the variable storing the variations\n\n    this[this.selectedColor + 'Colors'][this.selectedTheme].push(color); //update the color of the input and the preview\n\n    this.setBlackWhiteColor(color, tot); //reset the list with the proper label classes\n\n    this.blackWhiteInputsResetLabelClass(); //if two variation visible -> remove plus action\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.deleteBlackWhiteVariation = function (index) {\n    //remove item from dom\n    this.blackWhiteSection.find('.js-app-editor__color-bw').eq(index).remove(); //update object stored variables\n\n    this[this.selectedColor + 'Colors'][this.selectedTheme].splice(index, 1); //reset plus visibility\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.resetBWActionVisibility = function () {\n    var sectionTitle = this.blackWhiteSection.find('.app-editor-section__title');\n    this.blackWhiteSection.find('.js-app-editor__color-bw').length > 2 ? sectionTitle.removeClass('app-editor-section__title--create') : sectionTitle.addClass('app-editor-section__title--create');\n  };\n\n  Colors.prototype.newContrastColorScale = function (value, index) {\n    var wrapper = this.contrastInputs.find('.js-app-editor__contrast-item').eq(index),\n        input = wrapper.find('input'),\n        preview = wrapper.find('.js-color-preview');\n    var color0hex = getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][0]),\n        color5hex = getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][5]);\n    var scaleColors = chroma.bezier([color0hex, color5hex]).scale().colors(101);\n    this.contrastPecentageColors[this.selectedTheme][index] = value;\n    var color = scaleColors[value],\n        hsl = chroma(color).hsl(); //need to convert to hsl\n\n    this.contrastColors[this.selectedTheme][index] = [checkHue(hsl[0]), checkPercentage(hsl[1]), checkPercentage(hsl[2])];\n    input.val(value);\n    preview.css('background-color', color);\n  };\n\n  Colors.prototype.removeTheme = function (type, index, selected) {\n    //first -> remove theme from array of stored elements\n    this.themes.splice(index, 1);\n    this.primaryColors.splice(index, 1);\n    this.accentColors.splice(index, 1);\n    this.downloadColors.splice(index, 1);\n    this.infoColors.splice(index, 1);\n    this.warningColors.splice(index, 1);\n    this.successColors.splice(index, 1);\n    this.errorColors.splice(index, 1);\n    this.blackColors.splice(index, 1);\n    this.whiteColors.splice(index, 1);\n    this.contrastColors.splice(index, 1); //remove custom color as well\n\n    if (this.mainColorLabels.length > 5) {\n      for (var i = 5; i < this.mainColorLabels.length; i++) {\n        this[this.mainColorLabels[i] + 'Colors'].splice(index, 1);\n      }\n    } // remove custom gradients\n\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      this[this.gradientColorIds[i] + 'Gradients'].splice(index, 1);\n    } //if theme was selected -> select new theme\n\n\n    if (selected) {\n      this.selectedTheme = 0;\n      this.setThemeColors();\n    }\n  };\n\n  Colors.prototype.updateColorsDemo = function (bool, label) {\n    var index = this.selectedTheme; //getArray of custom colors\n\n    var customArray = [];\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      if (this.mainColorLabels[i].indexOf('custom-') > -1) {\n        //custom color -> push in array\n        customArray.push([this.mainColorLabels[i], this[this.mainColorLabels[i] + 'Colors'][index]]);\n      }\n    }\n\n    var gradientValues = [];\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      gradientValues.push(this[this.gradientColorIds[i] + 'Gradients'][index]);\n    }\n\n    this.iframe.updateIframeColors(this.primaryColors[index], this.accentColors[index], this.downloadColors[index], this.blackColors[index], this.whiteColors[index], this.successColors[index], this.errorColors[index], this.infoColors[index], this.warningColors[index], this.contrastColors[index], this.fontRendering[index], customArray, this.customColorLabels, this.gradientColorLabels, this.gradientColorIds, gradientValues, label);\n    if (IS_LOGGED == '1' && bool) SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorLinks = function () {\n    this.iframe.updateIframeColorLinks(this.colorLinks);\n  };\n\n  Colors.prototype.updateColorsDemoNewCustom = function (array, title, customLabel) {\n    this.iframe.updateIframeColorsNewColor(array, title, customLabel);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorsDemoRemoveCustom = function (customLabel) {\n    this.iframe.updateIframeColorsRemoveColor(customLabel);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorsDemoEditCustom = function (section, title) {\n    this.iframe.updateIframeColorsEditColor(section, title);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateCopyCode = function (code) {\n    var completeCode = '',\n        spacing = '';\n\n    for (var i = 0; i < this.themes.length; i++) {\n      if (i > 0) spacing = '  '; //start from default theme\n\n      var codeMain = this.createBlockForMainColors(i, spacing),\n          codeCustom = this.createBlockForCustomColors(i, spacing, false),\n          codeBW = this.createBlockForBWColors(i, spacing),\n          codeFeedback = this.createBlockForFeedbackColors(i, spacing),\n          codeFeedbackCustom = this.createBlockForCustomColors(i, spacing, true),\n          codeContrast = this.createBlockForContrastColors(i, spacing),\n          codeGradient = this.createBlockForGradients(i, spacing);\n      var codeFontRendering = this.createBlockForFontRendering(i, spacing);\n      var themeCode = codeMain + codeCustom + codeBW + codeFeedback + codeFeedbackCustom + codeContrast + codeGradient;\n\n      if (i == 0) {\n        //default theme\n        themeCode = ':root, [data-theme=\"default\"] {\\n' + themeCode + '}';\n        if (codeFontRendering != '') themeCode = themeCode + '\\n\\nbody, [data-theme=\"default\"] {\\n' + codeFontRendering + '}';\n      } else {\n        if (codeFontRendering != '') codeFontRendering = '\\n' + codeFontRendering;\n        themeCode = '@supports(--css: variables) {\\n  [data-theme=\"' + this.themes[i].toLowerCase() + '\"] {\\n' + themeCode + codeFontRendering + '  }\\n}';\n      }\n\n      completeCode = completeCode + themeCode;\n      if (i < this.themes.length - 1) completeCode = completeCode + '\\n\\n'; // if( i == 0 ) {\n      // \tcompleteCode = completeCode + '[data-theme] {\\n  background-color: var(--color-bg);\\n  color: var(--color-contrast-high);\\n}\\n\\n';\n      // }\n    } // before returngin code -> check if need to add bg-color classes\n\n\n    completeCode = completeCode + this.getBgColorClasses();\n    return completeCode; // return code;\n  };\n\n  Colors.prototype.createBlockForMainColors = function (themeIndex, spacing) {\n    var code = spacing + '  // main\\n',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    for (var j = 0; j < 2; j++) {\n      for (var i = 0; i < 5; i++) {\n        var colorIndex = 4 - i;\n        var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n            hslCode = getHslCssFromHsl(hsl);\n        code = code + spacing + '  @include defineColorHSL(--color-' + this.mainColorLabels[j] + shades[i] + ', ' + hslCode + ');' + '\\n';\n      }\n\n      code = code + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForCustomColors = function (themeIndex, spacing, isFeedback) {\n    var code = '',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    if (this.mainColorLabels.length > 5) {\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        var label = this.customColorLabels[j];\n\n        if (isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') < 0) {\n          for (var i = 0; i < 5; i++) {\n            var colorIndex = 4 - i;\n            var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n                hslCode = getHslCssFromHsl(hsl);\n            code = code + spacing + '  @include defineColorHSL(' + this.customColorLabels[j - 5] + shades[i] + ', ' + hslCode + ');' + '\\n';\n          }\n\n          code = code + '\\n';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getCustomColorClasses = function (isFeedback) {\n    var code = '';\n\n    if (this.mainColorLabels.length > 5) {\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        var label = this.customColorLabels[j];\n\n        if (isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') < 0) {\n          code = code + '.' + this.customColorLabels[j - 5].replace('--', '') + ' { color: var(' + this.customColorLabels[j - 5] + ');}';\n          code = code + '\\n';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getCustomGradientClasses = function () {\n    var code = '';\n\n    if (this.gradientColorLabels.length > 0) {\n      for (var j = 0; j < this.gradientColorLabels.length; j++) {\n        code = code + '.bg-gradient-' + this.gradientColorLabels[j].replace('--', '') + '-right { background-image: linear-gradient(90deg, var(--gradient-' + this.gradientColorLabels[j] + '-stop-1), var(--gradient-' + this.gradientColorLabels[j] + '-stop-2));}';\n        code = code + '\\n';\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForBWColors = function (themeIndex, spacing) {\n    var code = '',\n        shadesBlack = ['', '-light', '-lighter'],\n        shadesWhite = ['', '-dark', '-darker']; //black\n\n    for (var i = 0; i < this.blackColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.blackColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-black' + shadesBlack[i] + ', ' + hslCode + ');' + '\\n';\n    } //white\n\n\n    for (var i = 0; i < this.whiteColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.whiteColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-white' + shadesWhite[i] + ', ' + hslCode + ');' + '\\n';\n    } //need to add opacities as well\n\n\n    code = code + '\\n';\n    return code;\n  };\n\n  Colors.prototype.createBlockForFeedbackColors = function (themeIndex, spacing) {\n    var code = spacing + '  // feedback\\n',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    for (var j = 2; j < 5; j++) {\n      for (var i = 0; i < 5; i++) {\n        var colorIndex = 4 - i;\n        var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n            hslCode = getHslCssFromHsl(hsl);\n        code = code + spacing + '  @include defineColorHSL(--color-' + this.mainColorLabels[j] + shades[i] + ', ' + hslCode + ');' + '\\n';\n      } //need to add opacities as well\n\n\n      code = code + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForContrastColors = function (themeIndex, spacing) {\n    var code = spacing + '  // color contrasts\\n',\n        shades = ['bg', 'contrast-lower', 'contrast-low', 'contrast-medium', 'contrast-high', 'contrast-higher'];\n\n    for (var i = 0; i < this.contrastColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.contrastColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-' + shades[i] + ', ' + hslCode + ');' + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForGradients = function (themeIndex, spacing) {\n    if (!this.gradientColorLabels || this.gradientColorLabels.length < 1) return '';\n    var code = '\\n' + spacing + '  // gradients\\n',\n        stops = ['-stop-1', '-stop-2'];\n\n    for (var i = 0; i < this.gradientColorLabels.length; i++) {\n      var stop1 = getHslCssFromHsl(this[this.gradientColorIds[i] + 'Gradients'][themeIndex][0]),\n          stop2 = getHslCssFromHsl(this[this.gradientColorIds[i] + 'Gradients'][themeIndex][1]);\n      code = code + spacing + '  @include defineColorHSL(--gradient-' + this.gradientColorLabels[i] + stops[0] + ', ' + stop1 + ');' + '\\n';\n      code = code + spacing + '  @include defineColorHSL(--gradient-' + this.gradientColorLabels[i] + stops[1] + ', ' + stop2 + ');' + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForFontRendering = function (themeIndex, spacing) {\n    var code = '';\n\n    if (this.fontRendering[themeIndex] && Number(this.fontRendering[themeIndex]) == 1) {\n      code = spacing + '  // font rendering\\n' + spacing + '  -webkit-font-smoothing: antialiased;\\n' + spacing + '  -moz-osx-font-smoothing: grayscale;\\n';\n    } else if (this.fontRendering[themeIndex] && Number(this.fontRendering[themeIndex]) == 2) {\n      code = spacing + '  // font rendering\\n' + spacing + '  -webkit-font-smoothing: auto;\\n' + spacing + '  -moz-osx-font-smoothing: auto;\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getArrayToSave = function () {\n    var colorsArray = [];\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      //store main colors + feedback colors\n      colorsArray[this.mainColorLabels[i]] = this[this.mainColorLabels[i] + 'Colors'];\n    }\n\n    colorsArray['mainColorLabels'] = this.mainColorLabels;\n\n    if (this.customColorLabels.length > 0) {\n      colorsArray['customColorLabels'] = this.customColorLabels;\n    }\n\n    colorsArray['blackColors'] = this.blackColors;\n    colorsArray['whiteColors'] = this.whiteColors;\n    colorsArray['contrastPecentageColors'] = this.contrastPecentageColors;\n    colorsArray['contrastColors'] = this.contrastColors;\n\n    if (this.fontRendering && this.fontRendering.length == this.themes.length) {\n      colorsArray['fontRendering'] = this.fontRendering;\n    } else {\n      colorsArray['fontRendering'] = [];\n\n      for (var i = 0; i < this.themes.length; i++) {\n        if (this.fontRendering[i]) colorsArray['fontRendering'][i] = this.fontRendering[i];else colorsArray['fontRendering'][i] = false;\n      }\n    }\n\n    colorsArray['themes'] = this.themes;\n    colorsArray['colorLinks'] = this.colorLinks; // gradients\n\n    if (this.gradientColorLabels.length > 0) {\n      colorsArray['gradientColorLabels'] = this.gradientColorLabels;\n    }\n\n    if (this.gradientColorIds.length > 0) {\n      colorsArray['gradientColorIds'] = this.gradientColorIds;\n\n      for (var i = 0; i < this.gradientColorIds.length; i++) {\n        //store main colors + feedback colors\n        colorsArray[this.gradientColorIds[i] + 'Gradients'] = this[this.gradientColorIds[i] + 'Gradients'];\n      }\n    }\n\n    return colorsArray;\n  };\n\n  Colors.prototype.getOpacitiesArrayToSave = function () {\n    var opacitiesArray = [];\n    opacitiesArray = this.colorOpacities;\n    return opacitiesArray;\n  };\n\n  Colors.prototype.getBgColorClasses = function () {\n    var code = '';\n    var shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    if (this.mainColorLabels.length > 5) {\n      // start from bg\n      code = '\\n\\n// background color\\n';\n\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        for (var i = 0; i < shades.length; i++) {\n          code = code + '.bg-' + this.customColorLabels[j - 5].replace('--color-', '') + shades[i] + ' { background-color: alpha(var(' + this.customColorLabels[j - 5] + shades[i] + '), var(--bg-o, 1)); }';\n          code = code + '\\n';\n        }\n      }\n    }\n\n    if (this.gradientColorLabels.length > 0) {\n      // background gradient\n      code = this.mainColorLabels.length > 5 ? code + '\\n' : code + '\\n\\n';\n      code = code + '// background gradient';\n\n      for (var i = 0; i < this.gradientColorLabels.length; i++) {\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + ' { background-image: radial-gradient(var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-top { background-image: linear-gradient(0deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-right { background-image: linear-gradient(90deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-bottom { background-image: linear-gradient(180deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-left { background-image: linear-gradient(270deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n      }\n\n      if (this.mainColorLabels.length > 5) code = code + '\\n';\n    }\n\n    if (this.mainColorLabels.length > 5) {\n      // add borders\n      code = code + '\\n// border color';\n\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        for (var i = 0; i < shades.length; i++) {\n          code = code + '\\n.border-' + this.customColorLabels[j - 5].replace('--color-', '') + shades[i] + ' { border-color: alpha(var(' + this.customColorLabels[j - 5] + shades[i] + '), var(--bg-o, 1)); }';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  function loadProjectColors(iframe) {\n    if (PROJECT && PROJECT.colors && PROJECT.colors !== '') iframe.loadColorStyle(JSON.parse(PROJECT.colors));\n  }\n\n  function loadProjectTypographyForSpacing(iframe) {\n    if (PROJECT && PROJECT.typography && PROJECT.typography !== '') iframe.loadTypographyForSpacing(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.typography)), true);else iframe.loadTypographyForSpacing(false, true);\n  }\n\n  ;\n\n  function loadProjectTypographyForButtons(iframe) {\n    if (PROJECT && PROJECT.typography && PROJECT.typography !== '') iframe.loadTypographyForButtons(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.typography)), true);else iframe.loadTypographyForButtons(false, true);\n  }\n\n  ;\n\n  function loadProjectSpacingForButtons(iframe) {\n    if (PROJECT && PROJECT.spacing && PROJECT.spacing !== '') iframe.loadSpacingForButtons(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.spacing)), true);else iframe.loadSpacingForButtons(false, true);\n  }\n\n  ;\n\n  function loadProjectButtonsForForms(iframe) {\n    if (PROJECT && PROJECT.buttons && PROJECT.buttons !== '') iframe.loadButtonsForForms(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.buttons)), true);else iframe.loadButtonsForForms(false, true);\n  }\n\n  ;\n\n  function loadProjectButtonsForColors(iframe) {\n    if (PROJECT && PROJECT.buttons && PROJECT.buttons !== '') iframe.loadButtonsForColors(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.buttons)), true);else iframe.loadButtonsForColors(false, true);\n  }\n\n  ;\n\n  function loadProjectColorsForColors(iframe) {\n    if (PROJECT && PROJECT.colors && PROJECT.colors !== '') iframe.loadColorsForColors(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.colors)), true);\n  }\n\n  ;\n\n  function loadProjectFormsForColors(iframe) {\n    if (PROJECT && PROJECT.form && PROJECT.form !== '') iframe.loadFormForColors(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.form)), true);else iframe.loadFormForColors(false, true);\n  }\n\n  ;\n\n  function replaceEmpty(array) {\n    for (var i = 0; i < array.length; i++) {\n      if (array[i].length > 1) {\n        array[i] = replaceEmpty(array[i]);\n      } else {\n        if (array[i] == '') array[i] = false;\n      }\n    }\n\n    return array;\n  }\n\n  ;\n\n  function getColorContrastPercentages() {\n    return [0, 5, 17, 55, 89, 100];\n  }\n\n  ;\n\n  function getHslCssFromHsl(hsl) {\n    return Math.round(hsl[0]) + ', ' + Math.round(hsl[1] * 100) + '%, ' + Math.round(hsl[2] * 100) + '%';\n  }\n\n  ;\n\n  function getMainColorVariation(hsl) {\n    //used to get the main color variations starting from main color\n    var colorVariationsLogic = getMainColorVaraiationLogic(hsl);\n    var mainColorVariations = [];\n    hsl[0] = checkHue(hsl[0]);\n\n    for (var i = 0; i < 4; i++) {\n      mainColorVariations.push([hsl[0], checkPercentage(hsl[1] + colorVariationsLogic[i][0]), checkPercentage(hsl[2] + colorVariationsLogic[i][1])]);\n    }\n\n    mainColorVariations.splice(2, 0, hsl);\n    return mainColorVariations;\n  }\n\n  ;\n\n  function getMainColorVaraiationLogic(hsl) {\n    var lightVaraition = 0.1,\n        lightVaraitionS = 0.2;\n\n    if (hsl[2] > 0.8) {\n      lightVaraitionS = 1;\n      lightVaraition = parseFloat(((lightVaraitionS - hsl[2]) * 0.5).toFixed(2));\n    }\n\n    var darkVaraition = -0.1,\n        darkVaraitionS = -0.2;\n\n    if (hsl[2] < 0.2) {\n      darkVaraitionS = -hsl[2];\n      darkVaraition = parseFloat((-hsl[2] * 0.5).toFixed(2));\n    }\n\n    return [[0, lightVaraitionS], [0, lightVaraition], [0, darkVaraition], [0, darkVaraitionS]];\n  }\n\n  ;\n\n  function getContrastVariation(color1, color2, array) {\n    var contrastColorVariations = [];\n    var scaleColors = chroma.bezier([color1, color2]).scale().colors(101);\n\n    for (var i = 0; i < 6; i++) {\n      var index = array[i],\n          hsl = chroma(scaleColors[index]).hsl();\n      contrastColorVariations.push([checkHue(hsl[0]), checkPercentage(hsl[1]), checkPercentage(hsl[2])]);\n    }\n\n    return contrastColorVariations;\n  }\n\n  ;\n\n  function getDefaultMainColorVariation(type) {\n    var color = [];\n\n    switch (type) {\n      case 'accent':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      case 'download':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      case 'success':\n        color = [[94, 0.48, 0.74], [94, 0.48, 0.65], [94, 0.48, 0.56], [94, 0.48, 0.48], [94, 0.48, 0.42]];\n        break;\n\n      case 'warning':\n        color = [[46, 1, 0.80], [46, 1, 0.71], [46, 1, 0.61], [46, 1, 0.50], [46, 1, 0.47]];\n        break;\n\n      case 'error':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      case 'info':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      default:\n        // primary\n        color = [[204, 0.70, 0.33], [204, 0.70, 0.43], [204, 0.70, 0.53], [204, 0.70, 0.63], [204, 0.70, 0.73]];\n    }\n\n    return color;\n  }\n\n  ; //initialize the Colors objects\n\n  var colors = document.getElementsByClassName('js-app-sidebar-editor--colors'),\n      colorObject = [];\n  setTimeout(function () {\n    if (colors.length > 0) {\n      for (var i = 0; i < colors.length; i++) {\n        (function (i) {\n          colorObject.push(new Colors(colors[i]));\n        })(i);\n      }\n    }\n  }, 1000);\n  /************************/\n\n  /* \tInput Event Listening */\n\n  /************************/\n\n  function listenToParentInput(parent, callback) {\n    parent.on('focusout input', 'input', function (event) {\n      callback(event);\n    });\n    parent.on('keyup', 'input', function (event) {\n      if (event.key && event.key.toLowerCase() === \"enter\" || event.keyCode && event.keyCode === \"13\") {\n        callback(event);\n      }\n    });\n  }\n\n  ;\n\n  function listenToParentString(parent, string, callback) {\n    parent.on('focusout', string, function (event) {\n      callback(event);\n    });\n    parent.on('keypress', string, function (event) {\n      if (event.key && event.key.toLowerCase() === \"enter\" || event.keyCode && event.keyCode === \"13\") {\n        event.preventDefault();\n        callback(event);\n      }\n    });\n  }\n\n  ;\n  /************************/\n\n  /* \tSidebar Interaction */\n\n  /************************/\n  //content switch - eg, themes in Colors\n\n  var contentSwitch = $('.js-app-content-switch');\n\n  if (contentSwitch.length > 0) {\n    var contentType = contentSwitch.attr('data-global').toLowerCase(),\n        contentList = contentSwitch.find('.js-app-content-switch__group'),\n        appSidebar = $('.js-app-sidebar--globals'); //open/close list of content\n\n    contentSwitch.on('click', '.js-app-content-item', function (event) {\n      if (!$(event.target).is('.js-add-content') && $(event.target).parents('.js-add-content').length == 0) {\n        contentSwitch.toggleClass('app-content-switch--is-open');\n      }\n    }); //listen for the click on 'add' button - new content item has been created\n\n    contentSwitch.on('click', '.js-add-content', function (event) {\n      contentSwitch.addClass('app-content-switch--is-open');\n      var initialLabel = 'Untitled';\n      contentList.find('.app-content-item--is-selected').removeClass('app-content-item--is-selected app-content-item--is-editing').children('em').attr('contenteditable', 'false');\n      var newContentItem = getNewContentSwitch(initialLabel, contentList);\n      contentList.find('.app-content-item--is-selected').children('em').attr('contenteditable', 'true').selectText();\n      appSidebar.trigger('content-switch-added', [contentType, initialLabel]);\n    }); //new content item has been selected\n\n    contentList.on('click', 'li', function (event) {\n      var selectedItem = contentList.children('.app-content-item--is-selected');\n\n      if (!selectedItem.is($(event.currentTarget)) && $(event.target).parents('.js-content-item__cta--remove').length < 1 && !$(event.target).is('.js-content-item__cta--remove')) {\n        contentList.children('.app-content-item--is-selected').removeClass('app-content-item--is-selected app-content-item--is-editing').children('em').attr('contenteditable', 'false');\n        $(event.currentTarget).addClass('app-content-item--is-selected'); //need to take care of updating content somewhere else -> trigger event\n\n        appSidebar.trigger('content-switch-selected', [contentType, $(event.currentTarget).index()]);\n      }\n    });\n    contentList.on('dblclick', 'li', function (event) {\n      if ($(event.currentTarget).hasClass('js-app-content-item--default')) return;\n      $(event.currentTarget).addClass('app-content-item--is-editing').children('em').eq(0).attr('contenteditable', 'true').focus().selectText();\n    });\n    listenToParentString(contentList, 'li', function (event) {\n      if ($(event.originalEvent.target).is('.js-content-item__cta--edit')) return;\n      $(event.currentTarget).removeClass('app-content-item--is-editing').find('em').attr('contenteditable', 'false');\n      appSidebar.trigger('content-switch-edited', [contentType, $(event.currentTarget).index(), $(event.currentTarget).find('em').text()]);\n    }); //--check if we need to load more themes\n\n    if (colorObject && colorObject[0]) {\n      //we are on the colors global\n      if (colorObject[0].themes.length > 0) {\n        for (var i = 1; i < colorObject[0].themes.length; i++) {\n          var newContentItem = getNewContentSwitch(colorObject[0].themes[i], contentList);\n          newContentItem.removeClass('app-content-item--is-selected app-content-item--is-editing');\n        }\n      }\n    }\n  }\n\n  function getNewContentSwitch(label, contentList) {\n    var newContentItem = contentList.children('li').eq(0).clone();\n    newContentItem.removeClass('js-app-content-item--default').addClass('app-content-item--is-editable app-content-item--is-editing app-content-item--is-selected').children('em').text(label);\n    contentList.append(newContentItem);\n    return newContentItem;\n  } //content groups\n\n\n  var appContentGroup = $('.js-app-content__group');\n\n  if (appContentGroup.length > 0) {\n    var contentType = appContentGroup.attr('data-global').toLowerCase(),\n        appSidebar = $('.js-app-sidebar--globals'),\n        contentItems = appContentGroup.children('li'); //listen to the click on the arrows/entire element - open/close group\n\n    appContentGroup.on('click', '.js-app-content-item--group', function (event) {\n      if (!$(event.target).is('.js-btn-create') && $(event.target).parents('.js-btn-create').length == 0) {\n        $(event.currentTarget).toggleClass('app-content-item--show-children');\n      }\n    }); //select a new content\n\n    appContentGroup.on('click', '.js-app-content-item', function (event) {\n      var sharedStyle = false; // we are gonna use this for the shared styles global only\n\n      if (!$(event.currentTarget).hasClass('app-content-item--is-selected')) {\n        //element is not already selected\n        //do not select if the item is being removed (click on trash icon)\n        if ($(event.target).is('.js-content-item__cta--delete') || $(event.target).parents('.js-content-item__cta--delete').length > 0) return;\n        appContentGroup.find('.app-content-item--is-selected').removeClass('app-content-item--is-selected');\n        $(event.currentTarget).addClass('app-content-item--is-selected'); //need to take care of updating content somewhere else -> trigger event\n        //if the content is a custom one ->pass index to bjects as well\n\n        var itemIndex = $(event.currentTarget).hasClass('js-app-content-item--is-editable') ? $(event.currentTarget).index() : false;\n        var targetLabel = $(event.currentTarget).children('.app-content-item__text').text();\n\n        if (contentType == 'colors' && $(event.currentTarget).attr('data-section').indexOf('color-custom') > -1) {\n          targetLabel = $(event.currentTarget).attr('data-section').replace('#color', '--color');\n        }\n\n        appSidebar.trigger('content-selected', [contentType, targetLabel, itemIndex, sharedStyle]);\n      }\n    });\n  } //right sidebar - generic interactions\n\n\n  var rightAppSidebar = $('.js-app-sidebar--globals');\n\n  if (rightAppSidebar.length > 0) {\n    var colorSelect = $('.js-app-menu--color');\n    rightAppSidebar.on('click', '.js-app-editor-section__title', function (event) {\n      if ($(event.target).is('.js-app-editor-section__title-cta') || $(event.target).parents('.js-app-editor-section__title-cta').length > 0) return;\n      $(event.currentTarget).toggleClass('app-editor-section__title--hide-body');\n    }); //in the sidebar - show the mq tab clicking on the mq button\n\n    rightAppSidebar.on('click', '.js-btn-responsive-rules', function (event) {\n      appSidebarEnableMq($(event.currentTarget));\n    }); //in the sidebar - remove the mq tab/reset mq clicking on delete button\n\n    rightAppSidebar.on('click', '.js-app-delete-mq', function (event) {\n      appSidebarDisableMq($(event.currentTarget), true);\n    }); //in the sidebar - select a new mq clicking on  new mq tab\n\n    rightAppSidebar.on('click', '.js-app-editor-tabs__item', function (event) {\n      appSidebarSelectMq($(event.currentTarget), true);\n    }); //in the right sidebar -> click on the reset link to reset property to default status (e.g., buttons)\n\n    rightAppSidebar.on('click', '.js-app-editor-section__reset-link', function (event) {\n      //remove edited section\n      var selectedSection = $(event.currentTarget).parents('.js-app-editor-section'),\n          mqDelete = selectedSection.find('.js-app-delete-mq');\n      selectedSection.removeClass('app-editor-section--content-edited'); // if(mqDelete.length > 0) appSidebarDisableAndResetMq(mqDelete);\n      //trigger reset of variables in js objects\n\n      rightAppSidebar.trigger('reset-status', [selectedSection]);\n    }); //color preview object\n\n    rightAppSidebar.on('click', '.js-app-editor-color-preview', function (event) {\n      colorSelect.trigger('open-color-selector', [$(event.target)]);\n    });\n\n    if (colorSelect.length > 0) {\n      $(window).on('click', function (event) {\n        if (!$(event.target).is('.js-app-editor-color-preview') && !$(event.target).is('.js-app-menu--color') && $(event.target).parents('.js-app-menu--color').length < 1) colorSelect.trigger('close-color-selection');\n      });\n      $(window).on('keyup', function (event) {\n        if (event.key && event.key.toLowerCase() === \"backspace\" || event.keyCode && event.keyCode === \"8\") {\n          colorSelect.trigger('delete-opacity');\n        }\n      });\n    } // shadow selection -> trigger custom fields\n\n\n    var shadowList = $('.js-shadow-list');\n\n    if (shadowList.length > 0) {\n      shadowList.on('change', function (event) {\n        resetShadowBlockAppearance($(event.target));\n      });\n    }\n  }\n  /* --------------------------------\n    copy code/view code function\n   --------------------------------- */\n  //copy code - detect if there's a copy code element available\n\n\n  if ($('.js-copy-code').length > 0) {\n    var clipboard = new ClipboardJS('.js-copy-code', {\n      text: function text(trigger) {\n        var format = $(trigger).attr('data-type'),\n            container = $(trigger).parents('.js-code-action-wrapper').eq(0);\n        return container.attr('data-' + format);\n      }\n    });\n    clipboard.on('success', function (event) {\n      showCopySuccess(event, false);\n      if ($(event.trigger).hasClass('js-copy-code--dependencies')) showDependenciesModal(event.trigger);\n    }); // switcher css/scss\n\n    if (localStorage.getItem('cd-copy-css') == 'css') {\n      // user wants to copy css by default\n      var splitBtn = $('.js-btn-split__label');\n      if (splitBtn) splitBtn.text('CSS').parent().attr('data-type', 'css');\n    }\n  }\n\n  if ($('.js-modal__copy').length > 0) {\n    var clipboard = new ClipboardJS('.js-modal__copy', {\n      text: function text(trigger) {\n        var format = $(trigger).attr('data-copy') ? $(trigger).attr('data-copy') : 'html',\n            code = $(trigger).prev().find('.js-modal__code').text();\n        return code;\n      }\n    });\n    clipboard.on('success', function (event) {\n      showCopySuccess(event, true);\n    });\n  }\n\n  function showCopySuccess(event, bool) {\n    var target = $(event.trigger);\n\n    if (target.hasClass('js-copy-code--split')) {\n      // user clicked the tooltip of split btn\n      var popover = target.parents('.js-popover'),\n          codeType = target.attr('data-type'),\n          popoverControl = $('[aria-controls=\"' + popover.attr('id') + '\"]');\n      target = popoverControl.prev();\n      updateSplitCopy(target, codeType, popoverControl);\n    }\n\n    target.addClass('btn--state-b');\n    setTimeout(function () {\n      target.removeClass('btn--state-b');\n    }, 3000); //bind the google analytics event as well\n\n    var componentName = bool ? target.parents('.js-modal-code').eq(0).attr('data-component') : target.parents('.js-code-action-wrapper').eq(0).attr('data-demo');\n    ga('send', 'event', 'View Code', 'copyCode', componentName);\n  }\n\n  ;\n\n  function updateSplitCopy(target, codeType, popoverControl) {\n    target.find('.js-btn-split__label').text(codeType.toUpperCase());\n    target.attr('data-type', codeType);\n    popoverControl.trigger('click');\n    localStorage.setItem('cd-copy-css', codeType);\n  }\n\n  ;\n\n  function showDependenciesModal(trigger) {\n    var modal = $('.js-modal--dependencies');\n    modal.trigger('openModal', [trigger]);\n  }\n\n  ;\n\n  function showDependenciesModalViewCode(trigger, modal) {\n    if (trigger.attr('data-dep-titles') || trigger.attr('data-ext-dep') && trigger.attr('data-ext-dep') != '') {\n      // this is the component gallery - create list\n      resetDependenciesListViewCode(modal, trigger.attr('data-dep-url'), trigger.attr('data-dep-titles'), trigger.attr('data-ext-dep'));\n    }\n\n    modal.find('.js-app-info-banner').addClass('app-info-banner--is-visible');\n  }\n\n  ;\n  var copyCodeWrapper = $('.js-code-action-wrapper');\n\n  if (copyCodeWrapper.length > 0) {\n    if ($('.js-item-gallery').length > 0) {\n      $('.js-item-gallery').on('click', '.js-view-code', function (event) {\n        showViewCodeModal(event, $(event.currentTarget).parents('.js-code-action-wrapper').eq(0));\n      });\n    } else {\n      // detect click on view code\n      copyCodeWrapper.on('click', '.js-view-code', function (event) {\n        showViewCodeModal(event, $(event.delegateTarget));\n      });\n    }\n  }\n\n  function showViewCodeModal(event, parent) {\n    // var code = [];\n    var modal = $('.js-modal[data-modal-trigger=\"' + $(event.currentTarget).attr('data-modal') + '\"]'); //hide menu popup\n\n    $('.js-menu-popup.menu-popup--is-visible').removeClass('menu-popup--is-visible'); //modal is shown automatically using the proper object\n\n    if ($(event.currentTarget).hasClass('js-view-code--global')) {\n      //get code global -- need to modify i first\n      getGlobalCode(parent, '', function (data) {\n        // populate the modal now\n        modal.trigger('showGlobalCode', [data]);\n      });\n    } else {\n      getComponentCode(parent, '', function (data) {\n        if ($(event.currentTarget).hasClass('js-view-code--dependencies')) {\n          showDependenciesModalViewCode($(event.currentTarget), modal);\n        } else {\n          // need to hide the dependencies banner in the modal\n          modal.find('.js-app-info-banner').removeClass('app-info-banner--is-visible');\n        } // populate the modal now\n\n\n        modal.trigger('showCode');\n      });\n    } //bind the google analytics event as well\n\n\n    ga('send', 'event', 'View Code', 'showCode', parent.attr('data-demo'));\n  }\n\n  ;\n\n  function getComponentCode(container, type, callback) {\n    var array = [];\n\n    if (!container.attr('data-html') && !container.attr('data-scss') && !container.attr('data-js')) {\n      // this should be dynamic\n      if (type && type == 'globals') {\n        var componentName = container.attr('data-title').toLowerCase();\n      } else {\n        var componentName = container.attr('data-demo');\n      }\n\n      readFileContent(componentName, type, function (data) {\n        var code = JSON.parse(data);\n        container.attr('data-html', code.response.html);\n        container.attr('data-scss', code.response.scss);\n        container.attr('data-css', code.response.css);\n        container.attr('data-js', code.response.js);\n        callback(array);\n      });\n    } else {\n      array[0] = container.attr('data-html');\n      array[1] = container.attr('data-scss');\n      array[2] = container.attr('data-js');\n      array[3] = container.attr('data-css');\n      callback(array);\n    }\n  }\n\n  function getGlobalCode(container, type, callback) {\n    scss_code = modifyGlobalCode(container.attr('data-scss'), container.attr('data-demo'), container);\n    callback(scss_code);\n  }\n\n  function readFileContent(component, type, callback) {\n    if (type && type == 'globals') {\n      var url = 'post/getGlobalCode';\n    } else {\n      var url = 'post/getComponentCode';\n    }\n\n    $.ajax({\n      url: url,\n      data: 'component=' + component,\n      type: 'POST',\n      cache: 'false',\n      beforeSend: function beforeSend() {//show loader or similar\n      },\n      success: function success(data) {\n        callback(data);\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        callback('');\n      }\n    });\n  }\n\n  function modifyGlobalCode(code, global) {\n    //check the globals that needs to be modified\n    switch (global.toLowerCase()) {\n      case 'colors':\n        code = modifyColorsCode(code);\n        break;\n\n      case 'buttons':\n        code = modifyButtonsCode(code);\n        break;\n\n      case 'forms':\n        code = modifyFormsCode(code);\n        break;\n\n      case 'spacing':\n        code = modifySpacingCode(code);\n        break;\n\n      case 'typography':\n        code = modifyTypographyCode(code);\n        break;\n\n      case 'shared styles':\n        code = modifySharedStylesCode(code);\n        break;\n\n      default:\n        code = code;\n        break;\n    }\n\n    return code;\n  }\n\n  ;\n\n  function modifyColorsCode(code) {\n    if (colorObject && colorObject.length > 0) {\n      code = colorObject[0].updateCopyCode(code);\n    }\n\n    return code;\n  }\n\n  ; // component dependencies -> close banner in view code\n\n  var closeBanner = $('.js-app-info-banner__close');\n\n  if (closeBanner.length > 0) {\n    closeBanner.on('click', function (event) {\n      event.preventDefault();\n      closeBanner.parents('.js-app-info-banner').removeClass('app-info-banner--is-visible');\n    });\n  }\n\n  function convArrToObj(array) {\n    var thisEleObj = new Object();\n\n    if (_typeof(array) == \"object\") {\n      for (var i in array) {\n        var thisEle = convArrToObj(array[i]);\n        thisEleObj[i] = thisEle;\n      }\n    } else {\n      thisEleObj = array;\n    }\n\n    return thisEleObj;\n  }\n\n  ; //reset globals function\n\n  var resetGlobal = document.getElementsByClassName('js-reset-global');\n\n  if (resetGlobal.length > 0) {\n    resetGlobal[0].addEventListener('click', function (event) {\n      var globalType = resetGlobal[0].getAttribute('data-global');\n      event.preventDefault();\n\n      if (window.confirm(\"Are you sure you want to reset the global \" + globalType + \"? All your custom changes will be removed.\")) {\n        resetGlobalFn(globalType.toLowerCase(), function () {\n          location.reload();\n        });\n      }\n    });\n  } //TODO Create btn save\n\n\n  $('.copy-globals-code').on('click', function () {\n    saveColorsCode();\n  });\n\n  function saveColorsCode(callback) {\n    //need to define a string for colors\n    if (!colorObject || colorObject.length == 0) callback();\n    var colorsAll = colorObject[0].getArrayToSave();\n    var colorString = JSON.stringify(convArrToObj(colorsAll));\n    updateGlobalsProject(colorString, callback);\n  }\n\n  ;\n\n  function updateGlobalsProject(options, callback) {\n    var getCOnfig;\n    axios({\n      url: '/admin/themes/dofus-default/config',\n      method: 'GET',\n      dataType: 'json'\n    }).then(function (response) {\n      if (!colorObject || colorObject.length == 0) callback();\n      var colorsAll = colorObject[0].getArrayToSave();\n      var colorString = JSON.stringify(convArrToObj(colorsAll));\n      getCOnfig = JSON.parse(response.data.split('<!DOCTYPE html>')[0]);\n      getCOnfig.project.color_themes_data = colorString;\n      getCOnfig.project.color_themes = $('html').attr(\"style\");\n      axios.post('/admin/themes/dofus-default/config', {\n        header: getCOnfig.header,\n        footer: getCOnfig.footer,\n        discord: getCOnfig.discord,\n        sliders: getCOnfig.sliders,\n        articles: getCOnfig.articles,\n        vote: getCOnfig.vote,\n        project: getCOnfig.project\n      }).then(function (response) {\n        console.log(response);\n      })[\"catch\"](function (error) {\n        console.log(error);\n      })[\"finally\"](function () {\n        SaveAlert.no();\n      });\n    })[\"catch\"](function (error) {\n      console.log(error);\n    })[\"finally\"](function () {});\n  }\n\n  ; // Save Alert\n\n  var SaveAlert = {\n    yes: function yes() {\n      window.onbeforeunload = function () {\n        return true;\n      };\n    },\n    no: function no() {\n      window.onbeforeunload = null;\n    }\n  };\n})();\n/**********************\n iOS banner\n ***********************/\n\n\n(function () {\n  var iosBanner = $('.js-ios-pivot');\n\n  if (iosBanner.length > 0) {\n    if (!!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform)) iosBanner.removeClass('ios-pivot--is-hidden');\n  }\n})(); //here define the functions that need to be used inside the app frame\n\n\nfunction checkPercentage(val) {\n  val = Number(val);\n  if (val < 0) val = 0;\n  if (val > 1) val = 1;\n  return Number(val.toFixed(2));\n}\n\n;\n\nfunction checkHue(hue) {\n  if (isNaN(hue)) hue = 0;\n  return Math.round(parseFloat(hue));\n}\n\n;\n\nfunction getHslFromHex(hex) {\n  if (hex.indexOf('hsl(') > -1) {\n    //format is already hsl(, , )\n    return getHslFromHslString(hex);\n  }\n\n  var color = chroma(hex).hsl();\n  if (isNaN(color[0])) color[0] = 0;\n  color[0] = Math.round(color[0]);\n  color[1] = Number(Math.round(color[1] * 100) / 100);\n  color[2] = Number(Math.round(color[2] * 100) / 100);\n  return color;\n}\n\n;\n\nfunction getHslFromHslString(hex) {\n  var color = hex.replace('hsl(', '').replace(')', '').split(',');\n  color[0] = Number(color[0].trim());\n  color[1] = parseFloat((Number(color[1].trim().replace('%', '')) / 100).toFixed(2));\n  color[2] = parseFloat((Number(color[2].trim().replace('%', '')) / 100).toFixed(2));\n  return color;\n}\n\n;\n\nfunction getHexFromHsl(hsl) {\n  return chroma.hsl(hsl[0], hsl[1], hsl[2]).hex();\n}\n\n;\n\nfunction convertStringToHsl(string) {\n  string = Number(string.replace('%', ''));\n  return Number((string / 100).toFixed(2));\n}\n\n;\n\nfunction selectSidebarSection(target) {\n  $('.js-app-content__group').trigger('selectSection', [target]);\n}\n\n;\n\nfunction closeActivePopups() {\n  var colorSelection = $('.js-app-menu--color'),\n      appMenu = $('.js-app-header-menu-toggle');\n  if (colorSelection.length > 0) colorSelection.trigger('close-color-selection');\n  if (appMenu.length > 0) appMenu.trigger('close-app-menu-popup');\n}\n\n;\n\nfunction toggleColorLink(colorSection, bool) {\n  $('.js-app-sidebar-editor--colors').trigger('updateColorLink', [colorSection, bool]);\n}\n\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9jb25maWctY3VzdG9tLWF6dXJpb20vY2hhbmdlLWNvbG9yLmpzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTUEsUUFBUSxHQUFHQyxtQkFBTyxDQUFDLHNEQUFELENBQXhCOztBQUNBLElBQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQyxrREFBRCxDQUF0Qjs7QUFFQSxJQUFJRSxPQUFKO0FBQ0EsSUFBSUMsU0FBUyxHQUFHLENBQWhCO0FBQ0FDLEtBQUssQ0FBQ0MsUUFBTixDQUFlQyxPQUFmLENBQXVCQyxNQUF2QixDQUE4QixrQkFBOUIsSUFBb0QsZ0JBQXBEOztBQUVBLFNBQVNDLFlBQVQsQ0FBc0JDLElBQXRCLEVBQTRCQyxFQUE1QixFQUFnQztBQUM1QkMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksNkVBQVosRUFBMkYsZ0JBQTNGOztBQUNBLE1BQUlILElBQUksQ0FBQ0ksaUJBQUwsSUFBMEJKLElBQUksQ0FBQ0ksaUJBQUwsSUFBMEIsSUFBeEQsRUFBOEQ7QUFDMURGLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGlFQUFaLEVBQStFLDhCQUEvRTtBQUNBRSxJQUFBQSxVQUFVLENBQUMsWUFBWTtBQUNuQkosTUFBQUEsRUFBRTtBQUNMLEtBRlMsRUFFUCxHQUZPLENBQVY7QUFHSCxHQUxELE1BS087QUFDSEssSUFBQUEsTUFBTSxDQUFDQyxNQUFQLEdBQWdCLFlBQVk7QUFDeEJMLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLCtEQUFaLEVBQTZFLGdCQUE3RTtBQUNBRixNQUFBQSxFQUFFO0FBQ0wsS0FIRDtBQUlIOztBQUNEQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSw2RUFBWixFQUEyRixnQkFBM0Y7QUFDSDs7QUFBQTs7QUFFQSxhQUFZO0FBQ1RHLEVBQUFBLE1BQU0sQ0FBQ2IsT0FBUDtBQUNBLE1BQUllLFNBQVMsR0FBR2hCLE1BQWhCO0FBQ0FHLEVBQUFBLEtBQUssQ0FBQztBQUNGYyxJQUFBQSxHQUFHLEVBQUUs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OztBQUVELFNBQVNpZCxlQUFULENBQXlCQyxZQUF6QixFQUF1Q3ZkLElBQXZDLEVBQTZDO0FBQ3pDMUIsRUFBQUEsQ0FBQyxDQUFDLGdDQUFELENBQUQsQ0FBb0MrQixPQUFwQyxDQUE0QyxpQkFBNUMsRUFBK0QsQ0FBQ2tkLFlBQUQsRUFBZXZkLElBQWYsQ0FBL0Q7QUFDSDs7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbXBsYXRlLWRlZmF1bHQvLi9qcy9jb25maWctY3VzdG9tLWF6dXJpb20vY2hhbmdlLWNvbG9yLmpzP2FjZjgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QganNDb2xvcnMgPSByZXF1aXJlKCcuL2NvbG9ycycpXG5jb25zdCBqc1BhZ2UgPSByZXF1aXJlKCcuL3BhZ2UnKVxuXG5sZXQgUFJPSkVDVDtcbmxldCBJU19MT0dHRUQgPSAxO1xuYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtUmVxdWVzdGVkLVdpdGgnXSA9ICdYTUxIdHRwUmVxdWVzdCc7XG5cbmZ1bmN0aW9uIG9uSWZyYW1lTG9hZChwYWdlLCBjYikge1xuICAgIGNvbnNvbGUubG9nKCclYyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nLCAnY29sb3I6ICMwYTQ5YzcnKTtcbiAgICBpZiAocGFnZS5sb2FkZWRJZnJhbWVDaGVjayAmJiBwYWdlLmxvYWRlZElmcmFtZUNoZWNrID09IHRydWUpIHtcbiAgICAgICAgY29uc29sZS5sb2coJyVjIFRoZW1lIGNvbG9yIGxvYWQgYnkgTGF0c2hvdzogaHR0cHM6Ly9kaXNjb3JkLmdnL1FGMkF0Z0hKWFkgLScsICdjb2xvcjogI0ZGRjsgZm9udC1zaXplOiAxNXB4Jyk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJyVjIFRoZW1lIGNvbG9yIGxvYWQgTGF0c2hvdzogaHR0cHM6Ly9kaXNjb3JkLmdnL1FGMkF0Z0hKWFkgLS0nLCAnY29sb3I6ICMwYTQ5YzcnKTtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCclYyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nLCAnY29sb3I6ICMwYTQ5YzcnKTtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgd2luZG93LlBST0pFQ1Q7XG4gICAgbGV0IGRhdGFGcmFtZSA9IGpzUGFnZTtcbiAgICBheGlvcyh7XG4gICAgICAgIHVybDogJy9hZG1pbi90aGVtZXMvZG9mdXMtZGVmYXVsdC9jb25maWcnLFxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGxldCBnZXRDb25maWcgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmRhdGEuc3BsaXQoJzwhRE9DVFlQRSBodG1sPicpWzBdKVxuICAgICAgICBpZiAoZ2V0Q29uZmlnLnByb2plY3QuY29sb3JfdGhlbWVzX2RhdGEgJiYgZ2V0Q29uZmlnLnByb2plY3QuY29sb3JfdGhlbWVzX2RhdGEgIT09ICcnKSB7XG4gICAgICAgICAgICBQUk9KRUNUID0ge1xuICAgICAgICAgICAgICAgIGNvbG9yczogZ2V0Q29uZmlnLnByb2plY3QuY29sb3JfdGhlbWVzX2RhdGFcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFBST0pFQ1QgPSB7XG4gICAgICAgICAgICAgICAgY29sb3JzOiAnJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5QUk9KRUNUID0gUFJPSkVDVFxuICAgIH0pO1xuXG4gICAgUFJPSkVDVCA9IHdpbmRvdy5QUk9KRUNUO1xuICAgIG9uSWZyYW1lTG9hZChkYXRhRnJhbWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGF0YUZyYW1lLmxvYWRHbG9iYWxzU3R5bGUoUFJPSkVDVCk7XG4gICAgfSk7XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBJbnB1dCBDb2xvciBjb21wb25lbnRcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgdGhpcy5Db2xvcklucHV0ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5pbnB1dENvbG9ySGV4ID0gJCh0aGlzLmVsZW1lbnQpLmZpbmQoJy5qcy1hcHAtY29sb3ItcGlja2VyX19oZXgnKS5maW5kKCdpbnB1dCcpO1xuICAgICAgICB0aGlzLmlucHV0UHJldmlldyA9ICQodGhpcy5lbGVtZW50KS5maW5kKCcuanMtYXBwLWNvbG9yLXBpY2tlcl9fY29sb3InKTtcbiAgICAgICAgdGhpcy5pbnB1dENvbG9yID0gdGhpcy5pbnB1dFByZXZpZXcuZmluZCgnaW5wdXQnKTtcbiAgICAgICAgdGhpcy5pbnB1dENvbG9yU3VwcG9ydGVkID0gaW5wdXRDb2xvclN1cHBvcnRlZCgpO1xuICAgICAgICB0aGlzLmFwcENvbG9yU2lkZWJhciA9ICQodGhpcy5lbGVtZW50KS5wYXJlbnRzKCcuanMtYXBwLXNpZGViYXItLWdsb2JhbHMnKTtcbiAgICAgICAgdGhpcy5oZXhWYWx1ZSA9IHRoaXMuaW5wdXRDb2xvckhleC52YWwoKTtcbiAgICAgICAgdGhpcy5pbml0Q29sb3JJbnB1dCgpO1xuICAgIH07XG5cbiAgICBDb2xvcklucHV0LnByb3RvdHlwZS5pbml0Q29sb3JJbnB1dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAvL2hpZGUvc2hvdyBlbGVtZW50XG4gICAgICAgIHRoaXMuaW5wdXRDb2xvci50b2dnbGUodGhpcy5pbnB1dENvbG9yU3VwcG9ydGVkKTtcbiAgICAgICAgLy9saXN0ZW4gdG8gZXZlbnRzXG4gICAgICAgIC8vY29sb3IgaW5wdXQgLSBjaGFuZ2VcbiAgICAgICAgdGhpcy5pbnB1dENvbG9yLm9uKFwiaW5wdXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUNvbG9yKGV2ZW50LnRhcmdldC52YWx1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmlucHV0Q29sb3Iub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUNvbG9yKGV2ZW50LnRhcmdldC52YWx1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyB0ZXh0IGlucHV0IC0gY2hhbmdlIC0+IGhleFxuICAgICAgICB0aGlzLmlucHV0Q29sb3JIZXgub24oJ2ZvY3Vzb3V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuaGV4VmFsdWUgPT0gc2VsZi5pbnB1dENvbG9ySGV4LnZhbCgpKSByZXR1cm47XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUNvbG9yKCQodGhpcykudmFsKCksIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaW5wdXRDb2xvckhleC5vbigna2V5dXAnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIiAmJiBzZWxmLmhleFZhbHVlICE9IHNlbGYuaW5wdXRDb2xvckhleC52YWwoKSkge1xuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlQ29sb3IoJCh0aGlzKS52YWwoKSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkKHRoaXMuZWxlbWVudCkub24oJ3VwZGF0ZS1waWNrZXInLCBmdW5jdGlvbiAoZXZlbnQsIHZhbHVlKSB7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUNvbG9yKGNocm9tYS5oc2wodmFsdWUpLmhleCgpLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy90aGlzIGlzIHRyaWdnZXJlZCBvbmx5IGJ5IHRoZSBjb250cmFzdCBzZWN0aW9uIGluIHRoZSBjb2xvcnMgZ2xvYmFsXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5vbigndXBkYXRlLWNvbnRyYXN0LXBpY2tlcicsIGZ1bmN0aW9uIChldmVudCwgdmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgICAgICAgIGlmICgkKHNlbGYuZWxlbWVudCkucGFyZW50cygnLmpzLWFwcC1lZGl0b3Itc2VjdGlvbl9fYmctY29sb3ItcGlja2VyJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlQ29sb3IoY2hyb21hLmhzbCh2YWx1ZTEpLmhleCgpLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkKHNlbGYuZWxlbWVudCkucGFyZW50cygnLmpzLWFwcC1lZGl0b3Itc2VjdGlvbl9faGMtY29sb3ItcGlja2VyJykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlQ29sb3IoY2hyb21hLmhzbCh2YWx1ZTIpLmhleCgpLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ29sb3JJbnB1dC5wcm90b3R5cGUudXBkYXRlQ29sb3IgPSBmdW5jdGlvbiAoY29sb3IsIGJvb2wsIGVtaXRFdmVudCkge1xuICAgICAgICAvL2ZpcnN0IC0+IG1ha2Ugc3VyZSBubyA7IGFyZSBpbnNlcnRlZFxuICAgICAgICBjb2xvciA9IGNvbG9yLnJlcGxhY2UoJzsnLCAnJyk7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKGNvbG9yLmluZGV4T2YoJygnKSA8IDAgJiYgY29sb3IuaW5kZXhPZignIycpIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5pbnB1dFByZXZpZXcuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJyMnICsgY29sb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbnB1dFByZXZpZXcuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgY29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5wdXRDb2xvckhleC52YWwoY29sb3IpO1xuICAgICAgICB0aGlzLmhleFZhbHVlID0gY29sb3I7XG4gICAgICAgIC8vbmVlZCB0byB1cGRhdGUgdGhlIGNvbG9yIHByZXZpZXcgbmV4dCB0byB0aGUgaW5wdXQgZWxlbWVudFxuICAgICAgICBpZiAoIWJvb2wpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRDb2xvci52YWwoY2hyb21hKGNvbG9yKS5oZXgoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVtaXRFdmVudCAmJiB0aGlzLmFwcENvbG9yU2lkZWJhci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmFwcENvbG9yU2lkZWJhci50cmlnZ2VyKCdjb2xvci1waWNrZXItdXBkYXRlZCcsIFtnZXRIc2xGcm9tSGV4KGNvbG9yKSwgJChzZWxmLmVsZW1lbnQpXSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaW5wdXRDb2xvclN1cHBvcnRlZCgpIHtcbiAgICAgICAgdmFyIGNvbG9ySW5wdXQgPSAkKCc8aW5wdXQgdHlwZT1cImNvbG9yXCIgdmFsdWU9XCIhXCIgLz4nKVswXTtcbiAgICAgICAgcmV0dXJuIGNvbG9ySW5wdXQudHlwZSA9PT0gJ2NvbG9yJyAmJiBjb2xvcklucHV0LnZhbHVlICE9PSAnISc7XG4gICAgfTtcblxuICAgIC8vaW5pdGlhbGl6ZSB0aGUgTW9kYWwgb2JqZWN0c1xuICAgIHZhciBjb2xvcklucHV0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2pzLWNvbG9yLXBpY2tlcicpO1xuICAgIGlmIChjb2xvcklucHV0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sb3JJbnB1dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIG5ldyBDb2xvcklucHV0KGNvbG9ySW5wdXRzW2ldKTtcbiAgICAgICAgICAgIH0pKGkpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIC8qIFx0Y29sb3Igc2VsZWN0aW9uIHBvcHVwICovXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICB0aGlzLkNvbG9yU2VsZWN0aW9uID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5iYXNpY1N3YXRjaGVzID0gJCh0aGlzLmVsZW1lbnQpLmZpbmQoJy5qcy1hcHAtbWVudV9fY29sb3Itc3dhdGNoZXMnKTtcbiAgICAgICAgdGhpcy52YXJpYXRpb25zU3dhdGNoZXMgPSAkKHRoaXMuZWxlbWVudCkuZmluZCgnLmpzLWFwcC1tZW51X19jb2xvci12YXJpYXRpb25zJyk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZUEgPSAkKHRoaXMuZWxlbWVudCkuZmluZCgnLmpzLWFwcC1tZW51X19zdGF0ZS1hJyk7XG4gICAgICAgIHRoaXMuc3RhdGVCID0gJCh0aGlzLmVsZW1lbnQpLmZpbmQoJy5qcy1hcHAtbWVudV9fc3RhdGUtYicpO1xuICAgICAgICB0aGlzLnN0YXRlQkN1c3RvbU9wYWNpdHkgPSB0aGlzLnN0YXRlQi5maW5kKCcuanMtYXBwLW1lbnVfX2NvbG9yLWN1c3RvbS1vcGFjaXR5Jyk7XG4gICAgICAgIHRoaXMuY3VzdG9tT3BhY2l0eUlucHV0ID0gdGhpcy5zdGF0ZUJDdXN0b21PcGFjaXR5LmZpbmQoJ2lucHV0Jyk7XG4gICAgICAgIHRoaXMucHJpbWFyeUNvbG9ycyA9IFtdOy8vdGhpcyBpcyBhbiBhcnJheSBvZiA1IGNvbG9yc1xuICAgICAgICB0aGlzLmFjY2VudENvbG9ycyA9IFtdOy8vdGhpcyBpcyBhbiBhcnJheSBvZiA1IGNvbG9yc1xuICAgICAgICB0aGlzLmJsYWNrQ29sb3JzID0gW107Ly90aGlzIGlzIGEgY29sb3Igc3RyaW5nXG4gICAgICAgIHRoaXMud2hpdGVDb2xvcnMgPSBbXTsvL3RoaXMgaXMgYSBjb2xvciBzdHJpbmdcbiAgICAgICAgdGhpcy5jb250cmFzdENvbG9ycyA9IFtdOyAvL3RoaXMgaXMgYW4gYXJyYXkgb2YgNSBlbGVtZW50c1xuICAgICAgICB0aGlzLndhcm5pbmdDb2xvcnMgPSBbXTsgLy90aGlzIGlzIGFuIGFycmF5IG9mIDUgZWxlbWVudHNcbiAgICAgICAgdGhpcy5zdWNjZXNzQ29sb3JzID0gW107IC8vdGhpcyBpcyBhbiBhcnJheSBvZiA1IGVsZW1lbnRzXG4gICAgICAgIHRoaXMuZXJyb3JDb2xvcnMgPSBbXTsgLy90aGlzIGlzIGFuIGFycmF5IG9mIDUgZWxlbWVudHNcbiAgICAgICAgdGhpcy5vcGFjaXRpZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jb2xvckdyb3VwcyA9ICQoJy5qcy1hcHAtZWRpdG9yLXByb3BlcnR5X19jb2xvci1ncm91cCcpO1xuXG4gICAgICAgIC8vc29tZSBkZWZhdWx0IHN0YXRlc1xuICAgICAgICB0aGlzLm1haW5Db2xvckxhYmVscyA9IFsncHJpbWFyeScsICdhY2NlbnQnLCAnc3VjY2VzcycsICd3YXJuaW5nJywgJ2Vycm9yJ107XG4gICAgICAgIHRoaXMubWFpbkNvbG9yVmFyaWF0aW9uTGFiZWwgPSBbJy1saWdodGVyJywgJy1saWdodCcsICcnLCAnLWRhcmsnLCAnLWRhcmtlciddO1xuICAgICAgICB0aGlzLmN1c3RvbUNvbG9yTGFiZWxzID0gW107XG4gICAgICAgIHRoaXMuY29udHJhc3RDb2xvclZhcmlhdGlvbkxhYmVsID0gWyctYmcnLCAnLWNvbnRyYXN0LWxvd2VyJywgJy1jb250cmFzdC1sb3cnLCAnLWNvbnRyYXN0LW1lZGl1bScsICctY29udHJhc3QtaGlnaCcsICctY29udHJhc3QtaGlnaGVyJ107XG4gICAgICAgIHRoaXMuY29udHJhc3RWYXJpYXRpb25zID0gZ2V0Q29sb3JDb250cmFzdFBlcmNlbnRhZ2VzKCk7XG4gICAgICAgIHRoaXMuZ3JhZGllbnRDb2xvckxhYmVscyA9IFtdOyAvLyB0aGlzIHdpbGwgaGF2ZSAncHJpbWFyeScsICdzZWNvbmRhcnknXG4gICAgICAgIHRoaXMuZ3JhZGllbnRDb2xvcklkcyA9IFtdOyAvLyB0aGlzIHdpbGwgaGF2ZSAnY3VzdG9tLTAnLCAnY3VzdG9tLTEnXG5cbiAgICAgICAgLy8gZ3JhZGllbnQgc2VjdGlvbnNcbiAgICAgICAgdGhpcy5ncmFkaWVudHMgPSAkKHRoaXMuZWxlbWVudCkuZmluZCgnLmpzLWFwcC1tZW51X19jb2xvci1pdGVtLS1ncmFkaWVudHMnKTtcbiAgICAgICAgdGhpcy5ncmFkaWVudFN3YXRjaGVzID0gdGhpcy5ncmFkaWVudHMuZmluZCgnLmpzLWFwcC1tZW51X19jb2xvci1zd2F0Y2gnKTtcblxuICAgICAgICB0aGlzLmNvbG9yVmFsdWVzID0gW107IC8vSSdtIGdvaW5nIHRvIHBhc3MgdGhpcyB0byB0aGUgYnV0dG9ucyBvYmplY3QgLT4gbGlzdCBvZiBjb2xvciB2YWx1ZXNcbiAgICAgICAgdGhpcy5sb2FkUHJlc2V0KCk7XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcigpO1xuICAgIH07XG5cbiAgICBDb2xvclNlbGVjdGlvbi5wcm90b3R5cGUubG9hZFByZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy95b3Ugc2hvdWxkIGxvYWQgdGhpcyBmcm9tIHRoZSBkYlxuICAgICAgICAvL2ZvciBub3cganVzdCBzdGF0aWNcbiAgICAgICAgaWYgKFBST0pFQ1QgJiYgUFJPSkVDVC5jb2xvcnMpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdENvbG9yc0Zyb21Qcm9qZWN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmluaXRDb2xvcnMoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluaXRDb2xvclZhbHVlcygpO1xuICAgICAgICB0aGlzLmluaXRVaUNvbG9ycygpO1xuICAgIH07XG5cbiAgICBDb2xvclNlbGVjdGlvbi5wcm90b3R5cGUuaW5pdENvbG9ycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wcmltYXJ5Q29sb3JzID0gZ2V0RGVmYXVsdE1haW5Db2xvclZhcmlhdGlvbigncHJpbWFyeScpO1xuICAgICAgICB0aGlzLmFjY2VudENvbG9ycyA9IGdldERlZmF1bHRNYWluQ29sb3JWYXJpYXRpb24oJ2FjY2VudCcpO1xuICAgICAgICB0aGlzLndhcm5pbmdDb2xvcnMgPSBnZXREZWZhdWx0TWFpbkNvbG9yVmFyaWF0aW9uKCd3YXJuaW5nJyk7XG4gICAgICAgIHRoaXMuc3VjY2Vzc0NvbG9ycyA9IGdldERlZmF1bHRNYWluQ29sb3JWYXJpYXRpb24oJ3N1Y2Nlc3MnKTtcbiAgICAgICAgdGhpcy5lcnJvckNvbG9ycyA9IGdldERlZmF1bHRNYWluQ29sb3JWYXJpYXRpb24oJ2Vycm9yJyk7XG4gICAgICAgIHRoaXMuYmxhY2tDb2xvcnMgPSBbZ2V0SHNsRnJvbUhleCgnIzFjMWMyMScpXTtcbiAgICAgICAgdGhpcy53aGl0ZUNvbG9ycyA9IFtnZXRIc2xGcm9tSGV4KCcjZmZmZmZmJyldO1xuICAgICAgICB0aGlzLmNvbnRyYXN0Q29sb3JzID0gZ2V0Q29udHJhc3RWYXJpYXRpb24oJyMzNTM3M2InLCAnI0ZGRkZGRicsIHRoaXMuY29udHJhc3RWYXJpYXRpb25zKTtcbiAgICB9O1xuXG4gICAgQ29sb3JTZWxlY3Rpb24ucHJvdG90eXBlLmluaXRDb2xvcnNGcm9tUHJvamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbG9ycyA9IEpTT04ucGFyc2UoUFJPSkVDVC5jb2xvcnMpO1xuICAgICAgICB0aGlzLm1haW5Db2xvckxhYmVscyA9IE9iamVjdC52YWx1ZXMoY29sb3JzWydtYWluQ29sb3JMYWJlbHMnXSk7XG4gICAgICAgIGlmIChjb2xvcnNbJ2N1c3RvbUNvbG9yTGFiZWxzJ10pIHRoaXMuY3VzdG9tQ29sb3JMYWJlbHMgPSBPYmplY3QudmFsdWVzKGNvbG9yc1snY3VzdG9tQ29sb3JMYWJlbHMnXSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tYWluQ29sb3JMYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBjb2xvcnNbdGhpcy5tYWluQ29sb3JMYWJlbHNbaV1dO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXNbdGhpcy5tYWluQ29sb3JMYWJlbHNbaV0gKyAnQ29sb3JzJ10pIHRoaXNbdGhpcy5tYWluQ29sb3JMYWJlbHNbaV0gKyAnQ29sb3JzJ10gPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgNTsgaisrKSB7XG4gICAgICAgICAgICAgICAgdGhpc1t0aGlzLm1haW5Db2xvckxhYmVsc1tpXSArICdDb2xvcnMnXS5wdXNoKE9iamVjdC52YWx1ZXMob2JqWzBdW2pdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICAgICAgaWYgKGNvbG9yc1snYmxhY2tDb2xvcnMnXVswXVtpXSkgdGhpcy5ibGFja0NvbG9ycy5wdXNoKE9iamVjdC52YWx1ZXMoY29sb3JzWydibGFja0NvbG9ycyddWzBdW2ldKSk7XG4gICAgICAgICAgICBpZiAoY29sb3JzWyd3aGl0ZUNvbG9ycyddWzBdW2ldKSB0aGlzLndoaXRlQ29sb3JzLnB1c2goT2JqZWN0LnZhbHVlcyhjb2xvcnNbJ3doaXRlQ29sb3JzJ11bMF1baV0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyYXN0Q29sb3JzLnB1c2goT2JqZWN0LnZhbHVlcyhjb2xvcnNbJ2NvbnRyYXN0Q29sb3JzJ11bMF1baV0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGluaXQgZ3JhZGllbnQgY29sb3JzXG4gICAgICAgIGlmIChjb2xvcnNbJ2dyYWRpZW50Q29sb3JMYWJlbHMnXSkgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzID0gT2JqZWN0LnZhbHVlcyhjb2xvcnNbJ2dyYWRpZW50Q29sb3JMYWJlbHMnXSk7XG4gICAgICAgIGlmIChjb2xvcnNbJ2dyYWRpZW50Q29sb3JJZHMnXSkgdGhpcy5ncmFkaWVudENvbG9ySWRzID0gT2JqZWN0LnZhbHVlcyhjb2xvcnNbJ2dyYWRpZW50Q29sb3JJZHMnXSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ncmFkaWVudENvbG9ySWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gY29sb3JzW3RoaXMuZ3JhZGllbnRDb2xvcklkc1tpXSArICdHcmFkaWVudHMnXTtcbiAgICAgICAgICAgIHRoaXNbdGhpcy5ncmFkaWVudENvbG9ySWRzW2ldICsgJ0dyYWRpZW50cyddID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDI7IGorKykge1xuICAgICAgICAgICAgICAgIHRoaXNbdGhpcy5ncmFkaWVudENvbG9ySWRzW2ldICsgJ0dyYWRpZW50cyddLnB1c2goT2JqZWN0LnZhbHVlcyhvYmpbMF1bal0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBDb2xvclNlbGVjdGlvbi5wcm90b3R5cGUuaW5pdENvbG9yVmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNvbG9yVmFsdWVzWydub3Qtc3BlY2lmaWVkJ10gPSAnJztcbiAgICAgICAgdGhpcy5jb2xvclZhbHVlc1sndHJhbnNwYXJlbnQnXSA9ICd0cmFuc3BhcmVudCc7XG4gICAgICAgIHRoaXMuY29sb3JWYWx1ZXNbJ2luaGVyaXQnXSA9ICdpbmhlcml0JztcbiAgICAgICAgLy9tYWluICsgY3VzdG9tIGNvbG9yc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubWFpbkNvbG9yTGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMubWFpbkNvbG9yVmFyaWF0aW9uTGFiZWwubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yVmFsdWVzWyctLWNvbG9yLScgKyB0aGlzLm1haW5Db2xvckxhYmVsc1tpXSArIHRoaXMubWFpbkNvbG9yVmFyaWF0aW9uTGFiZWxbal1dID0gZ2V0SHNsYUZyb21Ic2wodGhpc1t0aGlzLm1haW5Db2xvckxhYmVsc1tpXSArICdDb2xvcnMnXVtqXSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy9ibGFja1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxhY2tDb2xvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuY29sb3JWYWx1ZXNbJy0tY29sb3ItYmxhY2snICsgdGhpcy5tYWluQ29sb3JWYXJpYXRpb25MYWJlbFsyIC0gaV1dID0gZ2V0SHNsYUZyb21Ic2wodGhpcy5ibGFja0NvbG9yc1tpXSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy93aGl0ZVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMud2hpdGVDb2xvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuY29sb3JWYWx1ZXNbJy0tY29sb3Itd2hpdGUnICsgdGhpcy5tYWluQ29sb3JWYXJpYXRpb25MYWJlbFsyICsgaV1dID0gZ2V0SHNsYUZyb21Ic2wodGhpcy53aGl0ZUNvbG9yc1tpXSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy9jb250cmFzdHNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvbnRyYXN0Q29sb3JWYXJpYXRpb25MYWJlbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jb2xvclZhbHVlc1snLS1jb2xvcicgKyB0aGlzLmNvbnRyYXN0Q29sb3JWYXJpYXRpb25MYWJlbFtpXV0gPSBnZXRIc2xhRnJvbUhzbCh0aGlzLmNvbnRyYXN0Q29sb3JzW2ldLCAxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBncmFkaWVudHNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmdyYWRpZW50Q29sb3JMYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuY29sb3JWYWx1ZXNbJy0tZ3JhZGllbnQtJyArIHRoaXMuZ3JhZGllbnRDb2xvckxhYmVsc1tpXSArICctc3RvcC0xJ10gPSBnZXRIc2xhRnJvbUhzbCh0aGlzW3RoaXMuZ3JhZGllbnRDb2xvcklkc1tpXSArICdHcmFkaWVudHMnXVswXSwgMSk7XG4gICAgICAgICAgICB0aGlzLmNvbG9yVmFsdWVzWyctLWdyYWRpZW50LScgKyB0aGlzLmdyYWRpZW50Q29sb3JMYWJlbHNbaV0gKyAnLXN0b3AtMiddID0gZ2V0SHNsYUZyb21Ic2wodGhpc1t0aGlzLmdyYWRpZW50Q29sb3JJZHNbaV0gKyAnR3JhZGllbnRzJ11bMV0sIDEpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIENvbG9yU2VsZWN0aW9uLnByb3RvdHlwZS5pbml0VWlDb2xvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5pdE1haW5Td2F0Y2hlcygpO1xuICAgICAgICB0aGlzLmluaXRCV1N3YXRjaGVzKCk7XG4gICAgICAgIHRoaXMuaW5pdENvbnRyYXN0U3dhdGNoZXMoKTtcbiAgICAgICAgdGhpcy5pbml0R3JhZGllbnRTd2F0Y2hlcygpO1xuICAgIH07XG5cbiAgICBDb2xvclNlbGVjdGlvbi5wcm90b3R5cGUuaW5pdE1haW5Td2F0Y2hlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1haW5Td2F0Y2ggPSB0aGlzLmJhc2ljU3dhdGNoZXMuZmlsdGVyKCdbZGF0YS1jb2xvcnM9XCJtYWluXCJdJyksXG4gICAgICAgICAgICBjaGlsZHJlbiA9IG1haW5Td2F0Y2guY2hpbGRyZW4oJ2xpJyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjsgaSsrKSB7XG4gICAgICAgICAgICBjaGlsZHJlbi5lcShpKS5jaGlsZHJlbignLmpzLWFwcC1tZW51X19jb2xvci1wcmV2aWV3JykuYXR0cignc3R5bGUnLCAnYmFja2dyb3VuZC1jb2xvcjonICsgdGhpcy5jb2xvclZhbHVlc1snLS1jb2xvci0nICsgdGhpcy5tYWluQ29sb3JMYWJlbHNbaV1dICsgJzsnKS5hdHRyKCdkYXRhLWl0ZW0nLCAnLS1jb2xvci0nICsgdGhpcy5tYWluQ29sb3JMYWJlbHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjbG9uZXNUZXh0ID0gdGhpcy5pbml0Q3VzdG9tQ29sb3JTd2F0Y2hlcyhjaGlsZHJlbi5lcSgwKSwgZmFsc2UpO1xuICAgICAgICBtYWluU3dhdGNoLmFwcGVuZChjbG9uZXNUZXh0KTtcblxuICAgICAgICB2YXIgZmVlZGJhY2tTd2F0Y2ggPSB0aGlzLmJhc2ljU3dhdGNoZXMuZmlsdGVyKCdbZGF0YS1jb2xvcnM9XCJmZWVkYmFja1wiXScpLFxuICAgICAgICAgICAgY2hpbGRyZW4gPSBmZWVkYmFja1N3YXRjaC5jaGlsZHJlbignbGknKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBqID0gMjtcbiAgICAgICAgICAgIGlmICh0aGlzLm1haW5Db2xvckxhYmVsc1tpICsgMl0gPT0gJ3N1Y2Nlc3MnKSBqID0gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLm1haW5Db2xvckxhYmVsc1tpICsgMl0gPT0gJ3dhcm5pbmcnKSBqID0gMTtcbiAgICAgICAgICAgIGNoaWxkcmVuLmVxKGopLmNoaWxkcmVuKCcuanMtYXBwLW1lbnVfX2NvbG9yLXByZXZpZXcnKS5hdHRyKCdzdHlsZScsICdiYWNrZ3JvdW5kLWNvbG9yOicgKyB0aGlzLmNvbG9yVmFsdWVzWyctLWNvbG9yLScgKyB0aGlzLm1haW5Db2xvckxhYmVsc1tpICsgMl1dICsgJzsnKS5hdHRyKCdkYXRhLWl0ZW0nLCAnLS1jb2xvci0nICsgdGhpcy5tYWluQ29sb3JMYWJlbHNbaSArIDJdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmVlZGJhY2tDbG9uZVRleHQgPSB0aGlzLmluaXRDdXN0b21Db2xvclN3YXRjaGVzKGNoaWxkcmVuLmVxKDApLCB0cnVlKTtcbiAgICAgICAgZmVlZGJhY2tTd2F0Y2guYXBwZW5kKGZlZWRiYWNrQ2xvbmVUZXh0KTtcbiAgICB9O1xuXG4gICAgQ29sb3JTZWxlY3Rpb24ucHJvdG90eXBlLmluaXRDdXN0b21Db2xvclN3YXRjaGVzID0gZnVuY3Rpb24gKGl0ZW0sIGlzRmVlZGJhY2spIHtcbiAgICAgICAgdmFyIGNsb25lc1RleHQgPSAnJztcbiAgICAgICAgaWYgKHRoaXMubWFpbkNvbG9yTGFiZWxzLmxlbmd0aCA+IDUpIHtcbiAgICAgICAgICAgIHZhciBjbG9uZSA9IGl0ZW0uY2xvbmUoKS5yZW1vdmVDbGFzcygnYXBwLW1lbnVfX2NvbG9yLXByZXZpZXctLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gNTsgaSA8IHRoaXMubWFpbkNvbG9yTGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKChpc0ZlZWRiYWNrICYmIHRoaXMubWFpbkNvbG9yTGFiZWxzW2ldLmluZGV4T2YoJ2N1c3RvbS1mZGInKSA+IC0xKSB8fCAoIWlzRmVlZGJhY2sgJiYgdGhpcy5tYWluQ29sb3JMYWJlbHNbaV0uaW5kZXhPZignY3VzdG9tLWZkYicpIDwgMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuY2hpbGRyZW4oJy5qcy1hcHAtbWVudV9fY29sb3ItcHJldmlldycpLmF0dHIoJ3N0eWxlJywgJ2JhY2tncm91bmQtY29sb3I6JyArIHRoaXMuY29sb3JWYWx1ZXNbJy0tY29sb3ItJyArIHRoaXMubWFpbkNvbG9yTGFiZWxzW2ldXSArICc7JykuYXR0cignZGF0YS1pdGVtJywgJy0tY29sb3ItJyArIHRoaXMubWFpbkNvbG9yTGFiZWxzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuY2hpbGRyZW4oJy5qcy1hcHAtbWVudV9fY29sb3ItdG9vbHRpcCcpLnRleHQodGhpcy5jdXN0b21Db2xvckxhYmVsc1tpIC0gNV0pO1xuICAgICAgICAgICAgICAgICAgICBjbG9uZXNUZXh0ID0gY2xvbmVzVGV4dCArIGNsb25lWzBdLm91dGVySFRNTDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsb25lc1RleHQ7XG4gICAgfTtcblxuICAgIENvbG9yU2VsZWN0aW9uLnByb3RvdHlwZS5pbml0QldTd2F0Y2hlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ3U3dhdGNoID0gdGhpcy5iYXNpY1N3YXRjaGVzLmZpbHRlcignW2RhdGEtY29sb3JzPVwiYiZ3XCJdJyksXG4gICAgICAgICAgICBjaGlsZHJlbiA9IGJ3U3dhdGNoLmNoaWxkcmVuKCdsaScpO1xuICAgICAgICBjaGlsZHJlbi5lcSgwKS5jaGlsZHJlbignLmpzLWFwcC1tZW51X19jb2xvci1wcmV2aWV3JykuYXR0cignc3R5bGUnLCAnYmFja2dyb3VuZC1jb2xvcjonICsgdGhpcy5jb2xvclZhbHVlc1snLS1jb2xvci1ibGFjayddICsgJzsnKS5hdHRyKCdkYXRhLWl0ZW0nLCAnLS1jb2xvci1ibGFjaycpO1xuICAgICAgICBjaGlsZHJlbi5lcSgxKS5jaGlsZHJlbignLmpzLWFwcC1tZW51X19jb2xvci1wcmV2aWV3JykuYXR0cignc3R5bGUnLCAnYmFja2dyb3VuZC1jb2xvcjonICsgdGhpcy5jb2xvclZhbHVlc1snLS1jb2xvci13aGl0ZSddICsgJzsnKS5hdHRyKCdkYXRhLWl0ZW0nLCAnLS1jb2xvci13aGl0ZScpO1xuICAgIH07XG5cbiAgICBDb2xvclNlbGVjdGlvbi5wcm90b3R5cGUuaW5pdENvbnRyYXN0U3dhdGNoZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb250cmFzdFN3YXRjaCA9IHRoaXMuYmFzaWNTd2F0Y2hlcy5maWx0ZXIoJ1tkYXRhLWNvbG9ycz1cImNvbnRyYXN0XCJdJyksXG4gICAgICAgICAgICBjaGlsZHJlbiA9IGNvbnRyYXN0U3dhdGNoLmNoaWxkcmVuKCdsaScpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY29udHJhc3RDb2xvclZhcmlhdGlvbkxhYmVsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjaGlsZHJlbi5lcShpKS5jaGlsZHJlbignLmpzLWFwcC1tZW51X19jb2xvci1wcmV2aWV3JykuYXR0cignc3R5bGUnLCAnYmFja2dyb3VuZC1jb2xvcjonICsgdGhpcy5jb2xvclZhbHVlc1snLS1jb2xvcicgKyB0aGlzLmNvbnRyYXN0Q29sb3JWYXJpYXRpb25MYWJlbFtpXV0gKyAnOycpLmF0dHIoJ2RhdGEtaXRlbScsICctLWNvbG9yJyArIHRoaXMuY29udHJhc3RDb2xvclZhcmlhdGlvbkxhYmVsW2ldKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBDb2xvclNlbGVjdGlvbi5wcm90b3R5cGUuaW5pdEdyYWRpZW50U3dhdGNoZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBodG1sID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDI7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBqID09IDAgPyAncmlnaHQnIDogJ2JvdHRvbSc7XG4gICAgICAgICAgICAgICAgdmFyIHN3YXRjaCA9IHRoaXMuZ3JhZGllbnRTd2F0Y2hlcy5lcShqKS5jbG9uZSgpLnJlbW92ZUNsYXNzKCdpcy1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICBzd2F0Y2guZmluZCgnLmpzLWFwcC1tZW51X19jb2xvci10b29sdGlwJykudGV4dCgnLS1ncmFkaWVudC0nICsgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzW2ldICsgJyAoJyArIGRpcmVjdGlvbiArICcpJyk7XG4gICAgICAgICAgICAgICAgc3dhdGNoLmZpbmQoJy5qcy1hcHAtbWVudV9fY29sb3ItcHJldmlldycpLmF0dHIoJ3N0eWxlJywgZ2V0R3JhZGllbnRzQmdDb2xvcih0aGlzLmdyYWRpZW50Q29sb3JMYWJlbHNbaV0sIHRoaXMuY29sb3JWYWx1ZXMsIGopKS5hdHRyKCdkYXRhLWl0ZW0nLCAnLS1ncmFkaWVudC0nICsgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzW2ldICsgJy0nICsgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICBodG1sID0gaHRtbCArIHN3YXRjaFswXS5vdXRlckhUTUw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncmFkaWVudHMuZmluZCgnLmpzLWFwcC1tZW51X19jb2xvci1zd2F0Y2hlcycpLmh0bWwoaHRtbCk7XG4gICAgfTtcblxuICAgIENvbG9yU2VsZWN0aW9uLnByb3RvdHlwZS5ldmVudExpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIC8vbGlzdGVuIHRvIGNsaWNrIG9uIGNvbG9yLXByZXZpZXcgLT4gYWxzbyBuZWVkIHRvIHNob3cgY29ycmVjdCBjb2xvciBzZWxlY3Rpb25cbiAgICAgICAgJChzZWxmLmVsZW1lbnQpLm9uKCdvcGVuLWNvbG9yLXNlbGVjdG9yJywgZnVuY3Rpb24gKGV2ZW50LCB0YXJnZXQpIHtcbiAgICAgICAgICAgIC8vIHRvZ2dsZSBncmFkaWVudHMgdmlzaWJpbGl0eVxuICAgICAgICAgICAgc2VsZi5ncmFkaWVudHMudG9nZ2xlQ2xhc3MoJ2lzLWhpZGRlbicsICEodGFyZ2V0Lmhhc0NsYXNzKCdqcy1hcHAtZWRpdG9yLWNvbG9yLXByZXZpZXctLWJnJykgJiYgc2VsZi5ncmFkaWVudENvbG9yTGFiZWxzLmxlbmd0aCA+IDApKTtcbiAgICAgICAgICAgIGlmICghJChzZWxmLmVsZW1lbnQpLmhhc0NsYXNzKCdhcHAtbWVudS0taXMtaGlkZGVuJykpIHtcbiAgICAgICAgICAgICAgICAvLyBzZWxmLmNoZWNrT3BhY2l0eShmYWxzZSk7IC8vY2xpY2sgb24gaW5wdXQgd2hlbiBhbm90aGVyIG9uZSB3YXMgb3BlblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRvcCA9IHRhcmdldC5vZmZzZXQoKS50b3AgKyAzMDtcbiAgICAgICAgICAgIGlmICh0b3AgKyAzMDAgPiAkKHdpbmRvdykuaGVpZ2h0KCkpIHRvcCA9ICQod2luZG93KS5oZWlnaHQoKSAtIDMwMDtcbiAgICAgICAgICAgICQoc2VsZi5lbGVtZW50KS5yZW1vdmVDbGFzcygnYXBwLW1lbnUtLWlzLWhpZGRlbicpLmNzcygndG9wJywgdG9wKTtcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0SW5pdGlhbENvbG9yKHRhcmdldC5hdHRyKCdzdHlsZScpLnJlcGxhY2UoJ2JhY2tncm91bmQtY29sb3InLCAnJykucmVwbGFjZSgnOycsICcnKS5yZXBsYWNlKCc6JywgJycpLnRyaW0oKSwgdGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vc3dpdGNoIGZyb20gc3RhdGUgYiB0byBzdGF0ZSBhXG4gICAgICAgIHNlbGYuc3RhdGVCLm9uKCdjbGljaycsICcuanMtYXBwLW1lbnUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICQoc2VsZi5lbGVtZW50KS5yZW1vdmVDbGFzcygnYXBwLW1lbnUtLXN0YXRlLWInKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9saXN0ZW4gdG8gc2VsZWN0aW9uIG9mIGNvbG9yIGluIHBvcHVwIC0gc3RhdGUgYVxuICAgICAgICBzZWxmLnN0YXRlQS5vbignY2xpY2snLCAnLmpzLWFwcC1tZW51X19jb2xvci1wcmV2aWV3JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaXNTZWxlY3RlZCA9ICQoZXZlbnQudGFyZ2V0KS5oYXNDbGFzcygnYXBwLW1lbnVfX2NvbG9yLXByZXZpZXctLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICBzZWxmLmNsaWNrT25Db2xvclNlY3Rpb25BKCQoZXZlbnQudGFyZ2V0KSwgaXNTZWxlY3RlZCwgaXNTZWxlY3RlZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vbGlzdGVuIHRvIHNlbGVjdGlvbiBvZiBjb2xvciBpbiBwb3B1cCAtIHN0YXRlIGIgLSB2YXJpYXRpb25zXG4gICAgICAgIHNlbGYudmFyaWF0aW9uc1N3YXRjaGVzLm9uKCdjbGljaycsICcuanMtYXBwLW1lbnVfX2NvbG9yLXByZXZpZXcnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0TmV3Q29sb3IoJChldmVudC50YXJnZXQpLCAkKGV2ZW50LnRhcmdldCkuaGFzQ2xhc3MoJ2FwcC1tZW51X19jb2xvci1wcmV2aWV3LS1zZWxlY3RlZCcpLCB0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9saXN0ZW4gdG8gZm9jdXNvdXQgLT4gY2xvc2UgcG9wdXBcbiAgICAgICAgJChzZWxmLmVsZW1lbnQpLm9uKCdjbG9zZS1jb2xvci1zZWxlY3Rpb24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIFx0Ly9jaGVjayBpZiBvcGFjaXR5IG5lZWQgdG8gYmUgYWRkZWRcbiAgICAgICAgICAgIGlmICgkKHNlbGYuZWxlbWVudCkuaGFzQ2xhc3MoJ2FwcC1tZW51LS1pcy1oaWRkZW4nKSkgcmV0dXJuO1xuICAgICAgICAgICAgJChzZWxmLmVsZW1lbnQpLmFkZENsYXNzKCdhcHAtbWVudS0taXMtaGlkZGVuJyk7XG4gICAgICAgICAgICAvLyBcdHNlbGYuY2hlY2tPcGFjaXR5KGZhbHNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9saXN0ZW4gdG8gbmV3IG9wYWNpdHkgaW5jbHVkZWQgLSBrZXlkb3duIHRvIHVwZGF0ZSBiZy9lbnRlciB0byBhZGQgZG90XG4gICAgICAgIGNoZWNrRW5kVHlwaW5nKHNlbGYuY3VzdG9tT3BhY2l0eUlucHV0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyB2YXIgcGVyY2VudGFnZSA9IHBhcnNlSW50KHNlbGYuY3VzdG9tT3BhY2l0eUlucHV0LnZhbCgpLnJlcGxhY2UoJyUnLCAnJykpLFxuICAgICAgICAgICAgLy8gXHRvcGFjaXR5TGFiZWwgPSBnZXRPcGFjaXR5U3VmZml4KHBlcmNlbnRhZ2UpLFxuICAgICAgICAgICAgdmFyIG9wYWNpdHlMYWJlbCA9IHNlbGYuZ2V0T3BJbnB1dEZvclNlbGVjdGlvbigpLFxuICAgICAgICAgICAgICAgIG1haW5Db2xvckxhYmVsID0gc2VsZi5zdGF0ZUIuZmluZCgnLmFwcC1tZW51X19jb2xvci1wcmV2aWV3LS1zZWxlY3RlZCcpLmF0dHIoJ2RhdGEtaXRlbScpLFxuICAgICAgICAgICAgICAgIG1haW5Db2xvciA9IG1haW5Db2xvckxhYmVsICsgb3BhY2l0eUxhYmVsO1xuICAgICAgICAgICAgdmFyIGNzc1ZhcmlhYmxlID0gbWFpbkNvbG9yO1xuICAgICAgICAgICAgaWYgKG1haW5Db2xvckxhYmVsLmluZGV4T2YoJ2N1c3RvbS0nKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgY3NzVmFyaWFibGUgPSBzZWxmLnN0YXRlQi5maW5kKCcuYXBwLW1lbnVfX2NvbG9yLXByZXZpZXctLXNlbGVjdGVkJykubmV4dCgnLmpzLWFwcC1tZW51X19jb2xvci10b29sdGlwJykudGV4dCgpICsgb3BhY2l0eUxhYmVsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gJCgnLmpzLWFwcC1zaWRlYmFyLWVkaXRvci0tYnV0dG9ucycpLnRyaWdnZXIoJ25ldy1vcGFjaXR5LWNyZWF0ZWQnLCBbY3NzVmFyaWFibGUsIGdldE5ld09wYWNpdHkoc2VsZi5jb2xvclZhbHVlc1ttYWluQ29sb3JMYWJlbF0sIHBlcmNlbnRhZ2UpXSk7XG4gICAgICAgICAgICAkKCcuanMtYXBwLXNpZGViYXItZWRpdG9yLS1idXR0b25zJykudHJpZ2dlcignbmV3LWNvbG9yLXNlbGVjdGlvbicsIFttYWluQ29sb3IsIHRydWVdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jdXN0b21PcGFjaXR5SW5wdXQub24oJ2ZvY3Vzb3V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG9wYWNpdHlWYWx1ZSA9IHNlbGYuY3VzdG9tT3BhY2l0eUlucHV0LnZhbCgpLFxuICAgICAgICAgICAgICAgIHJlc2V0T3BhY2l0eSA9IGdldFBlcmNlbnRhZ2VGb3JtYXQob3BhY2l0eVZhbHVlKTtcbiAgICAgICAgICAgIGlmIChvcGFjaXR5VmFsdWUgIT0gcmVzZXRPcGFjaXR5KSBzZWxmLmN1c3RvbU9wYWNpdHlJbnB1dC52YWwocmVzZXRPcGFjaXR5KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vY2xpY2sgb24gcHJldmlldyBpbiBzdGF0YSBhIG9mIHBvcHVwLCB1c2VkIHdoZW4gbG9hZGluZyBpbml0aWFsIGNvbG9yIGFzIHdlbGxcbiAgICBDb2xvclNlbGVjdGlvbi5wcm90b3R5cGUuY2xpY2tPbkNvbG9yU2VjdGlvbkEgPSBmdW5jdGlvbiAodGFyZ2V0LCBpc1NlbGVjdGVkLCBpc1N0YXRlQlNldCkge1xuICAgICAgICB2YXIgc2VjdGlvbiA9IHRhcmdldC5wYXJlbnRzKCcuanMtYXBwLW1lbnVfX2NvbG9yLXN3YXRjaGVzJykuZXEoMCkuYXR0cignZGF0YS1jb2xvcnMnKTtcbiAgICAgICAgdGhpcy5zdGF0ZUEuZmluZCgnLmFwcC1tZW51X19jb2xvci1wcmV2aWV3LS1zZWxlY3RlZCcpLnJlbW92ZUNsYXNzKCdhcHAtbWVudV9fY29sb3ItcHJldmlldy0tc2VsZWN0ZWQnKTtcbiAgICAgICAgdGFyZ2V0LmFkZENsYXNzKCdhcHAtbWVudV9fY29sb3ItcHJldmlldy0tc2VsZWN0ZWQnKTtcbiAgICAgICAgaWYgKCFpc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICAvLyBuZWVkIHRvIGdldCBvcGFjaXR5IHZhbHVlcyBhcyB3ZWxsXG4gICAgICAgICAgICB2YXIgb3BhY2l0eSA9IHRoaXMuZ2V0T3BJbnB1dEZvclNlbGVjdGlvbigpO1xuICAgICAgICAgICAgdmFyIGNvbG9yID0gdGFyZ2V0LmF0dHIoJ2RhdGEtaXRlbScpO1xuICAgICAgICAgICAgaWYgKGNvbG9yLmluZGV4T2YoJy0tZ3JhZGllbnQtJykgPiAtMSkgb3BhY2l0eSA9ICcnO1xuICAgICAgICAgICAgdGhpcy5zZW5kQ29sb3JTZWxlY3Rpb24oY29sb3IgKyBvcGFjaXR5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VjdGlvbiA9PSBcImRlZmF1bHRcIiB8fCBzZWN0aW9uID09IFwiZ3JhZGllbnRzXCIpIHtcbiAgICAgICAgICAgICQodGhpcy5lbGVtZW50KS5yZW1vdmVDbGFzcygnYXBwLW1lbnUtLXN0YXRlLWInKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVCLmZpbmQoJy5hcHAtbWVudV9fY29sb3ItcHJldmlldy0tc2VsZWN0ZWQnKS5yZW1vdmVDbGFzcygnYXBwLW1lbnVfX2NvbG9yLXByZXZpZXctLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmFkZENsYXNzKCdhcHAtbWVudS0tc3RhdGUtYicpO1xuICAgICAgICB0aGlzLnNob3dTdGF0ZUIodGFyZ2V0LCBzZWN0aW9uLCBpc1N0YXRlQlNldCk7XG4gICAgfTtcblxuICAgIENvbG9yU2VsZWN0aW9uLnByb3RvdHlwZS5zZWxlY3ROZXdDb2xvciA9IGZ1bmN0aW9uICh0YXJnZXQsIGlzU2VsY3RlZCwgc2VuZENvbG9yU2VsZWN0aW9uKSB7XG4gICAgICAgIGlmIChpc1NlbGN0ZWQpIHJldHVybjtcbiAgICAgICAgdGFyZ2V0LmFkZENsYXNzKCdhcHAtbWVudV9fY29sb3ItcHJldmlldy0tc2VsZWN0ZWQnKS5wYXJlbnQoKS5zaWJsaW5ncygpLmNoaWxkcmVuKCcuYXBwLW1lbnVfX2NvbG9yLXByZXZpZXctLXNlbGVjdGVkJykucmVtb3ZlQ2xhc3MoJ2FwcC1tZW51X19jb2xvci1wcmV2aWV3LS1zZWxlY3RlZCcpO1xuICAgICAgICBpZiAoc2VuZENvbG9yU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgb3BhY2l0eSA9IHRoaXMuZ2V0T3BJbnB1dEZvclNlbGVjdGlvbigpO1xuICAgICAgICAgICAgdmFyIGNvbG9yID0gdGFyZ2V0LmF0dHIoJ2RhdGEtaXRlbScpO1xuICAgICAgICAgICAgaWYgKGNvbG9yLmluZGV4T2YoJy0tZ3JhZGllbnQtJykgPiAtMSkgb3BhY2l0eSA9ICcnO1xuICAgICAgICAgICAgdGhpcy5zZW5kQ29sb3JTZWxlY3Rpb24oY29sb3IgKyBvcGFjaXR5KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBDb2xvclNlbGVjdGlvbi5wcm90b3R5cGUuZ2V0T3BJbnB1dEZvclNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldE9wSW5wdXRGb3JTZWxlY3Rpb24odGhpcy5jdXN0b21PcGFjaXR5SW5wdXQudmFsKCkpO1xuICAgIH07XG5cbiAgICBDb2xvclNlbGVjdGlvbi5wcm90b3R5cGUuc2VsZWN0SW5pdGlhbENvbG9yID0gZnVuY3Rpb24gKGNvbG9yLCB0YXJnZXQpIHtcbiAgICAgICAgdmFyIHN0YXRlcyA9IFtmYWxzZSwgZmFsc2UsIGZhbHNlXSxcbiAgICAgICAgICAgIHN0YXRlQUNvbG9yLFxuICAgICAgICAgICAgc3RhdGVCQ29sb3IgPSBmYWxzZSxcbiAgICAgICAgICAgIHN0YXRlQ0NvbG9yID0gZmFsc2U7XG4gICAgICAgIGlmIChjb2xvciA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgc3RhdGVBQ29sb3IgPSB0aGlzLnN0YXRlQS5maW5kKCcuanMtYXBwLW1lbnVfX2NvbG9yLXByZXZpZXcnKS5lcSgwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjb2xvck5hbWUgPSB0YXJnZXQuYXR0cignZGF0YS1jb2xvci1sYicpLnNwbGl0KCctJyk7XG4gICAgICAgICAgICBzdGF0ZXMgPSB0aGlzLmdldEFsbFN0YXRlc0NvbG9yKGNvbG9yTmFtZSk7XG4gICAgICAgICAgICBzdGF0ZUFDb2xvciA9IHRoaXMuc3RhdGVBLmZpbmQoJ1tkYXRhLWl0ZW09XCInICsgc3RhdGVzWzBdICsgJ1wiXScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xpY2tPbkNvbG9yU2VjdGlvbkEoc3RhdGVBQ29sb3IsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgc3RhdGVCQ29sb3IgPSBzdGF0ZXNbMV0gPyB0aGlzLnN0YXRlQi5maW5kKCdbZGF0YS1pdGVtPVwiJyArIHN0YXRlc1sxXSArICdcIl0nKSA6IGZhbHNlO1xuICAgICAgICAvL3RyaWdnZXIgY2xpY2sgb24gc3RhdGVCY29sb3IgLT4gd2l0aG91dCBzZW5kaW5nIHVwZGF0ZSBjb2xvclxuICAgICAgICBpZiAoc3RhdGVCQ29sb3IpIHRoaXMuc2VsZWN0TmV3Q29sb3Ioc3RhdGVCQ29sb3IsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIC8vc2VsZWN0IG9wYWNpdHkgZWxlbWVudFxuICAgICAgICAoc3RhdGVzWzJdKSA/IHRoaXMuY3VzdG9tT3BhY2l0eUlucHV0LnZhbChzdGF0ZXNbMl0uc2xpY2UoLTIpICsgJyUnKSA6IHRoaXMuY3VzdG9tT3BhY2l0eUlucHV0LnZhbCgnMTAwJScpO1xuICAgIH07XG5cbiAgICBDb2xvclNlbGVjdGlvbi5wcm90b3R5cGUuZ2V0QWxsU3RhdGVzQ29sb3IgPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgdmFyIGl0ZW1BTmFtZSwgaXRlbUJOYW1lLCBpdGVtQ05hbWU7XG4gICAgICAgIGlmIChjb2xvclsyXSAmJiBjb2xvclsyXSA9PSAnZ3JhZGllbnQnKSB7XG4gICAgICAgICAgICBpdGVtQU5hbWUgPSAnLS1ncmFkaWVudC0nICsgY29sb3JbM10gKyAnLScgKyBjb2xvcls0XTtcbiAgICAgICAgICAgIHJldHVybiBbaXRlbUFOYW1lLCBmYWxzZSwgZmFsc2VdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2xvclszXSAmJiAoY29sb3JbM10gPT0gJ2JsYWNrJyB8fCBjb2xvclszXSA9PSAnd2hpdGUnKSkge1xuICAgICAgICAgICAgaXRlbUFOYW1lID0gJy0tY29sb3ItJyArIGNvbG9yWzNdO1xuICAgICAgICAgICAgbmV4dEl0ZW1zID0gdGhpcy5nZXRTdGF0ZUJDQ29sb3IoaXRlbUFOYW1lLCBjb2xvciwgNCk7XG4gICAgICAgICAgICBpdGVtQk5hbWUgPSBuZXh0SXRlbXNbMF07XG4gICAgICAgICAgICBpdGVtQ05hbWUgPSBuZXh0SXRlbXNbMV07XG4gICAgICAgIH0gZWxzZSBpZiAoY29sb3JbM10gJiYgKGNvbG9yWzNdID09ICdwcmltYXJ5JyB8fCBjb2xvclszXSA9PSAnYWNjZW50JyB8fCBjb2xvclszXSA9PSAnc3VjY2VzcycgfHwgY29sb3JbM10gPT0gJ2Vycm9yJyB8fCBjb2xvclszXSA9PSAnaW5mbycgfHwgY29sb3JbM10gPT0gJ3dhcm5pbmcnKSkge1xuICAgICAgICAgICAgaXRlbUFOYW1lID0gJy0tY29sb3ItJyArIGNvbG9yWzNdO1xuICAgICAgICAgICAgbmV4dEl0ZW1zID0gdGhpcy5nZXRTdGF0ZUJDQ29sb3IoaXRlbUFOYW1lLCBjb2xvciwgNCk7XG4gICAgICAgICAgICBpdGVtQk5hbWUgPSBuZXh0SXRlbXNbMF07XG4gICAgICAgICAgICBpdGVtQ05hbWUgPSBuZXh0SXRlbXNbMV07XG4gICAgICAgIH0gZWxzZSBpZiAoY29sb3JbM10gJiYgY29sb3JbM10gPT0gJ2N1c3RvbScgJiYgY29sb3JbNF0gPT0gJ2ZkYicpIHtcbiAgICAgICAgICAgIGl0ZW1BTmFtZSA9ICctLWNvbG9yLScgKyBjb2xvclszXSArICctJyArIGNvbG9yWzRdICsgJy0nICsgY29sb3JbNV07XG4gICAgICAgICAgICBuZXh0SXRlbXMgPSB0aGlzLmdldFN0YXRlQkNDb2xvcihpdGVtQU5hbWUsIGNvbG9yLCA2KTtcbiAgICAgICAgICAgIGl0ZW1CTmFtZSA9IG5leHRJdGVtc1swXTtcbiAgICAgICAgICAgIGl0ZW1DTmFtZSA9IG5leHRJdGVtc1sxXTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2xvclszXSAmJiBjb2xvclszXSA9PSAnY3VzdG9tJykge1xuICAgICAgICAgICAgaXRlbUFOYW1lID0gJy0tY29sb3ItJyArIGNvbG9yWzNdICsgJy0nICsgY29sb3JbNF07XG4gICAgICAgICAgICBuZXh0SXRlbXMgPSB0aGlzLmdldFN0YXRlQkNDb2xvcihpdGVtQU5hbWUsIGNvbG9yLCA1KTtcbiAgICAgICAgICAgIGl0ZW1CTmFtZSA9IG5leHRJdGVtc1swXTtcbiAgICAgICAgICAgIGl0ZW1DTmFtZSA9IG5leHRJdGVtc1sxXTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2xvclszXSAmJiBjb2xvclszXSA9PSAnYmcnKSB7XG4gICAgICAgICAgICBpdGVtQU5hbWUgPSAnLS1jb2xvci1iZyc7XG4gICAgICAgICAgICBpdGVtQk5hbWUgPSBpdGVtQU5hbWU7XG4gICAgICAgICAgICBpdGVtQ05hbWUgPSAoY29sb3JbNF0pID8gaXRlbUJOYW1lICsgJy0nICsgY29sb3JbNF0gOiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2xvclszXSAmJiBjb2xvclszXSA9PSAnY29udHJhc3QnKSB7XG4gICAgICAgICAgICBpdGVtQU5hbWUgPSAnLS1jb2xvci0nICsgY29sb3JbM10gKyAnLScgKyBjb2xvcls0XTtcbiAgICAgICAgICAgIGl0ZW1CTmFtZSA9IGl0ZW1BTmFtZTtcbiAgICAgICAgICAgIGl0ZW1DTmFtZSA9IChjb2xvcls1XSkgPyBpdGVtQk5hbWUgKyAnLScgKyBjb2xvcls1XSA6IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlbUFOYW1lID0gY29sb3JbMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtpdGVtQU5hbWUsIGl0ZW1CTmFtZSwgaXRlbUNOYW1lXTtcbiAgICB9O1xuXG4gICAgQ29sb3JTZWxlY3Rpb24ucHJvdG90eXBlLmdldFN0YXRlQkNDb2xvciA9IGZ1bmN0aW9uIChpdGVtQU5hbWUsIGNvbG9yLCBpbmRleCkge1xuICAgICAgICB2YXIgaXRlbUJOYW1lLCBpdGVtQ05hbWU7XG4gICAgICAgIGlmIChjb2xvcltpbmRleF0gJiYgKGNvbG9yW2luZGV4XSA9PSAnbGlnaHQnIHx8IGNvbG9yW2luZGV4XSA9PSAnbGlnaHRlcicgfHwgY29sb3JbaW5kZXhdID09ICdkYXJrJyB8fCBjb2xvcltpbmRleF0gPT0gJ2RhcmtlcicpKSB7XG4gICAgICAgICAgICBpdGVtQk5hbWUgPSBpdGVtQU5hbWUgKyAnLScgKyBjb2xvcltpbmRleF07XG4gICAgICAgICAgICBpdGVtQ05hbWUgPSAoY29sb3JbaW5kZXggKyAxXSkgPyBpdGVtQk5hbWUgKyAnLScgKyBjb2xvcltpbmRleCArIDFdIDogZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVtQk5hbWUgPSBpdGVtQU5hbWU7XG4gICAgICAgICAgICBpdGVtQ05hbWUgPSAoY29sb3JbaW5kZXhdKSA/IGl0ZW1CTmFtZSArICctJyArIGNvbG9yW2luZGV4XSA6IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbaXRlbUJOYW1lLCBpdGVtQ05hbWVdO1xuICAgIH07XG5cbiAgICBDb2xvclNlbGVjdGlvbi5wcm90b3R5cGUuc2VuZENvbG9yU2VsZWN0aW9uID0gZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgIHZhciBzaWRlYmFyID0gJCgnLmpzLWFwcC1zaWRlYmFyLWVkaXRvci0tYnV0dG9ucycpO1xuICAgICAgICBpZiAoc2lkZWJhci5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgc2lkZWJhciA9ICQoJy5qcy1hcHAtc2lkZWJhci1lZGl0b3ItLXNoYXJlZC1zdHlsZXMnKTtcbiAgICAgICAgfVxuICAgICAgICBzaWRlYmFyLnRyaWdnZXIoJ25ldy1jb2xvci1zZWxlY3Rpb24nLCBbbGFiZWwsIHRydWVdKTtcbiAgICB9O1xuXG4gICAgQ29sb3JTZWxlY3Rpb24ucHJvdG90eXBlLnNob3dTdGF0ZUIgPSBmdW5jdGlvbiAodGFyZ2V0LCBzZWN0aW9uLCBzZWxlY3RlZCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmIChzZWxlY3RlZCkgcmV0dXJuO1xuICAgICAgICB2YXIgbGFiZWwgPSB0YXJnZXQubmV4dCgpLnRleHQoKTtcbiAgICAgICAgc3dpdGNoIChzZWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlICdtYWluJzpcbiAgICAgICAgICAgICAgICBzZWxmLmdldFZhcmlhdGlvbnNNYWluKGxhYmVsLCB0YXJnZXQuYXR0cignZGF0YS1pdGVtJykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYiZ3JzpcbiAgICAgICAgICAgICAgICBzZWxmLmdldFZhcmlhdGlvbnNCVyhsYWJlbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb250cmFzdCc6XG4gICAgICAgICAgICAgICAgc2VsZi5nZXRWYXJpYXRpb25zQ29udHJhc3QobGFiZWwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBzZWxmLmdldFZhcmlhdGlvbnNNYWluKGxhYmVsLCB0YXJnZXQuYXR0cignZGF0YS1pdGVtJykpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIENvbG9yU2VsZWN0aW9uLnByb3RvdHlwZS5nZXRWYXJpYXRpb25zTWFpbiA9IGZ1bmN0aW9uIChsYWJlbCwgaXRlbSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtLnJlcGxhY2UoJy0tY29sb3ItJywgJycpO1xuICAgICAgICAvL2N1c3RvbSBjb2xvclxuICAgICAgICB2YXIgY2xvbmUgPSB0aGlzLnZhcmlhdGlvbnNTd2F0Y2hlcy5jaGlsZHJlbignbGknKS5lcSgwKS5jbG9uZSgpLFxuICAgICAgICAgICAgdGV4dENsb25lcyA9ICcnO1xuICAgICAgICBjbG9uZS5yZW1vdmVDbGFzcygnYXBwLW1lbnVfX2NvbG9yLXByZXZpZXctLXNlbGVjdGVkJykuY2hpbGRyZW4oJy5qcy1hcHAtbWVudV9fY29sb3ItcHJldmlldycpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubWFpbkNvbG9yVmFyaWF0aW9uTGFiZWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNsb25lLmNoaWxkcmVuKCcuanMtYXBwLW1lbnVfX2NvbG9yLXByZXZpZXcnKS5hdHRyKCdzdHlsZScsICdiYWNrZ3JvdW5kLWNvbG9yOicgKyB0aGlzLmNvbG9yVmFsdWVzWyctLWNvbG9yLScgKyB2YWx1ZSArIHRoaXMubWFpbkNvbG9yVmFyaWF0aW9uTGFiZWxbaV1dICsgJzsnKS5hdHRyKCdkYXRhLWl0ZW0nLCAnLS1jb2xvci0nICsgdmFsdWUgKyB0aGlzLm1haW5Db2xvclZhcmlhdGlvbkxhYmVsW2ldKS50b2dnbGVDbGFzcygnYXBwLW1lbnVfX2NvbG9yLXByZXZpZXctLXNlbGVjdGVkJywgaSA9PSAyKTtcbiAgICAgICAgICAgIGNsb25lLmNoaWxkcmVuKCcuanMtYXBwLW1lbnVfX2NvbG9yLXRvb2x0aXAnKS50ZXh0KGxhYmVsICsgdGhpcy5tYWluQ29sb3JWYXJpYXRpb25MYWJlbFtpXSk7XG4gICAgICAgICAgICB0ZXh0Q2xvbmVzID0gdGV4dENsb25lcyArIGNsb25lWzBdLm91dGVySFRNTDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmFyaWF0aW9uc1N3YXRjaGVzLmh0bWwodGV4dENsb25lcyk7XG4gICAgfTtcblxuICAgIENvbG9yU2VsZWN0aW9uLnByb3RvdHlwZS5nZXRWYXJpYXRpb25zQlcgPSBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgdmFyIGNsb25lID0gdGhpcy52YXJpYXRpb25zU3dhdGNoZXMuY2hpbGRyZW4oJ2xpJykuZXEoMCkuY2xvbmUoKSxcbiAgICAgICAgICAgIHRleHRDbG9uZXMgPSAnJztcbiAgICAgICAgY2xvbmUucmVtb3ZlQ2xhc3MoJ2FwcC1tZW51X19jb2xvci1wcmV2aWV3LS1zZWxlY3RlZCcpLmNoaWxkcmVuKCcuanMtYXBwLW1lbnVfX2NvbG9yLXByZXZpZXcnKTtcbiAgICAgICAgaWYgKGxhYmVsID09ICctLWNvbG9yLWJsYWNrJykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsYWNrQ29sb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY2xvbmUuY2hpbGRyZW4oJy5qcy1hcHAtbWVudV9fY29sb3ItcHJldmlldycpLmF0dHIoJ3N0eWxlJywgJ2JhY2tncm91bmQtY29sb3I6JyArIHRoaXMuY29sb3JWYWx1ZXNbJy0tY29sb3ItYmxhY2snICsgdGhpcy5tYWluQ29sb3JWYXJpYXRpb25MYWJlbFsyIC0gaV1dICsgJzsnKS5hdHRyKCdkYXRhLWl0ZW0nLCAnLS1jb2xvci1ibGFjaycgKyB0aGlzLm1haW5Db2xvclZhcmlhdGlvbkxhYmVsWzIgLSBpXSkudG9nZ2xlQ2xhc3MoJ2FwcC1tZW51X19jb2xvci1wcmV2aWV3LS1zZWxlY3RlZCcsIGkgPT0gMCk7XG4gICAgICAgICAgICAgICAgY2xvbmUuY2hpbGRyZW4oJy5qcy1hcHAtbWVudV9fY29sb3ItdG9vbHRpcCcpLnRleHQoJy0tY29sb3ItYmxhY2snICsgdGhpcy5tYWluQ29sb3JWYXJpYXRpb25MYWJlbFsyIC0gaV0pO1xuICAgICAgICAgICAgICAgIHRleHRDbG9uZXMgPSB0ZXh0Q2xvbmVzICsgY2xvbmVbMF0ub3V0ZXJIVE1MO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLndoaXRlQ29sb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY2xvbmUuY2hpbGRyZW4oJy5qcy1hcHAtbWVudV9fY29sb3ItcHJldmlldycpLmF0dHIoJ3N0eWxlJywgJ2JhY2tncm91bmQtY29sb3I6JyArIHRoaXMuY29sb3JWYWx1ZXNbJy0tY29sb3Itd2hpdGUnICsgdGhpcy5tYWluQ29sb3JWYXJpYXRpb25MYWJlbFsyICsgaV1dICsgJzsnKS5hdHRyKCdkYXRhLWl0ZW0nLCAnLS1jb2xvci13aGl0ZScgKyB0aGlzLm1haW5Db2xvclZhcmlhdGlvbkxhYmVsWzIgKyBpXSkudG9nZ2xlQ2xhc3MoJ2FwcC1tZW51X19jb2xvci1wcmV2aWV3LS1zZWxlY3RlZCcsIGkgPT0gMCk7XG4gICAgICAgICAgICAgICAgY2xvbmUuY2hpbGRyZW4oJy5qcy1hcHAtbWVudV9fY29sb3ItdG9vbHRpcCcpLnRleHQoJy0tY29sb3Itd2hpdGUnICsgdGhpcy5tYWluQ29sb3JWYXJpYXRpb25MYWJlbFsyICsgaV0pO1xuICAgICAgICAgICAgICAgIHRleHRDbG9uZXMgPSB0ZXh0Q2xvbmVzICsgY2xvbmVbMF0ub3V0ZXJIVE1MO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFyaWF0aW9uc1N3YXRjaGVzLmh0bWwodGV4dENsb25lcyk7XG4gICAgfTtcblxuICAgIENvbG9yU2VsZWN0aW9uLnByb3RvdHlwZS5nZXRWYXJpYXRpb25zQ29udHJhc3QgPSBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgdmFyIGNsb25lID0gdGhpcy52YXJpYXRpb25zU3dhdGNoZXMuY2hpbGRyZW4oJ2xpJykuZXEoMCkuY2xvbmUoKTtcbiAgICAgICAgY2xvbmUuY2hpbGRyZW4oJy5qcy1hcHAtbWVudV9fY29sb3ItcHJldmlldycpO1xuICAgICAgICBjbG9uZS5jaGlsZHJlbignLmpzLWFwcC1tZW51X19jb2xvci1wcmV2aWV3JykuYXR0cignc3R5bGUnLCAnYmFja2dyb3VuZC1jb2xvcjonICsgdGhpcy5jb2xvclZhbHVlc1tsYWJlbF0gKyAnOycpLmF0dHIoJ2RhdGEtaXRlbScsIGxhYmVsKS5hZGRDbGFzcygnYXBwLW1lbnVfX2NvbG9yLXByZXZpZXctLXNlbGVjdGVkJyk7XG4gICAgICAgIGNsb25lLmNoaWxkcmVuKCcuanMtYXBwLW1lbnVfX2NvbG9yLXRvb2x0aXAnKS50ZXh0KGxhYmVsKTtcbiAgICAgICAgdGhpcy52YXJpYXRpb25zU3dhdGNoZXMuaHRtbChjbG9uZVswXS5vdXRlckhUTUwpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRIc2xhRnJvbUhzbChoc2wsIG9wYWNpdHkpIHtcbiAgICAgICAgcmV0dXJuICdoc2xhKCcgKyBwYXJzZUludChoc2xbMF0pICsgJywgJyArIHBhcnNlSW50KGhzbFsxXSAqIDEwMCkgKyAnJSwgJyArIHBhcnNlSW50KGhzbFsyXSAqIDEwMCkgKyAnJSwgJyArIG9wYWNpdHkgKyAnKSc7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldE5ld09wYWNpdHkodmFsdWUsIG9wYWNpdHkpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgnMSknLCAob3BhY2l0eSAvIDEwMCkudG9GaXhlZCgyKSArICcpJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzb3J0TnVtYmVyKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjaGVja0VuZFR5cGluZyhpbnB1dCwgY2IpIHtcbiAgICAgICAgdmFyIHR5cGluZ1RpbWVyOyAgICAgICAgICAgICAgICAvL3RpbWVyIGlkZW50aWZpZXJcbiAgICAgICAgdmFyIGRvbmVUeXBpbmdJbnRlcnZhbCA9IDQwMDsgIC8vdGltZSBpbiBtcywgNSBzZWNvbmQgZm9yIGV4YW1wbGVcblxuICAgICAgICAvL29uIGtleXVwLCBzdGFydCB0aGUgY291bnRkb3duXG4gICAgICAgIGlucHV0Lm9uKCdrZXl1cCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0eXBpbmdUaW1lcik7XG4gICAgICAgICAgICB0eXBpbmdUaW1lciA9IHNldFRpbWVvdXQoY2IsIGRvbmVUeXBpbmdJbnRlcnZhbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vb24ga2V5ZG93biwgY2xlYXIgdGhlIGNvdW50ZG93blxuICAgICAgICBpbnB1dC5vbigna2V5ZG93bicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0eXBpbmdUaW1lcik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRPcElucHV0Rm9yU2VsZWN0aW9uKHZhbCkge1xuICAgICAgICB2YXIgb3BhY2l0eSA9ICcnO1xuICAgICAgICBpZiAoaXNOYU4ocGFyc2VJbnQodmFsKSkpIHJldHVybiAnJztcbiAgICAgICAgaWYgKHBhcnNlSW50KHZhbCkgPiAxMDApIHJldHVybiAnJztcbiAgICAgICAgaWYgKHBhcnNlSW50KHZhbCkgIT0gMTAwKSBvcGFjaXR5ID0gJy1hJyArICgnMCcgKyB2YWwucmVwbGFjZSgnJScsICcnKSkuc2xpY2UoLTIpO1xuICAgICAgICByZXR1cm4gb3BhY2l0eTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0R3JhZGllbnRzQmdDb2xvcihsYWJlbCwgY29sb3JWYWx1ZXMsIGRpcmVjdGlvbikge1xuICAgICAgICAvLyBsYWJlbCBlLmcuIHByaW1hcnlcbiAgICAgICAgLy8gZGlyZWN0aW9uIC0+IDAgcmlnaHQsIDEgYm90dG9tXG4gICAgICAgIHZhciBhbmdsZSA9IGRpcmVjdGlvbiA9PSAwID8gJzkwZGVnJyA6ICcxODBkZWcnO1xuICAgICAgICByZXR1cm4gJ2JhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgnICsgYW5nbGUgKyAnLCAnICsgY29sb3JWYWx1ZXNbXCItLWdyYWRpZW50LVwiICsgbGFiZWwgKyBcIi1zdG9wLTFcIl0gKyAnLCAnICsgY29sb3JWYWx1ZXNbXCItLWdyYWRpZW50LVwiICsgbGFiZWwgKyBcIi1zdG9wLTJcIl0gKyAnKTsnO1xuICAgIH07XG5cbiAgICB2YXIgY29sb3JTZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdqcy1hcHAtbWVudS0tY29sb3InKSxcbiAgICAgICAgY29sb3JTZWxlY3Rpb25PYmplY3Q7XG4gICAgaWYgKGNvbG9yU2VsZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29sb3JTZWxlY3Rpb25PYmplY3QgPSBuZXcgQ29sb3JTZWxlY3Rpb24oY29sb3JTZWxlY3Rpb25bMF0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBlcmNlbnRhZ2VGb3JtYXQodmFsdWUpIHtcbiAgICAgICAgdmFyIG5ld1ZhbCA9IHZhbHVlO1xuICAgICAgICBpZiAoaXNOYU4ocGFyc2VJbnQobmV3VmFsKSkpIG5ld1ZhbCA9ICcxMDAlJztcbiAgICAgICAgaWYgKHBhcnNlSW50KG5ld1ZhbCkgPiAxMDApIG5ld1ZhbCA9ICcxMDAlJztcbiAgICAgICAgaWYgKG5ld1ZhbC5pbmRleE9mKCclJykgPCAwKSBuZXdWYWwgPSBuZXdWYWwgKyAnJSc7XG4gICAgICAgIHJldHVybiBuZXdWYWw7XG4gICAgfTtcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLyogXHRDb2xvcnMgSW50ZXJhY3Rpb25zICovXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICB0aGlzLkNvbG9ycyA9IGZ1bmN0aW9uIChlbGVtZW50LCBib29sKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIC8vc2V0IHN0YXJ0aW5nIHBvaW50XG4gICAgICAgIHRoaXMucHJpbWFyeUNvbG9ycyA9IFtdOy8vdGhpcyBpcyBhbiBhcnJheSBvZiA1IGNvbG9yc1xuICAgICAgICB0aGlzLmFjY2VudENvbG9ycyA9IFtdOy8vdGhpcyBpcyBhbiBhcnJheSBvZiA1IGNvbG9yc1xuICAgICAgICB0aGlzLmRvd25sb2FkQ29sb3JzID0gW107Ly90aGlzIGlzIGFuIGFycmF5IG9mIDUgY29sb3JzXG4gICAgICAgIHRoaXMuYmxhY2tDb2xvcnMgPSBbXTsvL3RoaXMgaXMgYSBjb2xvciBzdHJpbmdcbiAgICAgICAgdGhpcy53aGl0ZUNvbG9ycyA9IFtdOy8vdGhpcyBpcyBhIGNvbG9yIHN0cmluZ1xuICAgICAgICB0aGlzLmNvbnRyYXN0Q29sb3JzID0gW107IC8vdGhpcyBpcyBhbiBhcnJheSBvZiA1IGVsZW1lbnRzXG4gICAgICAgIHRoaXMuY29udHJhc3RQZWNlbnRhZ2VDb2xvcnMgPSBbXTtcbiAgICAgICAgdGhpcy5pbmZvQ29sb3JzID0gW107IC8vdGhpcyBpcyBhbiBhcnJheSBvZiA1IGVsZW1lbnRzXG4gICAgICAgIHRoaXMud2FybmluZ0NvbG9ycyA9IFtdOyAvL3RoaXMgaXMgYW4gYXJyYXkgb2YgNSBlbGVtZW50c1xuICAgICAgICB0aGlzLnN1Y2Nlc3NDb2xvcnMgPSBbXTsgLy90aGlzIGlzIGFuIGFycmF5IG9mIDUgZWxlbWVudHNcbiAgICAgICAgdGhpcy5lcnJvckNvbG9ycyA9IFtdOyAvL3RoaXMgaXMgYW4gYXJyYXkgb2YgNSBlbGVtZW50c1xuICAgICAgICB0aGlzLnRoZW1lcyA9IFtdO1xuICAgICAgICB0aGlzLmZvbnRSZW5kZXJpbmcgPSBbXTtcbiAgICAgICAgdGhpcy5jb2xvckxpbmtzID0gW107XG5cbiAgICAgICAgLy9zb21lIGRlZmF1bHQgc3RhdGVzXG4gICAgICAgIC8vdGhpcyBzaG91bGQgaW5jbHVkZSB0aGUgY3VzdG9tIGNvbG9ycywgaWYgdXNlciBoYXMgYWxyZWFkeSBjcmVhdGVkIHRoZW1cbiAgICAgICAgdGhpcy5tYWluQ29sb3JMYWJlbHMgPSBbJ3ByaW1hcnknLCAnYWNjZW50JywgJ2Rvd25sb2FkJywgJ2luZm8nLCAnd2FybmluZycsICdzdWNjZXNzJywgJ2Vycm9yJ107XG4gICAgICAgIHRoaXMuY3VzdG9tQ29sb3JMYWJlbHMgPSBbXTtcbiAgICAgICAgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzID0gW107IC8vIHRoaXMgd2lsbCBoYXZlICdwcmltYXJ5JywgJ3NlY29uZGFyeSdcbiAgICAgICAgdGhpcy5ncmFkaWVudENvbG9ySWRzID0gW107IC8vIHRoaXMgd2lsbCBoYXZlICdjdXN0b20tMCcsICdjdXN0b20tMSdcbiAgICAgICAgdGhpcy5zZWxlY3RlZENvbG9yID0gJ3ByaW1hcnknOyAvL3N0b3JlIHdoYXQgY29sb3IgdGhlIHVzZXIgaXMgaW50ZXJhY3Rpbmcgd2l0aCAoZS5nLiwgbWFpbiwgYWNjZW50IC4uLilcbiAgICAgICAgdGhpcy5zZWxlY3RlZFRoZW1lID0gMDtcblxuXG4gICAgICAgIC8vdXNlZCB0byBnZXQgdGhlIGNvbG9yIHZhcmlhdGlvbnMgb2YgYmxhY2sgYW5kIHdoaXRlXG4gICAgICAgIHRoaXMuYmxhY2tWYXJpYXRpb25zID0gW1swLCAwXSwgWzAsIDAuMV0sIFswLCAwLjJdXTtcbiAgICAgICAgdGhpcy53aGl0ZVZhcmlhdGlvbnMgPSBbWzAsIDBdLCBbMCwgLTAuMV0sIFswLCAtMC4yXV07XG4gICAgICAgIC8vY29udHJhc3QgdmFyaWF0aW9uc1xuICAgICAgICB0aGlzLmNvbnRyYXN0VmFyaWF0aW9ucyA9IGdldENvbG9yQ29udHJhc3RQZXJjZW50YWdlcygpO1xuXG4gICAgICAgIC8vc3RvcmUgaXRlbXNcbiAgICAgICAgdGhpcy5jb2xvclBpY2tlciA9ICQodGhpcy5lbGVtZW50KS5maW5kKCcuanMtY29sb3ItcGlja2VyJyk7XG4gICAgICAgIC8vbWFpbiBjb2xvcnNcbiAgICAgICAgdGhpcy5tYWluQ29sb3JzU2VjdGlvbiA9ICQodGhpcy5lbGVtZW50KS5maW5kKCcuanMtYXBwLWVkaXRvci0tbWFpbi1jb2xvcnMnKTtcbiAgICAgICAgdGhpcy5tYWluQ29sb3JWYXJpYXRpb25zSW5wdXQgPSAkKHRoaXMuZWxlbWVudCkuZmluZCgnLmpzLW1haW4tY29sb3ItdmFyaWF0aW9uJyk7XG4gICAgICAgIHRoaXMubWFpbkNvbG9yVmFyaWF0aW9uc1NpZGViYXIgPSAkKHRoaXMuZWxlbWVudCkuZmluZCgnLmpzLWFwcC1lZGl0b3ItLW1haW4tY29sb3JzJyk7XG4gICAgICAgIC8vYmxhY2smd2hpdGVcbiAgICAgICAgdGhpcy5ibGFja1doaXRlU2VjdGlvbiA9ICQodGhpcy5lbGVtZW50KS5maW5kKCcuanMtYXBwLWVkaXRvci0tYmxhY2std2hpdGUnKTtcbiAgICAgICAgLy9jb250cmFzdFxuICAgICAgICB0aGlzLmNvbnRyYXN0U2VjdGlvbiA9ICQodGhpcy5lbGVtZW50KS5maW5kKCcuanMtYXBwLWVkaXRvci0tY29udHJhc3QnKTtcbiAgICAgICAgdGhpcy5jb250cmFzdElucHV0cyA9IHRoaXMuY29udHJhc3RTZWN0aW9uLmZpbmQoJy5qcy1hcHAtZWRpdG9yLXNlY3Rpb25fX2NvbnRyYXN0LWlucHV0cycpO1xuICAgICAgICB0aGlzLmZvbnRSZW5kZXJpbmdTZWN0aW9uID0gdGhpcy5jb250cmFzdFNlY3Rpb24uZmluZCgnLmpzLWFwcC1lZGl0b3Itc2VjdGlvbl9fZm9udC1yZW5kZXJpbmcnKTtcblxuICAgICAgICB0aGlzLmJhc2ljQ29sb3JQaWNrZXIgPSAkKHRoaXMuZWxlbWVudCkuZmluZCgnLmpzLWFwcC1lZGl0b3Itc2VjdGlvbl9fY29sb3ItcGlja2VyJyk7XG4gICAgICAgIHRoaXMuYmdDb2xvclBpY2tlciA9ICQodGhpcy5lbGVtZW50KS5maW5kKCcuanMtYXBwLWVkaXRvci1zZWN0aW9uX19iZy1jb2xvci1waWNrZXInKTtcbiAgICAgICAgdGhpcy5oY0NvbG9yUGlja2VyID0gJCh0aGlzLmVsZW1lbnQpLmZpbmQoJy5qcy1hcHAtZWRpdG9yLXNlY3Rpb25fX2hjLWNvbG9yLXBpY2tlcicpO1xuICAgICAgICB0aGlzLmdyQ29sb3JQaWNrZXIgPSAkKHRoaXMuZWxlbWVudCkuZmluZCgnLmpzLWFwcC1lZGl0b3Itc2VjdGlvbl9fZ3ItY29sb3ItcGlja2VyJyk7XG4gICAgICAgIC8vIGknbGwgc3RvcmUgYWxzbyB0aGUgc3ViZWxlbWVudHNcbiAgICAgICAgdGhpcy5nckNvbG9yUGlja2VySXRlbXMgPSB0aGlzLmdyQ29sb3JQaWNrZXIuZmluZCgnLmpzLWNvbG9yLXBpY2tlcicpO1xuICAgICAgICAvL2NoZWNrIGlmIHRoZSB1aSBoYXMgYmVlbiB1cGRhdGVkIGZvciB0aGF0IHNwZWNpZmljIGNvbG9yIHZhcmlhYmxlXG4gICAgICAgIHRoaXMubWFpbkNvbG9yU2hvd24gPSAnJztcbiAgICAgICAgdGhpcy5ibGFja1doaXRlU2hvd24gPSAnJztcbiAgICAgICAgdGhpcy5jb250cmFzdFNob3duID0gJyc7XG4gICAgICAgIHRoaXMuZ3JhZGllbnRTaG93biA9ICcnO1xuXG4gICAgICAgIHRoaXMuY29sb3JPcGFjaXRpZXMgPSBbXTtcblxuICAgICAgICAvL2lmcmFtZVxuICAgICAgICB0aGlzLmlmcmFtZSA9IGpzQ29sb3JzO1xuICAgICAgICB0aGlzLmNvbG9yc0xvYWRlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoYm9vbCkgcmV0dXJuO1xuICAgICAgICAvL2NoZWNrIGZvciB0aGUgZnJhbWUgdG8gYmUgbG9hZGVkXG4gICAgICAgIHRoaXMuaW5pdEZyYW1lKCk7XG4gICAgICAgIHRoaXMubG9hZFByZXNldCgpO1xuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXIoKTtcbiAgICAgICAgLy9jdXN0b20gY29sb3JzXG4gICAgICAgIC8vdGhpcy5tYWluQ29sb3JMYWJlbHMgPSBbJ3ByaW1hcnknLCAnYWNjZW50JywgJ3dhcm5pbmcnLCAnc3VjY2VzcycsICdlcnJvcicsICdjdXN0b20tMCddXG4gICAgICAgIC8vdGhpcy5jdXN0b21Db2xvckxhYmxlcyA9IFsnLS1jb2xvci1zZWNvbmRhcnknLCAuLi5dXG4gICAgICAgIC8vdG8gYWNjZXNzIGN1c3RvbSBjb2xvciAtPiB0aGlzWydjdXN0b20tMENvbG9ycyddW3RoZW1lSW5kZXhdXG4gICAgICAgIC8vb3BhY2l0aWVzIC0+IHRoaXMuY29sb3JPcGFjaXRpZXNbJy0tY29sb3ItY3VzdG9tLTAnXSA9IFsnMjAnLCAnNDAnXVxuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLmluaXRGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAvL2xpc3RlbiBmb3IgdGhlIG9ubG9hZCBldmVudCBvZiB0aGUgZnJhbWVcbiAgICAgICAgb25JZnJhbWVMb2FkKGpzUGFnZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5mcmFtZUlzTG9hZGVkKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLmZyYW1lSXNMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKHNlbGYuY29sb3JzTG9hZGVkKSB7XG4gICAgICAgICAgICBsb2FkUHJvamVjdENvbG9yc0ZvckNvbG9ycyh0aGlzLmlmcmFtZSk7XG4gICAgICAgICAgICBsb2FkUHJvamVjdFR5cG9ncmFwaHlGb3JCdXR0b25zKHRoaXMuaWZyYW1lKTtcbiAgICAgICAgICAgIGxvYWRQcm9qZWN0U3BhY2luZ0ZvckJ1dHRvbnModGhpcy5pZnJhbWUpO1xuICAgICAgICAgICAgbG9hZFByb2plY3RCdXR0b25zRm9yQ29sb3JzKHRoaXMuaWZyYW1lKTtcbiAgICAgICAgICAgIGxvYWRQcm9qZWN0Rm9ybXNGb3JDb2xvcnModGhpcy5pZnJhbWUpO1xuICAgICAgICAgICAgc2VsZi51cGRhdGVDb2xvcnNEZW1vKGZhbHNlKTtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlQ29sb3JMaW5rcygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5mcmFtZUlzTG9hZGVkKCk7XG4gICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUubG9hZFByZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy90aGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgcmV0cmlldmUgc2F2ZWQgZGF0YSBmcm9tIHRoZSBkYXRhYmFzZVxuICAgICAgICAvLyBpZiB1c2VyIGhhcyBhbHJlYWR5IGNyZWF0ZWQgYSBjb2xvciBwYWxldHRlXG4gICAgICAgIC8vIC0gbG9hZCBpdCAtIFBST0pFQ1QuY29sb3JzIGFuZCBQUk9KRUNULmNvbG9yX29wYWNpdGllc1xuICAgICAgICAvLyAtIHVwZGF0ZSB0aGUgQ29sb3JzIG9iamVjdFxuICAgICAgICBpZiAoUFJPSkVDVCAmJiBQUk9KRUNULmNvbG9ycykge1xuICAgICAgICAgICAgdGhpcy5pbml0Q29sb3JzRnJvbVByb2plY3QoSlNPTi5wYXJzZShQUk9KRUNULmNvbG9ycykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9pZiBub3Qgc2F2ZWQgaW4gdGhlIGRiXG4gICAgICAgICAgICB0aGlzLnRoZW1lcyA9IFsnRGVmYXVsdCddO1xuICAgICAgICAgICAgdGhpcy5pbml0Q29sb3JzKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRUaGVtZUNvbG9ycygpO1xuICAgICAgICB0aGlzLmNvbG9yc0xvYWRlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUuc2V0VGhlbWVDb2xvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgLy90aGlzIGZ1bmN0aW9uIHNob3VsZCBiZSB1c2VkIHRvIHVwZGF0ZSB0aGUgc2lkZWJhciBpbnB1dHMgLT4gbWFpbiBjb2xvcnMvIGNvbnRyYXN0IC8gYmxhY2sgYW5kIHdoaXRlXG4gICAgICAgIC8vd2hlbiBhIG5ldyB0ZWFtIGlzIHNlbGVjdGVkIChvciBldmVuIHdoZW4gdGhlIGZpcnN0IHRlYW0gaXMgbG9hZGVkIC0gaWYgdGhlcmUgYXJlIClcbiAgICAgICAgLy9yZXNldCB0aGUgdmFyaWFibGVzIGZvciB1aSB1cGRhdGVcbiAgICAgICAgdGhpcy5tYWluQ29sb3JTaG93biA9ICcnO1xuICAgICAgICB0aGlzLmJsYWNrV2hpdGVTaG93biA9ICcnO1xuICAgICAgICB0aGlzLmNvbnRyYXN0U2hvd24gPSAnJztcbiAgICAgICAgdGhpcy5ncmFkaWVudFNob3duID0gJyc7XG4gICAgICAgIC8vc2V0IGNvbG9ycyBub3cgLSBzaG91bGQgdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5ncyBhY2NvcmRpbmcgdG8gdGhpcy5zZWxlY3RlZENvbG9yXG4gICAgICAgIHN3aXRjaCAoc2VsZi5zZWxlY3RlZENvbG9yKSB7XG4gICAgICAgICAgICBjYXNlICdibGFjayc6XG4gICAgICAgICAgICAgICAgc2VsZi5zZXRCbGFja1doaXRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3aGl0ZSc6XG4gICAgICAgICAgICAgICAgc2VsZi5zZXRCbGFja1doaXRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb250cmFzdCc6XG4gICAgICAgICAgICAgICAgc2VsZi5zZXRDb250cmFzdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZENvbG9yLmluZGV4T2YoJ2dyLWN1c3RvbScpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRHcmFkaWVudCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0TWFpbkNvbG9ycygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLmluaXRDb2xvcnMgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgLy9pbmRleCAtPiB0aGVtZSBpbmRleFxuICAgICAgICAvL3NldCBtYWluIGNvbG9yc1xuICAgICAgICAvLyBpZiB5b3UgdXBkYXRlIHRoaXMgLT4geW91J2xsIG5lZWQgdG8gdXBkYXRlIHRoZSBzYW1lIGluIHRoZSBDb2xvclNlbGVjdGlvbiBhcyB3ZWxsXG4gICAgICAgIHRoaXMucHJpbWFyeUNvbG9yc1tpbmRleF0gPSBnZXREZWZhdWx0TWFpbkNvbG9yVmFyaWF0aW9uKCdwcmltYXJ5Jyk7XG4gICAgICAgIHRoaXMuYWNjZW50Q29sb3JzW2luZGV4XSA9IGdldERlZmF1bHRNYWluQ29sb3JWYXJpYXRpb24oJ2FjY2VudCcpO1xuICAgICAgICB0aGlzLmRvd25sb2FkQ29sb3JzW2luZGV4XSA9IGdldERlZmF1bHRNYWluQ29sb3JWYXJpYXRpb24oJ2Rvd25sb2FkJyk7XG4gICAgICAgIHRoaXMuaW5mb0NvbG9yc1tpbmRleF0gPSBnZXREZWZhdWx0TWFpbkNvbG9yVmFyaWF0aW9uKCdpbmZvJyk7XG4gICAgICAgIHRoaXMud2FybmluZ0NvbG9yc1tpbmRleF0gPSBnZXREZWZhdWx0TWFpbkNvbG9yVmFyaWF0aW9uKCd3YXJuaW5nJyk7XG4gICAgICAgIHRoaXMuc3VjY2Vzc0NvbG9yc1tpbmRleF0gPSBnZXREZWZhdWx0TWFpbkNvbG9yVmFyaWF0aW9uKCdzdWNjZXNzJyk7XG4gICAgICAgIHRoaXMuZXJyb3JDb2xvcnNbaW5kZXhdID0gZ2V0RGVmYXVsdE1haW5Db2xvclZhcmlhdGlvbignZXJyb3InKTtcbiAgICAgICAgLy9zZXQgYmxhY2sgYW5kIHdoaXRlXG4gICAgICAgIHRoaXMuYmxhY2tDb2xvcnNbaW5kZXhdID0gW2dldEhzbEZyb21IZXgoJyMxYzFjMjEnKV07XG4gICAgICAgIHRoaXMud2hpdGVDb2xvcnNbaW5kZXhdID0gW2dldEhzbEZyb21IZXgoJyNmZmZmZmYnKV07XG4gICAgICAgIC8vc2V0IGNvbnRyYXN0XG4gICAgICAgIHRoaXMuY29udHJhc3RQZWNlbnRhZ2VDb2xvcnNbaW5kZXhdID0gdGhpcy5jb250cmFzdFZhcmlhdGlvbnMuc2xpY2UoMCk7XG4gICAgICAgIHRoaXMuY29udHJhc3RDb2xvcnNbaW5kZXhdID0gZ2V0Q29udHJhc3RWYXJpYXRpb24oJyMzNTM3M2InLCAnI0ZGRkZGRicsIHRoaXMuY29udHJhc3RQZWNlbnRhZ2VDb2xvcnNbdGhpcy5zZWxlY3RlZFRoZW1lXSk7XG4gICAgICAgIHRoaXMuZm9udFJlbmRlcmluZ1tpbmRleF0gPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS5pbml0Q29sb3JzRnJvbVByb2plY3QgPSBmdW5jdGlvbiAoY29sb3JzKSB7XG4gICAgICAgIC8vIHZhciBjb2xvcnMgPSBKU09OLnBhcnNlKFBST0pFQ1QuY29sb3JzKTtcbiAgICAgICAgdGhpcy50aGVtZXMgPSBbXTtcbiAgICAgICAgdGhpcy5tYWluQ29sb3JMYWJlbHMgPSBbXTtcbiAgICAgICAgdGhpcy5jdXN0b21Db2xvckxhYmVscyA9IFtdO1xuICAgICAgICB0aGlzLmZvbnRSZW5kZXJpbmcgPSBbXTtcbiAgICAgICAgdGhpcy50aGVtZXMgPSBPYmplY3QudmFsdWVzKGNvbG9yc1sndGhlbWVzJ10pO1xuICAgICAgICB0aGlzLm1haW5Db2xvckxhYmVscyA9IE9iamVjdC52YWx1ZXMoY29sb3JzWydtYWluQ29sb3JMYWJlbHMnXSk7XG5cbiAgICAgICAgaWYgKGNvbG9yc1snY3VzdG9tQ29sb3JMYWJlbHMnXSkgdGhpcy5jdXN0b21Db2xvckxhYmVscyA9IE9iamVjdC52YWx1ZXMoY29sb3JzWydjdXN0b21Db2xvckxhYmVscyddKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubWFpbkNvbG9yTGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gY29sb3JzW3RoaXMubWFpbkNvbG9yTGFiZWxzW2ldXTtcbiAgICAgICAgICAgIHRoaXNbdGhpcy5tYWluQ29sb3JMYWJlbHNbaV0gKyAnQ29sb3JzJ10gPSB0aGlzLmNvbnZDb2xvclRvQXJyKG9iaik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJsYWNrQ29sb3JzID0gdGhpcy5jb252Q29sb3JUb0Fycihjb2xvcnNbJ2JsYWNrQ29sb3JzJ10pO1xuICAgICAgICB0aGlzLndoaXRlQ29sb3JzID0gdGhpcy5jb252Q29sb3JUb0Fycihjb2xvcnNbJ3doaXRlQ29sb3JzJ10pO1xuICAgICAgICB0aGlzLmNvbnRyYXN0Q29sb3JzID0gdGhpcy5jb252Q29sb3JUb0Fycihjb2xvcnNbJ2NvbnRyYXN0Q29sb3JzJ10pO1xuICAgICAgICB0aGlzLmNvbnRyYXN0UGVjZW50YWdlQ29sb3JzID0gdGhpcy5jb252UGVyY2VUb0Fycihjb2xvcnNbJ2NvbnRyYXN0UGVjZW50YWdlQ29sb3JzJ10pO1xuICAgICAgICAvLyBmb250IHNtb290aGluZ1xuICAgICAgICBpZiAoY29sb3JzWydmb250UmVuZGVyaW5nJ10pIHtcbiAgICAgICAgICAgIHRoaXMuZm9udFJlbmRlcmluZyA9IE9iamVjdC52YWx1ZXMoY29sb3JzWydmb250UmVuZGVyaW5nJ10pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgaXQgd2FzIG5vdCBkZWZpbmVkIC0+IHNldCBpdCB0byBmYWxzZVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRoZW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9udFJlbmRlcmluZ1tpXSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29sb3IgbGlua3MgYW1vbmcgdGhlbWVzXG4gICAgICAgIGlmIChjb2xvcnNbJ2NvbG9yTGlua3MnXSkge1xuICAgICAgICAgICAgZm9yICh2YXIgY29sb3IgaW4gY29sb3JzWydjb2xvckxpbmtzJ10pIHtcbiAgICAgICAgICAgICAgICBpZiAoY29sb3JzWydjb2xvckxpbmtzJ10uaGFzT3duUHJvcGVydHkoY29sb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sb3JMaW5rc1tjb2xvcl0gPSBjb2xvcnNbJ2NvbG9yTGlua3MnXVtjb2xvcl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW5pdCBncmFkaWVudCBjb2xvcnNcbiAgICAgICAgaWYgKGNvbG9yc1snZ3JhZGllbnRDb2xvckxhYmVscyddKSB0aGlzLmdyYWRpZW50Q29sb3JMYWJlbHMgPSBPYmplY3QudmFsdWVzKGNvbG9yc1snZ3JhZGllbnRDb2xvckxhYmVscyddKTtcbiAgICAgICAgaWYgKGNvbG9yc1snZ3JhZGllbnRDb2xvcklkcyddKSB0aGlzLmdyYWRpZW50Q29sb3JJZHMgPSBPYmplY3QudmFsdWVzKGNvbG9yc1snZ3JhZGllbnRDb2xvcklkcyddKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmdyYWRpZW50Q29sb3JJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBjb2xvcnNbdGhpcy5ncmFkaWVudENvbG9ySWRzW2ldICsgJ0dyYWRpZW50cyddO1xuICAgICAgICAgICAgdGhpc1t0aGlzLmdyYWRpZW50Q29sb3JJZHNbaV0gKyAnR3JhZGllbnRzJ10gPSB0aGlzLmNvbnZDb2xvclRvQXJyKG9iaik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS5jb252Q29sb3JUb0FyciA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIG9iaikge1xuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViQXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgc3ViT2JqID0gb2JqW3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eTIgaW4gc3ViT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJPYmouaGFzT3duUHJvcGVydHkocHJvcGVydHkyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViQXJyYXkucHVzaChPYmplY3QudmFsdWVzKHN1Yk9ialtwcm9wZXJ0eTJdKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhcnJheS5wdXNoKHN1YkFycmF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUuY29udlBlcmNlVG9BcnIgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgYXJyYXkucHVzaChPYmplY3QudmFsdWVzKG9ialtwcm9wZXJ0eV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUuaW5pdFRoZW1lQ29sb3JzID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIC8vc2V0IG5ldyB0aGVtZSBlcXVhbCB0byBkZWZhdWx0IGNvbG9yIHRoZW1lXG4gICAgICAgIHRoaXMucHJpbWFyeUNvbG9yc1tpbmRleF0gPSB0aGlzLnByaW1hcnlDb2xvcnNbMF0uc2xpY2UoMCk7XG4gICAgICAgIHRoaXMuYWNjZW50Q29sb3JzW2luZGV4XSA9IHRoaXMuYWNjZW50Q29sb3JzWzBdLnNsaWNlKDApO1xuICAgICAgICB0aGlzLmRvd25sb2FkQ29sb3JzW2luZGV4XSA9IHRoaXMuZG93bmxvYWRDb2xvcnNbMF0uc2xpY2UoMCk7XG4gICAgICAgIHRoaXMuaW5mb0NvbG9yc1tpbmRleF0gPSB0aGlzLmluZm9Db2xvcnNbMF0uc2xpY2UoMCk7XG4gICAgICAgIHRoaXMud2FybmluZ0NvbG9yc1tpbmRleF0gPSB0aGlzLndhcm5pbmdDb2xvcnNbMF0uc2xpY2UoMCk7XG4gICAgICAgIHRoaXMuc3VjY2Vzc0NvbG9yc1tpbmRleF0gPSB0aGlzLnN1Y2Nlc3NDb2xvcnNbMF0uc2xpY2UoMCk7XG4gICAgICAgIHRoaXMuZXJyb3JDb2xvcnNbaW5kZXhdID0gdGhpcy5lcnJvckNvbG9yc1swXS5zbGljZSgwKTtcbiAgICAgICAgdGhpcy5ibGFja0NvbG9yc1tpbmRleF0gPSB0aGlzLmJsYWNrQ29sb3JzWzBdLnNsaWNlKDApO1xuICAgICAgICB0aGlzLndoaXRlQ29sb3JzW2luZGV4XSA9IHRoaXMud2hpdGVDb2xvcnNbMF0uc2xpY2UoMCk7XG4gICAgICAgIHRoaXMuY29udHJhc3RQZWNlbnRhZ2VDb2xvcnNbaW5kZXhdID0gdGhpcy5jb250cmFzdFBlY2VudGFnZUNvbG9yc1swXS5zbGljZSgwKTtcbiAgICAgICAgdGhpcy5jb250cmFzdENvbG9yc1tpbmRleF0gPSB0aGlzLmNvbnRyYXN0Q29sb3JzWzBdLnNsaWNlKDApO1xuXG4gICAgICAgIHRoaXMuZm9udFJlbmRlcmluZ1tpbmRleF0gPSBmYWxzZTtcbiAgICAgICAgLy9pbml0IGN1c3RvbSBjb2xvcnMgaWYgYW55XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tYWluQ29sb3JMYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1haW5Db2xvckxhYmVsc1tpXS5pbmRleE9mKCdjdXN0b20tJykgPiAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXNbdGhpcy5tYWluQ29sb3JMYWJlbHNbaV0gKyAnQ29sb3JzJ11baW5kZXhdID0gdGhpc1t0aGlzLm1haW5Db2xvckxhYmVsc1tpXSArICdDb2xvcnMnXVswXS5zbGljZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmdyYWRpZW50Q29sb3JJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXNbdGhpcy5ncmFkaWVudENvbG9ySWRzW2ldICsgJ0dyYWRpZW50cyddW2luZGV4XSA9IHRoaXNbdGhpcy5ncmFkaWVudENvbG9ySWRzW2ldICsgJ0dyYWRpZW50cyddWzBdLnNsaWNlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS5zZXRCdG5Db2xvckN1c3RvbU5pY2VMYWJlbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaWZyYW1lLnNldEJ0bkNvbG9yQ3VzdG9tTmljZUxhYmVscyh0aGlzLm1haW5Db2xvckxhYmVscywgdGhpcy5jdXN0b21Db2xvckxhYmVscyk7XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUuc2V0QnRuR3JhZGllbnROaWNlTGFiZWxzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlmcmFtZS5zZXRCdG5HcmFkaWVudE5pY2VMYWJlbHModGhpcy5ncmFkaWVudENvbG9yTGFiZWxzKTtcbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS5ldmVudExpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIC8vdGhpcyBldmVudCBpcyB0cmlnZ2VyZWQgd2hlbiBvbmUgb2YgdGhlIGNvbG9ycyBpbiB0aGUgbGVmdCBzaWRlYmFyIGlzIHNlbGVjdGVkXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5vbignY29udGVudC1zZWxlY3RlZCcsIGZ1bmN0aW9uIChldmVudCwgdHlwZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKHRhcmdldC5pbmRleE9mKCdncmFkaWVudCcpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdE5ld0NvbG9yKHR5cGUsICctLWdyYWRpZW50LScgKyBzZWxmLmdyYWRpZW50Q29sb3JJZHNbc2VsZi5ncmFkaWVudENvbG9yTGFiZWxzLmluZGV4T2YodGFyZ2V0LnJlcGxhY2UoJy0tZ3JhZGllbnQtJywgJycpKV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdE5ld0NvbG9yKHR5cGUsIHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvL3RoaXMgaXMgdHJpZ2dlcmVkIHdoZW4gb25lIG9mIHRoZSBpbnB1dHMgb2YgdGhlIG1haW4gY29sb3IgaXMgdXBkYXRlZFxuICAgICAgICBsaXN0ZW5Ub1BhcmVudElucHV0KCQodGhpcy5tYWluQ29sb3JWYXJpYXRpb25zU2lkZWJhciksIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgc2VsZi5jb2xvclVwZGF0ZWQoJChldmVudC5jdXJyZW50VGFyZ2V0KSwgJ21haW4nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vdGhpcyBpcyB0cmlnZ2VyZWQgd2hlbiBvbmUgb2YgdGhlIGlucHV0cyBvZiB0aGUgYmxhY2svd2hpdGUgY29sb3IgaXMgdXBkYXRlZFxuICAgICAgICBsaXN0ZW5Ub1BhcmVudElucHV0KHRoaXMuYmxhY2tXaGl0ZVNlY3Rpb24sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgc2VsZi5jb2xvclVwZGF0ZWQoJChldmVudC5jdXJyZW50VGFyZ2V0KSwgJ2J3Jyk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL3RoaXMgaXMgdHJpZ2dlcmVkIHdoZW4gb25lIG9mIHRoZSBpbnB1dHMgb2YgdGhlIGNvbnRyYXN0IGNvbG9yIGlzIHVwZGF0ZWRcbiAgICAgICAgbGlzdGVuVG9QYXJlbnRJbnB1dCh0aGlzLmNvbnRyYXN0SW5wdXRzLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHNlbGYuY29udHJhc3RDb2xvclVwZGF0ZWQoJChldmVudC5jdXJyZW50VGFyZ2V0KSk7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUNvbG9yc0RlbW8odHJ1ZSwgJ2NvbnRyYXN0Jyk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyB0aGlzIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBmb250IHJlbmRlcmluZyBvcHRpb24gaXMgY2hhbmdlZFxuICAgICAgICB0aGlzLmZvbnRSZW5kZXJpbmdTZWN0aW9uLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlRm9udFJlbmRlcmluZyhldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgc2VsZi51cGRhdGVDb2xvcnNEZW1vKHRydWUsICdmb250UmVuZGVyaW5nJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vdGhpcyBldmVudCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgY29sb3IgcGlja2VyIGlzIHVwZGF0ZWRcbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLm9uKCdjb2xvci1waWNrZXItdXBkYXRlZCcsIGZ1bmN0aW9uIChldmVudCwgY29sb3IsIHBpY2tlckVsZW0pIHtcbiAgICAgICAgICAgIC8vbmV3IGNvbG9yIGhhcyBiZWVuIHNlbGVjdGVkXG4gICAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZENvbG9yLmluZGV4T2YoJ2dyLWN1c3RvbScpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnNldEdyYWRpZW50KGNvbG9yLCBwaWNrZXJFbGVtKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZi5tYWluQ29sb3JMYWJlbHMuaW5kZXhPZihzZWxmLnNlbGVjdGVkQ29sb3IpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIHdlIGFyZSBjaGFuZ2luZyBhIG1haW4gY29sb3JcbiAgICAgICAgICAgICAgICBzZWxmLnNldE1haW5Db2xvcnMoY29sb3IpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxmLnNlbGVjdGVkQ29sb3IgPT0gJ3doaXRlJyB8fCBzZWxmLnNlbGVjdGVkQ29sb3IgPT0gJ2JsYWNrJykge1xuICAgICAgICAgICAgICAgIHNlbGYuc2V0QmxhY2tXaGl0ZShjb2xvcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuc2V0Q29udHJhc3QoY29sb3IsIHBpY2tlckVsZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi51cGRhdGVDb2xvcnNEZW1vKHRydWUsIHNlbGYuc2VsZWN0ZWRDb2xvcik7XG4gICAgICAgIH0pO1xuICAgICAgICAvL3RoaXMgZXZlbnQgaXMgdHJpZ2dlcmVkIHdoZW4gYSBuZXcgdGhlbWUgaXMgYWRkZWQgaW4gdGhlIGxlZnQgc2lkZWJhclxuICAgICAgICAkKHRoaXMuZWxlbWVudCkub24oJ2NvbnRlbnQtc3dpdGNoLWFkZGVkJywgZnVuY3Rpb24gKGV2ZW50LCB0eXBlLCB0aXRsZSkge1xuICAgICAgICAgICAgaWYgKHR5cGUgIT0gJ2NvbG9ycycpIHJldHVybjtcbiAgICAgICAgICAgIHNlbGYudGhlbWVzLnB1c2godGl0bGUpO1xuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZFRoZW1lID0gc2VsZi50aGVtZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHNlbGYuaW5pdFRoZW1lQ29sb3JzKHNlbGYuc2VsZWN0ZWRUaGVtZSk7XG4gICAgICAgICAgICBzZWxmLnNldFRoZW1lQ29sb3JzKCk7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUNvbG9yc0RlbW8odHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL3RoaXMgZXZlbnQgaXMgdHJpZ2dlcmVkIHdoZW4gYSBuZXcgdGhlbWUgaXMgc2VsZWN0ZWQgaW4gdGhlIGxlZnQgc2lkZWJhclxuICAgICAgICAkKHRoaXMuZWxlbWVudCkub24oJ2NvbnRlbnQtc3dpdGNoLXNlbGVjdGVkJywgZnVuY3Rpb24gKGV2ZW50LCB0eXBlLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgIT0gJ2NvbG9ycycpIHJldHVybjtcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWRUaGVtZSA9IGluZGV4O1xuICAgICAgICAgICAgLy9pZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lICh0aGVtZSB3YXMgYWxyZWFkeSBjcmVhdGUgYW5kIHJldHJpZXZlZCBmcm9tIHRoZSBkYXRhYmFzZSlcbiAgICAgICAgICAgIC8vIHlvdSBzaG91bGQgbWFrZSBzdXJlIHRoZSBpbml0aWFsIGNvbG9ycyBhcmUgYWxyZWFkeSBzZXRcbiAgICAgICAgICAgIHNlbGYuc2V0VGhlbWVDb2xvcnMoKTtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlQ29sb3JzRGVtbyhmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL3RoaXMgZXZlbnQgaXMgdHJpZ2dlcmVkIHdoZW4gYSB0aGVtZSBpcyBlZGl0ZWQgaW4gdGhlIGxlZnQgc2lkZWJhclxuICAgICAgICAkKHRoaXMuZWxlbWVudCkub24oJ2NvbnRlbnQtc3dpdGNoLWVkaXRlZCcsIGZ1bmN0aW9uIChldmVudCwgdHlwZSwgaW5kZXgsIHRpdGxlKSB7XG4gICAgICAgICAgICBpZiAodHlwZSAhPSAnY29sb3JzJykgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHNlbGYudGhlbWVzW2luZGV4XSAhPSB0aXRsZSAmJiBJU19MT0dHRUQgPT0gJzEnKSBTYXZlQWxlcnQueWVzKCk7XG4gICAgICAgICAgICBzZWxmLnRoZW1lc1tpbmRleF0gPSB0aXRsZTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vdGhpcyBldmVudCBpcyB0cmlnZ2VyZWQgd2hlbiBhIHRoZW1lIGlzIGRlbGV0ZWQgaW4gdGhlIGxlZnQgc2lkZWJhclxuICAgICAgICAkKHRoaXMuZWxlbWVudCkub24oJ2NvbnRlbnQtc3dpdGNoLWRlbGV0ZWQnLCBmdW5jdGlvbiAoZXZlbnQsIHR5cGUsIGluZGV4LCBzZWxlY3RlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgIT0gJ2NvbG9ycycpIHJldHVybjtcbiAgICAgICAgICAgIHNlbGYucmVtb3ZlVGhlbWUodHlwZSwgaW5kZXgsIHNlbGVjdGVkKTtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlQ29sb3JzRGVtbyh0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9ibGFjayZ3aGl0ZSBldmVudHNcbiAgICAgICAgLy9hZGQgYSBuZXcgYmxhY2sgb3Igd2hpdGUgdmFyaWF0aW9uXG4gICAgICAgIHRoaXMuYmxhY2tXaGl0ZVNlY3Rpb24ub24oJ2NsaWNrJywgJy5qcy1idG4tY3JlYXRlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBzZWxmLmNyZWF0ZUJsYWNrV2hpdGVWYXJpYXRpb24oKTtcbiAgICAgICAgICAgIHNlbGYuYmxhY2tXaGl0ZVNlY3Rpb24uY2hpbGRyZW4oKS5lcSgwKS5yZW1vdmVDbGFzcygnYXBwLWVkaXRvci1zZWN0aW9uX190aXRsZS0taGlkZS1ib2R5Jyk7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUNvbG9yc0RlbW8odHJ1ZSwgc2VsZi5zZWxlY3RlZENvbG9yKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vcmVtb3ZlIGEgYmxhY2sgb3Igd2hpdGUgdmFyaWF0aW9uXG4gICAgICAgIHRoaXMuYmxhY2tXaGl0ZVNlY3Rpb24ub24oJ2NsaWNrJywgJy5qcy1idG4tZGVsZXRlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBzZWxmLmRlbGV0ZUJsYWNrV2hpdGVWYXJpYXRpb24oJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcuanMtYXBwLWVkaXRvcl9fY29sb3ItYncnKS5pbmRleCgpKTtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlQ29sb3JzRGVtbyh0cnVlLCBzZWxmLnNlbGVjdGVkQ29sb3IpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL2N1c3RvbSBjb2xvcnMgYW5kIGdyYWRpZW50c1xuICAgICAgICAvL2EgbmV3IGN1c3RvbSBjb2xvciBoYXMgYmVlbiBjcmVhdGVkXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5vbignY3VzdG9tLWNvbnRlbnQtYWRkZWQnLCBmdW5jdGlvbiAoZXZlbnQsIHR5cGUsIHRpdGxlLCBjdXN0b21MYWJlbCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgIT0gJ2NvbG9ycycpIHJldHVybjtcbiAgICAgICAgICAgIHZhciBpc0dyYWRpZW50ID0gY3VzdG9tTGFiZWwuaW5kZXhPZignZ3JhZGllbnQnKSA+IC0xO1xuICAgICAgICAgICAgaWYgKGlzR3JhZGllbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29sb3JDdXN0b21MYWJlbCA9IGN1c3RvbUxhYmVsLnJlcGxhY2UoJyNncmFkaWVudC0nLCAnJyk7XG4gICAgICAgICAgICAgICAgLy9jcmVhdGUgdGhpcyBuZXcgY29sb3IgZm9yIGVhY2ggdGhlbWVcbiAgICAgICAgICAgICAgICBzZWxmW2NvbG9yQ3VzdG9tTGFiZWwgKyAnR3JhZGllbnRzJ10gPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgZ3JhZGllbnRWYWx1ZSA9IHNlbGYuZ2V0SW5pdGlhbEdyYWRpZW50KCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLnRoZW1lcy5sZW5ndGg7IGkrKykgc2VsZltjb2xvckN1c3RvbUxhYmVsICsgJ0dyYWRpZW50cyddW2ldID0gZ3JhZGllbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICBzZWxmLmdyYWRpZW50Q29sb3JMYWJlbHMucHVzaCh0aXRsZS5yZXBsYWNlKCctLWdyYWRpZW50LScsICcnKSk7XG4gICAgICAgICAgICAgICAgc2VsZi5ncmFkaWVudENvbG9ySWRzLnB1c2goY29sb3JDdXN0b21MYWJlbCk7XG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3ROZXdDb2xvcih0eXBlLCAnLS1ncmFkaWVudC0nICsgY29sb3JDdXN0b21MYWJlbCk7XG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGVDb2xvcnNEZW1vTmV3Q3VzdG9tKHNlbGZbY29sb3JDdXN0b21MYWJlbCArICdHcmFkaWVudHMnXVtzZWxmLnNlbGVjdGVkVGhlbWVdLCB0aXRsZSwgY29sb3JDdXN0b21MYWJlbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBjb2xvckN1c3RvbUxhYmVsID0gY3VzdG9tTGFiZWwucmVwbGFjZSgnI2NvbG9yLScsICcnKTtcbiAgICAgICAgICAgICAgICAvL2NyZWF0ZSB0aGlzIG5ldyBjb2xvciBmb3IgZWFjaCB0aGVtZVxuICAgICAgICAgICAgICAgIHNlbGZbY29sb3JDdXN0b21MYWJlbCArICdDb2xvcnMnXSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi50aGVtZXMubGVuZ3RoOyBpKyspIHNlbGZbY29sb3JDdXN0b21MYWJlbCArICdDb2xvcnMnXVtpXSA9IHNlbGYucHJpbWFyeUNvbG9yc1swXTtcbiAgICAgICAgICAgICAgICAvL3B1c2ggdGhlIGxhYmVsIHRvIHRoZSBtYWluIGNvbG9yIGxhYmVsc1xuICAgICAgICAgICAgICAgIHNlbGYubWFpbkNvbG9yTGFiZWxzLnB1c2goY29sb3JDdXN0b21MYWJlbCk7XG4gICAgICAgICAgICAgICAgc2VsZi5jdXN0b21Db2xvckxhYmVscy5wdXNoKHRpdGxlKTsvL3N0b3JlIGxhYmVscyBzb21ld2hlcmVcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdE5ld0NvbG9yKHR5cGUsICctLWNvbG9yLScgKyBjb2xvckN1c3RvbUxhYmVsKTtcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZUNvbG9yc0RlbW9OZXdDdXN0b20oc2VsZltjb2xvckN1c3RvbUxhYmVsICsgJ0NvbG9ycyddW3NlbGYuc2VsZWN0ZWRUaGVtZV0sIHRpdGxlLCBjb2xvckN1c3RvbUxhYmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vYSBjdXN0b20gY29sb3IgbmFtZSBoYXMgYmVlbiB1cGRhdGVkXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5vbignY3VzdG9tLWNvbnRlbnQtZWRpdGVkJywgZnVuY3Rpb24gKGV2ZW50LCB0eXBlLCBpbmRleCwgdGl0bGUsIHNlY3Rpb24pIHtcbiAgICAgICAgICAgIGlmICh0eXBlICE9ICdjb2xvcnMnKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoc2VjdGlvbi5pbmRleE9mKCdncmFkaWVudCcpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmdyYWRpZW50Q29sb3JMYWJlbHNbc2VsZi5ncmFkaWVudENvbG9ySWRzLmluZGV4T2Yoc2VjdGlvbi5yZXBsYWNlKCcjZ3JhZGllbnQtJywgJycpKV0gPSB0aXRsZS5yZXBsYWNlKCctLWdyYWRpZW50LScsICcnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jdXN0b21Db2xvckxhYmVsc1tzZWxmLm1haW5Db2xvckxhYmVscy5pbmRleE9mKHNlY3Rpb24ucmVwbGFjZSgnI2NvbG9yLScsICcnKSkgLSA1XSA9IHRpdGxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi51cGRhdGVDb2xvcnNEZW1vRWRpdEN1c3RvbShzZWN0aW9uLCB0aXRsZSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL2EgY3VzdG9tIGNvbG9yIGhhcyBiZWVuIHJlbW92ZWRcbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLm9uKCdjdXN0b20tY29udGVudC1yZW1vdmVkJywgZnVuY3Rpb24gKGV2ZW50LCB0eXBlLCBpbmRleCwgbGFiZWxJZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgIT0gJ2NvbG9ycycpIHJldHVybjtcbiAgICAgICAgICAgIGlmIChsYWJlbElkLmluZGV4T2YoJ2dyYWRpZW50JykgPiAtMSkge1xuICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IGxhYmVsSWQucmVwbGFjZSgnI2dyYWRpZW50LScsICcnKSxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhDb2xvciA9IHNlbGYuZ3JhZGllbnRDb2xvcklkcy5pbmRleE9mKGxhYmVsKTtcbiAgICAgICAgICAgICAgICBzZWxmLmdyYWRpZW50Q29sb3JMYWJlbHMuc3BsaWNlKGluZGV4Q29sb3IsIDEpO1xuICAgICAgICAgICAgICAgIHNlbGYuZ3JhZGllbnRDb2xvcklkcy5zcGxpY2UoaW5kZXhDb2xvciwgMSk7XG4gICAgICAgICAgICAgICAgc2VsZltsYWJlbCArICdHcmFkaWVudHMnXSA9IFtdO1xuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlQ29sb3JzRGVtb1JlbW92ZUN1c3RvbSgnZ3ItJyArIGxhYmVsKTtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgY29sb3IgZnJvbSBjb2xvciBsaW5rIGFycmF5XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY29sb3JMaW5rc1snZ3ItJyArIGxhYmVsXSkgc2VsZi5jb2xvckxpbmtzWydnci0nICsgbGFiZWxdID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IGxhYmVsSWQucmVwbGFjZSgnI2NvbG9yLScsICcnKSxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhDb2xvciA9IHNlbGYubWFpbkNvbG9yTGFiZWxzLmluZGV4T2YobGFiZWwpO1xuICAgICAgICAgICAgICAgIHNlbGYubWFpbkNvbG9yTGFiZWxzLnNwbGljZShpbmRleENvbG9yLCAxKTtcbiAgICAgICAgICAgICAgICBzZWxmLmN1c3RvbUNvbG9yTGFiZWxzLnNwbGljZSgoaW5kZXhDb2xvciAtIDUpLCAxKTtcbiAgICAgICAgICAgICAgICBzZWxmW2xhYmVsICsgJ0NvbG9ycyddID0gW107XG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGVDb2xvcnNEZW1vUmVtb3ZlQ3VzdG9tKGxhYmVsKTtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgY29sb3IgZnJvbSBjb2xvciBsaW5rIGFycmF5XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY29sb3JMaW5rc1tsYWJlbF0pIHNlbGYuY29sb3JMaW5rc1tsYWJlbF0gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdGhpcyBldmVudCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgbGluayBidXR0b24gaXMgY2xpY2tlZCBpbnNpZGUgdGhlIGNvbG9yIGRlbW9cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLm9uKCd1cGRhdGVDb2xvckxpbmsnLCBmdW5jdGlvbiAoZXZlbnQsIHNlY3Rpb24sIGJvb2wpIHtcbiAgICAgICAgICAgIGlmIChzZWN0aW9uLmluZGV4T2YoJ2dyYWRpZW50JykgPiAtMSkge1xuICAgICAgICAgICAgICAgIHNlbGYuY29sb3JMaW5rc1tzZWN0aW9uLnJlcGxhY2UoJyNncmFkaWVudC0nLCAnZ3ItJyldID0gYm9vbDsgLy8gZS5nLnNlbGYuY29sb3JMaW5rc1snZ3ItY3VzdG9tLTAnXVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNvbG9yTGlua3Nbc2VjdGlvbi5yZXBsYWNlKCcjY29sb3ItJywgJycpXSA9IGJvb2w7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLmdldEluaXRpYWxHcmFkaWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByaW1hcnkgPSB0aGlzLnByaW1hcnlDb2xvcnNbMF1bMl0sXG4gICAgICAgICAgICBuZXdIc2wgPSBwcmltYXJ5WzBdIDwgMzEwID8gcHJpbWFyeVswXSArIDUwIDogcHJpbWFyeVswXSAtIDUwO1xuICAgICAgICByZXR1cm4gKFtwcmltYXJ5LCBbbmV3SHNsLCBwcmltYXJ5WzFdLCBwcmltYXJ5WzJdXV0pO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLnNlbGVjdE5ld0NvbG9yID0gZnVuY3Rpb24gKHR5cGUsIHRhcmdldCkge1xuICAgICAgICBpZiAodHlwZSAhPSAnY29sb3JzJykgcmV0dXJuO1xuICAgICAgICBpZiAodGFyZ2V0LmluZGV4T2YoJy0tY29sb3ItYmxhY2snKSA+IC0xIHx8IHRhcmdldC5pbmRleE9mKCctLWNvbG9yLXdoaXRlJykgPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENvbG9yID0gdGFyZ2V0LnJlcGxhY2UoJy0tY29sb3ItJywgJycpO1xuICAgICAgICAgICAgdGhpcy5yZXNldFNpZGViYXJTZWN0aW9ucygnYmxhY2std2hpdGUnKTtcbiAgICAgICAgICAgIHRoaXMuc2V0QmxhY2tXaGl0ZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5pbmRleE9mKCctLWNvbG9yLScpID4gLTEpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgYSBtYWluIGNvbG9yIC0+IHVwZGF0ZSBpdFxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENvbG9yID0gdGFyZ2V0LnJlcGxhY2UoJy0tY29sb3ItJywgJycpO1xuICAgICAgICAgICAgdGhpcy5yZXNldFNpZGViYXJTZWN0aW9ucygnbWFpbicpO1xuICAgICAgICAgICAgdGhpcy5zZXRNYWluQ29sb3JzKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmluZGV4T2YoJy0tZ3JhZGllbnQtJykgPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENvbG9yID0gdGFyZ2V0LnJlcGxhY2UoJy0tZ3JhZGllbnQnLCAnZ3InKTsgLy8gZS5nLiwgJ2dyLWN1c3RvbS0wJ1xuICAgICAgICAgICAgdGhpcy5yZXNldFNpZGViYXJTZWN0aW9ucygnZ3JhZGllbnQnKTtcbiAgICAgICAgICAgIHRoaXMuc2V0R3JhZGllbnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgY29sb3IgY29udHJhc3RcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDb2xvciA9ICdjb250cmFzdCc7XG4gICAgICAgICAgICB0aGlzLnJlc2V0U2lkZWJhclNlY3Rpb25zKCdjb250cmFzdCcpO1xuICAgICAgICAgICAgdGhpcy5zZXRDb250cmFzdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9UT0RPIHJlZmFjdG8gY2xhc3NcbiAgICBDb2xvcnMucHJvdG90eXBlLnJlc2V0U2lkZWJhclNlY3Rpb25zID0gZnVuY3Rpb24gKHNlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5tYWluQ29sb3JzU2VjdGlvbi5hZGQodGhpcy5ibGFja1doaXRlU2VjdGlvbikuYWRkKHRoaXMuY29udHJhc3RTZWN0aW9uKS5hZGQodGhpcy5iYXNpY0NvbG9yUGlja2VyKS5hZGQodGhpcy5iZ0NvbG9yUGlja2VyKS5hZGQodGhpcy5oY0NvbG9yUGlja2VyKS5hZGQodGhpcy5nckNvbG9yUGlja2VyKS5hZGRDbGFzcygnYXBwLXNlY3Rpb24tLWlzLWhpZGRlbicpO1xuICAgICAgICBzd2l0Y2ggKHNlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ2JsYWNrLXdoaXRlJzpcbiAgICAgICAgICAgICAgICB0aGlzLmJsYWNrV2hpdGVTZWN0aW9uLmFkZCh0aGlzLmJhc2ljQ29sb3JQaWNrZXIpLnJlbW92ZUNsYXNzKCdhcHAtc2VjdGlvbi0taXMtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb250cmFzdCc6XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cmFzdFNlY3Rpb24uYWRkKHRoaXMuYmdDb2xvclBpY2tlcikuYWRkKHRoaXMuaGNDb2xvclBpY2tlcikucmVtb3ZlQ2xhc3MoJ2FwcC1zZWN0aW9uLS1pcy1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2dyYWRpZW50JzpcbiAgICAgICAgICAgICAgICB0aGlzLmdyQ29sb3JQaWNrZXIucmVtb3ZlQ2xhc3MoJ2FwcC1zZWN0aW9uLS1pcy1oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5tYWluQ29sb3JzU2VjdGlvbi5hZGQodGhpcy5iYXNpY0NvbG9yUGlja2VyKS5yZW1vdmVDbGFzcygnYXBwLXNlY3Rpb24tLWlzLWhpZGRlbicpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUuc2V0TWFpbkNvbG9ycyA9IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICBpZiAodGhpcy5tYWluQ29sb3JTaG93bi5pbmRleE9mKHRoaXMuc2VsZWN0ZWRDb2xvcikgPCAwIHx8IGNvbG9yKSB7XG4gICAgICAgICAgICAvL3RoZSB1aSBoYXMgbm90IGJlZW4gc2V0IGZvciB0aGlzIGNvbG9yIHlldFxuICAgICAgICAgICAgLy9vciB0aGUgY29sb3IgcGlja2VyIGlzIGJlaW5nIHVwZGF0ZWRcbiAgICAgICAgICAgIHRoaXMubWFpbkNvbG9yU2hvd24gPSB0aGlzLnNlbGVjdGVkQ29sb3I7XG4gICAgICAgICAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgICAgICAgICAvL3RoaXMgaXMgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbG9yIHBpY2tlciB3YXMgdXBkYXRlZFxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTXVsdGlwbGVDb2xvcnNJblRoZW1lcyhnZXRNYWluQ29sb3JWYXJpYXRpb24oY29sb3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb2xvcnMgPSB0aGlzW3RoaXMuc2VsZWN0ZWRDb2xvciArICdDb2xvcnMnXVt0aGlzLnNlbGVjdGVkVGhlbWVdO1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB1c2VkIGZvciBtYWluIGNvbG9ycyB2YXJpYXRpb24gKHByaW1hcnkvYWNjZW50L3NlY29uZGFyeS93YXJuaW5nL2Vycm9yL3N1Y2Nlc3MpXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0TWFpbkNvbG9yKGNvbG9yc1tpXSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy91cGRhdGUgY29sb3IgcGlja2VyXG4gICAgICAgIGlmIChjb2xvciA9PT0gdW5kZWZpbmVkIHx8IGNvbG9yID09PSBudWxsIHx8ICFjb2xvcikge1xuICAgICAgICAgICAgdGhpcy5jb2xvclBpY2tlci50cmlnZ2VyKCd1cGRhdGUtcGlja2VyJywgW3RoaXNbdGhpcy5zZWxlY3RlZENvbG9yICsgJ0NvbG9ycyddW3RoaXMuc2VsZWN0ZWRUaGVtZV1bMl1dKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLnNldEJsYWNrV2hpdGUgPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgaWYgKHRoaXMuYmxhY2tXaGl0ZVNob3duLmluZGV4T2YodGhpcy5zZWxlY3RlZENvbG9yKSA8IDAgfHwgY29sb3IpIHtcbiAgICAgICAgICAgIC8vdGhlIHVpIGhhcyBvdCBiZWVuIHNldCBmb3IgdGhpcyBjb2xvciB5ZXRcbiAgICAgICAgICAgIHRoaXMuYmxhY2tXaGl0ZVNob3duID0gdGhpcy5zZWxlY3RlZENvbG9yO1xuICAgICAgICAgICAgdmFyIGl0ZW1MZW5ndGggPSB0aGlzW3RoaXMuc2VsZWN0ZWRDb2xvciArICdDb2xvcnMnXVt0aGlzLnNlbGVjdGVkVGhlbWVdLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChjb2xvcikge1xuICAgICAgICAgICAgICAgIC8vdGhpcyBpcyB0aGUgY2FzZSB3aGVyZSB0aGUgY29sb3IgcGlja2VyIHdhcyB1cGRhdGVkXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVNdWx0aXBsZUNvbG9yc0luVGhlbWVzKHRoaXMuZ2V0QmxhY2tXaGl0ZVZhcmlhdGlvbihjb2xvciwgaXRlbUxlbmd0aCkpO1xuICAgICAgICAgICAgICAgIC8vIHRoaXNbdGhpcy5zZWxlY3RlZENvbG9yKydDb2xvcnMnXVt0aGlzLnNlbGVjdGVkVGhlbWVdID0gdGhpcy5nZXRCbGFja1doaXRlVmFyaWF0aW9uKGNvbG9yLCBpdGVtTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb2xvcnMgPSB0aGlzW3RoaXMuc2VsZWN0ZWRDb2xvciArICdDb2xvcnMnXVt0aGlzLnNlbGVjdGVkVGhlbWVdO1xuICAgICAgICAgICAgLy9maXJzdCAtPiBtYWtlIHN1cmUgdGhlcmUncyB0aGUgcmlnaHQgbnVtYmVyIG9mIGlucHV0c1xuICAgICAgICAgICAgdGhpcy5jaGVja0JsYWNrV2hpdGVJbnB1dE51bWJlcihjb2xvcnMubGVuZ3RoKTtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdXNlZCBmb3IgYmxhY2svd2hpdGUgY29sb3JzIHZhcmlhdGlvblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEJsYWNrV2hpdGVDb2xvcihjb2xvcnNbaV0sIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vdXBkYXRlIGNvbG9yIHBpY2tlclxuICAgICAgICBpZiAoY29sb3IgPT09IHVuZGVmaW5lZCB8fCBjb2xvciA9PT0gbnVsbCB8fCAhY29sb3IpIHtcbiAgICAgICAgICAgIC8vYmxhY2sgYW5kIHdoaXRlIC0+IG1haW4gY29sb3IgaXMgdGhlIGZpcnN0IG9uZVxuICAgICAgICAgICAgdGhpcy5jb2xvclBpY2tlci50cmlnZ2VyKCd1cGRhdGUtcGlja2VyJywgW3RoaXNbdGhpcy5zZWxlY3RlZENvbG9yICsgJ0NvbG9ycyddW3RoaXMuc2VsZWN0ZWRUaGVtZV1bMF1dKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc2V0QldBY3Rpb25WaXNpYmlsaXR5KCk7XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUudXBkYXRlTXVsdGlwbGVDb2xvcnNJblRoZW1lcyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5jb2xvckxpbmtzW3RoaXMuc2VsZWN0ZWRDb2xvcl0pIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50aGVtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzW3RoaXMuc2VsZWN0ZWRDb2xvciArICdDb2xvcnMnXVtpXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc1t0aGlzLnNlbGVjdGVkQ29sb3IgKyAnQ29sb3JzJ11bdGhpcy5zZWxlY3RlZFRoZW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUuc2V0Q29udHJhc3QgPSBmdW5jdGlvbiAoY29sb3IsIHBpY2tlckVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udHJhc3RTaG93bi5pbmRleE9mKHRoaXMuc2VsZWN0ZWRDb2xvcikgPCAwIHx8IGNvbG9yKSB7XG4gICAgICAgICAgICAvL3RoZSB1aSBoYXMgbm90IGJlZW4gc2V0IGZvciB0aGlzIGNvbG9yIHlldFxuICAgICAgICAgICAgLy9vciB0aGUgY29sb3IgcGlja2VyIGlzIGJlaW5nIHVwZGF0ZWRcbiAgICAgICAgICAgIHRoaXMuY29udHJhc3RTaG93biA9IHRoaXMuc2VsZWN0ZWRDb2xvcjtcbiAgICAgICAgICAgIGlmIChjb2xvcikge1xuICAgICAgICAgICAgICAgIC8vdGhpcyBpcyB0aGUgY2FzZSB3aGVyZSB0aGUgY29sb3IgcGlja2VyIHdhcyB1cGRhdGVkXG4gICAgICAgICAgICAgICAgLy9maXJzdCBjaGVjayBpZiB0aGlzIGlzIHRoZSBiZyBvciB0aGUgaGMgY29sb3JcbiAgICAgICAgICAgICAgICB2YXIgaXNCZ0NvbG9yID0gKHBpY2tlckVsZW1lbnQucGFyZW50cygnLmpzLWFwcC1lZGl0b3Itc2VjdGlvbl9fYmctY29sb3ItcGlja2VyJykubGVuZ3RoID4gMCk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbG9yc1NjYWxlID0gaXNCZ0NvbG9yXG4gICAgICAgICAgICAgICAgICAgID8gW2dldEhleEZyb21Ic2woY29sb3IpLCBnZXRIZXhGcm9tSHNsKHRoaXNbdGhpcy5zZWxlY3RlZENvbG9yICsgJ0NvbG9ycyddW3RoaXMuc2VsZWN0ZWRUaGVtZV1bNV0pXVxuICAgICAgICAgICAgICAgICAgICA6IFtnZXRIZXhGcm9tSHNsKHRoaXNbdGhpcy5zZWxlY3RlZENvbG9yICsgJ0NvbG9ycyddW3RoaXMuc2VsZWN0ZWRUaGVtZV1bMF0pLCBnZXRIZXhGcm9tSHNsKGNvbG9yKV1cbiAgICAgICAgICAgICAgICB0aGlzW3RoaXMuc2VsZWN0ZWRDb2xvciArICdDb2xvcnMnXVt0aGlzLnNlbGVjdGVkVGhlbWVdID0gZ2V0Q29udHJhc3RWYXJpYXRpb24oY29sb3JzU2NhbGVbMF0sIGNvbG9yc1NjYWxlWzFdLCB0aGlzLmNvbnRyYXN0UGVjZW50YWdlQ29sb3JzW3RoaXMuc2VsZWN0ZWRUaGVtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNvbG9ycyA9IHRoaXNbdGhpcy5zZWxlY3RlZENvbG9yICsgJ0NvbG9ycyddW3RoaXMuc2VsZWN0ZWRUaGVtZV07XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHVzZWQgZm9yIGNvbnRyYXN0IGNvbG9ycyB2YXJpYXRpb25cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb250cmFzdENvbG9yKGNvbG9yc1tpXSwgdGhpcy5jb250cmFzdFBlY2VudGFnZUNvbG9yc1t0aGlzLnNlbGVjdGVkVGhlbWVdW2ldLCBpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51cGRhdGVGb250UmVuZGVyaW5nKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICAvL3VwZGF0ZSBjb2xvciBwaWNrZXJcbiAgICAgICAgaWYgKGNvbG9yID09PSB1bmRlZmluZWQgfHwgY29sb3IgPT09IG51bGwgfHwgIWNvbG9yKSB7XG4gICAgICAgICAgICB0aGlzLmNvbG9yUGlja2VyLnRyaWdnZXIoJ3VwZGF0ZS1jb250cmFzdC1waWNrZXInLCBbdGhpc1t0aGlzLnNlbGVjdGVkQ29sb3IgKyAnQ29sb3JzJ11bdGhpcy5zZWxlY3RlZFRoZW1lXVswXSwgdGhpc1t0aGlzLnNlbGVjdGVkQ29sb3IgKyAnQ29sb3JzJ11bdGhpcy5zZWxlY3RlZFRoZW1lXVs1XV0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUuc2V0R3JhZGllbnQgPSBmdW5jdGlvbiAoY29sb3IsIHBpY2tlckVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGdyYWRpZW50SWQgPSB0aGlzLnNlbGVjdGVkQ29sb3IucmVwbGFjZSgnZ3ItJywgJycpO1xuICAgICAgICBpZiAodGhpcy5ncmFkaWVudFNob3duLmluZGV4T2YoZ3JhZGllbnRJZCkgPCAwIHx8IGNvbG9yKSB7XG4gICAgICAgICAgICAvL3RoZSB1aSBoYXMgbm90IGJlZW4gc2V0IGZvciB0aGlzIGNvbG9yIHlldFxuICAgICAgICAgICAgdGhpcy5ncmFkaWVudFNob3duID0gZ3JhZGllbnRJZDtcbiAgICAgICAgICAgIGlmIChjb2xvcikge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IChwaWNrZXJFbGVtZW50LnBhcmVudHMoJy5qcy1hcHAtZWRpdG9yLXNlY3Rpb25fX2dyLWNvbG9yLXBpY2tlci0tc3RvcC0xJykubGVuZ3RoID4gMCkgPyAwIDogMTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb2xvckxpbmtzWydnci0nICsgZ3JhZGllbnRJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRoZW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1tncmFkaWVudElkICsgJ0dyYWRpZW50cyddW2ldW2luZGV4XSA9IGNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tncmFkaWVudElkICsgJ0dyYWRpZW50cyddW3RoaXMuc2VsZWN0ZWRUaGVtZV1baW5kZXhdID0gY29sb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vdXBkYXRlIGNvbG9yIHBpY2tlclxuICAgICAgICBpZiAoY29sb3IgPT09IHVuZGVmaW5lZCB8fCBjb2xvciA9PT0gbnVsbCB8fCAhY29sb3IpIHtcbiAgICAgICAgICAgIC8vYmxhY2sgYW5kIHdoaXRlIC0+IG1haW4gY29sb3IgaXMgdGhlIGZpcnN0IG9uZVxuICAgICAgICAgICAgdGhpcy5nckNvbG9yUGlja2VySXRlbXMuZXEoMCkudHJpZ2dlcigndXBkYXRlLXBpY2tlcicsIFt0aGlzW2dyYWRpZW50SWQgKyAnR3JhZGllbnRzJ11bdGhpcy5zZWxlY3RlZFRoZW1lXVswXV0pO1xuICAgICAgICAgICAgdGhpcy5nckNvbG9yUGlja2VySXRlbXMuZXEoMSkudHJpZ2dlcigndXBkYXRlLXBpY2tlcicsIFt0aGlzW2dyYWRpZW50SWQgKyAnR3JhZGllbnRzJ11bdGhpcy5zZWxlY3RlZFRoZW1lXVsxXV0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUudXBkYXRlRm9udFJlbmRlcmluZyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZm9udFJlbmRlcmluZ1t0aGlzLnNlbGVjdGVkVGhlbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgKCF0aGlzLmZvbnRSZW5kZXJpbmdbdGhpcy5zZWxlY3RlZFRoZW1lXSkgPyB0aGlzLmZvbnRSZW5kZXJpbmdTZWN0aW9uLmZpbmQoJ3NlbGVjdCcpLnZhbCgwKSA6IHRoaXMuZm9udFJlbmRlcmluZ1NlY3Rpb24uZmluZCgnc2VsZWN0JykudmFsKHRoaXMuZm9udFJlbmRlcmluZ1t0aGlzLnNlbGVjdGVkVGhlbWVdKTtcbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS5jaGVja0JsYWNrV2hpdGVJbnB1dE51bWJlciA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXJzID0gdGhpcy5ibGFja1doaXRlU2VjdGlvbi5maW5kKCcuanMtYXBwLWVkaXRvcl9fY29sb3ItYncnKTtcbiAgICAgICAgaWYgKHdyYXBwZXJzLmxlbmd0aCA9PSBsZW5ndGgpIHJldHVybjtcbiAgICAgICAgaWYgKHdyYXBwZXJzLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVCbGFja1doaXRlSW5wdXRzKE51bWJlcihsZW5ndGggLSB3cmFwcGVycy5sZW5ndGgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQmxhY2tXaGl0ZUlucHV0cyhOdW1iZXIod3JhcHBlcnMubGVuZ3RoIC0gbGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLmNyZWF0ZUJsYWNrV2hpdGVJbnB1dHMgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IHRoaXMuYmxhY2tXaGl0ZVNlY3Rpb24uZmluZCgnLmpzLWFwcC1lZGl0b3JfX2NvbG9yLWJ3JykuZXEoMCksXG4gICAgICAgICAgICBhcHBlbmQgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXI7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNsb25lID0gaW5wdXQuY2xvbmUoKTtcbiAgICAgICAgICAgIGNsb25lLnJlbW92ZUNsYXNzKCdhcHAtZWRpdG9yX19jb2xvci1pdGVtLS1sb2NrZWQgYXBwLWVkaXRvcl9fY29sb3ItaXRlbS0tbGFiZWxsZWQnKS5hZGRDbGFzcygnYXBwLWVkaXRvcl9fY29sb3ItaXRlbS0tcmVtb3ZhYmxlJyk7XG4gICAgICAgICAgICBhcHBlbmQgPSBhcHBlbmQgKyBjbG9uZVswXS5vdXRlckhUTUw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJsYWNrV2hpdGVTZWN0aW9uLmNoaWxkcmVuKCcuanMtYXBwLWVkaXRvci1zZWN0aW9uX19ib2R5JykuYXBwZW5kKGFwcGVuZCk7XG4gICAgICAgIHRoaXMuYmxhY2tXaGl0ZUlucHV0c1Jlc2V0TGFiZWxDbGFzcygpO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLnJlbW92ZUJsYWNrV2hpdGVJbnB1dHMgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBpbnB1dHMgPSB0aGlzLmJsYWNrV2hpdGVTZWN0aW9uLmZpbmQoJy5qcy1hcHAtZWRpdG9yX19jb2xvci1idycpLFxuICAgICAgICAgICAgdG90ID0gaW5wdXRzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXI7IGkrKykge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gdG90IC0gaSAtIDE7XG4gICAgICAgICAgICBpbnB1dHMuZXEoaW5kZXgpLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmxhY2tXaGl0ZUlucHV0c1Jlc2V0TGFiZWxDbGFzcygpO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLmJsYWNrV2hpdGVJbnB1dHNSZXNldExhYmVsQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbnB1dHMgPSB0aGlzLmJsYWNrV2hpdGVTZWN0aW9uLmZpbmQoJy5qcy1hcHAtZWRpdG9yX19jb2xvci1idycpLFxuICAgICAgICAgICAgbGFzdEl0ZW0gPSBpbnB1dHMubGVuZ3RoIC0gMTtcbiAgICAgICAgaW5wdXRzLnJlbW92ZUNsYXNzKCdhcHAtZWRpdG9yX19jb2xvci1pdGVtLS1sYWJlbGxlZCcpLmVxKGxhc3RJdGVtKS5hZGRDbGFzcygnYXBwLWVkaXRvcl9fY29sb3ItaXRlbS0tbGFiZWxsZWQnKTtcbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS5jb2xvclVwZGF0ZWQgPSBmdW5jdGlvbiAodGFyZ2V0LCB0eXBlKSB7XG4gICAgICAgIC8vZ2V0IHRoZSBpbmRleCBvZiB0aGUgY29sb3JcbiAgICAgICAgdmFyIGNvbG9yV3JhcHBlciA9IHRhcmdldC5wYXJlbnRzKCcuanMtbWFpbi1jb2xvci12YXJpYXRpb24nKSxcbiAgICAgICAgICAgIGluZGV4ID0gTnVtYmVyKGNvbG9yV3JhcHBlci5hdHRyKCdkYXRhLW9yZGVyJykpLFxuICAgICAgICAgICAgaW5wdXRzID0gY29sb3JXcmFwcGVyLmZpbmQoJy5qcy1oc2wtY29sb3ItaW5wdXQnKTtcbiAgICAgICAgaWYgKHR5cGUgPT0gJ2J3JykgaW5kZXggPSB0YXJnZXQucGFyZW50cygnLmpzLWFwcC1lZGl0b3JfX2NvbG9yLWJ3JykuaW5kZXgoKTtcbiAgICAgICAgLy91cGRhdGUgdGhlIGFycmF5IG9mIGNvbG9yc1xuICAgICAgICBpZiAodGhpcy5jb2xvckxpbmtzW3RoaXMuc2VsZWN0ZWRDb2xvcl0pIHtcbiAgICAgICAgICAgIHZhciBjb2xvckl0ZW1zID0gKHR5cGUgPT0gJ2J3JykgPyB0YXJnZXQucGFyZW50cygnLmpzLWFwcC1lZGl0b3ItLXZhcmlhdGlvbnMtd3JhcHBlcicpLmVxKDApLmZpbmQoJy5qcy1hcHAtZWRpdG9yX19jb2xvci1idycpIDogdGFyZ2V0LnBhcmVudHMoJy5qcy1hcHAtZWRpdG9yLS12YXJpYXRpb25zLXdyYXBwZXInKS5lcSgwKS5maW5kKCcuanMtbWFpbi1jb2xvci12YXJpYXRpb24nKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29sb3JWYXJpYXRpb25zSW5UaGVtZXMoY29sb3JJdGVtcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzW3RoaXMuc2VsZWN0ZWRDb2xvciArICdDb2xvcnMnXVt0aGlzLnNlbGVjdGVkVGhlbWVdW2luZGV4XSA9IFtOdW1iZXIoaW5wdXRzLmVxKDApLnZhbCgpKSwgY29udmVydFN0cmluZ1RvSHNsKGlucHV0cy5lcSgxKS52YWwoKSksIGNvbnZlcnRTdHJpbmdUb0hzbChpbnB1dHMuZXEoMikudmFsKCkpXTtcbiAgICAgICAgfVxuICAgICAgICAvL3VwZGF0ZSB0aGUgY29sb3IgcHJldmlld1xuICAgICAgICBpZiAodHlwZSA9PSAnYncnKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJsYWNrV2hpdGVDb2xvcih0aGlzW3RoaXMuc2VsZWN0ZWRDb2xvciArICdDb2xvcnMnXVt0aGlzLnNlbGVjdGVkVGhlbWVdW2luZGV4XSwgaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDb2xvcnNEZW1vKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRNYWluQ29sb3IodGhpc1t0aGlzLnNlbGVjdGVkQ29sb3IgKyAnQ29sb3JzJ11bdGhpcy5zZWxlY3RlZFRoZW1lXVtpbmRleF0sIGluZGV4KTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29sb3JzRGVtbyh0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLnVwZGF0ZUNvbG9yVmFyaWF0aW9uc0luVGhlbWVzID0gZnVuY3Rpb24gKGNvbG9ycykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGlucHV0cyA9IGNvbG9ycy5lcShpKS5maW5kKCcuanMtaHNsLWNvbG9yLWlucHV0Jyk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbG9ySW5UaGVtZXMoaW5wdXRzLCBpKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLnVwZGF0ZUNvbG9ySW5UaGVtZXMgPSBmdW5jdGlvbiAoaW5wdXRzLCBpbmRleCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBOdW1iZXIoaW5wdXRzLmVxKDApLnZhbCgpKSxcbiAgICAgICAgICAgIHZhbHVlSFNMMSA9IGNvbnZlcnRTdHJpbmdUb0hzbChpbnB1dHMuZXEoMSkudmFsKCkpLFxuICAgICAgICAgICAgdmFsdWVIU0wyID0gY29udmVydFN0cmluZ1RvSHNsKGlucHV0cy5lcSgyKS52YWwoKSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50aGVtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXNbdGhpcy5zZWxlY3RlZENvbG9yICsgJ0NvbG9ycyddW2ldW2luZGV4XSA9IFt2YWx1ZSwgdmFsdWVIU0wxLCB2YWx1ZUhTTDJdO1xuICAgICAgICAgICAgdGhpc1t0aGlzLnNlbGVjdGVkQ29sb3IgKyAnQ29sb3JzJ11baV1baW5kZXhdID0gW051bWJlcih2YWx1ZSksIE51bWJlcih2YWx1ZUhTTDEpLCBOdW1iZXIodmFsdWVIU0wyKV07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS5jb250cmFzdENvbG9yVXBkYXRlZCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGFyZ2V0LnBhcmVudHMoJy5qcy1hcHAtZWRpdG9yX19jb250cmFzdC1pdGVtJykuaW5kZXgoKSxcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VJbnQodGFyZ2V0LnZhbCgpLnJlcGxhY2UoJyUnLCAnJykpO1xuXG4gICAgICAgIHZhbHVlID0gKHZhbHVlIDwgMCkgPyAwIDogdmFsdWU7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlID4gMTAwKSA/IDEwMCA6IHZhbHVlO1xuICAgICAgICB0aGlzLm5ld0NvbnRyYXN0Q29sb3JTY2FsZSh2YWx1ZSwgaW5kZXgpO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLmdldEJsYWNrV2hpdGVWYXJpYXRpb24gPSBmdW5jdGlvbiAoaHNsLCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGJsYWNrV2hpdGVWYXJpYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJsYWNrV2hpdGVWYXJpYXRpb25zLnB1c2goW2hzbFswXSwgY2hlY2tQZXJjZW50YWdlKGhzbFsxXSArIHRoaXNbdGhpcy5zZWxlY3RlZENvbG9yICsgJ1ZhcmlhdGlvbnMnXVtpXVswXSksIGNoZWNrUGVyY2VudGFnZShoc2xbMl0gKyB0aGlzW3RoaXMuc2VsZWN0ZWRDb2xvciArICdWYXJpYXRpb25zJ11baV1bMV0pXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJsYWNrV2hpdGVWYXJpYXRpb25zO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLmdldEJsYWNrV2hpdGVTaW5nbGVWYXJpYXRpb24gPSBmdW5jdGlvbiAoaHNsLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gW2hzbFswXSwgY2hlY2tQZXJjZW50YWdlKGhzbFsxXSArIHRoaXNbdGhpcy5zZWxlY3RlZENvbG9yICsgJ1ZhcmlhdGlvbnMnXVtpbmRleF1bMF0pLCBjaGVja1BlcmNlbnRhZ2UoaHNsWzJdICsgdGhpc1t0aGlzLnNlbGVjdGVkQ29sb3IgKyAnVmFyaWF0aW9ucyddW2luZGV4XVsxXSldXG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUuc2V0TWFpbkNvbG9yID0gZnVuY3Rpb24gKGNvbG9yLCBpbmRleCkge1xuICAgICAgICB2YXIgaHVlID0gcGFyc2VJbnQoY29sb3JbMF0pLFxuICAgICAgICAgICAgc2F0ID0gTWF0aC5yb3VuZChjb2xvclsxXSAqIDEwMCksXG4gICAgICAgICAgICBsaWcgPSBNYXRoLnJvdW5kKGNvbG9yWzJdICogMTAwKTtcblxuICAgICAgICB2YXIgaW5wdXRzID0gdGhpcy5tYWluQ29sb3JWYXJpYXRpb25zSW5wdXQuZXEoaW5kZXgpLmZpbmQoJy5qcy1oc2wtY29sb3ItaW5wdXQnKSxcbiAgICAgICAgICAgIHByZXZpZXcgPSB0aGlzLm1haW5Db2xvclZhcmlhdGlvbnNJbnB1dC5lcShpbmRleCkuZmluZCgnLmpzLWNvbG9yLXByZXZpZXcnKTtcbiAgICAgICAgaW5wdXRzLmVxKDApLnZhbChodWUpO1xuICAgICAgICBpbnB1dHMuZXEoMSkudmFsKHNhdCk7XG4gICAgICAgIGlucHV0cy5lcSgyKS52YWwobGlnKTtcbiAgICAgICAgcHJldmlldy5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAnaHNsKCcgKyBodWUgKyAnLCAnICsgc2F0ICsgJyUsICcgKyBsaWcgKyAnJSknKTtcbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS5zZXRCbGFja1doaXRlQ29sb3IgPSBmdW5jdGlvbiAoY29sb3IsIGluZGV4KSB7XG4gICAgICAgIC8vZmlyc3QgbmVlZCB0byBjaGVjayBpZiBpbnB1dCBleGlzdHNcbiAgICAgICAgdmFyIGh1ZSA9IHBhcnNlSW50KGNvbG9yWzBdKSxcbiAgICAgICAgICAgIHNhdCA9IE1hdGgucm91bmQoY29sb3JbMV0gKiAxMDApLFxuICAgICAgICAgICAgbGlnID0gTWF0aC5yb3VuZChjb2xvclsyXSAqIDEwMCk7XG5cbiAgICAgICAgdmFyIGlucHV0V3JhcHBlciA9IHRoaXMuYmxhY2tXaGl0ZVNlY3Rpb24uZmluZCgnLmpzLWFwcC1lZGl0b3JfX2NvbG9yLWJ3JykuZXEoaW5kZXgpLFxuICAgICAgICAgICAgaW5wdXRzID0gaW5wdXRXcmFwcGVyLmZpbmQoJ2lucHV0JyksXG4gICAgICAgICAgICBwcmV2aWV3ID0gaW5wdXRXcmFwcGVyLmZpbmQoJy5qcy1jb2xvci1wcmV2aWV3Jyk7XG4gICAgICAgIGlucHV0cy5lcSgwKS52YWwoY2hlY2tIdWUoaHVlKSk7XG4gICAgICAgIGlucHV0cy5lcSgxKS52YWwoc2F0KTtcbiAgICAgICAgaW5wdXRzLmVxKDIpLnZhbChsaWcpO1xuICAgICAgICBwcmV2aWV3LmNzcygnYmFja2dyb3VuZC1jb2xvcicsICdoc2woJyArIGh1ZSArICcsICcgKyBzYXQgKyAnJSwgJyArIGxpZyArICclKScpO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLnNldENvbnRyYXN0Q29sb3IgPSBmdW5jdGlvbiAoY29sb3IsIHBlcmNlbnRhZ2UsIGluZGV4KSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0gdGhpcy5jb250cmFzdElucHV0cy5maW5kKCcuanMtYXBwLWVkaXRvcl9fY29udHJhc3QtaXRlbScpLmVxKGluZGV4KSxcbiAgICAgICAgICAgIGlucHV0ID0gd3JhcHBlci5maW5kKCdpbnB1dCcpLFxuICAgICAgICAgICAgcHJldmlldyA9IHdyYXBwZXIuZmluZCgnLmpzLWNvbG9yLXByZXZpZXcnKTtcbiAgICAgICAgaW5wdXQudmFsKHBlcmNlbnRhZ2UpO1xuICAgICAgICBwcmV2aWV3LmNzcygnYmFja2dyb3VuZC1jb2xvcicsICdoc2woJyArIHBhcnNlSW50KGNvbG9yWzBdKSArICcsICcgKyBwYXJzZUludChjb2xvclsxXSAqIDEwMCkgKyAnJSwgJyArIHBhcnNlSW50KGNvbG9yWzJdICogMTAwKSArICclKScpO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLmNyZWF0ZUJsYWNrV2hpdGVWYXJpYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vY3JlYXRlIG5ldyBpdGVtIGFuZCBhcHBlbmQgaXRcbiAgICAgICAgdmFyIHZhcmlhdGlvbnMgPSB0aGlzLmJsYWNrV2hpdGVTZWN0aW9uLmZpbmQoJy5qcy1hcHAtZWRpdG9yX19jb2xvci1idycpLFxuICAgICAgICAgICAgdG90ID0gdmFyaWF0aW9ucy5sZW5ndGgsXG4gICAgICAgICAgICBjbG9uZSA9IHZhcmlhdGlvbnMuZXEoMCkuY2xvbmUoKTtcbiAgICAgICAgY2xvbmUucmVtb3ZlQ2xhc3MoJ2FwcC1lZGl0b3JfX2NvbG9yLWl0ZW0tLWxvY2tlZCBhcHAtZWRpdG9yX19jb2xvci1pdGVtLS1sYWJlbGxlZCcpLmFkZENsYXNzKCdhcHAtZWRpdG9yX19jb2xvci1pdGVtLS1yZW1vdmFibGUnKTtcbiAgICAgICAgY2xvbmUuZmluZCgnaW5wdXQnKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICB0aGlzLmJsYWNrV2hpdGVTZWN0aW9uLmNoaWxkcmVuKCcuanMtYXBwLWVkaXRvci1zZWN0aW9uX19ib2R5JykuYXBwZW5kKGNsb25lKTtcbiAgICAgICAgLy9nZXQgdGhlIGNvbG9yIHZhcmlhcmlvblxuICAgICAgICB2YXIgY29sb3IgPSB0aGlzLmdldEJsYWNrV2hpdGVTaW5nbGVWYXJpYXRpb24odGhpc1t0aGlzLnNlbGVjdGVkQ29sb3IgKyAnQ29sb3JzJ11bdGhpcy5zZWxlY3RlZFRoZW1lXVswXSwgdG90KTtcbiAgICAgICAgLy91cGRhdGUgdGhlIHZhcmlhYmxlIHN0b3JpbmcgdGhlIHZhcmlhdGlvbnNcbiAgICAgICAgdGhpc1t0aGlzLnNlbGVjdGVkQ29sb3IgKyAnQ29sb3JzJ11bdGhpcy5zZWxlY3RlZFRoZW1lXS5wdXNoKGNvbG9yKTtcbiAgICAgICAgLy91cGRhdGUgdGhlIGNvbG9yIG9mIHRoZSBpbnB1dCBhbmQgdGhlIHByZXZpZXdcbiAgICAgICAgdGhpcy5zZXRCbGFja1doaXRlQ29sb3IoY29sb3IsIHRvdCk7XG4gICAgICAgIC8vcmVzZXQgdGhlIGxpc3Qgd2l0aCB0aGUgcHJvcGVyIGxhYmVsIGNsYXNzZXNcbiAgICAgICAgdGhpcy5ibGFja1doaXRlSW5wdXRzUmVzZXRMYWJlbENsYXNzKCk7XG4gICAgICAgIC8vaWYgdHdvIHZhcmlhdGlvbiB2aXNpYmxlIC0+IHJlbW92ZSBwbHVzIGFjdGlvblxuICAgICAgICB0aGlzLnJlc2V0QldBY3Rpb25WaXNpYmlsaXR5KCk7XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUuZGVsZXRlQmxhY2tXaGl0ZVZhcmlhdGlvbiA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAvL3JlbW92ZSBpdGVtIGZyb20gZG9tXG4gICAgICAgIHRoaXMuYmxhY2tXaGl0ZVNlY3Rpb24uZmluZCgnLmpzLWFwcC1lZGl0b3JfX2NvbG9yLWJ3JykuZXEoaW5kZXgpLnJlbW92ZSgpO1xuICAgICAgICAvL3VwZGF0ZSBvYmplY3Qgc3RvcmVkIHZhcmlhYmxlc1xuICAgICAgICB0aGlzW3RoaXMuc2VsZWN0ZWRDb2xvciArICdDb2xvcnMnXVt0aGlzLnNlbGVjdGVkVGhlbWVdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIC8vcmVzZXQgcGx1cyB2aXNpYmlsaXR5XG4gICAgICAgIHRoaXMucmVzZXRCV0FjdGlvblZpc2liaWxpdHkoKTtcbiAgICB9XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLnJlc2V0QldBY3Rpb25WaXNpYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VjdGlvblRpdGxlID0gdGhpcy5ibGFja1doaXRlU2VjdGlvbi5maW5kKCcuYXBwLWVkaXRvci1zZWN0aW9uX190aXRsZScpO1xuICAgICAgICB0aGlzLmJsYWNrV2hpdGVTZWN0aW9uLmZpbmQoJy5qcy1hcHAtZWRpdG9yX19jb2xvci1idycpLmxlbmd0aCA+IDJcbiAgICAgICAgICAgID8gc2VjdGlvblRpdGxlLnJlbW92ZUNsYXNzKCdhcHAtZWRpdG9yLXNlY3Rpb25fX3RpdGxlLS1jcmVhdGUnKVxuICAgICAgICAgICAgOiBzZWN0aW9uVGl0bGUuYWRkQ2xhc3MoJ2FwcC1lZGl0b3Itc2VjdGlvbl9fdGl0bGUtLWNyZWF0ZScpO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLm5ld0NvbnRyYXN0Q29sb3JTY2FsZSA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB0aGlzLmNvbnRyYXN0SW5wdXRzLmZpbmQoJy5qcy1hcHAtZWRpdG9yX19jb250cmFzdC1pdGVtJykuZXEoaW5kZXgpLFxuICAgICAgICAgICAgaW5wdXQgPSB3cmFwcGVyLmZpbmQoJ2lucHV0JyksXG4gICAgICAgICAgICBwcmV2aWV3ID0gd3JhcHBlci5maW5kKCcuanMtY29sb3ItcHJldmlldycpO1xuXG4gICAgICAgIHZhciBjb2xvcjBoZXggPSBnZXRIZXhGcm9tSHNsKHRoaXNbdGhpcy5zZWxlY3RlZENvbG9yICsgJ0NvbG9ycyddW3RoaXMuc2VsZWN0ZWRUaGVtZV1bMF0pLFxuICAgICAgICAgICAgY29sb3I1aGV4ID0gZ2V0SGV4RnJvbUhzbCh0aGlzW3RoaXMuc2VsZWN0ZWRDb2xvciArICdDb2xvcnMnXVt0aGlzLnNlbGVjdGVkVGhlbWVdWzVdKTtcblxuICAgICAgICB2YXIgc2NhbGVDb2xvcnMgPSBjaHJvbWEuYmV6aWVyKFtjb2xvcjBoZXgsIGNvbG9yNWhleF0pLnNjYWxlKCkuY29sb3JzKDEwMSk7XG4gICAgICAgIHRoaXMuY29udHJhc3RQZWNlbnRhZ2VDb2xvcnNbdGhpcy5zZWxlY3RlZFRoZW1lXVtpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgdmFyIGNvbG9yID0gc2NhbGVDb2xvcnNbdmFsdWVdLFxuICAgICAgICAgICAgaHNsID0gY2hyb21hKGNvbG9yKS5oc2woKTtcbiAgICAgICAgLy9uZWVkIHRvIGNvbnZlcnQgdG8gaHNsXG4gICAgICAgIHRoaXMuY29udHJhc3RDb2xvcnNbdGhpcy5zZWxlY3RlZFRoZW1lXVtpbmRleF0gPSBbY2hlY2tIdWUoaHNsWzBdKSwgY2hlY2tQZXJjZW50YWdlKGhzbFsxXSksIGNoZWNrUGVyY2VudGFnZShoc2xbMl0pXTtcbiAgICAgICAgaW5wdXQudmFsKHZhbHVlKTtcbiAgICAgICAgcHJldmlldy5jc3MoJ2JhY2tncm91bmQtY29sb3InLCBjb2xvcik7XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUucmVtb3ZlVGhlbWUgPSBmdW5jdGlvbiAodHlwZSwgaW5kZXgsIHNlbGVjdGVkKSB7XG4gICAgICAgIC8vZmlyc3QgLT4gcmVtb3ZlIHRoZW1lIGZyb20gYXJyYXkgb2Ygc3RvcmVkIGVsZW1lbnRzXG4gICAgICAgIHRoaXMudGhlbWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMucHJpbWFyeUNvbG9ycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLmFjY2VudENvbG9ycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLmRvd25sb2FkQ29sb3JzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMuaW5mb0NvbG9ycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLndhcm5pbmdDb2xvcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgdGhpcy5zdWNjZXNzQ29sb3JzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMuZXJyb3JDb2xvcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgdGhpcy5ibGFja0NvbG9ycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLndoaXRlQ29sb3JzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMuY29udHJhc3RDb2xvcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgLy9yZW1vdmUgY3VzdG9tIGNvbG9yIGFzIHdlbGxcbiAgICAgICAgaWYgKHRoaXMubWFpbkNvbG9yTGFiZWxzLmxlbmd0aCA+IDUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSA1OyBpIDwgdGhpcy5tYWluQ29sb3JMYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzW3RoaXMubWFpbkNvbG9yTGFiZWxzW2ldICsgJ0NvbG9ycyddLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVtb3ZlIGN1c3RvbSBncmFkaWVudHNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmdyYWRpZW50Q29sb3JJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXNbdGhpcy5ncmFkaWVudENvbG9ySWRzW2ldICsgJ0dyYWRpZW50cyddLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHRoZW1lIHdhcyBzZWxlY3RlZCAtPiBzZWxlY3QgbmV3IHRoZW1lXG4gICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRoZW1lID0gMDtcbiAgICAgICAgICAgIHRoaXMuc2V0VGhlbWVDb2xvcnMoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLnVwZGF0ZUNvbG9yc0RlbW8gPSBmdW5jdGlvbiAoYm9vbCwgbGFiZWwpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5zZWxlY3RlZFRoZW1lO1xuICAgICAgICAvL2dldEFycmF5IG9mIGN1c3RvbSBjb2xvcnNcbiAgICAgICAgdmFyIGN1c3RvbUFycmF5ID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tYWluQ29sb3JMYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1haW5Db2xvckxhYmVsc1tpXS5pbmRleE9mKCdjdXN0b20tJykgPiAtMSkge1xuICAgICAgICAgICAgICAgIC8vY3VzdG9tIGNvbG9yIC0+IHB1c2ggaW4gYXJyYXlcbiAgICAgICAgICAgICAgICBjdXN0b21BcnJheS5wdXNoKFt0aGlzLm1haW5Db2xvckxhYmVsc1tpXSwgdGhpc1t0aGlzLm1haW5Db2xvckxhYmVsc1tpXSArICdDb2xvcnMnXVtpbmRleF1dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgZ3JhZGllbnRWYWx1ZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmdyYWRpZW50Q29sb3JJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGdyYWRpZW50VmFsdWVzLnB1c2godGhpc1t0aGlzLmdyYWRpZW50Q29sb3JJZHNbaV0gKyAnR3JhZGllbnRzJ11baW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlmcmFtZS51cGRhdGVJZnJhbWVDb2xvcnModGhpcy5wcmltYXJ5Q29sb3JzW2luZGV4XSwgdGhpcy5hY2NlbnRDb2xvcnNbaW5kZXhdLCB0aGlzLmRvd25sb2FkQ29sb3JzW2luZGV4XSwgdGhpcy5ibGFja0NvbG9yc1tpbmRleF0sIHRoaXMud2hpdGVDb2xvcnNbaW5kZXhdLCB0aGlzLnN1Y2Nlc3NDb2xvcnNbaW5kZXhdLCB0aGlzLmVycm9yQ29sb3JzW2luZGV4XSwgdGhpcy5pbmZvQ29sb3JzW2luZGV4XSwgdGhpcy53YXJuaW5nQ29sb3JzW2luZGV4XSwgdGhpcy5jb250cmFzdENvbG9yc1tpbmRleF0sIHRoaXMuZm9udFJlbmRlcmluZ1tpbmRleF0sIGN1c3RvbUFycmF5LCB0aGlzLmN1c3RvbUNvbG9yTGFiZWxzLCB0aGlzLmdyYWRpZW50Q29sb3JMYWJlbHMsIHRoaXMuZ3JhZGllbnRDb2xvcklkcywgZ3JhZGllbnRWYWx1ZXMsIGxhYmVsKTtcbiAgICAgICAgaWYgKElTX0xPR0dFRCA9PSAnMScgJiYgYm9vbCkgU2F2ZUFsZXJ0LnllcygpO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLnVwZGF0ZUNvbG9yTGlua3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaWZyYW1lLnVwZGF0ZUlmcmFtZUNvbG9yTGlua3ModGhpcy5jb2xvckxpbmtzKTtcbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS51cGRhdGVDb2xvcnNEZW1vTmV3Q3VzdG9tID0gZnVuY3Rpb24gKGFycmF5LCB0aXRsZSwgY3VzdG9tTGFiZWwpIHtcbiAgICAgICAgdGhpcy5pZnJhbWUudXBkYXRlSWZyYW1lQ29sb3JzTmV3Q29sb3IoYXJyYXksIHRpdGxlLCBjdXN0b21MYWJlbCk7XG4gICAgICAgIGlmIChJU19MT0dHRUQgPT0gJzEnKSBTYXZlQWxlcnQueWVzKCk7XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUudXBkYXRlQ29sb3JzRGVtb1JlbW92ZUN1c3RvbSA9IGZ1bmN0aW9uIChjdXN0b21MYWJlbCkge1xuICAgICAgICB0aGlzLmlmcmFtZS51cGRhdGVJZnJhbWVDb2xvcnNSZW1vdmVDb2xvcihjdXN0b21MYWJlbCk7XG4gICAgICAgIGlmIChJU19MT0dHRUQgPT0gJzEnKSBTYXZlQWxlcnQueWVzKCk7XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUudXBkYXRlQ29sb3JzRGVtb0VkaXRDdXN0b20gPSBmdW5jdGlvbiAoc2VjdGlvbiwgdGl0bGUpIHtcbiAgICAgICAgdGhpcy5pZnJhbWUudXBkYXRlSWZyYW1lQ29sb3JzRWRpdENvbG9yKHNlY3Rpb24sIHRpdGxlKTtcbiAgICAgICAgaWYgKElTX0xPR0dFRCA9PSAnMScpIFNhdmVBbGVydC55ZXMoKTtcbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS51cGRhdGVDb3B5Q29kZSA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICAgIHZhciBjb21wbGV0ZUNvZGUgPSAnJyxcbiAgICAgICAgICAgIHNwYWNpbmcgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRoZW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPiAwKSBzcGFjaW5nID0gJyAgJztcbiAgICAgICAgICAgIC8vc3RhcnQgZnJvbSBkZWZhdWx0IHRoZW1lXG4gICAgICAgICAgICB2YXIgY29kZU1haW4gPSB0aGlzLmNyZWF0ZUJsb2NrRm9yTWFpbkNvbG9ycyhpLCBzcGFjaW5nKSxcbiAgICAgICAgICAgICAgICBjb2RlQ3VzdG9tID0gdGhpcy5jcmVhdGVCbG9ja0ZvckN1c3RvbUNvbG9ycyhpLCBzcGFjaW5nLCBmYWxzZSksXG4gICAgICAgICAgICAgICAgY29kZUJXID0gdGhpcy5jcmVhdGVCbG9ja0ZvckJXQ29sb3JzKGksIHNwYWNpbmcpLFxuICAgICAgICAgICAgICAgIGNvZGVGZWVkYmFjayA9IHRoaXMuY3JlYXRlQmxvY2tGb3JGZWVkYmFja0NvbG9ycyhpLCBzcGFjaW5nKSxcbiAgICAgICAgICAgICAgICBjb2RlRmVlZGJhY2tDdXN0b20gPSB0aGlzLmNyZWF0ZUJsb2NrRm9yQ3VzdG9tQ29sb3JzKGksIHNwYWNpbmcsIHRydWUpLFxuICAgICAgICAgICAgICAgIGNvZGVDb250cmFzdCA9IHRoaXMuY3JlYXRlQmxvY2tGb3JDb250cmFzdENvbG9ycyhpLCBzcGFjaW5nKSxcbiAgICAgICAgICAgICAgICBjb2RlR3JhZGllbnQgPSB0aGlzLmNyZWF0ZUJsb2NrRm9yR3JhZGllbnRzKGksIHNwYWNpbmcpO1xuXG4gICAgICAgICAgICB2YXIgY29kZUZvbnRSZW5kZXJpbmcgPSB0aGlzLmNyZWF0ZUJsb2NrRm9yRm9udFJlbmRlcmluZyhpLCBzcGFjaW5nKTtcbiAgICAgICAgICAgIHZhciB0aGVtZUNvZGUgPSBjb2RlTWFpbiArIGNvZGVDdXN0b20gKyBjb2RlQlcgKyBjb2RlRmVlZGJhY2sgKyBjb2RlRmVlZGJhY2tDdXN0b20gKyBjb2RlQ29udHJhc3QgKyBjb2RlR3JhZGllbnQ7XG5cbiAgICAgICAgICAgIGlmIChpID09IDApIHtcbiAgICAgICAgICAgICAgICAvL2RlZmF1bHQgdGhlbWVcbiAgICAgICAgICAgICAgICB0aGVtZUNvZGUgPSAnOnJvb3QsIFtkYXRhLXRoZW1lPVwiZGVmYXVsdFwiXSB7XFxuJyArIHRoZW1lQ29kZSArICd9JztcbiAgICAgICAgICAgICAgICBpZiAoY29kZUZvbnRSZW5kZXJpbmcgIT0gJycpIHRoZW1lQ29kZSA9IHRoZW1lQ29kZSArICdcXG5cXG5ib2R5LCBbZGF0YS10aGVtZT1cImRlZmF1bHRcIl0ge1xcbicgKyBjb2RlRm9udFJlbmRlcmluZyArICd9JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvZGVGb250UmVuZGVyaW5nICE9ICcnKSBjb2RlRm9udFJlbmRlcmluZyA9ICdcXG4nICsgY29kZUZvbnRSZW5kZXJpbmdcbiAgICAgICAgICAgICAgICB0aGVtZUNvZGUgPSAnQHN1cHBvcnRzKC0tY3NzOiB2YXJpYWJsZXMpIHtcXG4gIFtkYXRhLXRoZW1lPVwiJyArIHRoaXMudGhlbWVzW2ldLnRvTG93ZXJDYXNlKCkgKyAnXCJdIHtcXG4nICsgdGhlbWVDb2RlICsgY29kZUZvbnRSZW5kZXJpbmcgKyAnICB9XFxufSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbXBsZXRlQ29kZSA9IGNvbXBsZXRlQ29kZSArIHRoZW1lQ29kZTtcbiAgICAgICAgICAgIGlmIChpIDwgdGhpcy50aGVtZXMubGVuZ3RoIC0gMSkgY29tcGxldGVDb2RlID0gY29tcGxldGVDb2RlICsgJ1xcblxcbic7XG5cbiAgICAgICAgICAgIC8vIGlmKCBpID09IDAgKSB7XG4gICAgICAgICAgICAvLyBcdGNvbXBsZXRlQ29kZSA9IGNvbXBsZXRlQ29kZSArICdbZGF0YS10aGVtZV0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItYmcpO1xcbiAgY29sb3I6IHZhcigtLWNvbG9yLWNvbnRyYXN0LWhpZ2gpO1xcbn1cXG5cXG4nO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYmVmb3JlIHJldHVybmdpbiBjb2RlIC0+IGNoZWNrIGlmIG5lZWQgdG8gYWRkIGJnLWNvbG9yIGNsYXNzZXNcbiAgICAgICAgY29tcGxldGVDb2RlID0gY29tcGxldGVDb2RlICsgdGhpcy5nZXRCZ0NvbG9yQ2xhc3NlcygpO1xuICAgICAgICByZXR1cm4gY29tcGxldGVDb2RlO1xuICAgICAgICAvLyByZXR1cm4gY29kZTtcbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS5jcmVhdGVCbG9ja0Zvck1haW5Db2xvcnMgPSBmdW5jdGlvbiAodGhlbWVJbmRleCwgc3BhY2luZykge1xuICAgICAgICB2YXIgY29kZSA9IHNwYWNpbmcgKyAnICAvLyBtYWluXFxuJyxcbiAgICAgICAgICAgIHNoYWRlcyA9IFsnLWRhcmtlcicsICctZGFyaycsICcnLCAnLWxpZ2h0JywgJy1saWdodGVyJ107XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgMjsgaisrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjb2xvckluZGV4ID0gNCAtIGk7XG4gICAgICAgICAgICAgICAgdmFyIGhzbCA9IHRoaXNbdGhpcy5tYWluQ29sb3JMYWJlbHNbal0gKyAnQ29sb3JzJ11bdGhlbWVJbmRleF1bY29sb3JJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIGhzbENvZGUgPSBnZXRIc2xDc3NGcm9tSHNsKGhzbCk7XG4gICAgICAgICAgICAgICAgY29kZSA9IGNvZGUgKyBzcGFjaW5nICsgJyAgQGluY2x1ZGUgZGVmaW5lQ29sb3JIU0woLS1jb2xvci0nICsgdGhpcy5tYWluQ29sb3JMYWJlbHNbal0gKyBzaGFkZXNbaV0gKyAnLCAnICsgaHNsQ29kZSArICcpOycgKyAnXFxuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvZGUgPSBjb2RlICsgJ1xcbic7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29kZTtcbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS5jcmVhdGVCbG9ja0ZvckN1c3RvbUNvbG9ycyA9IGZ1bmN0aW9uICh0aGVtZUluZGV4LCBzcGFjaW5nLCBpc0ZlZWRiYWNrKSB7XG4gICAgICAgIHZhciBjb2RlID0gJycsXG4gICAgICAgICAgICBzaGFkZXMgPSBbJy1kYXJrZXInLCAnLWRhcmsnLCAnJywgJy1saWdodCcsICctbGlnaHRlciddO1xuICAgICAgICBpZiAodGhpcy5tYWluQ29sb3JMYWJlbHMubGVuZ3RoID4gNSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDU7IGogPCB0aGlzLm1haW5Db2xvckxhYmVscy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IHRoaXMuY3VzdG9tQ29sb3JMYWJlbHNbal07XG4gICAgICAgICAgICAgICAgaWYgKChpc0ZlZWRiYWNrICYmIHRoaXMubWFpbkNvbG9yTGFiZWxzW2pdLmluZGV4T2YoJ2N1c3RvbS1mZGInKSA+IC0xKSB8fCAoIWlzRmVlZGJhY2sgJiYgdGhpcy5tYWluQ29sb3JMYWJlbHNbal0uaW5kZXhPZignY3VzdG9tLWZkYicpIDwgMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xvckluZGV4ID0gNCAtIGk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHNsID0gdGhpc1t0aGlzLm1haW5Db2xvckxhYmVsc1tqXSArICdDb2xvcnMnXVt0aGVtZUluZGV4XVtjb2xvckluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoc2xDb2RlID0gZ2V0SHNsQ3NzRnJvbUhzbChoc2wpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZSA9IGNvZGUgKyBzcGFjaW5nICsgJyAgQGluY2x1ZGUgZGVmaW5lQ29sb3JIU0woJyArIHRoaXMuY3VzdG9tQ29sb3JMYWJlbHNbaiAtIDVdICsgc2hhZGVzW2ldICsgJywgJyArIGhzbENvZGUgKyAnKTsnICsgJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IGNvZGUgKyAnXFxuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvZGU7XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUuZ2V0Q3VzdG9tQ29sb3JDbGFzc2VzID0gZnVuY3Rpb24gKGlzRmVlZGJhY2spIHtcbiAgICAgICAgdmFyIGNvZGUgPSAnJztcbiAgICAgICAgaWYgKHRoaXMubWFpbkNvbG9yTGFiZWxzLmxlbmd0aCA+IDUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSA1OyBqIDwgdGhpcy5tYWluQ29sb3JMYWJlbHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSB0aGlzLmN1c3RvbUNvbG9yTGFiZWxzW2pdO1xuICAgICAgICAgICAgICAgIGlmICgoaXNGZWVkYmFjayAmJiB0aGlzLm1haW5Db2xvckxhYmVsc1tqXS5pbmRleE9mKCdjdXN0b20tZmRiJykgPiAtMSkgfHwgKCFpc0ZlZWRiYWNrICYmIHRoaXMubWFpbkNvbG9yTGFiZWxzW2pdLmluZGV4T2YoJ2N1c3RvbS1mZGInKSA8IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlICsgJy4nICsgdGhpcy5jdXN0b21Db2xvckxhYmVsc1tqIC0gNV0ucmVwbGFjZSgnLS0nLCAnJykgKyAnIHsgY29sb3I6IHZhcignICsgdGhpcy5jdXN0b21Db2xvckxhYmVsc1tqIC0gNV0gKyAnKTt9JztcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IGNvZGUgKyAnXFxuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvZGU7XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUuZ2V0Q3VzdG9tR3JhZGllbnRDbGFzc2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29kZSA9ICcnO1xuICAgICAgICBpZiAodGhpcy5ncmFkaWVudENvbG9yTGFiZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgY29kZSA9IGNvZGUgKyAnLmJnLWdyYWRpZW50LScgKyB0aGlzLmdyYWRpZW50Q29sb3JMYWJlbHNbal0ucmVwbGFjZSgnLS0nLCAnJykgKyAnLXJpZ2h0IHsgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDkwZGVnLCB2YXIoLS1ncmFkaWVudC0nICsgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzW2pdICsgJy1zdG9wLTEpLCB2YXIoLS1ncmFkaWVudC0nICsgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzW2pdICsgJy1zdG9wLTIpKTt9JztcbiAgICAgICAgICAgICAgICBjb2RlID0gY29kZSArICdcXG4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2RlO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLmNyZWF0ZUJsb2NrRm9yQldDb2xvcnMgPSBmdW5jdGlvbiAodGhlbWVJbmRleCwgc3BhY2luZykge1xuICAgICAgICB2YXIgY29kZSA9ICcnLFxuICAgICAgICAgICAgc2hhZGVzQmxhY2sgPSBbJycsICctbGlnaHQnLCAnLWxpZ2h0ZXInXSxcbiAgICAgICAgICAgIHNoYWRlc1doaXRlID0gWycnLCAnLWRhcmsnLCAnLWRhcmtlciddO1xuICAgICAgICAvL2JsYWNrXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibGFja0NvbG9yc1t0aGVtZUluZGV4XS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGhzbENvZGUgPSBnZXRIc2xDc3NGcm9tSHNsKHRoaXMuYmxhY2tDb2xvcnNbdGhlbWVJbmRleF1baV0pO1xuICAgICAgICAgICAgY29kZSA9IGNvZGUgKyBzcGFjaW5nICsgJyAgQGluY2x1ZGUgZGVmaW5lQ29sb3JIU0woLS1jb2xvci1ibGFjaycgKyBzaGFkZXNCbGFja1tpXSArICcsICcgKyBoc2xDb2RlICsgJyk7JyArICdcXG4nO1xuICAgICAgICB9XG4gICAgICAgIC8vd2hpdGVcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLndoaXRlQ29sb3JzW3RoZW1lSW5kZXhdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaHNsQ29kZSA9IGdldEhzbENzc0Zyb21Ic2wodGhpcy53aGl0ZUNvbG9yc1t0aGVtZUluZGV4XVtpXSk7XG4gICAgICAgICAgICBjb2RlID0gY29kZSArIHNwYWNpbmcgKyAnICBAaW5jbHVkZSBkZWZpbmVDb2xvckhTTCgtLWNvbG9yLXdoaXRlJyArIHNoYWRlc1doaXRlW2ldICsgJywgJyArIGhzbENvZGUgKyAnKTsnICsgJ1xcbic7XG4gICAgICAgIH1cbiAgICAgICAgLy9uZWVkIHRvIGFkZCBvcGFjaXRpZXMgYXMgd2VsbFxuICAgICAgICBjb2RlID0gY29kZSArICdcXG4nO1xuICAgICAgICByZXR1cm4gY29kZTtcbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS5jcmVhdGVCbG9ja0ZvckZlZWRiYWNrQ29sb3JzID0gZnVuY3Rpb24gKHRoZW1lSW5kZXgsIHNwYWNpbmcpIHtcbiAgICAgICAgdmFyIGNvZGUgPSBzcGFjaW5nICsgJyAgLy8gZmVlZGJhY2tcXG4nLFxuICAgICAgICAgICAgc2hhZGVzID0gWyctZGFya2VyJywgJy1kYXJrJywgJycsICctbGlnaHQnLCAnLWxpZ2h0ZXInXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDI7IGogPCA1OyBqKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbG9ySW5kZXggPSA0IC0gaTtcbiAgICAgICAgICAgICAgICB2YXIgaHNsID0gdGhpc1t0aGlzLm1haW5Db2xvckxhYmVsc1tqXSArICdDb2xvcnMnXVt0aGVtZUluZGV4XVtjb2xvckluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgaHNsQ29kZSA9IGdldEhzbENzc0Zyb21Ic2woaHNsKTtcbiAgICAgICAgICAgICAgICBjb2RlID0gY29kZSArIHNwYWNpbmcgKyAnICBAaW5jbHVkZSBkZWZpbmVDb2xvckhTTCgtLWNvbG9yLScgKyB0aGlzLm1haW5Db2xvckxhYmVsc1tqXSArIHNoYWRlc1tpXSArICcsICcgKyBoc2xDb2RlICsgJyk7JyArICdcXG4nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL25lZWQgdG8gYWRkIG9wYWNpdGllcyBhcyB3ZWxsXG4gICAgICAgICAgICBjb2RlID0gY29kZSArICdcXG4nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvZGU7XG4gICAgfTtcblxuICAgIENvbG9ycy5wcm90b3R5cGUuY3JlYXRlQmxvY2tGb3JDb250cmFzdENvbG9ycyA9IGZ1bmN0aW9uICh0aGVtZUluZGV4LCBzcGFjaW5nKSB7XG4gICAgICAgIHZhciBjb2RlID0gc3BhY2luZyArICcgIC8vIGNvbG9yIGNvbnRyYXN0c1xcbicsXG4gICAgICAgICAgICBzaGFkZXMgPSBbJ2JnJywgJ2NvbnRyYXN0LWxvd2VyJywgJ2NvbnRyYXN0LWxvdycsICdjb250cmFzdC1tZWRpdW0nLCAnY29udHJhc3QtaGlnaCcsICdjb250cmFzdC1oaWdoZXInXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvbnRyYXN0Q29sb3JzW3RoZW1lSW5kZXhdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaHNsQ29kZSA9IGdldEhzbENzc0Zyb21Ic2wodGhpcy5jb250cmFzdENvbG9yc1t0aGVtZUluZGV4XVtpXSk7XG4gICAgICAgICAgICBjb2RlID0gY29kZSArIHNwYWNpbmcgKyAnICBAaW5jbHVkZSBkZWZpbmVDb2xvckhTTCgtLWNvbG9yLScgKyBzaGFkZXNbaV0gKyAnLCAnICsgaHNsQ29kZSArICcpOycgKyAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29kZTtcbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS5jcmVhdGVCbG9ja0ZvckdyYWRpZW50cyA9IGZ1bmN0aW9uICh0aGVtZUluZGV4LCBzcGFjaW5nKSB7XG4gICAgICAgIGlmICghdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzIHx8IHRoaXMuZ3JhZGllbnRDb2xvckxhYmVscy5sZW5ndGggPCAxKSByZXR1cm4gJyc7XG4gICAgICAgIHZhciBjb2RlID0gJ1xcbicgKyBzcGFjaW5nICsgJyAgLy8gZ3JhZGllbnRzXFxuJyxcbiAgICAgICAgICAgIHN0b3BzID0gWyctc3RvcC0xJywgJy1zdG9wLTInXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmdyYWRpZW50Q29sb3JMYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzdG9wMSA9IGdldEhzbENzc0Zyb21Ic2wodGhpc1t0aGlzLmdyYWRpZW50Q29sb3JJZHNbaV0gKyAnR3JhZGllbnRzJ11bdGhlbWVJbmRleF1bMF0pLFxuICAgICAgICAgICAgICAgIHN0b3AyID0gZ2V0SHNsQ3NzRnJvbUhzbCh0aGlzW3RoaXMuZ3JhZGllbnRDb2xvcklkc1tpXSArICdHcmFkaWVudHMnXVt0aGVtZUluZGV4XVsxXSk7XG4gICAgICAgICAgICBjb2RlID0gY29kZSArIHNwYWNpbmcgKyAnICBAaW5jbHVkZSBkZWZpbmVDb2xvckhTTCgtLWdyYWRpZW50LScgKyB0aGlzLmdyYWRpZW50Q29sb3JMYWJlbHNbaV0gKyBzdG9wc1swXSArICcsICcgKyBzdG9wMSArICcpOycgKyAnXFxuJztcbiAgICAgICAgICAgIGNvZGUgPSBjb2RlICsgc3BhY2luZyArICcgIEBpbmNsdWRlIGRlZmluZUNvbG9ySFNMKC0tZ3JhZGllbnQtJyArIHRoaXMuZ3JhZGllbnRDb2xvckxhYmVsc1tpXSArIHN0b3BzWzFdICsgJywgJyArIHN0b3AyICsgJyk7JyArICdcXG4nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2RlO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLmNyZWF0ZUJsb2NrRm9yRm9udFJlbmRlcmluZyA9IGZ1bmN0aW9uICh0aGVtZUluZGV4LCBzcGFjaW5nKSB7XG4gICAgICAgIHZhciBjb2RlID0gJyc7XG4gICAgICAgIGlmICh0aGlzLmZvbnRSZW5kZXJpbmdbdGhlbWVJbmRleF0gJiYgTnVtYmVyKHRoaXMuZm9udFJlbmRlcmluZ1t0aGVtZUluZGV4XSkgPT0gMSkge1xuICAgICAgICAgICAgY29kZSA9IHNwYWNpbmcgKyAnICAvLyBmb250IHJlbmRlcmluZ1xcbicgKyBzcGFjaW5nICsgJyAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuJyArIHNwYWNpbmcgKyAnICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbic7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5mb250UmVuZGVyaW5nW3RoZW1lSW5kZXhdICYmIE51bWJlcih0aGlzLmZvbnRSZW5kZXJpbmdbdGhlbWVJbmRleF0pID09IDIpIHtcbiAgICAgICAgICAgIGNvZGUgPSBzcGFjaW5nICsgJyAgLy8gZm9udCByZW5kZXJpbmdcXG4nICsgc3BhY2luZyArICcgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGF1dG87XFxuJyArIHNwYWNpbmcgKyAnICAtbW96LW9zeC1mb250LXNtb290aGluZzogYXV0bztcXG4nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2RlO1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLmdldEFycmF5VG9TYXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29sb3JzQXJyYXkgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1haW5Db2xvckxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy9zdG9yZSBtYWluIGNvbG9ycyArIGZlZWRiYWNrIGNvbG9yc1xuICAgICAgICAgICAgY29sb3JzQXJyYXlbdGhpcy5tYWluQ29sb3JMYWJlbHNbaV1dID0gdGhpc1t0aGlzLm1haW5Db2xvckxhYmVsc1tpXSArICdDb2xvcnMnXTtcbiAgICAgICAgfVxuICAgICAgICBjb2xvcnNBcnJheVsnbWFpbkNvbG9yTGFiZWxzJ10gPSB0aGlzLm1haW5Db2xvckxhYmVscztcbiAgICAgICAgaWYgKHRoaXMuY3VzdG9tQ29sb3JMYWJlbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29sb3JzQXJyYXlbJ2N1c3RvbUNvbG9yTGFiZWxzJ10gPSB0aGlzLmN1c3RvbUNvbG9yTGFiZWxzO1xuICAgICAgICB9XG4gICAgICAgIGNvbG9yc0FycmF5WydibGFja0NvbG9ycyddID0gdGhpcy5ibGFja0NvbG9ycztcbiAgICAgICAgY29sb3JzQXJyYXlbJ3doaXRlQ29sb3JzJ10gPSB0aGlzLndoaXRlQ29sb3JzO1xuICAgICAgICBjb2xvcnNBcnJheVsnY29udHJhc3RQZWNlbnRhZ2VDb2xvcnMnXSA9IHRoaXMuY29udHJhc3RQZWNlbnRhZ2VDb2xvcnM7XG4gICAgICAgIGNvbG9yc0FycmF5Wydjb250cmFzdENvbG9ycyddID0gdGhpcy5jb250cmFzdENvbG9ycztcbiAgICAgICAgaWYgKHRoaXMuZm9udFJlbmRlcmluZyAmJiB0aGlzLmZvbnRSZW5kZXJpbmcubGVuZ3RoID09IHRoaXMudGhlbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29sb3JzQXJyYXlbJ2ZvbnRSZW5kZXJpbmcnXSA9IHRoaXMuZm9udFJlbmRlcmluZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbG9yc0FycmF5Wydmb250UmVuZGVyaW5nJ10gPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50aGVtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mb250UmVuZGVyaW5nW2ldKSBjb2xvcnNBcnJheVsnZm9udFJlbmRlcmluZyddW2ldID0gdGhpcy5mb250UmVuZGVyaW5nW2ldO1xuICAgICAgICAgICAgICAgIGVsc2UgY29sb3JzQXJyYXlbJ2ZvbnRSZW5kZXJpbmcnXVtpXSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbG9yc0FycmF5Wyd0aGVtZXMnXSA9IHRoaXMudGhlbWVzO1xuICAgICAgICBjb2xvcnNBcnJheVsnY29sb3JMaW5rcyddID0gdGhpcy5jb2xvckxpbmtzO1xuICAgICAgICAvLyBncmFkaWVudHNcbiAgICAgICAgaWYgKHRoaXMuZ3JhZGllbnRDb2xvckxhYmVscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb2xvcnNBcnJheVsnZ3JhZGllbnRDb2xvckxhYmVscyddID0gdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmdyYWRpZW50Q29sb3JJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29sb3JzQXJyYXlbJ2dyYWRpZW50Q29sb3JJZHMnXSA9IHRoaXMuZ3JhZGllbnRDb2xvcklkcztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ncmFkaWVudENvbG9ySWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy9zdG9yZSBtYWluIGNvbG9ycyArIGZlZWRiYWNrIGNvbG9yc1xuICAgICAgICAgICAgICAgIGNvbG9yc0FycmF5W3RoaXMuZ3JhZGllbnRDb2xvcklkc1tpXSArICdHcmFkaWVudHMnXSA9IHRoaXNbdGhpcy5ncmFkaWVudENvbG9ySWRzW2ldICsgJ0dyYWRpZW50cyddO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xvcnNBcnJheTtcbiAgICB9O1xuXG4gICAgQ29sb3JzLnByb3RvdHlwZS5nZXRPcGFjaXRpZXNBcnJheVRvU2F2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wYWNpdGllc0FycmF5ID0gW107XG4gICAgICAgIG9wYWNpdGllc0FycmF5ID0gdGhpcy5jb2xvck9wYWNpdGllcztcbiAgICAgICAgcmV0dXJuIG9wYWNpdGllc0FycmF5O1xuICAgIH07XG5cbiAgICBDb2xvcnMucHJvdG90eXBlLmdldEJnQ29sb3JDbGFzc2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29kZSA9ICcnO1xuICAgICAgICB2YXIgc2hhZGVzID0gWyctZGFya2VyJywgJy1kYXJrJywgJycsICctbGlnaHQnLCAnLWxpZ2h0ZXInXTtcbiAgICAgICAgaWYgKHRoaXMubWFpbkNvbG9yTGFiZWxzLmxlbmd0aCA+IDUpIHtcbiAgICAgICAgICAgIC8vIHN0YXJ0IGZyb20gYmdcbiAgICAgICAgICAgIGNvZGUgPSAnXFxuXFxuLy8gYmFja2dyb3VuZCBjb2xvclxcbic7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gNTsgaiA8IHRoaXMubWFpbkNvbG9yTGFiZWxzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGFkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IGNvZGUgKyAnLmJnLScgKyB0aGlzLmN1c3RvbUNvbG9yTGFiZWxzW2ogLSA1XS5yZXBsYWNlKCctLWNvbG9yLScsICcnKSArIHNoYWRlc1tpXSArICcgeyBiYWNrZ3JvdW5kLWNvbG9yOiBhbHBoYSh2YXIoJyArIHRoaXMuY3VzdG9tQ29sb3JMYWJlbHNbaiAtIDVdICsgc2hhZGVzW2ldICsgJyksIHZhcigtLWJnLW8sIDEpKTsgfSc7XG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlICsgJ1xcbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmdyYWRpZW50Q29sb3JMYWJlbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gYmFja2dyb3VuZCBncmFkaWVudFxuICAgICAgICAgICAgY29kZSA9ICh0aGlzLm1haW5Db2xvckxhYmVscy5sZW5ndGggPiA1KSA/IGNvZGUgKyAnXFxuJyA6IGNvZGUgKyAnXFxuXFxuJztcbiAgICAgICAgICAgIGNvZGUgPSBjb2RlICsgJy8vIGJhY2tncm91bmQgZ3JhZGllbnQnO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmdyYWRpZW50Q29sb3JMYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb2RlID0gY29kZSArICdcXG4uYmctZ3JhZGllbnQtJyArIHRoaXMuZ3JhZGllbnRDb2xvckxhYmVsc1tpXSArICcgeyBiYWNrZ3JvdW5kLWltYWdlOiByYWRpYWwtZ3JhZGllbnQodmFyKC0tZ3JhZGllbnQtJyArIHRoaXMuZ3JhZGllbnRDb2xvckxhYmVsc1tpXSArICctc3RvcC0xKSwgdmFyKC0tZ3JhZGllbnQtJyArIHRoaXMuZ3JhZGllbnRDb2xvckxhYmVsc1tpXSArICctc3RvcC0yKSk7IH0nO1xuICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlICsgJ1xcbi5iZy1ncmFkaWVudC0nICsgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzW2ldICsgJy10b3AgeyBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMGRlZywgdmFyKC0tZ3JhZGllbnQtJyArIHRoaXMuZ3JhZGllbnRDb2xvckxhYmVsc1tpXSArICctc3RvcC0xKSwgdmFyKC0tZ3JhZGllbnQtJyArIHRoaXMuZ3JhZGllbnRDb2xvckxhYmVsc1tpXSArICctc3RvcC0yKSk7IH0nO1xuICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlICsgJ1xcbi5iZy1ncmFkaWVudC0nICsgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzW2ldICsgJy1yaWdodCB7IGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCg5MGRlZywgdmFyKC0tZ3JhZGllbnQtJyArIHRoaXMuZ3JhZGllbnRDb2xvckxhYmVsc1tpXSArICctc3RvcC0xKSwgdmFyKC0tZ3JhZGllbnQtJyArIHRoaXMuZ3JhZGllbnRDb2xvckxhYmVsc1tpXSArICctc3RvcC0yKSk7IH0nO1xuICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlICsgJ1xcbi5iZy1ncmFkaWVudC0nICsgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzW2ldICsgJy1ib3R0b20geyBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCB2YXIoLS1ncmFkaWVudC0nICsgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzW2ldICsgJy1zdG9wLTEpLCB2YXIoLS1ncmFkaWVudC0nICsgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzW2ldICsgJy1zdG9wLTIpKTsgfSc7XG4gICAgICAgICAgICAgICAgY29kZSA9IGNvZGUgKyAnXFxuLmJnLWdyYWRpZW50LScgKyB0aGlzLmdyYWRpZW50Q29sb3JMYWJlbHNbaV0gKyAnLWxlZnQgeyBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMjcwZGVnLCB2YXIoLS1ncmFkaWVudC0nICsgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzW2ldICsgJy1zdG9wLTEpLCB2YXIoLS1ncmFkaWVudC0nICsgdGhpcy5ncmFkaWVudENvbG9yTGFiZWxzW2ldICsgJy1zdG9wLTIpKTsgfSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tYWluQ29sb3JMYWJlbHMubGVuZ3RoID4gNSkgY29kZSA9IGNvZGUgKyAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tYWluQ29sb3JMYWJlbHMubGVuZ3RoID4gNSkge1xuICAgICAgICAgICAgLy8gYWRkIGJvcmRlcnNcbiAgICAgICAgICAgIGNvZGUgPSBjb2RlICsgJ1xcbi8vIGJvcmRlciBjb2xvcic7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gNTsgaiA8IHRoaXMubWFpbkNvbG9yTGFiZWxzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGFkZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IGNvZGUgKyAnXFxuLmJvcmRlci0nICsgdGhpcy5jdXN0b21Db2xvckxhYmVsc1tqIC0gNV0ucmVwbGFjZSgnLS1jb2xvci0nLCAnJykgKyBzaGFkZXNbaV0gKyAnIHsgYm9yZGVyLWNvbG9yOiBhbHBoYSh2YXIoJyArIHRoaXMuY3VzdG9tQ29sb3JMYWJlbHNbaiAtIDVdICsgc2hhZGVzW2ldICsgJyksIHZhcigtLWJnLW8sIDEpKTsgfSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2RlO1xuICAgIH07XG5cblxuICAgIGZ1bmN0aW9uIGxvYWRQcm9qZWN0Q29sb3JzKGlmcmFtZSkge1xuICAgICAgICBpZiAoUFJPSkVDVCAmJiBQUk9KRUNULmNvbG9ycyAmJiBQUk9KRUNULmNvbG9ycyAhPT0gJycpIGlmcmFtZS5sb2FkQ29sb3JTdHlsZShKU09OLnBhcnNlKFBST0pFQ1QuY29sb3JzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZFByb2plY3RUeXBvZ3JhcGh5Rm9yU3BhY2luZyhpZnJhbWUpIHtcbiAgICAgICAgaWYgKFBST0pFQ1QgJiYgUFJPSkVDVC50eXBvZ3JhcGh5ICYmIFBST0pFQ1QudHlwb2dyYXBoeSAhPT0gJycpIGlmcmFtZS5sb2FkVHlwb2dyYXBoeUZvclNwYWNpbmcoSlNPTi5wYXJzZShqc1BhZ2UuZGVjb2RlU2FmZVVSSUNvbXBvbmVudChQUk9KRUNULnR5cG9ncmFwaHkpKSwgdHJ1ZSk7XG4gICAgICAgIGVsc2UgaWZyYW1lLmxvYWRUeXBvZ3JhcGh5Rm9yU3BhY2luZyhmYWxzZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvYWRQcm9qZWN0VHlwb2dyYXBoeUZvckJ1dHRvbnMoaWZyYW1lKSB7XG4gICAgICAgIGlmIChQUk9KRUNUICYmIFBST0pFQ1QudHlwb2dyYXBoeSAmJiBQUk9KRUNULnR5cG9ncmFwaHkgIT09ICcnKSBpZnJhbWUubG9hZFR5cG9ncmFwaHlGb3JCdXR0b25zKEpTT04ucGFyc2UoanNQYWdlLmRlY29kZVNhZmVVUklDb21wb25lbnQoUFJPSkVDVC50eXBvZ3JhcGh5KSksIHRydWUpO1xuICAgICAgICBlbHNlIGlmcmFtZS5sb2FkVHlwb2dyYXBoeUZvckJ1dHRvbnMoZmFsc2UsIHRydWUpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2FkUHJvamVjdFNwYWNpbmdGb3JCdXR0b25zKGlmcmFtZSkge1xuICAgICAgICBpZiAoUFJPSkVDVCAmJiBQUk9KRUNULnNwYWNpbmcgJiYgUFJPSkVDVC5zcGFjaW5nICE9PSAnJykgaWZyYW1lLmxvYWRTcGFjaW5nRm9yQnV0dG9ucyhKU09OLnBhcnNlKGpzUGFnZS5kZWNvZGVTYWZlVVJJQ29tcG9uZW50KFBST0pFQ1Quc3BhY2luZykpLCB0cnVlKTtcbiAgICAgICAgZWxzZSBpZnJhbWUubG9hZFNwYWNpbmdGb3JCdXR0b25zKGZhbHNlLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9hZFByb2plY3RCdXR0b25zRm9yRm9ybXMoaWZyYW1lKSB7XG4gICAgICAgIGlmIChQUk9KRUNUICYmIFBST0pFQ1QuYnV0dG9ucyAmJiBQUk9KRUNULmJ1dHRvbnMgIT09ICcnKSBpZnJhbWUubG9hZEJ1dHRvbnNGb3JGb3JtcyhKU09OLnBhcnNlKGpzUGFnZS5kZWNvZGVTYWZlVVJJQ29tcG9uZW50KFBST0pFQ1QuYnV0dG9ucykpLCB0cnVlKTtcbiAgICAgICAgZWxzZSBpZnJhbWUubG9hZEJ1dHRvbnNGb3JGb3JtcyhmYWxzZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGxvYWRQcm9qZWN0QnV0dG9uc0ZvckNvbG9ycyhpZnJhbWUpIHtcbiAgICAgICAgaWYgKFBST0pFQ1QgJiYgUFJPSkVDVC5idXR0b25zICYmIFBST0pFQ1QuYnV0dG9ucyAhPT0gJycpIGlmcmFtZS5sb2FkQnV0dG9uc0ZvckNvbG9ycyhKU09OLnBhcnNlKGpzUGFnZS5kZWNvZGVTYWZlVVJJQ29tcG9uZW50KFBST0pFQ1QuYnV0dG9ucykpLCB0cnVlKTtcbiAgICAgICAgZWxzZSBpZnJhbWUubG9hZEJ1dHRvbnNGb3JDb2xvcnMoZmFsc2UsIHRydWUpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2FkUHJvamVjdENvbG9yc0ZvckNvbG9ycyhpZnJhbWUpIHtcbiAgICAgICAgaWYgKFBST0pFQ1QgJiYgUFJPSkVDVC5jb2xvcnMgJiYgUFJPSkVDVC5jb2xvcnMgIT09ICcnKSBpZnJhbWUubG9hZENvbG9yc0ZvckNvbG9ycyhKU09OLnBhcnNlKGpzUGFnZS5kZWNvZGVTYWZlVVJJQ29tcG9uZW50KFBST0pFQ1QuY29sb3JzKSksIHRydWUpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2FkUHJvamVjdEZvcm1zRm9yQ29sb3JzKGlmcmFtZSkge1xuICAgICAgICBpZiAoUFJPSkVDVCAmJiBQUk9KRUNULmZvcm0gJiYgUFJPSkVDVC5mb3JtICE9PSAnJykgaWZyYW1lLmxvYWRGb3JtRm9yQ29sb3JzKEpTT04ucGFyc2UoanNQYWdlLmRlY29kZVNhZmVVUklDb21wb25lbnQoUFJPSkVDVC5mb3JtKSksIHRydWUpO1xuICAgICAgICBlbHNlIGlmcmFtZS5sb2FkRm9ybUZvckNvbG9ycyhmYWxzZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VFbXB0eShhcnJheSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYXJyYXlbaV0ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gcmVwbGFjZUVtcHR5KGFycmF5W2ldKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGFycmF5W2ldID09ICcnKSBhcnJheVtpXSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH07XG5cblxuICAgIGZ1bmN0aW9uIGdldENvbG9yQ29udHJhc3RQZXJjZW50YWdlcygpIHtcbiAgICAgICAgcmV0dXJuIFswLCA1LCAxNywgNTUsIDg5LCAxMDBdO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRIc2xDc3NGcm9tSHNsKGhzbCkge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChoc2xbMF0pICsgJywgJyArIE1hdGgucm91bmQoaHNsWzFdICogMTAwKSArICclLCAnICsgTWF0aC5yb3VuZChoc2xbMl0gKiAxMDApICsgJyUnO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRNYWluQ29sb3JWYXJpYXRpb24oaHNsKSB7XG4gICAgICAgIC8vdXNlZCB0byBnZXQgdGhlIG1haW4gY29sb3IgdmFyaWF0aW9ucyBzdGFydGluZyBmcm9tIG1haW4gY29sb3JcbiAgICAgICAgdmFyIGNvbG9yVmFyaWF0aW9uc0xvZ2ljID0gZ2V0TWFpbkNvbG9yVmFyYWlhdGlvbkxvZ2ljKGhzbCk7XG4gICAgICAgIHZhciBtYWluQ29sb3JWYXJpYXRpb25zID0gW107XG4gICAgICAgIGhzbFswXSA9IGNoZWNrSHVlKGhzbFswXSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICBtYWluQ29sb3JWYXJpYXRpb25zLnB1c2goW2hzbFswXSwgY2hlY2tQZXJjZW50YWdlKGhzbFsxXSArIGNvbG9yVmFyaWF0aW9uc0xvZ2ljW2ldWzBdKSwgY2hlY2tQZXJjZW50YWdlKGhzbFsyXSArIGNvbG9yVmFyaWF0aW9uc0xvZ2ljW2ldWzFdKV0pO1xuICAgICAgICB9XG4gICAgICAgIG1haW5Db2xvclZhcmlhdGlvbnMuc3BsaWNlKDIsIDAsIGhzbCk7XG4gICAgICAgIHJldHVybiBtYWluQ29sb3JWYXJpYXRpb25zO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRNYWluQ29sb3JWYXJhaWF0aW9uTG9naWMoaHNsKSB7XG4gICAgICAgIHZhciBsaWdodFZhcmFpdGlvbiA9IDAuMSxcbiAgICAgICAgICAgIGxpZ2h0VmFyYWl0aW9uUyA9IDAuMjtcblxuICAgICAgICBpZiAoaHNsWzJdID4gMC44KSB7XG4gICAgICAgICAgICBsaWdodFZhcmFpdGlvblMgPSAxO1xuICAgICAgICAgICAgbGlnaHRWYXJhaXRpb24gPSBwYXJzZUZsb2F0KCgobGlnaHRWYXJhaXRpb25TIC0gaHNsWzJdKSAqIDAuNSkudG9GaXhlZCgyKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGFya1ZhcmFpdGlvbiA9IC0wLjEsXG4gICAgICAgICAgICBkYXJrVmFyYWl0aW9uUyA9IC0wLjI7XG5cbiAgICAgICAgaWYgKGhzbFsyXSA8IDAuMikge1xuICAgICAgICAgICAgZGFya1ZhcmFpdGlvblMgPSAtaHNsWzJdO1xuICAgICAgICAgICAgZGFya1ZhcmFpdGlvbiA9IHBhcnNlRmxvYXQoKC1oc2xbMl0gKiAwLjUpLnRvRml4ZWQoMikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtbMCwgbGlnaHRWYXJhaXRpb25TXSwgWzAsIGxpZ2h0VmFyYWl0aW9uXSwgWzAsIGRhcmtWYXJhaXRpb25dLCBbMCwgZGFya1ZhcmFpdGlvblNdXTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0Q29udHJhc3RWYXJpYXRpb24oY29sb3IxLCBjb2xvcjIsIGFycmF5KSB7XG4gICAgICAgIHZhciBjb250cmFzdENvbG9yVmFyaWF0aW9ucyA9IFtdO1xuICAgICAgICB2YXIgc2NhbGVDb2xvcnMgPSBjaHJvbWEuYmV6aWVyKFtjb2xvcjEsIGNvbG9yMl0pLnNjYWxlKCkuY29sb3JzKDEwMSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBhcnJheVtpXSxcbiAgICAgICAgICAgICAgICBoc2wgPSBjaHJvbWEoc2NhbGVDb2xvcnNbaW5kZXhdKS5oc2woKTtcbiAgICAgICAgICAgIGNvbnRyYXN0Q29sb3JWYXJpYXRpb25zLnB1c2goW2NoZWNrSHVlKGhzbFswXSksIGNoZWNrUGVyY2VudGFnZShoc2xbMV0pLCBjaGVja1BlcmNlbnRhZ2UoaHNsWzJdKV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250cmFzdENvbG9yVmFyaWF0aW9ucztcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0RGVmYXVsdE1haW5Db2xvclZhcmlhdGlvbih0eXBlKSB7XG4gICAgICAgIHZhciBjb2xvciA9IFtdO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FjY2VudCc6XG4gICAgICAgICAgICAgICAgY29sb3IgPSBbWzM0OSwgMC43NSwgMC42N10sIFszNDksIDAuNzUsIDAuNTldLCBbMzQ5LCAwLjc1LCAwLjUxXSwgWzM0OSwgMC43NSwgMC40NF0sIFszNDksIDAuNzUsIDAuMzZdXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Rvd25sb2FkJzpcbiAgICAgICAgICAgICAgICBjb2xvciA9IFtbMzQ5LCAwLjc1LCAwLjY3XSwgWzM0OSwgMC43NSwgMC41OV0sIFszNDksIDAuNzUsIDAuNTFdLCBbMzQ5LCAwLjc1LCAwLjQ0XSwgWzM0OSwgMC43NSwgMC4zNl1dO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICAgICAgICAgICAgY29sb3IgPSBbWzk0LCAwLjQ4LCAwLjc0XSwgWzk0LCAwLjQ4LCAwLjY1XSwgWzk0LCAwLjQ4LCAwLjU2XSwgWzk0LCAwLjQ4LCAwLjQ4XSwgWzk0LCAwLjQ4LCAwLjQyXV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3YXJuaW5nJzpcbiAgICAgICAgICAgICAgICBjb2xvciA9IFtbNDYsIDEsIDAuODBdLCBbNDYsIDEsIDAuNzFdLCBbNDYsIDEsIDAuNjFdLCBbNDYsIDEsIDAuNTBdLCBbNDYsIDEsIDAuNDddXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgICAgICAgICBjb2xvciA9IFtbMzQ5LCAwLjc1LCAwLjY3XSwgWzM0OSwgMC43NSwgMC41OV0sIFszNDksIDAuNzUsIDAuNTFdLCBbMzQ5LCAwLjc1LCAwLjQ0XSwgWzM0OSwgMC43NSwgMC4zNl1dO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaW5mbyc6XG4gICAgICAgICAgICAgICAgY29sb3IgPSBbWzM0OSwgMC43NSwgMC42N10sIFszNDksIDAuNzUsIDAuNTldLCBbMzQ5LCAwLjc1LCAwLjUxXSwgWzM0OSwgMC43NSwgMC40NF0sIFszNDksIDAuNzUsIDAuMzZdXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gcHJpbWFyeVxuICAgICAgICAgICAgICAgIGNvbG9yID0gW1syMDQsIDAuNzAsIDAuMzNdLCBbMjA0LCAwLjcwLCAwLjQzXSwgWzIwNCwgMC43MCwgMC41M10sIFsyMDQsIDAuNzAsIDAuNjNdLCBbMjA0LCAwLjcwLCAwLjczXV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH07XG5cbiAgICAvL2luaXRpYWxpemUgdGhlIENvbG9ycyBvYmplY3RzXG4gICAgdmFyIGNvbG9ycyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2pzLWFwcC1zaWRlYmFyLWVkaXRvci0tY29sb3JzJyksXG4gICAgICAgIGNvbG9yT2JqZWN0ID0gW107XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNvbG9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgICAgICBjb2xvck9iamVjdC5wdXNoKG5ldyBDb2xvcnMoY29sb3JzW2ldKSk7XG4gICAgICAgICAgICAgICAgfSkoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCAxMDAwKVxuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAvKiBcdElucHV0IEV2ZW50IExpc3RlbmluZyAqL1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIGZ1bmN0aW9uIGxpc3RlblRvUGFyZW50SW5wdXQocGFyZW50LCBjYWxsYmFjaykge1xuICAgICAgICBwYXJlbnQub24oJ2ZvY3Vzb3V0IGlucHV0JywgJ2lucHV0JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICBwYXJlbnQub24oJ2tleXVwJywgJ2lucHV0JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoKGV2ZW50LmtleSAmJiBldmVudC5rZXkudG9Mb3dlckNhc2UoKSA9PT0gXCJlbnRlclwiKSB8fCAoZXZlbnQua2V5Q29kZSAmJiBldmVudC5rZXlDb2RlID09PSBcIjEzXCIpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuVG9QYXJlbnRTdHJpbmcocGFyZW50LCBzdHJpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHBhcmVudC5vbignZm9jdXNvdXQnLCBzdHJpbmcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcGFyZW50Lm9uKCdrZXlwcmVzcycsIHN0cmluZywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoKGV2ZW50LmtleSAmJiBldmVudC5rZXkudG9Mb3dlckNhc2UoKSA9PT0gXCJlbnRlclwiKSB8fCAoZXZlbnQua2V5Q29kZSAmJiBldmVudC5rZXlDb2RlID09PSBcIjEzXCIpKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIC8qIFx0U2lkZWJhciBJbnRlcmFjdGlvbiAqL1xuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgLy9jb250ZW50IHN3aXRjaCAtIGVnLCB0aGVtZXMgaW4gQ29sb3JzXG4gICAgdmFyIGNvbnRlbnRTd2l0Y2ggPSAkKCcuanMtYXBwLWNvbnRlbnQtc3dpdGNoJyk7XG4gICAgaWYgKGNvbnRlbnRTd2l0Y2gubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgY29udGVudFR5cGUgPSBjb250ZW50U3dpdGNoLmF0dHIoJ2RhdGEtZ2xvYmFsJykudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIGNvbnRlbnRMaXN0ID0gY29udGVudFN3aXRjaC5maW5kKCcuanMtYXBwLWNvbnRlbnQtc3dpdGNoX19ncm91cCcpLFxuICAgICAgICAgICAgYXBwU2lkZWJhciA9ICQoJy5qcy1hcHAtc2lkZWJhci0tZ2xvYmFscycpO1xuICAgICAgICAvL29wZW4vY2xvc2UgbGlzdCBvZiBjb250ZW50XG4gICAgICAgIGNvbnRlbnRTd2l0Y2gub24oJ2NsaWNrJywgJy5qcy1hcHAtY29udGVudC1pdGVtJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoISQoZXZlbnQudGFyZ2V0KS5pcygnLmpzLWFkZC1jb250ZW50JykgJiYgJChldmVudC50YXJnZXQpLnBhcmVudHMoJy5qcy1hZGQtY29udGVudCcpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGVudFN3aXRjaC50b2dnbGVDbGFzcygnYXBwLWNvbnRlbnQtc3dpdGNoLS1pcy1vcGVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvL2xpc3RlbiBmb3IgdGhlIGNsaWNrIG9uICdhZGQnIGJ1dHRvbiAtIG5ldyBjb250ZW50IGl0ZW0gaGFzIGJlZW4gY3JlYXRlZFxuICAgICAgICBjb250ZW50U3dpdGNoLm9uKCdjbGljaycsICcuanMtYWRkLWNvbnRlbnQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnRlbnRTd2l0Y2guYWRkQ2xhc3MoJ2FwcC1jb250ZW50LXN3aXRjaC0taXMtb3BlbicpO1xuICAgICAgICAgICAgdmFyIGluaXRpYWxMYWJlbCA9ICdVbnRpdGxlZCc7XG4gICAgICAgICAgICBjb250ZW50TGlzdC5maW5kKCcuYXBwLWNvbnRlbnQtaXRlbS0taXMtc2VsZWN0ZWQnKS5yZW1vdmVDbGFzcygnYXBwLWNvbnRlbnQtaXRlbS0taXMtc2VsZWN0ZWQgYXBwLWNvbnRlbnQtaXRlbS0taXMtZWRpdGluZycpLmNoaWxkcmVuKCdlbScpLmF0dHIoJ2NvbnRlbnRlZGl0YWJsZScsICdmYWxzZScpO1xuICAgICAgICAgICAgdmFyIG5ld0NvbnRlbnRJdGVtID0gZ2V0TmV3Q29udGVudFN3aXRjaChpbml0aWFsTGFiZWwsIGNvbnRlbnRMaXN0KTtcbiAgICAgICAgICAgIGNvbnRlbnRMaXN0LmZpbmQoJy5hcHAtY29udGVudC1pdGVtLS1pcy1zZWxlY3RlZCcpLmNoaWxkcmVuKCdlbScpLmF0dHIoJ2NvbnRlbnRlZGl0YWJsZScsICd0cnVlJykuc2VsZWN0VGV4dCgpO1xuICAgICAgICAgICAgYXBwU2lkZWJhci50cmlnZ2VyKCdjb250ZW50LXN3aXRjaC1hZGRlZCcsIFtjb250ZW50VHlwZSwgaW5pdGlhbExhYmVsXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vbmV3IGNvbnRlbnQgaXRlbSBoYXMgYmVlbiBzZWxlY3RlZFxuICAgICAgICBjb250ZW50TGlzdC5vbignY2xpY2snLCAnbGknLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZEl0ZW0gPSBjb250ZW50TGlzdC5jaGlsZHJlbignLmFwcC1jb250ZW50LWl0ZW0tLWlzLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICBpZiAoIXNlbGVjdGVkSXRlbS5pcygkKGV2ZW50LmN1cnJlbnRUYXJnZXQpKSAmJiAkKGV2ZW50LnRhcmdldCkucGFyZW50cygnLmpzLWNvbnRlbnQtaXRlbV9fY3RhLS1yZW1vdmUnKS5sZW5ndGggPCAxICYmICEkKGV2ZW50LnRhcmdldCkuaXMoJy5qcy1jb250ZW50LWl0ZW1fX2N0YS0tcmVtb3ZlJykpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50TGlzdC5jaGlsZHJlbignLmFwcC1jb250ZW50LWl0ZW0tLWlzLXNlbGVjdGVkJykucmVtb3ZlQ2xhc3MoJ2FwcC1jb250ZW50LWl0ZW0tLWlzLXNlbGVjdGVkIGFwcC1jb250ZW50LWl0ZW0tLWlzLWVkaXRpbmcnKS5jaGlsZHJlbignZW0nKS5hdHRyKCdjb250ZW50ZWRpdGFibGUnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmFkZENsYXNzKCdhcHAtY29udGVudC1pdGVtLS1pcy1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIC8vbmVlZCB0byB0YWtlIGNhcmUgb2YgdXBkYXRpbmcgY29udGVudCBzb21ld2hlcmUgZWxzZSAtPiB0cmlnZ2VyIGV2ZW50XG4gICAgICAgICAgICAgICAgYXBwU2lkZWJhci50cmlnZ2VyKCdjb250ZW50LXN3aXRjaC1zZWxlY3RlZCcsIFtjb250ZW50VHlwZSwgJChldmVudC5jdXJyZW50VGFyZ2V0KS5pbmRleCgpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnRlbnRMaXN0Lm9uKCdkYmxjbGljaycsICdsaScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKCQoZXZlbnQuY3VycmVudFRhcmdldCkuaGFzQ2xhc3MoJ2pzLWFwcC1jb250ZW50LWl0ZW0tLWRlZmF1bHQnKSkgcmV0dXJuO1xuICAgICAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5hZGRDbGFzcygnYXBwLWNvbnRlbnQtaXRlbS0taXMtZWRpdGluZycpLmNoaWxkcmVuKCdlbScpLmVxKDApLmF0dHIoJ2NvbnRlbnRlZGl0YWJsZScsICd0cnVlJykuZm9jdXMoKS5zZWxlY3RUZXh0KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxpc3RlblRvUGFyZW50U3RyaW5nKGNvbnRlbnRMaXN0LCAnbGknLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICgkKGV2ZW50Lm9yaWdpbmFsRXZlbnQudGFyZ2V0KS5pcygnLmpzLWNvbnRlbnQtaXRlbV9fY3RhLS1lZGl0JykpIHJldHVybjtcbiAgICAgICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkucmVtb3ZlQ2xhc3MoJ2FwcC1jb250ZW50LWl0ZW0tLWlzLWVkaXRpbmcnKS5maW5kKCdlbScpLmF0dHIoJ2NvbnRlbnRlZGl0YWJsZScsICdmYWxzZScpO1xuICAgICAgICAgICAgYXBwU2lkZWJhci50cmlnZ2VyKCdjb250ZW50LXN3aXRjaC1lZGl0ZWQnLCBbY29udGVudFR5cGUsICQoZXZlbnQuY3VycmVudFRhcmdldCkuaW5kZXgoKSwgJChldmVudC5jdXJyZW50VGFyZ2V0KS5maW5kKCdlbScpLnRleHQoKV0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLy0tY2hlY2sgaWYgd2UgbmVlZCB0byBsb2FkIG1vcmUgdGhlbWVzXG4gICAgICAgIGlmIChjb2xvck9iamVjdCAmJiBjb2xvck9iamVjdFswXSkge1xuICAgICAgICAgICAgLy93ZSBhcmUgb24gdGhlIGNvbG9ycyBnbG9iYWxcbiAgICAgICAgICAgIGlmIChjb2xvck9iamVjdFswXS50aGVtZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY29sb3JPYmplY3RbMF0udGhlbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdDb250ZW50SXRlbSA9IGdldE5ld0NvbnRlbnRTd2l0Y2goY29sb3JPYmplY3RbMF0udGhlbWVzW2ldLCBjb250ZW50TGlzdCk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvbnRlbnRJdGVtLnJlbW92ZUNsYXNzKCdhcHAtY29udGVudC1pdGVtLS1pcy1zZWxlY3RlZCBhcHAtY29udGVudC1pdGVtLS1pcy1lZGl0aW5nJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TmV3Q29udGVudFN3aXRjaChsYWJlbCwgY29udGVudExpc3QpIHtcbiAgICAgICAgdmFyIG5ld0NvbnRlbnRJdGVtID0gY29udGVudExpc3QuY2hpbGRyZW4oJ2xpJykuZXEoMCkuY2xvbmUoKTtcbiAgICAgICAgbmV3Q29udGVudEl0ZW0ucmVtb3ZlQ2xhc3MoJ2pzLWFwcC1jb250ZW50LWl0ZW0tLWRlZmF1bHQnKS5hZGRDbGFzcygnYXBwLWNvbnRlbnQtaXRlbS0taXMtZWRpdGFibGUgYXBwLWNvbnRlbnQtaXRlbS0taXMtZWRpdGluZyBhcHAtY29udGVudC1pdGVtLS1pcy1zZWxlY3RlZCcpLmNoaWxkcmVuKCdlbScpLnRleHQobGFiZWwpO1xuICAgICAgICBjb250ZW50TGlzdC5hcHBlbmQobmV3Q29udGVudEl0ZW0pO1xuICAgICAgICByZXR1cm4gbmV3Q29udGVudEl0ZW07XG4gICAgfVxuXG4gICAgLy9jb250ZW50IGdyb3Vwc1xuICAgIHZhciBhcHBDb250ZW50R3JvdXAgPSAkKCcuanMtYXBwLWNvbnRlbnRfX2dyb3VwJyk7XG4gICAgaWYgKGFwcENvbnRlbnRHcm91cC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBjb250ZW50VHlwZSA9IGFwcENvbnRlbnRHcm91cC5hdHRyKCdkYXRhLWdsb2JhbCcpLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBhcHBTaWRlYmFyID0gJCgnLmpzLWFwcC1zaWRlYmFyLS1nbG9iYWxzJyksXG4gICAgICAgICAgICBjb250ZW50SXRlbXMgPSBhcHBDb250ZW50R3JvdXAuY2hpbGRyZW4oJ2xpJyk7XG4gICAgICAgIC8vbGlzdGVuIHRvIHRoZSBjbGljayBvbiB0aGUgYXJyb3dzL2VudGlyZSBlbGVtZW50IC0gb3Blbi9jbG9zZSBncm91cFxuICAgICAgICBhcHBDb250ZW50R3JvdXAub24oJ2NsaWNrJywgJy5qcy1hcHAtY29udGVudC1pdGVtLS1ncm91cCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKCEkKGV2ZW50LnRhcmdldCkuaXMoJy5qcy1idG4tY3JlYXRlJykgJiYgJChldmVudC50YXJnZXQpLnBhcmVudHMoJy5qcy1idG4tY3JlYXRlJykubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnRvZ2dsZUNsYXNzKCdhcHAtY29udGVudC1pdGVtLS1zaG93LWNoaWxkcmVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvL3NlbGVjdCBhIG5ldyBjb250ZW50XG4gICAgICAgIGFwcENvbnRlbnRHcm91cC5vbignY2xpY2snLCAnLmpzLWFwcC1jb250ZW50LWl0ZW0nLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBzaGFyZWRTdHlsZSA9IGZhbHNlOyAvLyB3ZSBhcmUgZ29ubmEgdXNlIHRoaXMgZm9yIHRoZSBzaGFyZWQgc3R5bGVzIGdsb2JhbCBvbmx5XG4gICAgICAgICAgICBpZiAoISQoZXZlbnQuY3VycmVudFRhcmdldCkuaGFzQ2xhc3MoJ2FwcC1jb250ZW50LWl0ZW0tLWlzLXNlbGVjdGVkJykpIHsvL2VsZW1lbnQgaXMgbm90IGFscmVhZHkgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAvL2RvIG5vdCBzZWxlY3QgaWYgdGhlIGl0ZW0gaXMgYmVpbmcgcmVtb3ZlZCAoY2xpY2sgb24gdHJhc2ggaWNvbilcbiAgICAgICAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmlzKCcuanMtY29udGVudC1pdGVtX19jdGEtLWRlbGV0ZScpIHx8ICQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCcuanMtY29udGVudC1pdGVtX19jdGEtLWRlbGV0ZScpLmxlbmd0aCA+IDApIHJldHVybjtcbiAgICAgICAgICAgICAgICBhcHBDb250ZW50R3JvdXAuZmluZCgnLmFwcC1jb250ZW50LWl0ZW0tLWlzLXNlbGVjdGVkJykucmVtb3ZlQ2xhc3MoJ2FwcC1jb250ZW50LWl0ZW0tLWlzLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5hZGRDbGFzcygnYXBwLWNvbnRlbnQtaXRlbS0taXMtc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAvL25lZWQgdG8gdGFrZSBjYXJlIG9mIHVwZGF0aW5nIGNvbnRlbnQgc29tZXdoZXJlIGVsc2UgLT4gdHJpZ2dlciBldmVudFxuICAgICAgICAgICAgICAgIC8vaWYgdGhlIGNvbnRlbnQgaXMgYSBjdXN0b20gb25lIC0+cGFzcyBpbmRleCB0byBiamVjdHMgYXMgd2VsbFxuICAgICAgICAgICAgICAgIHZhciBpdGVtSW5kZXggPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmhhc0NsYXNzKCdqcy1hcHAtY29udGVudC1pdGVtLS1pcy1lZGl0YWJsZScpID8gJChldmVudC5jdXJyZW50VGFyZ2V0KS5pbmRleCgpIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldExhYmVsID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5jaGlsZHJlbignLmFwcC1jb250ZW50LWl0ZW1fX3RleHQnKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlID09ICdjb2xvcnMnICYmICQoZXZlbnQuY3VycmVudFRhcmdldCkuYXR0cignZGF0YS1zZWN0aW9uJykuaW5kZXhPZignY29sb3ItY3VzdG9tJykgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMYWJlbCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuYXR0cignZGF0YS1zZWN0aW9uJykucmVwbGFjZSgnI2NvbG9yJywgJy0tY29sb3InKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXBwU2lkZWJhci50cmlnZ2VyKCdjb250ZW50LXNlbGVjdGVkJywgW2NvbnRlbnRUeXBlLCB0YXJnZXRMYWJlbCwgaXRlbUluZGV4LCBzaGFyZWRTdHlsZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvL3JpZ2h0IHNpZGViYXIgLSBnZW5lcmljIGludGVyYWN0aW9uc1xuICAgIHZhciByaWdodEFwcFNpZGViYXIgPSAkKCcuanMtYXBwLXNpZGViYXItLWdsb2JhbHMnKTtcbiAgICBpZiAocmlnaHRBcHBTaWRlYmFyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIGNvbG9yU2VsZWN0ID0gJCgnLmpzLWFwcC1tZW51LS1jb2xvcicpO1xuICAgICAgICByaWdodEFwcFNpZGViYXIub24oJ2NsaWNrJywgJy5qcy1hcHAtZWRpdG9yLXNlY3Rpb25fX3RpdGxlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmlzKCcuanMtYXBwLWVkaXRvci1zZWN0aW9uX190aXRsZS1jdGEnKSB8fCAkKGV2ZW50LnRhcmdldCkucGFyZW50cygnLmpzLWFwcC1lZGl0b3Itc2VjdGlvbl9fdGl0bGUtY3RhJykubGVuZ3RoID4gMCkgcmV0dXJuO1xuICAgICAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS50b2dnbGVDbGFzcygnYXBwLWVkaXRvci1zZWN0aW9uX190aXRsZS0taGlkZS1ib2R5Jyk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL2luIHRoZSBzaWRlYmFyIC0gc2hvdyB0aGUgbXEgdGFiIGNsaWNraW5nIG9uIHRoZSBtcSBidXR0b25cbiAgICAgICAgcmlnaHRBcHBTaWRlYmFyLm9uKCdjbGljaycsICcuanMtYnRuLXJlc3BvbnNpdmUtcnVsZXMnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGFwcFNpZGViYXJFbmFibGVNcSgkKGV2ZW50LmN1cnJlbnRUYXJnZXQpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vaW4gdGhlIHNpZGViYXIgLSByZW1vdmUgdGhlIG1xIHRhYi9yZXNldCBtcSBjbGlja2luZyBvbiBkZWxldGUgYnV0dG9uXG4gICAgICAgIHJpZ2h0QXBwU2lkZWJhci5vbignY2xpY2snLCAnLmpzLWFwcC1kZWxldGUtbXEnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGFwcFNpZGViYXJEaXNhYmxlTXEoJChldmVudC5jdXJyZW50VGFyZ2V0KSwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL2luIHRoZSBzaWRlYmFyIC0gc2VsZWN0IGEgbmV3IG1xIGNsaWNraW5nIG9uICBuZXcgbXEgdGFiXG4gICAgICAgIHJpZ2h0QXBwU2lkZWJhci5vbignY2xpY2snLCAnLmpzLWFwcC1lZGl0b3ItdGFic19faXRlbScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgYXBwU2lkZWJhclNlbGVjdE1xKCQoZXZlbnQuY3VycmVudFRhcmdldCksIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy9pbiB0aGUgcmlnaHQgc2lkZWJhciAtPiBjbGljayBvbiB0aGUgcmVzZXQgbGluayB0byByZXNldCBwcm9wZXJ0eSB0byBkZWZhdWx0IHN0YXR1cyAoZS5nLiwgYnV0dG9ucylcbiAgICAgICAgcmlnaHRBcHBTaWRlYmFyLm9uKCdjbGljaycsICcuanMtYXBwLWVkaXRvci1zZWN0aW9uX19yZXNldC1saW5rJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAvL3JlbW92ZSBlZGl0ZWQgc2VjdGlvblxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkU2VjdGlvbiA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLmpzLWFwcC1lZGl0b3Itc2VjdGlvbicpLFxuICAgICAgICAgICAgICAgIG1xRGVsZXRlID0gc2VsZWN0ZWRTZWN0aW9uLmZpbmQoJy5qcy1hcHAtZGVsZXRlLW1xJyk7XG4gICAgICAgICAgICBzZWxlY3RlZFNlY3Rpb24ucmVtb3ZlQ2xhc3MoJ2FwcC1lZGl0b3Itc2VjdGlvbi0tY29udGVudC1lZGl0ZWQnKTtcbiAgICAgICAgICAgIC8vIGlmKG1xRGVsZXRlLmxlbmd0aCA+IDApIGFwcFNpZGViYXJEaXNhYmxlQW5kUmVzZXRNcShtcURlbGV0ZSk7XG4gICAgICAgICAgICAvL3RyaWdnZXIgcmVzZXQgb2YgdmFyaWFibGVzIGluIGpzIG9iamVjdHNcbiAgICAgICAgICAgIHJpZ2h0QXBwU2lkZWJhci50cmlnZ2VyKCdyZXNldC1zdGF0dXMnLCBbc2VsZWN0ZWRTZWN0aW9uXSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL2NvbG9yIHByZXZpZXcgb2JqZWN0XG4gICAgICAgIHJpZ2h0QXBwU2lkZWJhci5vbignY2xpY2snLCAnLmpzLWFwcC1lZGl0b3ItY29sb3ItcHJldmlldycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgY29sb3JTZWxlY3QudHJpZ2dlcignb3Blbi1jb2xvci1zZWxlY3RvcicsIFskKGV2ZW50LnRhcmdldCldKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGNvbG9yU2VsZWN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQod2luZG93KS5vbignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoISQoZXZlbnQudGFyZ2V0KS5pcygnLmpzLWFwcC1lZGl0b3ItY29sb3ItcHJldmlldycpICYmICEkKGV2ZW50LnRhcmdldCkuaXMoJy5qcy1hcHAtbWVudS0tY29sb3InKSAmJiAkKGV2ZW50LnRhcmdldCkucGFyZW50cygnLmpzLWFwcC1tZW51LS1jb2xvcicpLmxlbmd0aCA8IDEpIGNvbG9yU2VsZWN0LnRyaWdnZXIoJ2Nsb3NlLWNvbG9yLXNlbGVjdGlvbicpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICQod2luZG93KS5vbigna2V5dXAnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoKGV2ZW50LmtleSAmJiBldmVudC5rZXkudG9Mb3dlckNhc2UoKSA9PT0gXCJiYWNrc3BhY2VcIikgfHwgKGV2ZW50LmtleUNvZGUgJiYgZXZlbnQua2V5Q29kZSA9PT0gXCI4XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yU2VsZWN0LnRyaWdnZXIoJ2RlbGV0ZS1vcGFjaXR5Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzaGFkb3cgc2VsZWN0aW9uIC0+IHRyaWdnZXIgY3VzdG9tIGZpZWxkc1xuICAgICAgICB2YXIgc2hhZG93TGlzdCA9ICQoJy5qcy1zaGFkb3ctbGlzdCcpO1xuICAgICAgICBpZiAoc2hhZG93TGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzaGFkb3dMaXN0Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICByZXNldFNoYWRvd0Jsb2NrQXBwZWFyYW5jZSgkKGV2ZW50LnRhcmdldCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgY29weSBjb2RlL3ZpZXcgY29kZSBmdW5jdGlvblxuXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4vL2NvcHkgY29kZSAtIGRldGVjdCBpZiB0aGVyZSdzIGEgY29weSBjb2RlIGVsZW1lbnQgYXZhaWxhYmxlXG4gICAgaWYgKCQoJy5qcy1jb3B5LWNvZGUnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBjbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkSlMoJy5qcy1jb3B5LWNvZGUnLCB7XG4gICAgICAgICAgICB0ZXh0OiBmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgICAgICAgICAgIHZhciBmb3JtYXQgPSAkKHRyaWdnZXIpLmF0dHIoJ2RhdGEtdHlwZScpLFxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIgPSAkKHRyaWdnZXIpLnBhcmVudHMoJy5qcy1jb2RlLWFjdGlvbi13cmFwcGVyJykuZXEoMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5hdHRyKCdkYXRhLScgKyBmb3JtYXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjbGlwYm9hcmQub24oJ3N1Y2Nlc3MnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHNob3dDb3B5U3VjY2VzcyhldmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKCQoZXZlbnQudHJpZ2dlcikuaGFzQ2xhc3MoJ2pzLWNvcHktY29kZS0tZGVwZW5kZW5jaWVzJykpIHNob3dEZXBlbmRlbmNpZXNNb2RhbChldmVudC50cmlnZ2VyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gc3dpdGNoZXIgY3NzL3Njc3NcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjZC1jb3B5LWNzcycpID09ICdjc3MnKSB7XG4gICAgICAgICAgICAvLyB1c2VyIHdhbnRzIHRvIGNvcHkgY3NzIGJ5IGRlZmF1bHRcbiAgICAgICAgICAgIHZhciBzcGxpdEJ0biA9ICQoJy5qcy1idG4tc3BsaXRfX2xhYmVsJyk7XG4gICAgICAgICAgICBpZiAoc3BsaXRCdG4pIHNwbGl0QnRuLnRleHQoJ0NTUycpLnBhcmVudCgpLmF0dHIoJ2RhdGEtdHlwZScsICdjc3MnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICgkKCcuanMtbW9kYWxfX2NvcHknKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBjbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkSlMoJy5qcy1tb2RhbF9fY29weScsIHtcbiAgICAgICAgICAgIHRleHQ6IGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZvcm1hdCA9ICgkKHRyaWdnZXIpLmF0dHIoJ2RhdGEtY29weScpKSA/ICQodHJpZ2dlcikuYXR0cignZGF0YS1jb3B5JykgOiAnaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPSAkKHRyaWdnZXIpLnByZXYoKS5maW5kKCcuanMtbW9kYWxfX2NvZGUnKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNsaXBib2FyZC5vbignc3VjY2VzcycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgc2hvd0NvcHlTdWNjZXNzKGV2ZW50LCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvd0NvcHlTdWNjZXNzKGV2ZW50LCBib29sKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSAkKGV2ZW50LnRyaWdnZXIpO1xuICAgICAgICBpZiAodGFyZ2V0Lmhhc0NsYXNzKCdqcy1jb3B5LWNvZGUtLXNwbGl0JykpIHtcbiAgICAgICAgICAgIC8vIHVzZXIgY2xpY2tlZCB0aGUgdG9vbHRpcCBvZiBzcGxpdCBidG5cbiAgICAgICAgICAgIHZhciBwb3BvdmVyID0gdGFyZ2V0LnBhcmVudHMoJy5qcy1wb3BvdmVyJyksXG4gICAgICAgICAgICAgICAgY29kZVR5cGUgPSB0YXJnZXQuYXR0cignZGF0YS10eXBlJyksXG4gICAgICAgICAgICAgICAgcG9wb3ZlckNvbnRyb2wgPSAkKCdbYXJpYS1jb250cm9scz1cIicgKyBwb3BvdmVyLmF0dHIoJ2lkJykgKyAnXCJdJyk7XG4gICAgICAgICAgICB0YXJnZXQgPSBwb3BvdmVyQ29udHJvbC5wcmV2KCk7XG4gICAgICAgICAgICB1cGRhdGVTcGxpdENvcHkodGFyZ2V0LCBjb2RlVHlwZSwgcG9wb3ZlckNvbnRyb2wpO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5hZGRDbGFzcygnYnRuLS1zdGF0ZS1iJyk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZUNsYXNzKCdidG4tLXN0YXRlLWInKTtcbiAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgIC8vYmluZCB0aGUgZ29vZ2xlIGFuYWx5dGljcyBldmVudCBhcyB3ZWxsXG4gICAgICAgIHZhciBjb21wb25lbnROYW1lID0gYm9vbCA/IHRhcmdldC5wYXJlbnRzKCcuanMtbW9kYWwtY29kZScpLmVxKDApLmF0dHIoJ2RhdGEtY29tcG9uZW50JykgOiB0YXJnZXQucGFyZW50cygnLmpzLWNvZGUtYWN0aW9uLXdyYXBwZXInKS5lcSgwKS5hdHRyKCdkYXRhLWRlbW8nKTtcbiAgICAgICAgZ2EoJ3NlbmQnLCAnZXZlbnQnLCAnVmlldyBDb2RlJywgJ2NvcHlDb2RlJywgY29tcG9uZW50TmFtZSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVNwbGl0Q29weSh0YXJnZXQsIGNvZGVUeXBlLCBwb3BvdmVyQ29udHJvbCkge1xuICAgICAgICB0YXJnZXQuZmluZCgnLmpzLWJ0bi1zcGxpdF9fbGFiZWwnKS50ZXh0KGNvZGVUeXBlLnRvVXBwZXJDYXNlKCkpO1xuICAgICAgICB0YXJnZXQuYXR0cignZGF0YS10eXBlJywgY29kZVR5cGUpO1xuICAgICAgICBwb3BvdmVyQ29udHJvbC50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY2QtY29weS1jc3MnLCBjb2RlVHlwZSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHNob3dEZXBlbmRlbmNpZXNNb2RhbCh0cmlnZ2VyKSB7XG4gICAgICAgIHZhciBtb2RhbCA9ICQoJy5qcy1tb2RhbC0tZGVwZW5kZW5jaWVzJyk7XG4gICAgICAgIG1vZGFsLnRyaWdnZXIoJ29wZW5Nb2RhbCcsIFt0cmlnZ2VyXSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHNob3dEZXBlbmRlbmNpZXNNb2RhbFZpZXdDb2RlKHRyaWdnZXIsIG1vZGFsKSB7XG4gICAgICAgIGlmICh0cmlnZ2VyLmF0dHIoJ2RhdGEtZGVwLXRpdGxlcycpIHx8ICh0cmlnZ2VyLmF0dHIoJ2RhdGEtZXh0LWRlcCcpICYmIHRyaWdnZXIuYXR0cignZGF0YS1leHQtZGVwJykgIT0gJycpKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBjb21wb25lbnQgZ2FsbGVyeSAtIGNyZWF0ZSBsaXN0XG4gICAgICAgICAgICByZXNldERlcGVuZGVuY2llc0xpc3RWaWV3Q29kZShtb2RhbCwgdHJpZ2dlci5hdHRyKCdkYXRhLWRlcC11cmwnKSwgdHJpZ2dlci5hdHRyKCdkYXRhLWRlcC10aXRsZXMnKSwgdHJpZ2dlci5hdHRyKCdkYXRhLWV4dC1kZXAnKSk7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RhbC5maW5kKCcuanMtYXBwLWluZm8tYmFubmVyJykuYWRkQ2xhc3MoJ2FwcC1pbmZvLWJhbm5lci0taXMtdmlzaWJsZScpO1xuICAgIH07XG5cbiAgICB2YXIgY29weUNvZGVXcmFwcGVyID0gJCgnLmpzLWNvZGUtYWN0aW9uLXdyYXBwZXInKTtcbiAgICBpZiAoY29weUNvZGVXcmFwcGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKCQoJy5qcy1pdGVtLWdhbGxlcnknKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAkKCcuanMtaXRlbS1nYWxsZXJ5Jykub24oJ2NsaWNrJywgJy5qcy12aWV3LWNvZGUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBzaG93Vmlld0NvZGVNb2RhbChldmVudCwgJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcuanMtY29kZS1hY3Rpb24td3JhcHBlcicpLmVxKDApKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZGV0ZWN0IGNsaWNrIG9uIHZpZXcgY29kZVxuICAgICAgICAgICAgY29weUNvZGVXcmFwcGVyLm9uKCdjbGljaycsICcuanMtdmlldy1jb2RlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc2hvd1ZpZXdDb2RlTW9kYWwoZXZlbnQsICQoZXZlbnQuZGVsZWdhdGVUYXJnZXQpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBzaG93Vmlld0NvZGVNb2RhbChldmVudCwgcGFyZW50KSB7XG4gICAgICAgIC8vIHZhciBjb2RlID0gW107XG4gICAgICAgIHZhciBtb2RhbCA9ICQoJy5qcy1tb2RhbFtkYXRhLW1vZGFsLXRyaWdnZXI9XCInICsgJChldmVudC5jdXJyZW50VGFyZ2V0KS5hdHRyKCdkYXRhLW1vZGFsJykgKyAnXCJdJyk7XG4gICAgICAgIC8vaGlkZSBtZW51IHBvcHVwXG4gICAgICAgICQoJy5qcy1tZW51LXBvcHVwLm1lbnUtcG9wdXAtLWlzLXZpc2libGUnKS5yZW1vdmVDbGFzcygnbWVudS1wb3B1cC0taXMtdmlzaWJsZScpO1xuICAgICAgICAvL21vZGFsIGlzIHNob3duIGF1dG9tYXRpY2FsbHkgdXNpbmcgdGhlIHByb3BlciBvYmplY3RcbiAgICAgICAgaWYgKCQoZXZlbnQuY3VycmVudFRhcmdldCkuaGFzQ2xhc3MoJ2pzLXZpZXctY29kZS0tZ2xvYmFsJykpIHtcbiAgICAgICAgICAgIC8vZ2V0IGNvZGUgZ2xvYmFsIC0tIG5lZWQgdG8gbW9kaWZ5IGkgZmlyc3RcbiAgICAgICAgICAgIGdldEdsb2JhbENvZGUocGFyZW50LCAnJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBwb3B1bGF0ZSB0aGUgbW9kYWwgbm93XG4gICAgICAgICAgICAgICAgbW9kYWwudHJpZ2dlcignc2hvd0dsb2JhbENvZGUnLCBbZGF0YV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRDb21wb25lbnRDb2RlKHBhcmVudCwgJycsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQoZXZlbnQuY3VycmVudFRhcmdldCkuaGFzQ2xhc3MoJ2pzLXZpZXctY29kZS0tZGVwZW5kZW5jaWVzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0RlcGVuZGVuY2llc01vZGFsVmlld0NvZGUoJChldmVudC5jdXJyZW50VGFyZ2V0KSwgbW9kYWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gaGlkZSB0aGUgZGVwZW5kZW5jaWVzIGJhbm5lciBpbiB0aGUgbW9kYWxcbiAgICAgICAgICAgICAgICAgICAgbW9kYWwuZmluZCgnLmpzLWFwcC1pbmZvLWJhbm5lcicpLnJlbW92ZUNsYXNzKCdhcHAtaW5mby1iYW5uZXItLWlzLXZpc2libGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcG9wdWxhdGUgdGhlIG1vZGFsIG5vd1xuICAgICAgICAgICAgICAgIG1vZGFsLnRyaWdnZXIoJ3Nob3dDb2RlJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvL2JpbmQgdGhlIGdvb2dsZSBhbmFseXRpY3MgZXZlbnQgYXMgd2VsbFxuICAgICAgICBnYSgnc2VuZCcsICdldmVudCcsICdWaWV3IENvZGUnLCAnc2hvd0NvZGUnLCBwYXJlbnQuYXR0cignZGF0YS1kZW1vJykpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRDb21wb25lbnRDb2RlKGNvbnRhaW5lciwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICAgIGlmICghY29udGFpbmVyLmF0dHIoJ2RhdGEtaHRtbCcpICYmICFjb250YWluZXIuYXR0cignZGF0YS1zY3NzJykgJiYgIWNvbnRhaW5lci5hdHRyKCdkYXRhLWpzJykpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgc2hvdWxkIGJlIGR5bmFtaWNcbiAgICAgICAgICAgIGlmICh0eXBlICYmIHR5cGUgPT0gJ2dsb2JhbHMnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb250YWluZXIuYXR0cignZGF0YS10aXRsZScpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnROYW1lID0gY29udGFpbmVyLmF0dHIoJ2RhdGEtZGVtbycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZEZpbGVDb250ZW50KGNvbXBvbmVudE5hbWUsIHR5cGUsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hdHRyKCdkYXRhLWh0bWwnLCBjb2RlLnJlc3BvbnNlLmh0bWwpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hdHRyKCdkYXRhLXNjc3MnLCBjb2RlLnJlc3BvbnNlLnNjc3MpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hdHRyKCdkYXRhLWNzcycsIGNvZGUucmVzcG9uc2UuY3NzKTtcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYXR0cignZGF0YS1qcycsIGNvZGUucmVzcG9uc2UuanMpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGFycmF5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlbMF0gPSBjb250YWluZXIuYXR0cignZGF0YS1odG1sJyk7XG4gICAgICAgICAgICBhcnJheVsxXSA9IGNvbnRhaW5lci5hdHRyKCdkYXRhLXNjc3MnKTtcbiAgICAgICAgICAgIGFycmF5WzJdID0gY29udGFpbmVyLmF0dHIoJ2RhdGEtanMnKTtcbiAgICAgICAgICAgIGFycmF5WzNdID0gY29udGFpbmVyLmF0dHIoJ2RhdGEtY3NzJyk7XG4gICAgICAgICAgICBjYWxsYmFjayhhcnJheSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRHbG9iYWxDb2RlKGNvbnRhaW5lciwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgc2Nzc19jb2RlID0gbW9kaWZ5R2xvYmFsQ29kZShjb250YWluZXIuYXR0cignZGF0YS1zY3NzJyksIGNvbnRhaW5lci5hdHRyKCdkYXRhLWRlbW8nKSwgY29udGFpbmVyKTtcbiAgICAgICAgY2FsbGJhY2soc2Nzc19jb2RlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWFkRmlsZUNvbnRlbnQoY29tcG9uZW50LCB0eXBlLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZSAmJiB0eXBlID09ICdnbG9iYWxzJykge1xuICAgICAgICAgICAgdmFyIHVybCA9ICdwb3N0L2dldEdsb2JhbENvZGUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHVybCA9ICdwb3N0L2dldENvbXBvbmVudENvZGUnXG4gICAgICAgIH1cbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgZGF0YTogJ2NvbXBvbmVudD0nICsgY29tcG9uZW50LFxuICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgY2FjaGU6ICdmYWxzZScsXG4gICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy9zaG93IGxvYWRlciBvciBzaW1pbGFyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9kaWZ5R2xvYmFsQ29kZShjb2RlLCBnbG9iYWwpIHtcbiAgICAgICAgLy9jaGVjayB0aGUgZ2xvYmFscyB0aGF0IG5lZWRzIHRvIGJlIG1vZGlmaWVkXG4gICAgICAgIHN3aXRjaCAoZ2xvYmFsLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2NvbG9ycyc6XG4gICAgICAgICAgICAgICAgY29kZSA9IG1vZGlmeUNvbG9yc0NvZGUoY29kZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdidXR0b25zJzpcbiAgICAgICAgICAgICAgICBjb2RlID0gbW9kaWZ5QnV0dG9uc0NvZGUoY29kZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdmb3Jtcyc6XG4gICAgICAgICAgICAgICAgY29kZSA9IG1vZGlmeUZvcm1zQ29kZShjb2RlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNpbmcnOlxuICAgICAgICAgICAgICAgIGNvZGUgPSBtb2RpZnlTcGFjaW5nQ29kZShjb2RlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3R5cG9ncmFwaHknOlxuICAgICAgICAgICAgICAgIGNvZGUgPSBtb2RpZnlUeXBvZ3JhcGh5Q29kZShjb2RlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NoYXJlZCBzdHlsZXMnOlxuICAgICAgICAgICAgICAgIGNvZGUgPSBtb2RpZnlTaGFyZWRTdHlsZXNDb2RlKGNvZGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb2RlID0gY29kZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb2RlO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBtb2RpZnlDb2xvcnNDb2RlKGNvZGUpIHtcbiAgICAgICAgaWYgKGNvbG9yT2JqZWN0ICYmIGNvbG9yT2JqZWN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvZGUgPSBjb2xvck9iamVjdFswXS51cGRhdGVDb3B5Q29kZShjb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb2RlO1xuICAgIH07XG5cblxuICAgIC8vIGNvbXBvbmVudCBkZXBlbmRlbmNpZXMgLT4gY2xvc2UgYmFubmVyIGluIHZpZXcgY29kZVxuICAgIHZhciBjbG9zZUJhbm5lciA9ICQoJy5qcy1hcHAtaW5mby1iYW5uZXJfX2Nsb3NlJyk7XG4gICAgaWYgKGNsb3NlQmFubmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY2xvc2VCYW5uZXIub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgY2xvc2VCYW5uZXIucGFyZW50cygnLmpzLWFwcC1pbmZvLWJhbm5lcicpLnJlbW92ZUNsYXNzKCdhcHAtaW5mby1iYW5uZXItLWlzLXZpc2libGUnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29udkFyclRvT2JqKGFycmF5KSB7XG4gICAgICAgIHZhciB0aGlzRWxlT2JqID0gbmV3IE9iamVjdCgpO1xuICAgICAgICBpZiAodHlwZW9mIGFycmF5ID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gYXJyYXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0VsZSA9IGNvbnZBcnJUb09iaihhcnJheVtpXSk7XG4gICAgICAgICAgICAgICAgdGhpc0VsZU9ialtpXSA9IHRoaXNFbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzRWxlT2JqID0gYXJyYXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNFbGVPYmo7XG4gICAgfTtcblxuICAgIC8vcmVzZXQgZ2xvYmFscyBmdW5jdGlvblxuICAgIHZhciByZXNldEdsb2JhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2pzLXJlc2V0LWdsb2JhbCcpO1xuICAgIGlmIChyZXNldEdsb2JhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJlc2V0R2xvYmFsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZ2xvYmFsVHlwZSA9IHJlc2V0R2xvYmFsWzBdLmdldEF0dHJpYnV0ZSgnZGF0YS1nbG9iYWwnKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAod2luZG93LmNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVzZXQgdGhlIGdsb2JhbCBcIiArIGdsb2JhbFR5cGUgKyBcIj8gQWxsIHlvdXIgY3VzdG9tIGNoYW5nZXMgd2lsbCBiZSByZW1vdmVkLlwiKSkge1xuICAgICAgICAgICAgICAgIHJlc2V0R2xvYmFsRm4oZ2xvYmFsVHlwZS50b0xvd2VyQ2FzZSgpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8vVE9ETyBDcmVhdGUgYnRuIHNhdmVcbiAgICAkKCcuY29weS1nbG9iYWxzLWNvZGUnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNhdmVDb2xvcnNDb2RlKCk7XG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIHNhdmVDb2xvcnNDb2RlKGNhbGxiYWNrKSB7XG4gICAgICAgIC8vbmVlZCB0byBkZWZpbmUgYSBzdHJpbmcgZm9yIGNvbG9yc1xuICAgICAgICBpZiAoIWNvbG9yT2JqZWN0IHx8IGNvbG9yT2JqZWN0Lmxlbmd0aCA9PSAwKSBjYWxsYmFjaygpO1xuICAgICAgICB2YXIgY29sb3JzQWxsID0gY29sb3JPYmplY3RbMF0uZ2V0QXJyYXlUb1NhdmUoKTtcblxuICAgICAgICB2YXIgY29sb3JTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShjb252QXJyVG9PYmooY29sb3JzQWxsKSk7XG4gICAgICAgIHVwZGF0ZUdsb2JhbHNQcm9qZWN0KGNvbG9yU3RyaW5nLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUdsb2JhbHNQcm9qZWN0KG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGxldCBnZXRDT25maWc7XG4gICAgICAgIGF4aW9zKHtcbiAgICAgICAgICAgIHVybDogJy9hZG1pbi90aGVtZXMvZG9mdXMtZGVmYXVsdC9jb25maWcnLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbG9yT2JqZWN0IHx8IGNvbG9yT2JqZWN0Lmxlbmd0aCA9PSAwKSBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIGxldCBjb2xvcnNBbGwgPSBjb2xvck9iamVjdFswXS5nZXRBcnJheVRvU2F2ZSgpO1xuICAgICAgICAgICAgICAgIGxldCBjb2xvclN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGNvbnZBcnJUb09iaihjb2xvcnNBbGwpKTtcbiAgICAgICAgICAgICAgICBnZXRDT25maWcgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmRhdGEuc3BsaXQoJzwhRE9DVFlQRSBodG1sPicpWzBdKTtcbiAgICAgICAgICAgICAgICBnZXRDT25maWcucHJvamVjdC5jb2xvcl90aGVtZXNfZGF0YSA9IGNvbG9yU3RyaW5nO1xuICAgICAgICAgICAgICAgIGdldENPbmZpZy5wcm9qZWN0LmNvbG9yX3RoZW1lcyA9ICQoJ2h0bWwnKS5hdHRyKFwic3R5bGVcIik7XG5cbiAgICAgICAgICAgICAgICBheGlvcy5wb3N0KCcvYWRtaW4vdGhlbWVzL2RvZnVzLWRlZmF1bHQvY29uZmlnJywge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IGdldENPbmZpZy5oZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgIGZvb3RlcjogZ2V0Q09uZmlnLmZvb3RlcixcbiAgICAgICAgICAgICAgICAgICAgZGlzY29yZDogZ2V0Q09uZmlnLmRpc2NvcmQsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlcnM6IGdldENPbmZpZy5zbGlkZXJzLFxuICAgICAgICAgICAgICAgICAgICBhcnRpY2xlczogZ2V0Q09uZmlnLmFydGljbGVzLFxuICAgICAgICAgICAgICAgICAgICB2b3RlOiBnZXRDT25maWcudm90ZSxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogZ2V0Q09uZmlnLnByb2plY3QsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBTYXZlQWxlcnQubm8oKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuXG4gICAgLy8gU2F2ZSBBbGVydFxuICAgIHZhciBTYXZlQWxlcnQgPSB7XG4gICAgICAgIHllczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2luZG93Lm9uYmVmb3JldW5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgbm86IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdpbmRvdy5vbmJlZm9yZXVubG9hZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuXG59KCkpO1xuXG5cbi8qKioqKioqKioqKioqKioqKioqKioqXG4gaU9TIGJhbm5lclxuICoqKioqKioqKioqKioqKioqKioqKioqL1xuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW9zQmFubmVyID0gJCgnLmpzLWlvcy1waXZvdCcpO1xuICAgIGlmIChpb3NCYW5uZXIubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoISFuYXZpZ2F0b3IucGxhdGZvcm0gJiYgL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSkgaW9zQmFubmVyLnJlbW92ZUNsYXNzKCdpb3MtcGl2b3QtLWlzLWhpZGRlbicpO1xuICAgIH1cbn0oKSk7XG5cbi8vaGVyZSBkZWZpbmUgdGhlIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgdXNlZCBpbnNpZGUgdGhlIGFwcCBmcmFtZVxuZnVuY3Rpb24gY2hlY2tQZXJjZW50YWdlKHZhbCkge1xuICAgIHZhbCA9IE51bWJlcih2YWwpO1xuICAgIGlmICh2YWwgPCAwKSB2YWwgPSAwO1xuICAgIGlmICh2YWwgPiAxKSB2YWwgPSAxO1xuICAgIHJldHVybiBOdW1iZXIodmFsLnRvRml4ZWQoMikpO1xufTtcblxuZnVuY3Rpb24gY2hlY2tIdWUoaHVlKSB7XG4gICAgaWYgKGlzTmFOKGh1ZSkpIGh1ZSA9IDA7XG4gICAgcmV0dXJuIE1hdGgucm91bmQocGFyc2VGbG9hdChodWUpKTtcbn07XG5cbmZ1bmN0aW9uIGdldEhzbEZyb21IZXgoaGV4KSB7XG4gICAgaWYgKGhleC5pbmRleE9mKCdoc2woJykgPiAtMSkge1xuICAgICAgICAvL2Zvcm1hdCBpcyBhbHJlYWR5IGhzbCgsICwgKVxuICAgICAgICByZXR1cm4gZ2V0SHNsRnJvbUhzbFN0cmluZyhoZXgpO1xuICAgIH1cbiAgICB2YXIgY29sb3IgPSBjaHJvbWEoaGV4KS5oc2woKTtcbiAgICBpZiAoaXNOYU4oY29sb3JbMF0pKSBjb2xvclswXSA9IDA7XG4gICAgY29sb3JbMF0gPSBNYXRoLnJvdW5kKGNvbG9yWzBdKTtcbiAgICBjb2xvclsxXSA9IE51bWJlcihNYXRoLnJvdW5kKGNvbG9yWzFdICogMTAwKSAvIDEwMCk7XG4gICAgY29sb3JbMl0gPSBOdW1iZXIoTWF0aC5yb3VuZChjb2xvclsyXSAqIDEwMCkgLyAxMDApO1xuICAgIHJldHVybiBjb2xvcjtcbn07XG5cbmZ1bmN0aW9uIGdldEhzbEZyb21Ic2xTdHJpbmcoaGV4KSB7XG4gICAgdmFyIGNvbG9yID0gaGV4LnJlcGxhY2UoJ2hzbCgnLCAnJykucmVwbGFjZSgnKScsICcnKS5zcGxpdCgnLCcpO1xuICAgIGNvbG9yWzBdID0gTnVtYmVyKGNvbG9yWzBdLnRyaW0oKSk7XG4gICAgY29sb3JbMV0gPSBwYXJzZUZsb2F0KChOdW1iZXIoY29sb3JbMV0udHJpbSgpLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwKS50b0ZpeGVkKDIpKTtcbiAgICBjb2xvclsyXSA9IHBhcnNlRmxvYXQoKE51bWJlcihjb2xvclsyXS50cmltKCkucmVwbGFjZSgnJScsICcnKSkgLyAxMDApLnRvRml4ZWQoMikpO1xuICAgIHJldHVybiBjb2xvcjtcbn07XG5cbmZ1bmN0aW9uIGdldEhleEZyb21Ic2woaHNsKSB7XG4gICAgcmV0dXJuIGNocm9tYS5oc2woaHNsWzBdLCBoc2xbMV0sIGhzbFsyXSkuaGV4KCk7XG59O1xuXG5mdW5jdGlvbiBjb252ZXJ0U3RyaW5nVG9Ic2woc3RyaW5nKSB7XG4gICAgc3RyaW5nID0gTnVtYmVyKHN0cmluZy5yZXBsYWNlKCclJywgJycpKTtcbiAgICByZXR1cm4gTnVtYmVyKChzdHJpbmcgLyAxMDApLnRvRml4ZWQoMikpO1xufTtcblxuZnVuY3Rpb24gc2VsZWN0U2lkZWJhclNlY3Rpb24odGFyZ2V0KSB7XG4gICAgJCgnLmpzLWFwcC1jb250ZW50X19ncm91cCcpLnRyaWdnZXIoJ3NlbGVjdFNlY3Rpb24nLCBbdGFyZ2V0XSk7XG59O1xuXG5cbmZ1bmN0aW9uIGNsb3NlQWN0aXZlUG9wdXBzKCkge1xuICAgIHZhciBjb2xvclNlbGVjdGlvbiA9ICQoJy5qcy1hcHAtbWVudS0tY29sb3InKSxcbiAgICAgICAgYXBwTWVudSA9ICQoJy5qcy1hcHAtaGVhZGVyLW1lbnUtdG9nZ2xlJyk7XG4gICAgaWYgKGNvbG9yU2VsZWN0aW9uLmxlbmd0aCA+IDApIGNvbG9yU2VsZWN0aW9uLnRyaWdnZXIoJ2Nsb3NlLWNvbG9yLXNlbGVjdGlvbicpO1xuICAgIGlmIChhcHBNZW51Lmxlbmd0aCA+IDApIGFwcE1lbnUudHJpZ2dlcignY2xvc2UtYXBwLW1lbnUtcG9wdXAnKTtcbn07XG5cbmZ1bmN0aW9uIHRvZ2dsZUNvbG9yTGluayhjb2xvclNlY3Rpb24sIGJvb2wpIHtcbiAgICAkKCcuanMtYXBwLXNpZGViYXItZWRpdG9yLS1jb2xvcnMnKS50cmlnZ2VyKCd1cGRhdGVDb2xvckxpbmsnLCBbY29sb3JTZWN0aW9uLCBib29sXSk7XG59O1xuIl0sIm5hbWVzIjpbImpzQ29sb3JzIiwicmVxdWlyZSIsImpzUGFnZSIsIlBST0pFQ1QiLCJJU19MT0dHRUQiLCJheGlvcyIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsIm9uSWZyYW1lTG9hZCIsInBhZ2UiLCJjYiIsImNvbnNvbGUiLCJsb2ciLCJsb2FkZWRJZnJhbWVDaGVjayIsInNldFRpbWVvdXQiLCJ3aW5kb3ciLCJvbmxvYWQiLCJkYXRhRnJhbWUiLCJ1cmwiLCJtZXRob2QiLCJkYXRhVHlwZSIsInRoZW4iLCJyZXNwb25zZSIsImdldENvbmZpZyIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJzcGxpdCIsInByb2plY3QiLCJjb2xvcl90aGVtZXNfZGF0YSIsImNvbG9ycyIsImxvYWRHbG9iYWxzU3R5bGUiLCJDb2xvcklucHV0IiwiZWxlbWVudCIsImlucHV0Q29sb3JIZXgiLCIkIiwiZmluZCIsImlucHV0UHJldmlldyIsImlucHV0Q29sb3IiLCJpbnB1dENvbG9yU3VwcG9ydGVkIiwiYXBwQ29sb3JTaWRlYmFyIiwicGFyZW50cyIsImhleFZhbHVlIiwidmFsIiwiaW5pdENvbG9ySW5wdXQiLCJwcm90b3R5cGUiLCJzZWxmIiwidG9nZ2xlIiwib24iLCJldmVudCIsInVwZGF0ZUNvbG9yIiwidGFyZ2V0IiwidmFsdWUiLCJrZXkiLCJjaHJvbWEiLCJoc2wiLCJoZXgiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJsZW5ndGgiLCJjb2xvciIsImJvb2wiLCJlbWl0RXZlbnQiLCJyZXBsYWNlIiwiaW5kZXhPZiIsImNzcyIsInRyaWdnZXIiLCJnZXRIc2xGcm9tSGV4IiwiY29sb3JJbnB1dCIsInR5cGUiLCJjb2xvcklucHV0cyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImkiLCJDb2xvclNlbGVjdGlvbiIsImJhc2ljU3dhdGNoZXMiLCJ2YXJpYXRpb25zU3dhdGNoZXMiLCJzdGF0ZUEiLCJzdGF0ZUIiLCJzdGF0ZUJDdXN0b21PcGFjaXR5IiwiY3VzdG9tT3BhY2l0eUlucHV0IiwicHJpbWFyeUNvbG9ycyIsImFjY2VudENvbG9ycyIsImJsYWNrQ29sb3JzIiwid2hpdGVDb2xvcnMiLCJjb250cmFzdENvbG9ycyIsIndhcm5pbmdDb2xvcnMiLCJzdWNjZXNzQ29sb3JzIiwiZXJyb3JDb2xvcnMiLCJvcGFjaXRpZXMiLCJjb2xvckdyb3VwcyIsIm1haW5Db2xvckxhYmVscyIsIm1haW5Db2xvclZhcmlhdGlvbkxhYmVsIiwiY3VzdG9tQ29sb3JMYWJlbHMiLCJjb250cmFzdENvbG9yVmFyaWF0aW9uTGFiZWwiLCJjb250cmFzdFZhcmlhdGlvbnMiLCJnZXRDb2xvckNvbnRyYXN0UGVyY2VudGFnZXMiLCJncmFkaWVudENvbG9yTGFiZWxzIiwiZ3JhZGllbnRDb2xvcklkcyIsImdyYWRpZW50cyIsImdyYWRpZW50U3dhdGNoZXMiLCJjb2xvclZhbHVlcyIsImxvYWRQcmVzZXQiLCJldmVudExpc3RlbmVyIiwiaW5pdENvbG9yc0Zyb21Qcm9qZWN0IiwiaW5pdENvbG9ycyIsImluaXRDb2xvclZhbHVlcyIsImluaXRVaUNvbG9ycyIsImdldERlZmF1bHRNYWluQ29sb3JWYXJpYXRpb24iLCJnZXRDb250cmFzdFZhcmlhdGlvbiIsIk9iamVjdCIsInZhbHVlcyIsIm9iaiIsImoiLCJwdXNoIiwiZ2V0SHNsYUZyb21Ic2wiLCJpbml0TWFpblN3YXRjaGVzIiwiaW5pdEJXU3dhdGNoZXMiLCJpbml0Q29udHJhc3RTd2F0Y2hlcyIsImluaXRHcmFkaWVudFN3YXRjaGVzIiwibWFpblN3YXRjaCIsImZpbHRlciIsImNoaWxkcmVuIiwiZXEiLCJhdHRyIiwiY2xvbmVzVGV4dCIsImluaXRDdXN0b21Db2xvclN3YXRjaGVzIiwiYXBwZW5kIiwiZmVlZGJhY2tTd2F0Y2giLCJmZWVkYmFja0Nsb25lVGV4dCIsIml0ZW0iLCJpc0ZlZWRiYWNrIiwiY2xvbmUiLCJyZW1vdmVDbGFzcyIsInRleHQiLCJvdXRlckhUTUwiLCJid1N3YXRjaCIsImNvbnRyYXN0U3dhdGNoIiwiaHRtbCIsImRpcmVjdGlvbiIsInN3YXRjaCIsImdldEdyYWRpZW50c0JnQ29sb3IiLCJ0b2dnbGVDbGFzcyIsImhhc0NsYXNzIiwidG9wIiwib2Zmc2V0IiwiaGVpZ2h0Iiwic2VsZWN0SW5pdGlhbENvbG9yIiwidHJpbSIsImlzU2VsZWN0ZWQiLCJjbGlja09uQ29sb3JTZWN0aW9uQSIsInNlbGVjdE5ld0NvbG9yIiwiYWRkQ2xhc3MiLCJjaGVja0VuZFR5cGluZyIsIm9wYWNpdHlMYWJlbCIsImdldE9wSW5wdXRGb3JTZWxlY3Rpb24iLCJtYWluQ29sb3JMYWJlbCIsIm1haW5Db2xvciIsImNzc1ZhcmlhYmxlIiwibmV4dCIsIm9wYWNpdHlWYWx1ZSIsInJlc2V0T3BhY2l0eSIsImdldFBlcmNlbnRhZ2VGb3JtYXQiLCJpc1N0YXRlQlNldCIsInNlY3Rpb24iLCJvcGFjaXR5Iiwic2VuZENvbG9yU2VsZWN0aW9uIiwic2hvd1N0YXRlQiIsImlzU2VsY3RlZCIsInBhcmVudCIsInNpYmxpbmdzIiwic3RhdGVzIiwic3RhdGVBQ29sb3IiLCJzdGF0ZUJDb2xvciIsInN0YXRlQ0NvbG9yIiwiY29sb3JOYW1lIiwiZ2V0QWxsU3RhdGVzQ29sb3IiLCJzbGljZSIsIml0ZW1BTmFtZSIsIml0ZW1CTmFtZSIsIml0ZW1DTmFtZSIsIm5leHRJdGVtcyIsImdldFN0YXRlQkNDb2xvciIsImluZGV4IiwibGFiZWwiLCJzaWRlYmFyIiwic2VsZWN0ZWQiLCJnZXRWYXJpYXRpb25zTWFpbiIsImdldFZhcmlhdGlvbnNCVyIsImdldFZhcmlhdGlvbnNDb250cmFzdCIsInRleHRDbG9uZXMiLCJwYXJzZUludCIsImdldE5ld09wYWNpdHkiLCJ0b0ZpeGVkIiwic29ydE51bWJlciIsImEiLCJiIiwiaW5wdXQiLCJ0eXBpbmdUaW1lciIsImRvbmVUeXBpbmdJbnRlcnZhbCIsImNsZWFyVGltZW91dCIsImlzTmFOIiwiYW5nbGUiLCJjb2xvclNlbGVjdGlvbiIsImNvbG9yU2VsZWN0aW9uT2JqZWN0IiwibmV3VmFsIiwiQ29sb3JzIiwiZG93bmxvYWRDb2xvcnMiLCJjb250cmFzdFBlY2VudGFnZUNvbG9ycyIsImluZm9Db2xvcnMiLCJ0aGVtZXMiLCJmb250UmVuZGVyaW5nIiwiY29sb3JMaW5rcyIsInNlbGVjdGVkQ29sb3IiLCJzZWxlY3RlZFRoZW1lIiwiYmxhY2tWYXJpYXRpb25zIiwid2hpdGVWYXJpYXRpb25zIiwiY29sb3JQaWNrZXIiLCJtYWluQ29sb3JzU2VjdGlvbiIsIm1haW5Db2xvclZhcmlhdGlvbnNJbnB1dCIsIm1haW5Db2xvclZhcmlhdGlvbnNTaWRlYmFyIiwiYmxhY2tXaGl0ZVNlY3Rpb24iLCJjb250cmFzdFNlY3Rpb24iLCJjb250cmFzdElucHV0cyIsImZvbnRSZW5kZXJpbmdTZWN0aW9uIiwiYmFzaWNDb2xvclBpY2tlciIsImJnQ29sb3JQaWNrZXIiLCJoY0NvbG9yUGlja2VyIiwiZ3JDb2xvclBpY2tlciIsImdyQ29sb3JQaWNrZXJJdGVtcyIsIm1haW5Db2xvclNob3duIiwiYmxhY2tXaGl0ZVNob3duIiwiY29udHJhc3RTaG93biIsImdyYWRpZW50U2hvd24iLCJjb2xvck9wYWNpdGllcyIsImlmcmFtZSIsImNvbG9yc0xvYWRlZCIsImluaXRGcmFtZSIsImZyYW1lSXNMb2FkZWQiLCJsb2FkUHJvamVjdENvbG9yc0ZvckNvbG9ycyIsImxvYWRQcm9qZWN0VHlwb2dyYXBoeUZvckJ1dHRvbnMiLCJsb2FkUHJvamVjdFNwYWNpbmdGb3JCdXR0b25zIiwibG9hZFByb2plY3RCdXR0b25zRm9yQ29sb3JzIiwibG9hZFByb2plY3RGb3Jtc0ZvckNvbG9ycyIsInVwZGF0ZUNvbG9yc0RlbW8iLCJ1cGRhdGVDb2xvckxpbmtzIiwic2V0VGhlbWVDb2xvcnMiLCJzZXRCbGFja1doaXRlIiwic2V0Q29udHJhc3QiLCJzZXRHcmFkaWVudCIsInNldE1haW5Db2xvcnMiLCJjb252Q29sb3JUb0FyciIsImNvbnZQZXJjZVRvQXJyIiwiaGFzT3duUHJvcGVydHkiLCJhcnJheSIsInByb3BlcnR5Iiwic3ViQXJyYXkiLCJzdWJPYmoiLCJwcm9wZXJ0eTIiLCJpbml0VGhlbWVDb2xvcnMiLCJzZXRCdG5Db2xvckN1c3RvbU5pY2VMYWJlbHMiLCJzZXRCdG5HcmFkaWVudE5pY2VMYWJlbHMiLCJsaXN0ZW5Ub1BhcmVudElucHV0IiwiY29sb3JVcGRhdGVkIiwiY3VycmVudFRhcmdldCIsImNvbnRyYXN0Q29sb3JVcGRhdGVkIiwidXBkYXRlRm9udFJlbmRlcmluZyIsInBpY2tlckVsZW0iLCJ0aXRsZSIsIlNhdmVBbGVydCIsInllcyIsInJlbW92ZVRoZW1lIiwiY3JlYXRlQmxhY2tXaGl0ZVZhcmlhdGlvbiIsImRlbGV0ZUJsYWNrV2hpdGVWYXJpYXRpb24iLCJjdXN0b21MYWJlbCIsImlzR3JhZGllbnQiLCJjb2xvckN1c3RvbUxhYmVsIiwiZ3JhZGllbnRWYWx1ZSIsImdldEluaXRpYWxHcmFkaWVudCIsInVwZGF0ZUNvbG9yc0RlbW9OZXdDdXN0b20iLCJ1cGRhdGVDb2xvcnNEZW1vRWRpdEN1c3RvbSIsImxhYmVsSWQiLCJpbmRleENvbG9yIiwic3BsaWNlIiwidXBkYXRlQ29sb3JzRGVtb1JlbW92ZUN1c3RvbSIsInByaW1hcnkiLCJuZXdIc2wiLCJyZXNldFNpZGViYXJTZWN0aW9ucyIsImFkZCIsInVwZGF0ZU11bHRpcGxlQ29sb3JzSW5UaGVtZXMiLCJnZXRNYWluQ29sb3JWYXJpYXRpb24iLCJzZXRNYWluQ29sb3IiLCJ1bmRlZmluZWQiLCJpdGVtTGVuZ3RoIiwiZ2V0QmxhY2tXaGl0ZVZhcmlhdGlvbiIsImNoZWNrQmxhY2tXaGl0ZUlucHV0TnVtYmVyIiwic2V0QmxhY2tXaGl0ZUNvbG9yIiwicmVzZXRCV0FjdGlvblZpc2liaWxpdHkiLCJwaWNrZXJFbGVtZW50IiwiaXNCZ0NvbG9yIiwiY29sb3JzU2NhbGUiLCJnZXRIZXhGcm9tSHNsIiwic2V0Q29udHJhc3RDb2xvciIsImdyYWRpZW50SWQiLCJ3cmFwcGVycyIsImNyZWF0ZUJsYWNrV2hpdGVJbnB1dHMiLCJOdW1iZXIiLCJyZW1vdmVCbGFja1doaXRlSW5wdXRzIiwibnVtYmVyIiwiYmxhY2tXaGl0ZUlucHV0c1Jlc2V0TGFiZWxDbGFzcyIsImlucHV0cyIsInRvdCIsInJlbW92ZSIsImxhc3RJdGVtIiwiY29sb3JXcmFwcGVyIiwiY29sb3JJdGVtcyIsInVwZGF0ZUNvbG9yVmFyaWF0aW9uc0luVGhlbWVzIiwiY29udmVydFN0cmluZ1RvSHNsIiwidXBkYXRlQ29sb3JJblRoZW1lcyIsInZhbHVlSFNMMSIsInZhbHVlSFNMMiIsIm5ld0NvbnRyYXN0Q29sb3JTY2FsZSIsImJsYWNrV2hpdGVWYXJpYXRpb25zIiwiY2hlY2tQZXJjZW50YWdlIiwiZ2V0QmxhY2tXaGl0ZVNpbmdsZVZhcmlhdGlvbiIsImh1ZSIsInNhdCIsIk1hdGgiLCJyb3VuZCIsImxpZyIsInByZXZpZXciLCJpbnB1dFdyYXBwZXIiLCJjaGVja0h1ZSIsInBlcmNlbnRhZ2UiLCJ3cmFwcGVyIiwidmFyaWF0aW9ucyIsInJlbW92ZUF0dHIiLCJzZWN0aW9uVGl0bGUiLCJjb2xvcjBoZXgiLCJjb2xvcjVoZXgiLCJzY2FsZUNvbG9ycyIsImJlemllciIsInNjYWxlIiwiY3VzdG9tQXJyYXkiLCJncmFkaWVudFZhbHVlcyIsInVwZGF0ZUlmcmFtZUNvbG9ycyIsInVwZGF0ZUlmcmFtZUNvbG9yTGlua3MiLCJ1cGRhdGVJZnJhbWVDb2xvcnNOZXdDb2xvciIsInVwZGF0ZUlmcmFtZUNvbG9yc1JlbW92ZUNvbG9yIiwidXBkYXRlSWZyYW1lQ29sb3JzRWRpdENvbG9yIiwidXBkYXRlQ29weUNvZGUiLCJjb2RlIiwiY29tcGxldGVDb2RlIiwic3BhY2luZyIsImNvZGVNYWluIiwiY3JlYXRlQmxvY2tGb3JNYWluQ29sb3JzIiwiY29kZUN1c3RvbSIsImNyZWF0ZUJsb2NrRm9yQ3VzdG9tQ29sb3JzIiwiY29kZUJXIiwiY3JlYXRlQmxvY2tGb3JCV0NvbG9ycyIsImNvZGVGZWVkYmFjayIsImNyZWF0ZUJsb2NrRm9yRmVlZGJhY2tDb2xvcnMiLCJjb2RlRmVlZGJhY2tDdXN0b20iLCJjb2RlQ29udHJhc3QiLCJjcmVhdGVCbG9ja0ZvckNvbnRyYXN0Q29sb3JzIiwiY29kZUdyYWRpZW50IiwiY3JlYXRlQmxvY2tGb3JHcmFkaWVudHMiLCJjb2RlRm9udFJlbmRlcmluZyIsImNyZWF0ZUJsb2NrRm9yRm9udFJlbmRlcmluZyIsInRoZW1lQ29kZSIsInRvTG93ZXJDYXNlIiwiZ2V0QmdDb2xvckNsYXNzZXMiLCJ0aGVtZUluZGV4Iiwic2hhZGVzIiwiY29sb3JJbmRleCIsImhzbENvZGUiLCJnZXRIc2xDc3NGcm9tSHNsIiwiZ2V0Q3VzdG9tQ29sb3JDbGFzc2VzIiwiZ2V0Q3VzdG9tR3JhZGllbnRDbGFzc2VzIiwic2hhZGVzQmxhY2siLCJzaGFkZXNXaGl0ZSIsInN0b3BzIiwic3RvcDEiLCJzdG9wMiIsImdldEFycmF5VG9TYXZlIiwiY29sb3JzQXJyYXkiLCJnZXRPcGFjaXRpZXNBcnJheVRvU2F2ZSIsIm9wYWNpdGllc0FycmF5IiwibG9hZFByb2plY3RDb2xvcnMiLCJsb2FkQ29sb3JTdHlsZSIsImxvYWRQcm9qZWN0VHlwb2dyYXBoeUZvclNwYWNpbmciLCJ0eXBvZ3JhcGh5IiwibG9hZFR5cG9ncmFwaHlGb3JTcGFjaW5nIiwiZGVjb2RlU2FmZVVSSUNvbXBvbmVudCIsImxvYWRUeXBvZ3JhcGh5Rm9yQnV0dG9ucyIsImxvYWRTcGFjaW5nRm9yQnV0dG9ucyIsImxvYWRQcm9qZWN0QnV0dG9uc0ZvckZvcm1zIiwiYnV0dG9ucyIsImxvYWRCdXR0b25zRm9yRm9ybXMiLCJsb2FkQnV0dG9uc0ZvckNvbG9ycyIsImxvYWRDb2xvcnNGb3JDb2xvcnMiLCJmb3JtIiwibG9hZEZvcm1Gb3JDb2xvcnMiLCJyZXBsYWNlRW1wdHkiLCJjb2xvclZhcmlhdGlvbnNMb2dpYyIsImdldE1haW5Db2xvclZhcmFpYXRpb25Mb2dpYyIsIm1haW5Db2xvclZhcmlhdGlvbnMiLCJsaWdodFZhcmFpdGlvbiIsImxpZ2h0VmFyYWl0aW9uUyIsInBhcnNlRmxvYXQiLCJkYXJrVmFyYWl0aW9uIiwiZGFya1ZhcmFpdGlvblMiLCJjb2xvcjEiLCJjb2xvcjIiLCJjb250cmFzdENvbG9yVmFyaWF0aW9ucyIsImNvbG9yT2JqZWN0IiwiY2FsbGJhY2siLCJrZXlDb2RlIiwibGlzdGVuVG9QYXJlbnRTdHJpbmciLCJzdHJpbmciLCJwcmV2ZW50RGVmYXVsdCIsImNvbnRlbnRTd2l0Y2giLCJjb250ZW50VHlwZSIsImNvbnRlbnRMaXN0IiwiYXBwU2lkZWJhciIsImlzIiwiaW5pdGlhbExhYmVsIiwibmV3Q29udGVudEl0ZW0iLCJnZXROZXdDb250ZW50U3dpdGNoIiwic2VsZWN0VGV4dCIsInNlbGVjdGVkSXRlbSIsImZvY3VzIiwib3JpZ2luYWxFdmVudCIsImFwcENvbnRlbnRHcm91cCIsImNvbnRlbnRJdGVtcyIsInNoYXJlZFN0eWxlIiwiaXRlbUluZGV4IiwidGFyZ2V0TGFiZWwiLCJyaWdodEFwcFNpZGViYXIiLCJjb2xvclNlbGVjdCIsImFwcFNpZGViYXJFbmFibGVNcSIsImFwcFNpZGViYXJEaXNhYmxlTXEiLCJhcHBTaWRlYmFyU2VsZWN0TXEiLCJzZWxlY3RlZFNlY3Rpb24iLCJtcURlbGV0ZSIsInNoYWRvd0xpc3QiLCJyZXNldFNoYWRvd0Jsb2NrQXBwZWFyYW5jZSIsImNsaXBib2FyZCIsIkNsaXBib2FyZEpTIiwiZm9ybWF0IiwiY29udGFpbmVyIiwic2hvd0NvcHlTdWNjZXNzIiwic2hvd0RlcGVuZGVuY2llc01vZGFsIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNwbGl0QnRuIiwicHJldiIsInBvcG92ZXIiLCJjb2RlVHlwZSIsInBvcG92ZXJDb250cm9sIiwidXBkYXRlU3BsaXRDb3B5IiwiY29tcG9uZW50TmFtZSIsImdhIiwidG9VcHBlckNhc2UiLCJzZXRJdGVtIiwibW9kYWwiLCJzaG93RGVwZW5kZW5jaWVzTW9kYWxWaWV3Q29kZSIsInJlc2V0RGVwZW5kZW5jaWVzTGlzdFZpZXdDb2RlIiwiY29weUNvZGVXcmFwcGVyIiwic2hvd1ZpZXdDb2RlTW9kYWwiLCJkZWxlZ2F0ZVRhcmdldCIsImdldEdsb2JhbENvZGUiLCJnZXRDb21wb25lbnRDb2RlIiwicmVhZEZpbGVDb250ZW50Iiwic2NzcyIsImpzIiwic2Nzc19jb2RlIiwibW9kaWZ5R2xvYmFsQ29kZSIsImNvbXBvbmVudCIsImFqYXgiLCJjYWNoZSIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwiZXJyb3IiLCJqcVhIUiIsInRleHRTdGF0dXMiLCJlcnJvclRocm93biIsImdsb2JhbCIsIm1vZGlmeUNvbG9yc0NvZGUiLCJtb2RpZnlCdXR0b25zQ29kZSIsIm1vZGlmeUZvcm1zQ29kZSIsIm1vZGlmeVNwYWNpbmdDb2RlIiwibW9kaWZ5VHlwb2dyYXBoeUNvZGUiLCJtb2RpZnlTaGFyZWRTdHlsZXNDb2RlIiwiY2xvc2VCYW5uZXIiLCJjb252QXJyVG9PYmoiLCJ0aGlzRWxlT2JqIiwidGhpc0VsZSIsInJlc2V0R2xvYmFsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdsb2JhbFR5cGUiLCJnZXRBdHRyaWJ1dGUiLCJjb25maXJtIiwicmVzZXRHbG9iYWxGbiIsImxvY2F0aW9uIiwicmVsb2FkIiwic2F2ZUNvbG9yc0NvZGUiLCJjb2xvcnNBbGwiLCJjb2xvclN0cmluZyIsInN0cmluZ2lmeSIsInVwZGF0ZUdsb2JhbHNQcm9qZWN0Iiwib3B0aW9ucyIsImdldENPbmZpZyIsImNvbG9yX3RoZW1lcyIsInBvc3QiLCJoZWFkZXIiLCJmb290ZXIiLCJkaXNjb3JkIiwic2xpZGVycyIsImFydGljbGVzIiwidm90ZSIsIm5vIiwib25iZWZvcmV1bmxvYWQiLCJpb3NCYW5uZXIiLCJuYXZpZ2F0b3IiLCJwbGF0Zm9ybSIsInRlc3QiLCJnZXRIc2xGcm9tSHNsU3RyaW5nIiwic2VsZWN0U2lkZWJhclNlY3Rpb24iLCJjbG9zZUFjdGl2ZVBvcHVwcyIsImFwcE1lbnUiLCJ0b2dnbGVDb2xvckxpbmsiLCJjb2xvclNlY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/config-custom-azuriom/change-color.js\n");

/***/ }),

/***/ "./js/config-custom-azuriom/colors.js":
/*!********************************************!*\
  !*** ./js/config-custom-azuriom/colors.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"updateIframeColors\": () => (/* binding */ updateIframeColors),\n/* harmony export */   \"updateIframeColorLinks\": () => (/* binding */ updateIframeColorLinks),\n/* harmony export */   \"updateIframeColorsNewColor\": () => (/* binding */ updateIframeColorsNewColor),\n/* harmony export */   \"updateIframeColorsRemoveColor\": () => (/* binding */ updateIframeColorsRemoveColor),\n/* harmony export */   \"updateIframeColorsEditColor\": () => (/* binding */ updateIframeColorsEditColor),\n/* harmony export */   \"loadColorsForColors\": () => (/* binding */ loadColorsForColors),\n/* harmony export */   \"loadTypographyForButtons\": () => (/* binding */ loadTypographyForButtons),\n/* harmony export */   \"loadSpacingForButtons\": () => (/* binding */ loadSpacingForButtons),\n/* harmony export */   \"loadButtonsForColors\": () => (/* binding */ loadButtonsForColors),\n/* harmony export */   \"loadFormForColors\": () => (/* binding */ loadFormForColors)\n/* harmony export */ });\nvar Color = __webpack_require__(/*! ./colors */ \"./js/config-custom-azuriom/colors.js\");\n\nvar jsPage = __webpack_require__(/*! ./page */ \"./js/config-custom-azuriom/page.js\");\n\nvar colorPrimary = [],\n    colorAccent = [],\n    colorDownload = [],\n    colorBlack = '',\n    colorWhite = '',\n    colorSuccess = [],\n    colorError = [],\n    colorInfo = [],\n    colorWarning = [],\n    colorContrasts = [],\n    newColorCustom = [],\n    newGradientCustom = [],\n    colorCustoms = [],\n    gradientCustoms = [],\n    colorOpacities = [],\n    customColorLabels = [],\n    gradientColorIds = [],\n    gradientColorValues = [],\n    fontRenderingValue = '';\nfunction updateIframeColors(primary, accent, download, black, white, success, error, info, warning, contrasts, fontRendering, customs, customLabels, grLabels, grIds, grValues, label) {\n  colorPrimary = primary.slice();\n  colorAccent = accent.slice();\n  colorDownload = download.slice();\n  colorBlack = black.slice();\n  colorWhite = white.slice();\n  colorSuccess = success.slice();\n  colorError = error.slice();\n  colorInfo = info.slice();\n  colorWarning = warning.slice();\n  colorContrasts = contrasts.slice();\n  colorCustoms = customs.slice();\n  customColorLabels = customLabels;\n  gradientColorIds = grIds.slice();\n  gradientCustoms = grLabels.slice();\n  gradientColorValues = grValues.slice();\n  $('.js-cd-demo-container--colors').trigger('updateColors', [label]);\n}\n;\nfunction updateIframeColorLinks(links) {\n  $('.js-cd-demo-container--colors').trigger('updateColorLinks', [links]);\n}\n;\nfunction updateIframeColorsNewColor(array, title, customLabel) {\n  if (title.indexOf('gradient') > -1) {\n    newGradientCustom[customLabel] = array.slice();\n    $('.js-cd-demo-container--colors').trigger('createGradient', [title, customLabel]);\n  } else {\n    newColorCustom[customLabel] = array.slice();\n    $('.js-cd-demo-container--colors').trigger('createColor', [title, customLabel]);\n  }\n}\n;\nfunction updateIframeColorsRemoveColor(customLabel) {\n  if (customLabel.indexOf('gr') > -1) {\n    $('.js-cd-demo-container--colors').trigger('removeGradient', [customLabel]);\n  } else {\n    $('.js-cd-demo-container--colors').trigger('removeColor', [customLabel]);\n  }\n}\n;\nfunction updateIframeColorsEditColor(section, title) {\n  if (section.indexOf('gradient') > -1) {\n    $('.js-cd-demo-container--colors').trigger('updateGradient', [section, title]);\n  } else {\n    $('.js-cd-demo-container--colors').trigger('updateColor', [section, title]);\n  }\n}\n;\nvar projectTypography, projectSpacing, projectButtons, projectForms;\nfunction loadColorsForColors(colors) {// colors = JSON.stringify(colors)\n  // console.log(Object.values(colors['mainColorLabels']))\n  // jsPage.btnColorLabels = (colors['mainColorLabels']) ? Object.values(colors['mainColorLabels']) : [];\n  // jsPage.btnColorCustomNiceLabels = (colors['customColorLabels']) ? Object.values(colors['customColorLabels']) : [];\n  // jsPage.btnGradientsCustomNiceLabels = (colors['gradientColorLabels']) ? Object.values(colors['gradientColorLabels']) : [];\n}\n;\nfunction loadTypographyForButtons(typography) {\n  projectTypography = typography;\n  $('.js-cd-demo-container--colors').trigger('setTypographyStyle');\n}\n;\nfunction loadSpacingForButtons(spacing) {\n  projectSpacing = spacing;\n  $('.js-cd-demo-container--colors').trigger('setSpacingStyle');\n}\n;\nfunction loadButtonsForColors(buttons) {\n  projectButtons = buttons;\n  $('.js-cd-demo-container--colors').trigger('setButtonsStyle');\n}\n;\nfunction loadFormForColors(forms) {\n  projectForms = forms;\n  $('.js-cd-demo-container--colors').trigger('setFormStyle');\n}\n;\n\n(function () {\n  var colorsDemo = $('.js-cd-demo-container--colors');\n  var iframeParent = jsPage;\n  var accessibleContrastHeadings = document.getElementsByClassName('js-accessible-headings-contrast'),\n      accessibleContrastBody = document.getElementsByClassName('js-accessible-body-contrast');\n\n  if (!iframeParent) {\n    iframeParent = jsPage;\n  }\n\n  var styleTag = $('#font-rendering');\n\n  if (colorsDemo.length > 0) {\n    var resetSpaceTypo = function resetSpaceTypo(bool, mq) {\n      if (projectTypography) {\n        setTypographyStyle(bool, mq);\n      } else {\n        updateTypographyDefaultStyle(mq);\n      }\n\n      if (projectSpacing) {\n        setSpacingStyle(mq);\n      } else {\n        updateSpacingDefaultStyle(mq);\n      }\n    };\n\n    var setTypographyStyle = function setTypographyStyle(bool, mq) {\n      if (projectTypography) jsPage.loadTypographyStyle(projectTypography, bool, mq);else {\n        jsPage.loadTypographyDefaultStyle(bool, mq);\n        updateTypographyDefaultStyle(mq);\n      }\n    };\n\n    var updateTypographyDefaultStyle = function updateTypographyDefaultStyle(mq) {\n      var textBase = '1em',\n          textScale = '1.2';\n\n      if (mq >= 3) {\n        textBase = '1.25em';\n        textScale = '1.25';\n      }\n\n      jsPage.setCssVariable('--text-base-size', textBase);\n      jsPage.setCssVariable('--text-scale-ratio', textScale);\n    };\n\n    var setSpacingStyle = function setSpacingStyle(mq) {\n      if (projectSpacing) jsPage.loadSpacingStyle(projectSpacing, mq);else {\n        jsPage.loadSpacingDefaultStyle(mq);\n        updateSpacingDefaultStyle(mq);\n      }\n    };\n\n    var updateSpacingDefaultStyle = function updateSpacingDefaultStyle(mq) {\n      var spaceUnit = '1em';\n\n      if (mq >= 3) {\n        spaceUnit = '1.25em';\n      }\n\n      jsPage.setCssVariable('--space-unit', spaceUnit);\n    };\n\n    var setButtonsStyle = function setButtonsStyle(mq) {\n      if (projectButtons) jsPage.loadButtonsStyle(projectButtons, mq);else jsPage.loadButtonsDefaultStyle(mq);\n    };\n\n    var setFormsStyle = function setFormsStyle(mq) {\n      if (projectForms) jsPage.loadFormsStyle(projectForms, mq);else jsPage.loadFormsDefaultStyle(mq);\n    };\n\n    var blackWrapper = colorsDemo.find('.js-cd-demo-color__list--black'),\n        whiteWrapper = colorsDemo.find('.js-cd-demo-color__list--white');\n    var demoSwitcher = $('.js-demo-switcher');\n    colorsDemo.on('click', '.js-cd-demo-color__list', function (event) {\n      colorsDemo.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected cd-demo-item--selected');\n      $(event.currentTarget).addClass('cd-demo-color__list--selected');\n      iframeParent.selectSidebarSection($(event.currentTarget).attr('data-section'));\n    });\n    colorsDemo.on('updateColors', function (event, label) {\n      updateColorVariables(label);\n    });\n    colorsDemo.on('updateColorLinks', function (event, links) {\n      updateColorLinks(links);\n    });\n    demoSwitcher.on('click', 'button', function (event) {\n      if ($(event.target).hasClass('is-selected')) return;\n      demoSwitcher.children('.is-selected').removeClass('is-selected').siblings().addClass('is-selected');\n      $('.cd-demo-container--is-hidden').removeClass('cd-demo-container--is-hidden').siblings('[data-display]').addClass('cd-demo-container--is-hidden');\n    });\n    colorsDemo.on('createColor', function (event, title, customLabel) {\n      createCustomColor(title, customLabel);\n    });\n    colorsDemo.on('createGradient', function (event, title, customLabel) {\n      createCustomGradient(title, customLabel);\n    });\n    colorsDemo.on('removeColor', function (event, customLabel) {\n      colorsDemo.find('[data-section=\"#color-' + customLabel + '\"]').parent().remove();\n    });\n    colorsDemo.on('removeGradient', function (event, customLabel) {\n      colorsDemo.find('[data-section=\"#gradient-' + customLabel.replace('gr-', '') + '\"]').parent().remove();\n    });\n    colorsDemo.on('updateColor', function (event, section, title) {\n      updateCustomColor(section, title);\n    });\n    colorsDemo.on('updateGradient', function (event, section, title) {\n      updateCustomGradient(section, title);\n    });\n    colorsDemo.on('click', '.js-cd-demo-color__link-btn', function (event) {\n      event.preventDefault();\n      $(event.currentTarget).toggleClass('cd-demo-color__link-btn--is-active');\n      iframeParent.toggleColorLink($(event.currentTarget).parent().next().attr('data-section'), $(event.currentTarget).hasClass('cd-demo-color__link-btn--is-active'));\n    });\n    var MQRef = jsPage.getMq();\n    colorsDemo.one('setTypographyStyle', function () {\n      setTypographyStyle(true, MQRef);\n    });\n    colorsDemo.one('setSpacingStyle', function () {\n      setSpacingStyle(MQRef);\n    });\n    colorsDemo.one('setButtonsStyle', function () {\n      setButtonsStyle(MQRef);\n    });\n    colorsDemo.one('setFormStyle', function () {\n      setFormsStyle(MQRef);\n    });\n    colorsDemo.on('windowResizing', function () {\n      var mq = jsPage.getMq();\n\n      if (MQRef != mq) {\n        MQRef = mq;\n        resetSpaceTypo(false, MQRef);\n      }\n    });\n    ;\n    ;\n    ;\n    ;\n    ;\n    ;\n  }\n\n  function updateColorVariables(label) {\n    if (!label || label == 'primary') updateMainColor(colorPrimary, 'primary');\n    if (!label || label == 'accent') updateMainColor(colorAccent, 'accent');\n    if (!label || label == 'download') updateMainColor(colorDownload, 'download');\n    if (!label || label == 'success') updateMainColor(colorSuccess, 'success');\n    if (!label || label == 'error') updateMainColor(colorError, 'error');\n    if (!label || label == 'info') updateMainColor(colorInfo, 'info');\n    if (!label || label == 'warning') updateMainColor(colorWarning, 'warning');\n    if (!label || label == 'black') updateBlackWhite(colorBlack, blackWrapper, 'black');\n    if (!label || label == 'white') updateBlackWhite(colorWhite, whiteWrapper, 'white');\n    if (!label || label == 'contrast') updateContratColor();\n    if (!label || label.indexOf('custom') > -1 && label.indexOf('gr-custom') < 0) updateCustoms();\n    if (!label || label.indexOf('gr-custom') > -1) updateGradientCustoms();\n    if (!label || label == 'fontRendering') updateFontRendering();\n  }\n\n  ;\n\n  function setCompleteColorVariable(label, color) {\n    jsPage.setCssVariable(label, jsPage.getHSL(color));\n    jsPage.setColorPartVariables(label, color);\n  }\n\n  ;\n\n  function updateContratColor() {\n    setCompleteColorVariable('--color-bg', colorContrasts[0]);\n    setCompleteColorVariable('--color-contrast-lower', colorContrasts[1]);\n    setCompleteColorVariable('--color-contrast-low', colorContrasts[2]);\n    setCompleteColorVariable('--color-contrast-medium', colorContrasts[3]);\n    setCompleteColorVariable('--color-contrast-high', colorContrasts[4]);\n    setCompleteColorVariable('--color-contrast-higher', colorContrasts[5]);\n    var colorSection = colorsDemo.find('[data-section=\"#color-contrast\"]'),\n        colorLabels = colorSection.find('.js-demo-color__value');\n\n    for (var i = 0; i < colorContrasts.length; i++) {\n      colorLabels.eq(i).text(jsPage.getHSL(colorContrasts[i]));\n    }\n\n    updateAccessibleContrast();\n  }\n\n  ;\n\n  function updateFontRendering() {\n    var code = '';\n\n    if (fontRenderingValue && Number(fontRenderingValue == 1)) {\n      code = 'body{-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}';\n    } else if (fontRenderingValue && Number(fontRenderingValue == 2)) {\n      code = 'body{-webkit-font-smoothing: auto;-moz-osx-font-smoothing: auto;}';\n    }\n\n    styleTag.text(code);\n  }\n\n  ;\n\n  function updateMainColor(array, type) {\n    setCompleteColorVariable('--color-' + type + '-lighter', array[0]);\n    setCompleteColorVariable('--color-' + type + '-light', array[1]);\n    setCompleteColorVariable('--color-' + type, array[2]);\n    setCompleteColorVariable('--color-' + type + '-dark', array[3]);\n    setCompleteColorVariable('--color-' + type + '-darker', array[4]);\n    var colorSection = colorsDemo.find('[data-section=\"#color-' + type + '\"]'),\n        colorLabels = colorSection.find('.js-demo-color__value');\n\n    for (var i = 0; i < 5; i++) {\n      colorLabels.eq(i).text(jsPage.getHSL(array[i]));\n    }\n  }\n\n  ;\n\n  function updateCSSCustomColor(array, type) {\n    setCompleteColorVariable('--color-' + type + '-lighter', array[0]);\n    setCompleteColorVariable('--color-' + type + '-light', array[1]);\n    setCompleteColorVariable('--color-' + type, array[2]);\n    setCompleteColorVariable('--color-' + type + '-dark', array[3]);\n    setCompleteColorVariable('--color-' + type + '-darker', array[4]);\n  }\n\n  ;\n\n  function updateBlackWhite(array, parent, type) {\n    var children = parent.children();\n\n    if (children.length > array.length) {\n      children.eq(array.length - 1).nextAll().remove();\n    } else if (children.length < array.length) {\n      var cloneCode = children.eq(0).clone()[0].outerHTML,\n          itemsString = '';\n\n      for (var i = children.length; i < array.length; i++) {\n        itemsString = itemsString + cloneCode;\n      }\n\n      parent.append(itemsString);\n    }\n\n    children = parent.children();\n\n    for (var i = 0; i < array.length; i++) {\n      updateSingleColor(array[i], children.eq(i), getBWLabel(type, i), i);\n    }\n  }\n\n  ;\n\n  function updateSingleColor(color, item, label, index) {\n    var colorText = jsPage.getHSL(color);\n    setCompleteColorVariable('--' + label, color);\n    item.find('.js-demo-color__value').text(colorText).end().find('.js-css-variable-label').text('--' + label);\n    if (index != 0) item.children().eq(0).css('background-color', colorText);\n  }\n\n  ;\n\n  function updateCustoms() {\n    for (var i = 0; i < colorCustoms.length; i++) {\n      var customSection = $('[data-section=\"#color-' + colorCustoms[i][0] + '\"]');\n\n      if (customSection.length == 0) {\n        createCustomColorSection(customColorLabels[i], colorCustoms[i][0], false);\n      }\n\n      var colorSectionItems = $('[data-section=\"#color-' + colorCustoms[i][0] + '\"]').children(),\n          colorValues = [];\n\n      for (var j = 0; j < colorSectionItems.length; j++) {\n        var newColor = jsPage.getHSL(colorCustoms[i][1][j]);\n        colorSectionItems.eq(j).find('.js-cd-demo-color__preview').attr('style', 'background-color: ' + newColor + ';').end().find('.js-demo-color__value').text(newColor);\n        colorValues.push(newColor);\n      }\n\n      updateCSSCustomColor(colorCustoms[i][1], customColorLabels[i].replace('--color-', ''));\n    }\n  }\n\n  ;\n\n  function updateGradientCustoms() {\n    for (var i = 0; i < gradientCustoms.length; i++) {\n      var customSection = $('[data-section=\"#gradient-' + gradientColorIds[i] + '\"]');\n\n      if (customSection.length == 0) {\n        createCustomGradientSection(gradientCustoms[i], gradientColorIds[i], gradientColorValues[i], false);\n      }\n\n      var customSection = $('[data-section=\"#gradient-' + gradientColorIds[i] + '\"]');\n      var preview = customSection.find('.js-cd-demo-color__preview'),\n          values = customSection.find('.js-demo-color__value');\n      preview.attr('style', 'background-image: linear-gradient(90deg, ' + jsPage.getHSL(gradientColorValues[i][0]) + ', ' + jsPage.getHSL(gradientColorValues[i][1]) + ');');\n      values.eq(0).text(jsPage.getHSL(gradientColorValues[i][0]));\n      values.eq(1).text(jsPage.getHSL(gradientColorValues[i][1]));\n      setCompleteColorVariable('--gradient-' + gradientCustoms[i] + '-stop-1', gradientColorValues[i][0]);\n      setCompleteColorVariable('--gradient-' + gradientCustoms[i] + '-stop-2', gradientColorValues[i][1]);\n    }\n  }\n\n  ;\n\n  function getBWLabel(type, index) {\n    if (type == 'black') {\n      switch (index) {\n        case 1:\n          return 'color-black-light';\n          break;\n\n        case 2:\n          return 'color-black-lighter';\n          break;\n\n        default:\n          return 'color-black';\n      }\n    } else {\n      switch (index) {\n        case 1:\n          return 'color-white-dark';\n          break;\n\n        case 2:\n          return 'color-white-darker';\n          break;\n\n        default:\n          return 'color-white';\n      }\n    }\n  }\n\n  ;\n\n  function createCustomColor(title, customLabel) {\n    createCustomColorSection(title, customLabel, true);\n    selectIframeSection('#color-' + customLabel);\n  }\n\n  ;\n\n  function createCustomColorSection(title, customLabel, customize) {\n    var newColor = colorsDemo.children('.js-cd-demo-color').eq(0).clone(),\n        colorChildren = newColor.find('.js-cd-demo-color__preview');\n    newColor.addClass('js-cd-demo-color--custom').find('.js-cd-demo-title').text(getCustomTitleColor(title));\n    newColor.find('[data-section]').attr('data-section', '#color-' + customLabel);\n    newColor.find('.cd-demo-color__link-btn').removeClass('cd-demo-color__link-btn--is-active');\n\n    if (!customize) {\n      newColor.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n    }\n\n    if (customize) {\n      for (var i = 0; i < colorChildren.length; i++) {\n        colorChildren.eq(i).attr('style', 'background-color: ' + jsPage.getHSL(newColorCustom[customLabel][i]) + ';');\n        var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n        var cssVaraiableName = getVariableName(title);\n        labelItem.text(labelItem.text().replace('--color-primary', cssVaraiableName));\n      }\n    } else {\n      for (var i = 0; i < colorChildren.length; i++) {\n        var cssVaraiableName = getVariableName(title);\n        var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n        labelItem.text(labelItem.text().replace('--color-primary', cssVaraiableName));\n      }\n    }\n\n    if (customLabel.indexOf('custom-fdb') > -1) {\n      colorsDemo.find('.js-cd-demo-gradient').before(newColor);\n    } else {\n      colorsDemo.find('.js-cd-demo-color--black').before(newColor);\n    }\n  }\n\n  ;\n\n  function updateCustomColor(section, title) {\n    var customColorBlock = colorsDemo.find('[data-section=\"' + section + '\"]').parents('.js-cd-demo-color--custom').eq(0),\n        colorChildren = customColorBlock.find('.js-cd-demo-color__preview'),\n        oldLabel = colorChildren.eq(2).siblings('.js-css-variable-label').text();\n    customColorBlock.find('.js-cd-demo-title').text(getCustomTitleColor(title));\n\n    for (var i = 0; i < colorChildren.length; i++) {\n      var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n      var cssVaraiableName = getVariableName(title);\n      labelItem.text(labelItem.text().replace(oldLabel, cssVaraiableName));\n    }\n  }\n\n  ;\n\n  function createCustomGradient(title, customLabel) {\n    createCustomGradientSection(title, customLabel, newGradientCustom[customLabel], true);\n    selectIframeSection('#gradient-' + customLabel);\n  }\n\n  ;\n\n  function createCustomGradientSection(title, customLabel, customValue, customize) {\n    var newColor = colorsDemo.children('.js-cd-demo-gradient').eq(0).clone().removeClass('is-hidden'),\n        titleEl = newColor.find('.js-cd-demo-title'),\n        preview = newColor.find('.js-cd-demo-color__preview'),\n        values = newColor.find('.js-demo-color__value'),\n        labels = newColor.find('.js-css-variable-label');\n    titleEl.text(getCustomTitleGradient(title));\n    values.eq(0).text(jsPage.getHSL(customValue[0]));\n    values.eq(1).text(jsPage.getHSL(customValue[1]));\n    labels.eq(0).text(getGradientVariable(title) + '-stop-1');\n    labels.eq(1).text(getGradientVariable(title) + '-stop-2');\n    newColor.find('.js-cd-demo-gradient__list').attr('data-section', '#gradient-' + customLabel);\n\n    if (!customize) {\n      newColor.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n    }\n\n    if (customize) {\n      preview.attr('style', 'background-image: linear-gradient(90deg, ' + jsPage.getHSL(customValue[0]) + ', ' + jsPage.getHSL(customValue[1]) + ');');\n    }\n\n    colorsDemo.find('.js-cd-demo-color--contrast').before(newColor);\n  }\n\n  ;\n\n  function updateCustomGradient(section, title) {\n    var customGradientBlock = colorsDemo.find('[data-section=\"' + section + '\"]').parents('.js-cd-demo-gradient').eq(0),\n        titleEl = customGradientBlock.find('.js-cd-demo-title'),\n        labels = customGradientBlock.find('.js-css-variable-label');\n    titleEl.text(getCustomTitleGradient(title));\n    labels.eq(0).text(getGradientVariable(title) + '-stop-1');\n    labels.eq(1).text(getGradientVariable(title) + '-stop-2');\n  }\n\n  ;\n\n  function getCustomTitleColor(title) {\n    title = title.replace('--color-', '').replace(/-/, ' ');\n    return 'Color ' + title.charAt(0).toUpperCase() + title.slice(1);\n  }\n\n  ;\n\n  function getCustomTitleGradient(title) {\n    title = title.replace('--gradient-', '').replace(/-/, ' ');\n    return 'Gradient ' + title.charAt(0).toUpperCase() + title.slice(1);\n  }\n\n  ;\n\n  function getGradientVariable(title) {\n    if (title.indexOf('--gradient') > -1) return title;\n    return '--gradient-' + title;\n  }\n\n  ;\n\n  function getVariableName(title) {\n    title = title.replace(/ /, '-');\n    if (title.indexOf('--') != 0) title = '--' + title;\n    return title;\n  }\n\n  ;\n\n  function updateAccessibleContrast() {\n    var bgLuminance = jsPage.getLuminance(colorContrasts[0], iframeParent),\n        headingsLuminance = jsPage.getLuminance(colorContrasts[5], iframeParent),\n        bodyLuminance = jsPage.getLuminance(colorContrasts[4], iframeParent),\n        headingsContrast = bgLuminance > headingsLuminance ? (bgLuminance + 0.05) / (headingsLuminance + 0.05) : (headingsLuminance + 0.05) / (bgLuminance + 0.05),\n        bodyContrast = bgLuminance > bodyLuminance ? (bgLuminance + 0.05) / (bodyLuminance + 0.05) : (bodyLuminance + 0.05) / (bgLuminance + 0.05);\n    headingsContrast = parseFloat(headingsContrast).toFixed(2);\n    bodyContrast = parseFloat(bodyContrast).toFixed(2);\n    var headingsNote = getAccessibleContrastNote(headingsContrast),\n        bodyNote = getAccessibleContrastNote(bodyContrast);\n    if (accessibleContrastHeadings.length > 0) accessibleContrastHeadings[0].textContent = headingsNote;\n    if (accessibleContrastBody.length > 0) accessibleContrastBody[0].textContent = bodyNote;\n  }\n\n  ;\n\n  function getAccessibleContrastNote(value) {\n    var note = value >= 7 ? ' (AAA)' : ' (AA)';\n    if (value < 4.5) note = ' (low)';\n    return value + note;\n  }\n\n  ;\n\n  function updateColorLinks(links) {\n    for (var color in links) {\n      if (links.hasOwnProperty(color) && links[color]) {\n        if (color.indexOf('gr-') > -1) {\n          colorsDemo.find('[data-section=\"#gradient-' + color.replace('gr-', '') + '\"]').prev().find('.js-cd-demo-color__link-btn').addClass('cd-demo-color__link-btn--is-active');\n        } else {\n          colorsDemo.find('[data-section=\"#color-' + color + '\"]').prev().find('.js-cd-demo-color__link-btn').addClass('cd-demo-color__link-btn--is-active');\n        }\n      }\n    }\n  }\n\n  ;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/config-custom-azuriom/colors.js\n");

/***/ }),

/***/ "./js/config-custom-azuriom/page.js":
/*!******************************************!*\
  !*** ./js/config-custom-azuriom/page.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"spacingArray\": () => (/* binding */ spacingArray),\n/* harmony export */   \"textArray\": () => (/* binding */ textArray),\n/* harmony export */   \"textArrayValues\": () => (/* binding */ textArrayValues),\n/* harmony export */   \"fontArray\": () => (/* binding */ fontArray),\n/* harmony export */   \"btnFontIds\": () => (/* binding */ btnFontIds),\n/* harmony export */   \"btnColorCustomNiceLabels\": () => (/* binding */ btnColorCustomNiceLabels),\n/* harmony export */   \"btnGradientsCustomNiceLabels\": () => (/* binding */ btnGradientsCustomNiceLabels),\n/* harmony export */   \"btnColorLabels\": () => (/* binding */ btnColorLabels),\n/* harmony export */   \"shadowVariables\": () => (/* binding */ shadowVariables),\n/* harmony export */   \"borderRadiusValues\": () => (/* binding */ borderRadiusValues),\n/* harmony export */   \"setBtnColorCustomNiceLabels\": () => (/* binding */ setBtnColorCustomNiceLabels),\n/* harmony export */   \"setBtnGradientNiceLabels\": () => (/* binding */ setBtnGradientNiceLabels),\n/* harmony export */   \"decodeSafeURIComponent\": () => (/* binding */ decodeSafeURIComponent),\n/* harmony export */   \"getCursorValue\": () => (/* binding */ getCursorValue),\n/* harmony export */   \"getBorderType\": () => (/* binding */ getBorderType),\n/* harmony export */   \"getBorderStyle\": () => (/* binding */ getBorderStyle),\n/* harmony export */   \"getTextTransform\": () => (/* binding */ getTextTransform),\n/* harmony export */   \"getTextDecoration\": () => (/* binding */ getTextDecoration),\n/* harmony export */   \"getFontSmoothing\": () => (/* binding */ getFontSmoothing),\n/* harmony export */   \"getBoxShadowType\": () => (/* binding */ getBoxShadowType),\n/* harmony export */   \"getTransitionProperty\": () => (/* binding */ getTransitionProperty),\n/* harmony export */   \"getTransitionEase\": () => (/* binding */ getTransitionEase),\n/* harmony export */   \"getTransitionDelay\": () => (/* binding */ getTransitionDelay),\n/* harmony export */   \"getTransformProperty\": () => (/* binding */ getTransformProperty),\n/* harmony export */   \"getOutlineStyle\": () => (/* binding */ getOutlineStyle),\n/* harmony export */   \"getOutlineOffset\": () => (/* binding */ getOutlineOffset),\n/* harmony export */   \"getColorValue\": () => (/* binding */ getColorValue),\n/* harmony export */   \"getColorValueFromList\": () => (/* binding */ getColorValueFromList),\n/* harmony export */   \"getNiceLabelForCustom\": () => (/* binding */ getNiceLabelForCustom),\n/* harmony export */   \"removeOpacityFromLabel\": () => (/* binding */ removeOpacityFromLabel),\n/* harmony export */   \"getOpacityDecFromLabel\": () => (/* binding */ getOpacityDecFromLabel),\n/* harmony export */   \"checkColorIsOpacity\": () => (/* binding */ checkColorIsOpacity),\n/* harmony export */   \"getColorFbIos\": () => (/* binding */ getColorFbIos),\n/* harmony export */   \"getHSL\": () => (/* binding */ getHSL),\n/* harmony export */   \"getHSLA\": () => (/* binding */ getHSLA),\n/* harmony export */   \"setHSLAfromHSL\": () => (/* binding */ setHSLAfromHSL),\n/* harmony export */   \"getHSLFromString\": () => (/* binding */ getHSLFromString),\n/* harmony export */   \"setCssVariable\": () => (/* binding */ setCssVariable),\n/* harmony export */   \"getCssVariable\": () => (/* binding */ getCssVariable),\n/* harmony export */   \"setBodyCssVariable\": () => (/* binding */ setBodyCssVariable),\n/* harmony export */   \"setElementCssVariable\": () => (/* binding */ setElementCssVariable),\n/* harmony export */   \"windowScrollTo\": () => (/* binding */ windowScrollTo),\n/* harmony export */   \"selectIframeSection\": () => (/* binding */ selectIframeSection),\n/* harmony export */   \"selectIframeTab\": () => (/* binding */ selectIframeTab),\n/* harmony export */   \"getMq\": () => (/* binding */ getMq),\n/* harmony export */   \"getScreenSize\": () => (/* binding */ getScreenSize),\n/* harmony export */   \"getValidResponsiveValue\": () => (/* binding */ getValidResponsiveValue),\n/* harmony export */   \"getValueUnit\": () => (/* binding */ getValueUnit),\n/* harmony export */   \"getBodyNotFalse\": () => (/* binding */ getBodyNotFalse),\n/* harmony export */   \"loadGlobalsStyle\": () => (/* binding */ loadGlobalsStyle),\n/* harmony export */   \"loadColorStyle\": () => (/* binding */ loadColorStyle),\n/* harmony export */   \"loadColorDefaultStyle\": () => (/* binding */ loadColorDefaultStyle),\n/* harmony export */   \"setColorPartVariables\": () => (/* binding */ setColorPartVariables),\n/* harmony export */   \"getBWArray\": () => (/* binding */ getBWArray),\n/* harmony export */   \"loadTypographyStyle\": () => (/* binding */ loadTypographyStyle),\n/* harmony export */   \"loadTypographyDefaultStyle\": () => (/* binding */ loadTypographyDefaultStyle),\n/* harmony export */   \"loadTypographyStyleTag\": () => (/* binding */ loadTypographyStyleTag),\n/* harmony export */   \"loadTypographyCssVarStyleGuide\": () => (/* binding */ loadTypographyCssVarStyleGuide),\n/* harmony export */   \"loadTypographyStyleStyleGuide\": () => (/* binding */ loadTypographyStyleStyleGuide),\n/* harmony export */   \"getTypographyScaleVar\": () => (/* binding */ getTypographyScaleVar),\n/* harmony export */   \"getTextUnit\": () => (/* binding */ getTextUnit),\n/* harmony export */   \"getTypographyScaleVarRes\": () => (/* binding */ getTypographyScaleVarRes),\n/* harmony export */   \"loadSpacingStyle\": () => (/* binding */ loadSpacingStyle),\n/* harmony export */   \"loadSpacingDefaultStyle\": () => (/* binding */ loadSpacingDefaultStyle),\n/* harmony export */   \"loadSpacingStyleTag\": () => (/* binding */ loadSpacingStyleTag),\n/* harmony export */   \"setTypographyCssVariables\": () => (/* binding */ setTypographyCssVariables),\n/* harmony export */   \"getTypographyArray\": () => (/* binding */ getTypographyArray),\n/* harmony export */   \"getTypographyStyle\": () => (/* binding */ getTypographyStyle),\n/* harmony export */   \"updateSpacingCssVariables\": () => (/* binding */ updateSpacingCssVariables),\n/* harmony export */   \"getSpacingValues\": () => (/* binding */ getSpacingValues),\n/* harmony export */   \"getSpacingMultiplier\": () => (/* binding */ getSpacingMultiplier),\n/* harmony export */   \"getSpacingCustomScaleRatio\": () => (/* binding */ getSpacingCustomScaleRatio),\n/* harmony export */   \"getSpacingValidResponsiveValueCustomRatio\": () => (/* binding */ getSpacingValidResponsiveValueCustomRatio),\n/* harmony export */   \"getSpaceRatioCustom\": () => (/* binding */ getSpaceRatioCustom),\n/* harmony export */   \"loadButtonsStyle\": () => (/* binding */ loadButtonsStyle),\n/* harmony export */   \"loadButtonsStyleStyleGuide\": () => (/* binding */ loadButtonsStyleStyleGuide),\n/* harmony export */   \"loadSharedStyleStyleGuide\": () => (/* binding */ loadSharedStyleStyleGuide),\n/* harmony export */   \"escapeCSScharacters\": () => (/* binding */ escapeCSScharacters),\n/* harmony export */   \"loadButtonsDefaultStyle\": () => (/* binding */ loadButtonsDefaultStyle),\n/* harmony export */   \"buttonVariables\": () => (/* binding */ buttonVariables),\n/* harmony export */   \"loadButtonsStyleTag\": () => (/* binding */ loadButtonsStyleTag),\n/* harmony export */   \"loadFormsStyle\": () => (/* binding */ loadFormsStyle),\n/* harmony export */   \"loadFormsStyleStyleGuide\": () => (/* binding */ loadFormsStyleStyleGuide),\n/* harmony export */   \"formVariables\": () => (/* binding */ formVariables),\n/* harmony export */   \"loadFormsDefaultStyle\": () => (/* binding */ loadFormsDefaultStyle),\n/* harmony export */   \"loadFormsStyleTag\": () => (/* binding */ loadFormsStyleTag),\n/* harmony export */   \"boxShadowIsDefined\": () => (/* binding */ boxShadowIsDefined),\n/* harmony export */   \"getButtonsArrayStyle\": () => (/* binding */ getButtonsArrayStyle),\n/* harmony export */   \"buttonsCodeStyle\": () => (/* binding */ buttonsCodeStyle),\n/* harmony export */   \"setStatusList\": () => (/* binding */ setStatusList),\n/* harmony export */   \"buttonIconCodeStyle\": () => (/* binding */ buttonIconCodeStyle),\n/* harmony export */   \"buttonsHasTransformStyle\": () => (/* binding */ buttonsHasTransformStyle),\n/* harmony export */   \"getButtonCode\": () => (/* binding */ getButtonCode),\n/* harmony export */   \"getButtonsAppearanceStyle\": () => (/* binding */ getButtonsAppearanceStyle),\n/* harmony export */   \"getGradientBgStyle\": () => (/* binding */ getGradientBgStyle),\n/* harmony export */   \"getButtonsPaddingStyle\": () => (/* binding */ getButtonsPaddingStyle),\n/* harmony export */   \"getButtonsPaddingValue\": () => (/* binding */ getButtonsPaddingValue),\n/* harmony export */   \"getButtonsMarginStyle\": () => (/* binding */ getButtonsMarginStyle),\n/* harmony export */   \"getButtonsBorderStyle\": () => (/* binding */ getButtonsBorderStyle),\n/* harmony export */   \"getButtonsTypographyStyle\": () => (/* binding */ getButtonsTypographyStyle),\n/* harmony export */   \"getButtonsTextShadowStyle\": () => (/* binding */ getButtonsTextShadowStyle),\n/* harmony export */   \"getButtonsShadowStyle\": () => (/* binding */ getButtonsShadowStyle),\n/* harmony export */   \"getButtonsOutlineStyle\": () => (/* binding */ getButtonsOutlineStyle),\n/* harmony export */   \"getButtonsTransformStyle\": () => (/* binding */ getButtonsTransformStyle),\n/* harmony export */   \"getButtonsTransitionStyle\": () => (/* binding */ getButtonsTransitionStyle),\n/* harmony export */   \"getButtonsPlaceholderStyle\": () => (/* binding */ getButtonsPlaceholderStyle),\n/* harmony export */   \"getButtonsFontSizeValue\": () => (/* binding */ getButtonsFontSizeValue),\n/* harmony export */   \"resetFormsStyleComponents\": () => (/* binding */ resetFormsStyleComponents),\n/* harmony export */   \"getSuffixOpacity\": () => (/* binding */ getSuffixOpacity),\n/* harmony export */   \"getLuminance\": () => (/* binding */ getLuminance),\n/* harmony export */   \"getRGBsrValues\": () => (/* binding */ getRGBsrValues),\n/* harmony export */   \"getRGBValues\": () => (/* binding */ getRGBValues),\n/* harmony export */   \"getRGBfromHSL\": () => (/* binding */ getRGBfromHSL),\n/* harmony export */   \"loadedIframeCheck\": () => (/* binding */ loadedIframeCheck),\n/* harmony export */   \"initFontList\": () => (/* binding */ initFontList)\n/* harmony export */ });\n//buttons/forms default values\nvar spacingArray = ['', '0', 'var(--space-xxxxs)', 'var(--space-xxxs)', 'var(--space-xxs)', 'var(--space-xs)', 'var(--space-sm)', 'var(--space-md)', 'var(--space-lg)', 'var(--space-xl)', 'var(--space-xxl)', 'var(--space-xxxl)', 'var(--space-xxxxl)'],\n    textArray = ['', 'var(--text-xs)', 'var(--text-sm)', 'var(--text-md)', 'var(--text-lg)', 'var(--text-xl)', 'var(--text-xxl)', 'var(--text-xxxl)', 'var(--text-xxxxl)', 'inherit'],\n    textArrayValues = ['', 'var(--text-xs)', 'var(--text-sm)', 'var(--text-md)', 'var(--text-lg)', 'var(--text-xl)', 'var(--text-xxl)', 'var(--text-xxxl)', 'inherit', '', 'var(--text-xxxxl)'],\n    fontArray = ['', '--font-primary'],\n    btnFontIds = [0, 1],\n    btnColorCustomNiceLabels = [],\n    btnGradientsCustomNiceLabels = [],\n    btnColorLabels = [\"primary\", \"accent\", \"download\", \"warning\", \"success\", \"error\", \"info\"],\n    shadowVariables = ['', '', 'var(--shadow-xs)', 'var(--shadow-sm)', 'var(--shadow-md)', 'var(--shadow-lg)', 'var(--shadow-xl)'],\n    borderRadiusValues = ['', 'var(--radius-sm)', 'var(--radius-md)', 'var(--radius-lg)'];\nfunction setBtnColorCustomNiceLabels(colors, customNice) {\n  if (colors) {\n    btnColorLabels = colors;\n  }\n\n  if (customNice) {\n    btnColorCustomNiceLabels = customNice;\n  }\n}\n;\nfunction setBtnGradientNiceLabels(gradients) {\n  if (gradients && gradients.length > 0) {\n    btnGradientsCustomNiceLabels = gradients;\n  }\n}\n;\nfunction decodeSafeURIComponent(string) {\n  return decodeURIComponent(string.replace(/%\"/g, '%25\"'));\n}\n;\nfunction getCursorValue(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'auto';\n      break;\n\n    case 2:\n      return 'pointer';\n      break;\n\n    case 3:\n      return 'not-allowed';\n      break;\n\n    default:\n      return 'auto';\n  }\n}\n;\nfunction getBorderType(index) {\n  switch (index) {\n    case 0:\n      return 'border';\n      break;\n\n    case 1:\n      return 'border-top';\n      break;\n\n    case 2:\n      return 'border-right';\n      break;\n\n    case 3:\n      return 'border-bottom';\n      break;\n\n    case 4:\n      return 'border-left';\n      break;\n\n    default:\n      return 'border';\n  }\n}\n;\nfunction getBorderStyle(index) {\n  switch (index) {\n    case 0:\n      return 'none';\n      break;\n\n    case 1:\n      return 'solid';\n      break;\n\n    case 2:\n      return 'dashed';\n      break;\n\n    case 3:\n      return 'dotted';\n      break;\n\n    default:\n      return 'solid';\n  }\n}\n;\nfunction getTextTransform(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'capitalize';\n      break;\n\n    case 3:\n      return 'uppercase';\n      break;\n\n    case 4:\n      return 'lowercase';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getTextDecoration(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'underline';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getFontSmoothing() {\n  return '-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;';\n}\n;\nfunction getBoxShadowType(index) {\n  if (index == 0) return '';else return 'inset ';\n}\n;\nfunction getTransitionProperty(index) {\n  switch (index) {\n    case 0:\n      return 'all';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'background';\n      break;\n\n    case 3:\n      return 'opacity';\n      break;\n\n    case 4:\n      return 'border';\n      break;\n\n    case 5:\n      return 'box-shadow';\n      break;\n\n    case 6:\n      return 'outline';\n      break;\n\n    case 7:\n      return 'transform';\n      break;\n\n    case 8:\n      return 'color';\n      break;\n\n    default:\n      return 'all';\n  }\n}\n;\nfunction getTransitionEase(index) {\n  switch (index) {\n    case 0:\n      return 'ease';\n      break;\n\n    case 1:\n      return 'linear';\n      break;\n\n    case 2:\n      return 'ease-in';\n      break;\n\n    case 3:\n      return 'ease-out';\n      break;\n\n    case 4:\n      return 'var(--ease-in-out)';\n      break;\n\n    case 5:\n      return 'var(--ease-in)';\n      break;\n\n    case 6:\n      return 'var(--ease-out)';\n      break;\n\n    case 7:\n      return 'var(--ease-out-back)';\n      break;\n\n    default:\n      return 'ease';\n  }\n}\n;\nfunction getTransitionDelay(val) {\n  if (val == '') return '';\n  return ' ' + val + 's';\n}\n;\nfunction getTransformProperty(index) {\n  switch (index) {\n    case 0:\n      return 'none';\n      break;\n\n    case 1:\n      return 'translate';\n      break;\n\n    case 2:\n      return 'translateX';\n      break;\n\n    case 3:\n      return 'translateY';\n      break;\n\n    case 4:\n      return 'translateZ';\n      break;\n\n    case 5:\n      return 'scale';\n      break;\n\n    case 6:\n      return 'scaleX';\n      break;\n\n    case 7:\n      return 'scaleY';\n      break;\n\n    case 8:\n      return 'scaleZ';\n      break;\n\n    case 9:\n      return 'rotate';\n      break;\n\n    case 10:\n      return 'rotateX';\n      break;\n\n    case 11:\n      return 'rotateY';\n      break;\n\n    case 12:\n      return 'rotateZ';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getOutlineStyle(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'auto';\n      break;\n\n    case 2:\n      return 'dotted';\n      break;\n\n    case 3:\n      return 'dashed';\n      break;\n\n    case 4:\n      return 'solid';\n      break;\n\n    case 5:\n      return 'double';\n      break;\n\n    case 6:\n      return 'inset';\n      break;\n\n    case 7:\n      return 'outset';\n      break;\n\n    case 8:\n      return 'none';\n      break;\n\n    default:\n      return '';\n  }\n}\n;\nfunction getOutlineOffset(val) {\n  if (val == '') return '';\n  return 'outline-offset: ' + val + ';';\n}\n;\nfunction getColorValue(val, reset) {\n  if (!val || val == null) return ''; // check if inherit/transparent/default\n\n  if (val == 'transparent' || val.indexOf('transparent') == 0) return 'transparent';\n  if (val == 'inherit' || val.indexOf('inherit') == 0) return 'inherit';\n  if (val == '' || val.indexOf('-a') == 0) return ''; //check if custom color\n\n  return getColorValueFromList(val, reset);\n}\n;\nfunction getColorValueFromList(label, reset) {\n  var fallback = '';\n  if (!label || label == null) return '';\n  label = getNiceLabelForCustom(label);\n  if (!label) return ''; //check if this is an opacity value and provide fallback\n\n  if (checkColorIsOpacity(label)) {\n    if (reset && reset == true) {\n      //need to return css value\n      var basicLabel = removeOpacityFromLabel(label);\n      return 'hsla(var(' + basicLabel + '-h), var(' + basicLabel + '-s), var(' + basicLabel + '-l), ' + getOpacityDecFromLabel(label) + ')';\n    } else {\n      //return sass mixin\n      return 'alpha(var(' + removeOpacityFromLabel(label) + '), ' + getOpacityDecFromLabel(label) + ')';\n    }\n  } else {\n    return 'var(' + label + ')';\n  }\n}\n;\nfunction getNiceLabelForCustom(label) {\n  if (label.indexOf('custom-') > -1) {\n    var prefix = label.indexOf('custom-fdb-') > -1 ? 'custom-fdb-' : 'custom-';\n    var labelArray = label.split(prefix),\n        split = labelArray[1].split('-');\n\n    if (split.length > 1) {\n      var customLabel = prefix + split[0];\n      label = btnColorCustomNiceLabels[btnColorLabels.indexOf(customLabel) - 5] + labelArray[1].replace(split[0], '');\n    } else {\n      var customLabel = prefix + labelArray[1];\n      label = btnColorCustomNiceLabels[btnColorLabels.indexOf(customLabel) - 5];\n    }\n  }\n\n  return label;\n}\n;\nfunction removeOpacityFromLabel(label) {\n  return label.slice(0, -4);\n}\n;\nfunction getOpacityDecFromLabel(label) {\n  var opacity = parseInt(label.slice(-4).replace('-a', ''));\n  if (isNaN(opacity)) return 1;\n  return parseFloat((opacity / 100).toFixed(2));\n}\n;\nfunction checkColorIsOpacity(label) {\n  var array = label.split('-');\n\n  if (array.length > 0 && array[array.length - 1].indexOf('a') == 0 && array[array.length - 1].length == 3) {\n    return true;\n  }\n\n  return false;\n}\n;\nfunction getColorFbIos($color, $varLabel, $spacing, $reset) {\n  if (!$color || $color == null) return ['', ''];\n  if ($color == 'transparent' || $color == 'inherit' || $color == '') return ['', $color];\n  return ['', getColorValue($color, $reset)];\n}\n; //if you updates this -> you'll need to update the same in the app-global.js as well\n\nvar paddingVariables = ['--space-xxxxs', '--space-xxxs', '--space-xxs', '--space-xs', '--space-sm', '--space-md', '--space-lg', '--space-xl', '--space-xxl', '--space-xxxl', '--space-xxxxl'],\n    fibonacciSeq = [0.125, 0.25, 0.375, 0.5, 0.75, 1.25, 2, 3.25, 5.25, 8.5, 13.75],\n    prFourth = [0.237, 0.316, 0.422, 0.563, 0.75, 1, 1.333, 1.777, 2.369, 3.157, 4.21],\n    auFourth = [0.177, 0.25, 0.354, 0.5, 0.707, 1, 1.414, 1.999, 2.827, 3.998, 5.65],\n    prFifth = [0.133, 0.2, 0.296, 0.444, 0.667, 1, 1.5, 2.25, 3.375, 5.063, 7.59],\n    goldenRatio = [0.09, 0.146, 0.236, 0.382, 0.618, 1, 1.618, 2.618, 4.236, 6.854, 11.08],\n    spaceRatioUnit = [false, fibonacciSeq, prFourth, auFourth, prFifth, goldenRatio, ''];\nfunction getHSL(color) {\n  if (isNaN(color[0])) color[0] = 0;\n  return 'hsl(' + Math.round(color[0]) + ', ' + Math.round(color[1] * 100) + '%, ' + Math.round(color[2] * 100) + '%)';\n}\n;\nfunction getHSLA(color, opacity) {\n  if (isNaN(color[0])) color[0] = 0;\n  return 'hsla(' + Math.round(color[0]) + ', ' + Math.round(color[1] * 100) + '%, ' + Math.round(color[2] * 100) + '%, ' + parseFloat((Number(opacity) / 100).toFixed(2)) + ')';\n}\n;\nfunction setHSLAfromHSL(color, opacity) {\n  color = color.replace('hsl(', 'hsla(');\n  color = color.replace(')', ', ' + parseFloat((Number(opacity) / 100).toFixed(2)) + ')');\n  return color;\n}\n;\nfunction getHSLFromString(color) {\n  var array = color.replace('hsl(', '').replace(')', '').split(',');\n\n  if (array && array.length > 1) {\n    return [Number(array[0].trim()), parseFloat((array[1].trim().replace('%', '') / 100).toFixed(2)), parseFloat((array[2].trim().replace('%', '') / 100).toFixed(2))];\n  } else {\n    return '';\n  }\n}\n;\nfunction setCssVariable(variable, value, priority) {\n  var root = document.documentElement;\n\n  if (priority) {\n    root.style.setProperty(variable, value, priority);\n  } else {\n    root.style.setProperty(variable, value);\n  }\n}\n;\nfunction getCssVariable(variable) {\n  return getComputedStyle(document.documentElement).getPropertyValue(variable);\n}\n;\nfunction setBodyCssVariable(variable, value) {\n  var body = document.getElementsByTagName('body')[0];\n  body.style.setProperty(variable, value);\n}\n;\nfunction setElementCssVariable(className, variable, value) {\n  var element = document.getElementsByClassName(className);\n\n  if (element.length > 0) {\n    element[0].style.setProperty(variable, value);\n  }\n}\n;\nfunction windowScrollTo(val) {\n  window.scrollTo(0, val);\n}\n;\nfunction selectIframeSection(val) {\n  var section = $('[data-section=\"' + val + '\"]');\n  $('.cd-demo-item--selected').removeClass('cd-demo-item--selected');\n\n  if (section.length > 0) {\n    section.addClass('cd-demo-item--selected');\n\n    if ($('.cd-demo-color__list--selected').length > 0) {\n      $('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n      section.addClass('cd-demo-color__list--selected');\n    }\n\n    windowScrollTo(section.parent().offset().top - 20);\n  }\n}\n;\nfunction selectIframeTab(val) {\n  //remove the selection effect\n  $('.cd-demo-item--selected').removeClass('cd-demo-item--selected');\n  var section = $('[data-tab]');\n\n  if (section.length > 0) {\n    section.addClass('cd-demo-item--is-hidden');\n    section.filter('[data-tab=\"' + val + '\"]').removeClass('cd-demo-item--is-hidden');\n\n    if (val == 'tab-lh-crop') {\n      //lhcrop in typograpgy -> select --font-primary\n      selectIframeSection('--font-1');\n    }\n  }\n}\n;\nfunction getMq() {\n  var windowWidth = $(window).outerWidth(),\n      mq = 0,\n      string = ''; // check if you can get external document width\n\n  if (window.parent && window.parent.document && window.parent.document.body && window.parent.document.body.clientWidth) {\n    windowWidth = window.parent.document.body.clientWidth;\n  }\n\n  switch (true) {\n    case windowWidth >= 1440:\n      mq = 5;\n      string = 'Visible mq: > 1440px';\n      break;\n\n    case windowWidth >= 1280:\n      mq = 4;\n      string = 'Visible mq: > 1280px';\n      break;\n\n    case windowWidth >= 1024:\n      mq = 3;\n      string = 'Visible mq: > 1024px';\n      break;\n\n    case windowWidth >= 600:\n      mq = 2;\n      string = 'Visible mq: > 600px';\n      break;\n\n    case windowWidth >= 480:\n      mq = 1;\n      string = 'Visible mq: > 480px';\n      break;\n\n    default:\n      mq = 0;\n      string = 'None';\n  }\n\n  $('.js-width').text(string);\n  return mq;\n}\n;\nfunction getScreenSize() {\n  if (window.parent && window.parent.document && window.parent.document.body && window.parent.document.body.clientWidth) {\n    return [window.parent.document.body.clientWidth, $(window).outerHeight()];\n  } else {\n    return [$(window).outerWidth(), $(window).outerHeight()];\n  }\n}\n;\nfunction getValidResponsiveValue(spaceArray, index, subIndex) {\n  var item = subIndex !== false ? spaceArray[index][subIndex] : spaceArray[index];\n  if (index == 0) return item;\n\n  if (item !== false && item !== '') {\n    return item;\n  } else {\n    return getValidResponsiveValue(spaceArray, index - 1, subIndex);\n  }\n}\n;\nfunction getValueUnit(value) {\n  if (!value || value == '') return [false, false];\n  var number = parseFloat(value),\n      unit = value.replace(number, '');\n  return [number, unit];\n}\n;\nfunction getBodyNotFalse(array, mq) {\n  var newArray = [];\n\n  for (var i = 0; i < 3; i++) {\n    newArray[i] = getValidResponsiveValue(array, mq, i);\n  }\n\n  return newArray;\n}\n;\nvar projectLoaded = '';\nvar MQ = getMq();\nfunction loadGlobalsStyle(project) {\n  //for components -> load project style\n  if (project) {\n    $('.js-cd-demo').trigger('globalsUpdating');\n    projectLoaded = project;\n  }\n\n  if (project.colors && project.colors !== '' && Object.values) {\n    //colors were saved and need to be modified\n    loadColorStyle(JSON.parse(project.colors));\n  } else {\n    loadColorDefaultStyle();\n  }\n\n  if (project.typography && project.typography !== '' && Object.values) {\n    //typography was saved and need to be modified\n    loadTypographyStyle(JSON.parse(decodeSafeURIComponent(project.typography)), true, MQ);\n  } else {\n    loadTypographyDefaultStyle(true, MQ);\n  } //do the same for the other globals\n\n\n  if (project.spacing && project.spacing !== '' && Object.values) {\n    loadSpacingStyle(JSON.parse(decodeSafeURIComponent(project.spacing)), MQ);\n  } else {\n    loadSpacingDefaultStyle(MQ);\n  }\n\n  if (project.buttons && project.buttons !== '' && Object.values) {\n    loadButtonsStyle(JSON.parse(decodeSafeURIComponent(project.buttons)), MQ);\n  } else {\n    loadButtonsDefaultStyle(MQ);\n  }\n\n  if (project.form && project.form !== '' && Object.values) {\n    loadFormsStyle(JSON.parse(decodeSafeURIComponent(project.form)), MQ);\n  } else {\n    loadFormsDefaultStyle(MQ);\n  } //if you need to update style on resize\n\n\n  if (project) {\n    $('.js-cd-demo').trigger('globalsUpdate');\n  }\n\n  $('.js-cd-demo').trigger('showComponent');\n}\n;\nfunction loadColorStyle(colors) {\n  //no need to do this for custom opacities as only default one are used in components\n  var variations = ['-lighter', '-light', '', '-dark', '-darker'];\n  btnColorLabels = Object.values(colors['mainColorLabels']);\n  btnColorCustomNiceLabels = colors['customColorLabels'] ? Object.values(colors['customColorLabels']) : [];\n  btnGradientsCustomNiceLabels = colors['gradientColorLabels'] ? Object.values(colors['gradientColorLabels']) : []; //set main colors - including custom colors as well\n\n  for (var i = 0; i < btnColorLabels.length; i++) {\n    var cssVarLab = i > 4 ? btnColorCustomNiceLabels[i - 5] : '--color-' + btnColorLabels[i];\n\n    for (var j = 0; j < variations.length; j++) {\n      setCssVariable(cssVarLab + variations[j], getHSL(Object.values(colors[btnColorLabels[i]][0][j])));\n      setColorPartVariables(cssVarLab + variations[j], Object.values(colors[btnColorLabels[i]][0][j]));\n    }\n  } //set black & white\n\n\n  var bVariations = ['', '-light', '-lighter'],\n      blackArray = getBWArray(colors['blackColors'][0]),\n      whiteArray = getBWArray(colors['whiteColors'][0]);\n\n  for (var i = 0; i < blackArray.length; i++) {\n    setCssVariable('--color-black' + bVariations[i], getHSL(blackArray[i]));\n    setColorPartVariables('--color-black' + bVariations[i], blackArray[i]);\n  }\n\n  var wVariations = ['', '-dark', '-darker'];\n\n  for (var i = 0; i < whiteArray.length; i++) {\n    setCssVariable('--color-white' + wVariations[i], getHSL(whiteArray[i]));\n    setColorPartVariables('--color-white' + wVariations[i], whiteArray[i]);\n  } //set contrasts\n\n\n  var contrastLabels = ['-bg', '-contrast-lower', '-contrast-low', '-contrast-medium', '-contrast-high', '-contrast-higher'];\n\n  for (var i = 0; i < contrastLabels.length; i++) {\n    setCssVariable('--color' + contrastLabels[i], getHSL(Object.values(colors['contrastColors'][0][i])));\n    setColorPartVariables('--color' + contrastLabels[i], Object.values(colors['contrastColors'][0][i]));\n  } // set gradients\n\n\n  for (var i = 0; i < btnGradientsCustomNiceLabels.length; i++) {\n    var cssVarLab = '--gradient-' + btnGradientsCustomNiceLabels[i],\n        gradientId = colors['gradientColorIds'][i] + 'Gradients';\n    setCssVariable(cssVarLab + '-stop-1', getHSL(Object.values(colors[gradientId][0][0])));\n    setColorPartVariables(cssVarLab + '-stop-1', Object.values(colors[gradientId][0][0]));\n    setCssVariable(cssVarLab + '-stop-2', getHSL(Object.values(colors[gradientId][0][1])));\n    setColorPartVariables(cssVarLab + '-stop-2', Object.values(colors[gradientId][0][1]));\n  } //font rendering\n\n\n  var fontRenderingCode = '';\n\n  if (colors['fontRendering'] && colors['fontRendering'][0]) {\n    if (Number(colors['fontRendering'][0]) == 1) fontRenderingCode = 'body{-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}';else if (Number(colors['fontRendering'][0]) == 2) fontRenderingCode = 'body{-webkit-font-smoothing: auto;-moz-osx-font-smoothing: auto;}';\n  }\n\n  var style = '<style id=\"font-rendering-style\">' + fontRenderingCode + '</style>';\n  $('#font-rendering-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\n;\nfunction loadColorDefaultStyle() {\n  // colors array\n  var defaultColors = [['--color-primary-darker', [220, 0.9, 0.42]], ['--color-primary-dark', [220, 0.9, 0.49]], ['--color-primary', [220, 0.9, 0.56]], ['--color-primary-light', [220, 0.9, 0.63]], ['--color-primary-lighter', [220, 0.9, 0.70]], ['--color-accent-darker', [349, 0.75, 0.36]], ['--color-accent-dark', [349, 0.75, 0.44]], ['--color-accent', [349, 0.75, 0.51]], ['--color-accent-light', [349, 0.75, 0.59]], ['--color-accent-lighter', [349, 0.75, 0.67]], ['--color-download-darker', [349, 0.75, 0.36]], ['--color-download-dark', [349, 0.75, 0.44]], ['--color-download', [349, 0.75, 0.51]], ['--color-download-light', [349, 0.75, 0.59]], ['--color-download-lighter', [349, 0.75, 0.67]], ['--color-black', [240, 0.08, 0.12]], ['--color-white', [0, 0, 1]], ['--color-success-darker', [94, 0.48, 0.42]], ['--color-success-dark', [94, 0.48, 0.48]], ['--color-success', [94, 0.48, 0.56]], ['--color-success-light', [94, 0.48, 0.65]], ['--color-success-lighter', [94, 0.48, 0.74]], ['--color-error-darker', [349, 0.75, 0.36]], ['--color-error-dark', [349, 0.75, 0.44]], ['--color-error', [349, 0.75, 0.51]], ['--color-error-light', [349, 0.75, 0.59]], ['--color-error-lighter', [349, 0.75, 0.67]], ['--color-info-darker', [349, 0.75, 0.36]], ['--color-info-dark', [349, 0.75, 0.44]], ['--color-info', [349, 0.75, 0.51]], ['--color-info-light', [349, 0.75, 0.59]], ['--color-info-lighter', [349, 0.75, 0.67]], ['--color-warning-darker', [46, 1, 0.47]], ['--color-warning-dark', [46, 1, 0.50]], ['--color-warning', [46, 1, 0.61]], ['--color-warning-light', [46, 1, 0.71]], ['--color-warning-lighter', [46, 1, 0.80]], ['--color-bg', [0, 0, 1]], ['--color-contrast-lower', [0, 0, 0.95]], ['--color-contrast-low', [240, 0.01, 0.83]], ['--color-contrast-medium', [240, 0.01, 0.48]], ['--color-contrast-high', [240, 0.04, 0.2]], ['--color-contrast-higher', [240, 0.08, 0.12]]];\n\n  for (var i = 0; i < defaultColors.length; i++) {\n    setCssVariable(defaultColors[i][0], getHSL(defaultColors[i][1]));\n    setColorPartVariables(defaultColors[i][0], defaultColors[i][1]);\n  }\n}\n;\nfunction setColorPartVariables(label, colorArray) {\n  setCssVariable(label + '-h', Math.round(colorArray[0]));\n  setCssVariable(label + '-s', Math.round(colorArray[1] * 100) + '%');\n  setCssVariable(label + '-l', Math.round(colorArray[2] * 100) + '%');\n}\n;\nfunction getBWArray(obj) {\n  var array = [];\n\n  for (var property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      array.push(Object.values(obj[property]));\n    }\n  }\n\n  return array;\n}\n;\nfunction loadTypographyStyle(typography, bool, mq) {\n  if (bool) {\n    //not responsive things\n    if (typography['fontCode'] && typography != '') $(typography['fontCode']).appendTo($('head'));\n\n    for (var property in typography['fontFamilies']) {\n      if (typography['fontFamilies'].hasOwnProperty(property) && typography['fontFamilyLabels'].hasOwnProperty(property)) {\n        setBodyCssVariable(typography['fontFamilyLabels'][property], typography['fontFamilies'][property]);\n      }\n    }\n\n    if (typography['lhCropCapitalLetter']) {\n      var lhcropArray = Object.values(typography['lhCropCapitalLetter']);\n      if (lhcropArray.length > 0) setCssVariable('--font-primary-capital-letter', lhcropArray[0]);\n    }\n\n    fontArray = [''];\n    btnFontIds = [0];\n\n    for (var property in typography['fontFamilyLabels']) {\n      if (typography['fontFamilyLabels'].hasOwnProperty(property)) {\n        fontArray.push(typography['fontFamilyLabels'][property]);\n        btnFontIds.push(typography['fontFamilyIds'][property]);\n      }\n    }\n  } //body/heading style\n\n\n  var headingValues = getBodyNotFalse(getTypographyArray(typography['headingInfo']), mq),\n      bodyValues = getBodyNotFalse(getTypographyArray(typography['bodyInfo']), mq);\n  var textVariables = 'root, *{--text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));}';\n  loadTypographyStyleTag(textVariables + getTypographyStyle(headingValues, 'h1, h2, h3, h4', typography) + getTypographyStyle(bodyValues, 'body', typography));\n  setTypographyCssVariables(headingValues, bodyValues, typography, mq);\n}\n;\nfunction loadTypographyDefaultStyle(bool, mq) {\n  // set variables - get values for --text-base-size and --text-scale-ratio\n  var bodyStyle = '--font-primary: Inter, system-ui, sans-serif;--text-base-size: 1em;--text-scale-ratio: 1.2;--text-unit: 1em;--body-line-height: 1.4;--heading-line-height: 1.2;--font-primary-capital-letter: 1;',\n      allStyle = ' --text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));';\n  bodyStyle = ':root{' + bodyStyle + '}';\n  allStyle = ':root, *{' + allStyle + '}';\n  var bodyResStyle = '@media (min-width:64rem){:root{--text-base-size: 1.25em;--text-scale-ratio: 1.25;}}';\n  var headingStyle = 'h1, h2, h3, h4 {font-family: var(--font-primary);font-weight: 700;}';\n  loadTypographyStyleTag(bodyStyle + allStyle + headingStyle + bodyResStyle); // append font link\n\n  var fontLink = '<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">';\n  var typographyStyle = $('#typography-style');\n  $(fontLink).insertAfter(typographyStyle);\n}\n;\nfunction loadTypographyStyleTag(styleContent) {\n  var defaultStyle = 'mark {background-color: hsla(var(--color-accent-h), var(--color-accent-s), var(--color-accent-l), 0.2);color: inherit;}.text-component {--line-height-multiplier: 1;--text-vspace-multiplier: 1;}.text-component blockquote {padding-left: 1em;border-left: 4px solid var(--color-contrast-low);}.text-component hr {background: var(--color-contrast-low);height: 1px;}.text-component figcaption {font-size: var(--text-sm);color: var(--color-contrast-medium);}.article {--body-line-height: 1.58;--text-vspace-multiplier: 1.2;}';\n  var style = '<style id=\"typography-style\">' + styleContent + defaultStyle + '</style>';\n  $('#typography-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\nfunction loadTypographyCssVarStyleGuide(typography) {\n  var code = ':root {'; // font family definition\n\n  var fontFamilies = '',\n      fontFamilyClasses = '';\n  var scale = '';\n  var textVariables = '';\n  var scaleResponsive = '';\n\n  if (typography['fontFamilies'] && typography['fontFamilyLabels']) {\n    for (var i = 0; i < typography['fontFamilies'].length; i++) {\n      if (typography['fontFamilyLabels'][i]) {\n        fontFamilies = fontFamilies + typography['fontFamilyLabels'][i] + ': ' + typography['fontFamilies'][i] + ';';\n        fontFamilyClasses = fontFamilyClasses + typography['fontFamilyLabels'][i].replace('--', '.') + '{font-family: var(' + typography['fontFamilyLabels'][i] + ');}';\n      }\n    }\n  }\n\n  code = code + fontFamilies;\n\n  if (typography['baseSize'] && typography['scaleRatio'] && typography['bodyInfo'] && typography['headingInfo']) {\n    scale = getTypographyScaleVar(typography, 0);\n    scaleResponsive = getTypographyScaleVarRes(typography);\n    textVariables = 'root, * {--text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));}';\n  }\n\n  code = code + scale + '}' + textVariables + scaleResponsive + fontFamilyClasses;\n  return code;\n}\n;\nfunction loadTypographyStyleStyleGuide(typography) {\n  var mq = ['', '32rem', '48rem', '64rem', '80rem', '90rem'];\n  var code = '';\n\n  if (typography['bodyInfo'] && typography['headingInfo']) {\n    for (var i = 0; i < mq.length; i++) {\n      var style = '';\n\n      if (typography['bodyInfo'][i]) {\n        var bodyStyle = getTypographyStyle(typography['bodyInfo'][i], 'body', typography);\n        style = i > 0 ? style + '@media (min-width:' + mq[i] + ') {' + bodyStyle + '}' : style + bodyStyle;\n      }\n\n      if (typography['headingInfo'][i]) {\n        var headingStyle = getTypographyStyle(typography['headingInfo'][i], 'h1, h2, h3, h4', typography);\n        style = i > 0 ? style + '@media (min-width:' + mq[i] + ') {' + headingStyle + '}' : style + headingStyle;\n      }\n\n      code = code + style;\n    }\n  }\n\n  return code;\n}\n;\nfunction getTypographyScaleVar(typography, index) {\n  var code = '';\n  if (typography['baseSize'][index]) code = code + '--text-base-size: ' + typography['baseSize'][index] + ';';\n  if (typography['scaleRatio'][index]) code = code + '--text-scale-ratio: ' + typography['scaleRatio'][index] + ';';\n  if (typography['bodyInfo'][index] && typography['bodyInfo'][index][2]) code = code + '--body-line-height: ' + typography['bodyInfo'][index][2] + ';';\n  if (typography['headingInfo'][index] && typography['headingInfo'][index][2]) code = code + '--heading-line-height: ' + typography['headingInfo'][index][2] + ';';\n  if (index == 0) code = code + '--text-unit: ' + getTextUnit(typography);\n  return code;\n}\nfunction getTextUnit(typography) {\n  var textUnit = '1em';\n  if (typography['baseSize'][0] && (typography['baseSize'][0].indexOf('px') > -1 || typography['baseSize'][0].indexOf('rem') > -1)) textUnit = 'var(--text-base-size)';\n  return textUnit;\n}\n;\nfunction getTypographyScaleVarRes(typography) {\n  var mq = ['', '32rem', '48rem', '64rem', '80rem', '90rem'];\n  var code = '';\n\n  for (var i = 1; i < mq.length; i++) {\n    code = code + '@media (min-width:' + mq[i] + ') {:root{' + getTypographyScaleVar(typography, i) + '}}';\n  }\n\n  return code;\n}\nfunction loadSpacingStyle(spacing, mq) {\n  var spaceUnit = getValidResponsiveValue(Object.values(spacing['spaceUnit']), mq, false),\n      spaceRatioCustom = getSpaceRatioCustom(spacing['customSpaceRatio']); // var srList = getSpacingValues(Object.values(spacing['spaceRatio']), spaceUnit, mq, spaceRatioCustom),\n  // this will return only the list of the multiplier (not including the --space-unit)\n\n  var srList = getSpacingMultiplier(Object.values(spacing['spaceRatio']), mq, spaceRatioCustom),\n      paddingVariable = srList[getValidResponsiveValue(Object.values(spacing['padding']), mq, false) - 1];\n  updateSpacingCssVariables(srList, paddingVariable, spaceUnit);\n}\n;\nfunction loadSpacingDefaultStyle(mq) {\n  var responsiveSpacing = '@media (min-width:64rem){:root{--space-unit:  1.25em;}}'; // var style = '<style id=\"spacing-style\">'+responsiveSpacing+'</style>';\n  // $('#spacing-style').remove();\n  // var baseStyle = $('#cd-base-part-1');\n  // $(style).insertAfter(baseStyle);\n  // load after component style -> this will need to overwrite the default spacing style\n  // $('head').append(style);\n\n  loadSpacingStyleTag(responsiveSpacing);\n}\n;\nfunction loadSpacingStyleTag(style) {\n  var style = '<style id=\"spacing-style\">' + style + '</style>';\n  $('#spacing-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\n;\nfunction setTypographyCssVariables(headingValues, bodyValues, typography, mq) {\n  //css variables\n  if (headingValues[2] && headingValues[2] != '') {\n    setCssVariable('--heading-line-height', headingValues[2]); // setElementCssVariable('text-component', '--heading-line-height', headingValues[2]);\n  }\n\n  if (bodyValues[2] && bodyValues[2] != '') {\n    setCssVariable('--body-line-height', bodyValues[2]); // setElementCssVariable('text-component', '--body-line-height', bodyValues[2]);\n  }\n\n  setCssVariable('--text-base-size', getValidResponsiveValue(Object.values(typography['baseSize']), mq, false));\n  setCssVariable('--text-scale-ratio', getValidResponsiveValue(Object.values(typography['scaleRatio']), mq, false));\n  setCssVariable('--text-unit', getTextUnit(typography));\n}\n;\nfunction getTypographyArray(obj) {\n  var arr = [];\n\n  for (var i = 0; i < 6; i++) {\n    arr.push(Object.values(obj[i]));\n  }\n\n  return arr;\n}\n;\nfunction getTypographyStyle(array, selector, typography) {\n  var style = '';\n\n  if (parseInt(array[0]) && parseInt(array[0]) != 0) {\n    var fontIds = Object.values(typography['fontFamilyIds']); // importantCss = selector == 'body' ? '!important' : '';\n\n    style = style + 'font-family: ' + typography['fontFamilies'][fontIds.indexOf(parseInt(array[0]))] + ';';\n  }\n\n  if (array[1] && array[1] != '') style = style + 'font-weight: ' + array[1] + ';';\n  return selector + '{' + style + '}';\n}\n; // export function updateSpacingCssVariables(list, padding, spaceUnit) {\n// \tsetCssVariable('--space-unit', spaceUnit);\n// \tsetCssVariable('--component-padding', padding);\n// \tfor(var i = 0; i < list.length; i++) {\n// \t\tsetCssVariable(paddingVariables[i], list[i]);\n// \t}\n// };\n\nfunction updateSpacingCssVariables(list, padding, spaceUnit) {\n  setCssVariable('--space-unit', spaceUnit);\n  var spacingVariables = '--component-padding:' + 'calc(' + padding + ' * var(--space-unit));';\n\n  for (var i = 0; i < list.length; i++) {\n    spacingVariables = spacingVariables + paddingVariables[i] + ': calc(' + list[i] + ' * var(--space-unit));';\n  }\n\n  spacingVariables = 'root, *{' + spacingVariables + '}';\n  loadSpacingStyleTag(spacingVariables);\n}\n;\nfunction getSpacingValues(spaceRatio, su, mq, spaceRatioCustom) {\n  var list = spaceRatioUnit[getValidResponsiveValue(spaceRatio, mq, false)];\n\n  if (list == '') {\n    //custom scale\n    list = getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio);\n  }\n\n  var spaceList = [];\n  var suArray = getValueUnit(su);\n\n  if (suArray[0] === false) {\n    suArray[0] = 1;\n    suArray[1] = 'em';\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    var updated = Math.round(list[i] * suArray[0] * 1000) / 1000;\n    spaceList.push(updated + suArray[1]);\n  }\n\n  return spaceList;\n}\n;\nfunction getSpacingMultiplier(spaceRatio, mq, spaceRatioCustom) {\n  var list = spaceRatioUnit[getValidResponsiveValue(spaceRatio, mq, false)];\n\n  if (list == '') {\n    //custom scale\n    list = getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio);\n  }\n\n  return list;\n}\n;\nfunction getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio) {\n  var array = [];\n\n  for (var i = 0; i < spaceRatioUnit[1].length; i++) {\n    array[i] = getSpacingValidResponsiveValueCustomRatio(spaceRatioCustom[i], mq, spaceRatio);\n  }\n\n  return array;\n}\n;\nfunction getSpacingValidResponsiveValueCustomRatio(spaceArray, index, spaceRatio) {\n  if (index == 0) return spaceArray[0];\n  var item = spaceArray[index];\n\n  if (item !== false && item !== '' && spaceRatio[index] == 6) {\n    //item defined and space ratio set to custom\n    return item;\n  } else {\n    return getSpacingValidResponsiveValueCustomRatio(spaceArray, index - 1, spaceRatio);\n  }\n}\n;\nfunction getSpaceRatioCustom(obj) {\n  var arr = [];\n\n  for (var i = 0; i < 11; i++) {\n    arr.push(Object.values(obj[i]));\n  }\n\n  return arr;\n}\n;\nfunction loadButtonsStyle(buttons) {\n  //convert obj to array;\n  var buttonsArray = getButtonsArrayStyle(buttons['style']);\n  var btnsList = ['btn', 'btn--primary', 'btn--subtle', 'btn--accent', 'btn--disabled', 'btn--sm', 'btn--md', 'btn--lg'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      code = '';\n\n  for (var i = 0; i < btnsList.length; i++) {\n    code = code + buttonsCodeStyle(buttonsArray[btnsList[i]], btnsList[i], statusList, statusPriorityList, false, true);\n  } // get code for btn--icon\n\n\n  var btnIconCode = buttonIconCodeStyle(buttonsArray['btn']); // get code for button variables\n\n  var btnVariables = buttonVariables(buttonsArray);\n  loadButtonsStyleTag(btnVariables + code + btnIconCode);\n}\n;\nfunction loadButtonsStyleStyleGuide(buttons) {\n  // buttonsArray = buttons['btnStyle']\n  if (!buttons['btnStyle']) return '';\n  var buttonsArray = buttons['btnStyle']; // button-icon class\n\n  var btnIconCode = '';\n\n  if (buttonsArray['btn']) {\n    btnIconCode = buttonIconCodeStyle(buttonsArray['btn']);\n  } // button CSS variables\n\n\n  var btnVariables = buttonVariables(buttonsArray); // buttons style\n\n  var btnsList = ['btn', 'btn--primary', 'btn--subtle', 'btn--accent', 'btn--disabled', 'btn--sm', 'btn--md', 'btn--lg'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      btnStyle = ''; // default btns style\n\n  for (var i = 0; i < btnsList.length; i++) {\n    btnStyle = btnStyle + buttonsCodeStyle(buttonsArray[btnsList[i]], btnsList[i], statusList, statusPriorityList, false, true);\n  } // custom btns code\n\n\n  if (buttons['customBtns'] && buttons['customBtns'].length > 0) {\n    for (var i = 0; i < buttons['customBtns'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(buttonsArray[buttons['customBtns'][i][1]], buttons['customBtns'][i][0], statusList, statusPriorityList, false, true);\n    }\n  }\n\n  return btnVariables + btnStyle + btnIconCode;\n}\n;\nfunction loadSharedStyleStyleGuide(shared_style) {\n  var statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      btnStyle = '';\n\n  if (shared_style['customStyles'] && shared_style['customStyles'].length > 0) {\n    for (var i = 0; i < shared_style['customStyles'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(shared_style.customStyleArray[shared_style['customStyles'][i][1]], escapeCSScharacters(shared_style['customStyles'][i][0]), statusList, statusPriorityList, false);\n    }\n  }\n\n  if (shared_style['customTextStyles'] && shared_style['customTextStyles'].length > 0) {\n    for (var i = 0; i < shared_style['customTextStyles'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(shared_style.customTextStyleArray[shared_style['customTextStyles'][i][1]], escapeCSScharacters(shared_style['customTextStyles'][i][0]), statusList, statusPriorityList, false);\n    }\n  }\n\n  return btnStyle;\n}\n;\nfunction escapeCSScharacters(label) {\n  label = label.replace(/\\:/g, '\\\\:');\n  label = label.replace(/\\%/g, '\\\\%');\n  label = label.replace(/\\//g, '\\\\/');\n  return label;\n}\n;\nfunction loadButtonsDefaultStyle(mq) {\n  var btnsStyle = ':root {--btn-font-size: 1em;--btn-padding-x: var(--space-sm); --btn-padding-y: var(--space-xxs); -btn-radius: 0.25em;}.btn {line-height: 1.2;box-shadow: var(--shadow-xs);-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;transition: .2s; will-change: transform;}.btn:hover {cursor: pointer;box-shadow: var(--shadow-sm);}.btn:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-contrast-higher-h), var(--color-contrast-higher-s), var(--color-contrast-higher-l), 0.15);outline: none;}.btn:active {transform: translateY(2px);}.btn--primary {background-color: var(--color-primary);color: var(--color-white)}.btn--primary:hover {background-color: var(--color-primary-dark);}.btn--primary:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-primary-h), var(--color-primary-s), var(--color-primary-l), 0.2);}.btn--subtle {background-color: var(--color-contrast-lower);color: var(--color-contrast-higher);}.btn--accent {background-color: var(--color-accent);color: var(--color-white);}.btn--accent:hover {background-color: var(--color-accent-dark);}.btn--accent:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-accent-h), var(--color-accent-s), var(--color-accent-l), 0.2);}.btn--disabled, .btn[disabled], .btn[readonly] {opacity: 0.6;cursor: not-allowed;}.btn--sm{font-size: 0.8em;}.btn--md{font-size: 1.2em;}.btn--lg{font-size: 1.4em;}';\n  loadButtonsStyleTag(btnsStyle);\n}\n;\nfunction buttonVariables(btnStyle) {\n  var sizes = [['btn', ''], ['btn--sm', '-sm'], ['btn--md', '-md'], ['btn--lg', '-lg']];\n  var string = '';\n\n  for (var i = 0; i < sizes.length; i++) {\n    if (btnStyle[sizes[i][0]] && btnStyle[sizes[i][0]]['none'] && btnStyle[sizes[i][0]]['none']['typography']) {\n      var fontBase = getButtonsFontSizeValue(btnStyle[sizes[i][0]]['none']['typography']);\n      if (fontBase != '') string = string + '--btn-font-size' + sizes[i][1] + ':' + fontBase + ';';\n    }\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['padding'] && btnStyle['btn']['none']['padding'][1]) {\n    string = string + '--btn-padding-x:' + getButtonsPaddingValue(btnStyle['btn']['none']['padding'][1]) + ';';\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['padding'] && btnStyle['btn']['none']['padding'][0]) {\n    string = string + '--btn-padding-y:' + getButtonsPaddingValue(btnStyle['btn']['none']['padding'][0]) + ';';\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['appearance']) {\n    if (btnStyle['btn']['none']['appearance'][2]) {\n      string = string + '--btn-radius:' + btnStyle['btn']['none']['appearance'][2] + ';';\n    } else {\n      string = string + '--btn-radius: 0em;';\n    }\n  }\n\n  return ':root{' + string + '}';\n}\n;\nfunction loadButtonsStyleTag(style) {\n  var styleEl = '<style id=\"buttons-style\">' + style + '</style>';\n  var baseStyle = $('#cd-base-part-1');\n  $(styleEl).insertAfter(baseStyle); // $('head').append(styleEl);\n}\n;\nfunction loadFormsStyle(forms) {\n  var formsArray = getButtonsArrayStyle(forms['style']);\n  var formsList = ['form-control', '[disabled]', '[aria-invalid]', 'legend', 'form-label'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      code = '';\n  code = resetFormsStyleComponents();\n\n  for (var i = 0; i < formsList.length; i++) {\n    code = code + buttonsCodeStyle(formsArray[formsList[i]], formsList[i], statusList, statusPriorityList, true);\n  } // get code for form variables\n\n\n  var btnVariables = formVariables(formsArray['form-control']);\n  loadFormsStyleTag(btnVariables + code);\n}\n;\nfunction loadFormsStyleStyleGuide(form) {\n  // form elements style\n  if (!form['btnStyle']) return '';\n  var formsArray = form['btnStyle'];\n  var formsList = ['form-control', '[disabled]', '[aria-invalid]', 'legend', 'form-label'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      formStyle = '';\n\n  for (var i = 0; i < formsList.length; i++) {\n    formStyle = formStyle + buttonsCodeStyle(formsArray[formsList[i]], formsList[i], statusList, statusPriorityList, true);\n  } // get code for form variables\n\n\n  var formCSSVariables = formVariables(formsArray['form-control']);\n  return formStyle + formCSSVariables;\n}\n;\nfunction formVariables(formStyle) {\n  var string = '';\n\n  if (formStyle && formStyle['none'] && formStyle['none']['padding'] && formStyle['none']['padding'][1]) {\n    string = string + '--form-control-padding-x:' + getButtonsPaddingValue(formStyle['none']['padding'][1]) + ';';\n  }\n\n  if (formStyle && formStyle['none'] && formStyle['none']['padding'] && formStyle['none']['padding'][0]) {\n    string = string + '--form-control-padding-y:' + getButtonsPaddingValue(formStyle['none']['padding'][0]) + ';';\n  }\n\n  if (formStyle && formStyle['none'] && formStyle['none']['appearance']) {\n    if (formStyle['none']['appearance'][2]) {\n      string = string + '--form-control-radius:' + formStyle['none']['appearance'][2] + ';';\n    } else {\n      string = string + '--form-control-radius: 0em;';\n    }\n  }\n\n  return ':root{' + string + '}';\n}\n;\nfunction loadFormsDefaultStyle(mq) {\n  var formStyle = ':root {--form-control-padding-x: var(--space-xs);--form-control-padding-y: var(--space-xxs);--form-control-radius: 0.25em;}.form-control {line-height: 1.2;background-color: var(--color-bg);border: 2px solid var(--color-contrast-low);transition: 0.2s;}.form-control:focus {border-color: var(--color-primary);box-shadow: 0px 0px 0px 2px hsla(var(--color-primary-h), var(--color-primary-s),var(--color-primary-l), 0.2);outline: none;}.form-control[aria-invalid=\"true\"], .form-control--error {border-color: var(--color-error);}.form-control[aria-invalid=\"true\"]:focus, .form-control--error:focus {border-color: var(--color-error);box-shadow: 0px 0px 0px 2px hsla(var(--color-error-h), var(--color-error-s),var(--color-error-l), 0.2);}.form-control--disabled, .form-control[disabled], .form-control[readonly] {cursor: not-allowed;}.form-label {font-size: var(--text-sm);}.form-legend{font-size: var(--text-md);}';\n  formStyle = formStyle + '.form-control::placeholder{opacity: 1;color: var(--color-contrast-medium);}';\n  loadFormsStyleTag(formStyle);\n}\n;\nfunction loadFormsStyleTag(style) {\n  var defaultStyle = '.form-error-msg {background-color: hsla(var(--color-error-h),var(--color-error-s), var(--color-error-l), 0.2);color: inherit;border-radius: var(--radius-md);padding: var(--space-xs);}';\n  var styleEl = '<style id=\"forms-style\">' + style + defaultStyle + '</style>';\n  var baseStyle = $('#cd-base-part-1');\n  $(styleEl).insertAfter(baseStyle); // $('head').append(styleEl);\n}\n;\nfunction boxShadowIsDefined(array) {\n  return array && array[0] && array[0][1] && array[0][1] != '';\n}\n;\nfunction getButtonsArrayStyle(obj) {\n  var array = [];\n\n  for (var property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      array[property] = [];\n\n      for (var subproperty in obj[property]) {\n        if (obj[property].hasOwnProperty(subproperty)) {\n          array[property][subproperty] = [];\n\n          for (var val in obj[property][subproperty]) {\n            if (obj[property][subproperty].hasOwnProperty(val)) {\n              if (val == 'border' || val == 'textShadow' || val == 'shadow' || val == 'transform' || val == 'transition') {\n                array[property][subproperty][val] = [];\n\n                for (var subVal in obj[property][subproperty][val]) {\n                  if (obj[property][subproperty][val].hasOwnProperty(subVal)) {\n                    array[property][subproperty][val][subVal] = Object.values(obj[property][subproperty][val][subVal]);\n                  }\n                }\n              } else {\n                array[property][subproperty][val] = Object.values(obj[property][subproperty][val]);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return array;\n}\n;\nfunction buttonsCodeStyle(style, btnLabel, statusList, statusPriorityList, isDemoReset, isButton) {\n  var string = '';\n  if (!style) return string;\n  var btnLabelmodified = btnLabel;\n\n  if (btnLabel == '[disabled]') {\n    btnLabelmodified = 'form-control--disabled, .form-control[disabled], .form-control[readonly]';\n  } else if (btnLabel == '[aria-invalid]') {\n    btnLabelmodified = 'form-control[aria-invalid=\"true\"], .form-control--error';\n  } else if (btnLabel == 'legend') {\n    btnLabelmodified = 'form-legend';\n  } else if (btnLabel == 'btn--disabled') {\n    btnLabelmodified = 'btn--disabled, .btn[disabled], .btn[readonly]';\n  }\n\n  var btnHasTransform = isButton && buttonsHasTransformStyle(style, statusPriorityList);\n\n  for (var i = 0; i < statusPriorityList.length; i++) {\n    var styleLabel = i == 0 ? '.' + btnLabelmodified : setStatusList('.' + btnLabelmodified, statusPriorityList[i]);\n    var newCode = getButtonCode(style[statusPriorityList[i]], '', true, btnLabel, statusPriorityList[i], isDemoReset, btnHasTransform && i == 0);\n    newCode = newCode.trim();\n\n    if (newCode.slice(-1) == '}') {\n      string = string + styleLabel + '{' + newCode;\n    } else {\n      string = string + styleLabel + '{' + newCode + '}';\n    }\n  }\n\n  string = string.replace(/\\n/g, '');\n  return string;\n}\n;\nfunction setStatusList(label, status) {\n  // e.g., if label = '.form-control[aria-invalid=\"true\"], .form-control--error' and status = ':focus', return '.form-control[aria-invalid=\"true\"]:focus, .form-control--error:focus'\n  var labelArray = label.split(',');\n\n  if (labelArray.length == 1) {\n    return label + status;\n  } else {\n    var newLabel = '';\n\n    for (var i = 0; i < labelArray.length; i++) {\n      if (i > 0) newLabel = newLabel + ',';\n      newLabel = newLabel + labelArray[i] + status;\n    }\n\n    return newLabel;\n  }\n}\n;\nfunction buttonIconCodeStyle(btnStyle) {\n  var code = '';\n\n  if (btnStyle && btnStyle['none'] && btnStyle['none']['padding'] && btnStyle['none']['padding'][0] && btnStyle['none']['padding'][0] != 0) {\n    code = '.btn--icon {padding: ' + spacingArray[btnStyle['none']['padding'][0]] + ';}';\n  }\n\n  return code;\n}\n;\nfunction buttonsHasTransformStyle(style, priorityList) {\n  var hasTransform = false;\n\n  for (var i = 1; i < priorityList.length; i++) {\n    if (!style[priorityList[i]]) return;\n    var transform = style[priorityList[i]]['transform'];\n\n    if (transform.length > 1 || transform.length > 0 && transform[0][0] != 0) {\n      hasTransform = true;\n      break;\n    }\n  }\n\n  return hasTransform;\n}\n;\nfunction getButtonCode(array, spacing, reset, btnLabel, btnStatus, isDemoReset, btnHasTransform) {\n  var string = '';\n\n  for (var property in array) {\n    switch (property) {\n      case 'appearance':\n        string = string + getButtonsAppearanceStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'padding':\n        string = string + getButtonsPaddingStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'margin':\n        string = string + getButtonsMarginStyle(array[property], spacing, reset);\n        break;\n\n      case 'border':\n        string = string + getButtonsBorderStyle(array[property], spacing, reset);\n        break;\n\n      case 'typography':\n        string = string + getButtonsTypographyStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'textShadow':\n        string = string + getButtonsTextShadowStyle(array[property], spacing, reset);\n        break;\n\n      case 'shadow':\n        string = string + getButtonsShadowStyle(array[property], spacing, reset, isDemoReset);\n        break;\n\n      case 'outline':\n        string = string + getButtonsOutlineStyle(array[property], spacing, reset);\n        break;\n\n      case 'transform':\n        string = string + getButtonsTransformStyle(array[property], spacing, reset);\n        break;\n\n      case 'transition':\n        string = string + getButtonsTransitionStyle(array[property], spacing, reset);\n        break;\n\n      case 'placeholder':\n        string = string + getButtonsPlaceholderStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n    }\n  }\n\n  if (btnHasTransform) string = string + '\\n' + spacing + 'will-change: transform;';\n  return string;\n}\n;\nfunction getButtonsAppearanceStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n\n  if (array[0]) {\n    if (array[0].indexOf('--gradient-') > -1) {\n      string = string + '\\n' + spacing + getGradientBgStyle(array[0]);\n    } else {\n      string = string + '\\n' + spacing + 'background: ' + getColorValue(array[0], reset) + ';';\n    }\n  }\n\n  if (array[1]) string = string + '\\n' + spacing + 'color: ' + getColorValue(array[1], reset) + ';';\n\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {// for copy code -> no need to add border-radius in code -> css variables already set\n  } else {\n    if (array[7] && array[7] > 0) {\n      string = string + '\\n' + spacing + 'border-radius: ' + borderRadiusValues[array[7]] + ';';\n    } else if (array[2] && array[2] != '') {\n      string = string + '\\n' + spacing + 'border-radius: ' + array[2] + ';';\n    }\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'opacity: ' + array[3] + ';';\n  if (array[4] && array[4] != 0) string = string + '\\n' + spacing + 'cursor: ' + getCursorValue(array[4]) + ';';\n  return string;\n}\n;\nfunction getGradientBgStyle(label) {\n  var angle = label.indexOf('-right') > -1 ? '90deg' : '180deg',\n      niceLabel = label.replace('-right', '').replace('-bottom', '');\n  return 'background: linear-gradient(' + angle + ', var(' + niceLabel + '-stop-1), var(' + niceLabel + '-stop-2));';\n}\n;\nfunction getButtonsPaddingStyle(array, spacing, reset, btnLabel, btnStatus) {\n  //Y - X\n  // for copy code -> no need to add padding in code -> css variables already set\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) return '';\n  var string = '';\n  if (array.length < 1) return string;\n\n  if (array[0] != 0 && array[1] != 0) {\n    string = string + '\\n' + spacing + 'padding: ' + spacingArray[array[0]] + ' ' + spacingArray[array[1]] + ';';\n  } else {\n    if (array[0] != 0) string = string + '\\n' + spacing + 'padding-top: ' + spacingArray[array[0]] + ';\\n' + spacing + 'padding-bottom: ' + spacingArray[array[0]] + ';';\n    if (array[1] != 0) string = string + '\\n' + spacing + 'padding-left: ' + spacingArray[array[1]] + ';\\n' + spacing + 'padding-right: ' + spacingArray[array[1]] + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsPaddingValue(value) {\n  // setting css variables for copy code only\n  var padding = '';\n  if (value != 0) padding = spacingArray[value];\n  return padding;\n}\n;\nfunction getButtonsMarginStyle(array, spacing, reset) {\n  //top left right bottom\n  var string = '';\n  if (array.length < 1) return string;\n\n  if (array[0] != 0 && array[1] != 0 && array[2] != 0 && array[3] != 0) {\n    string = string + '\\n' + spacing + 'margin: ' + spacingArray[array[0]] + ' ' + spacingArray[array[2]] + ' ' + spacingArray[array[3]] + ' ' + spacingArray[array[1]] + ';';\n  } else {\n    if (array[0] != 0) string = string + '\\n' + spacing + 'margin-top: ' + spacingArray[array[0]] + ';';\n    if (array[1] != 0) string = string + '\\n' + spacing + 'margin-left: ' + spacingArray[array[1]] + ';';\n    if (array[2] != 0) string = string + '\\n' + spacing + 'margin-right: ' + spacingArray[array[2]] + ';';\n    if (array[3] != 0) string = string + '\\n' + spacing + 'margin-bottom: ' + spacingArray[array[3]] + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsBorderStyle(array, spacing, reset) {\n  var string = '',\n      colorVariables = '';\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][3] == 0) string = string + '\\n' + spacing + getBorderType(array[i][1]) + ': none;';else if (array[i][2] == '') {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][0], '--color-border' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      string = string + '\\n' + spacing + getBorderType(array[i][1]) + '-color: ' + variable[1] + ';';\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][0], '--color-border' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      string = string + '\\n' + spacing + getBorderType(array[i][1]) + ': ' + array[i][2] + ' ' + getBorderStyle(array[i][3]) + ' ' + variable[1] + ';'; // string = string + '\\n'+spacing+getBorderType(array[i][1])+': '+array[i][2]+' '+getBorderStyle(array[i][3])+' '+getColorValue(array[i][0], reset)+';';\n    }\n  }\n\n  return colorVariables + string;\n}\n;\nfunction getButtonsTypographyStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n  if (array[0]) string = string + '\\n' + spacing + 'font-family: var(' + fontArray[btnFontIds.indexOf(array[0])] + ');';\n\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {// for copy code -> no need to add font-size in code -> css variables already set\n  } else {\n    if (array[1] && array[1] != 0) {\n      var fontSize = array[1] == 9 ? array[2] : textArrayValues[array[1]];\n\n      if (btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {\n        if (btnLabel == 'btn') string = string + '\\n' + spacing + '--btn-font-size: ' + fontSize + ';';else string = string + '\\n' + spacing + '--form-control-font-size: ' + fontSize + ';';\n      } else {\n        string = string + '\\n' + spacing + 'font-size: ' + fontSize + ';';\n      }\n    }\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'font-weight: ' + array[3] + ';';\n  if (array[4] && array[4] != 0) string = string + '\\n' + spacing + 'text-transform: ' + getTextTransform(array[4]) + ';';\n  if (array[5] && array[5] != 0) string = string + '\\n' + spacing + 'text-decoration: ' + getTextDecoration(array[5]) + ';';\n  if (btnLabel == 'btn' && btnStatus == 'none' && (!array[5] || array[5] == 0)) string = string + '\\n' + spacing + 'text-decoration: none;';\n  if (array[6] && array[6] != '') string = string + '\\n' + spacing + 'line-height: ' + array[6] + ';';\n  if (array[7] && array[7] != '') string = string + '\\n' + spacing + 'letter-spacing: ' + array[7] + ';';\n\n  if (array[8] && array[8] != 0) {\n    if (reset && reset === true) {\n      string = string + '\\n' + spacing + getFontSmoothing();\n    } else {\n      string = string + '\\n' + spacing + '@include fontSmooth;';\n    }\n  }\n\n  return string;\n}\n;\nfunction getButtonsTextShadowStyle(array, spacing, reset) {\n  var string = '',\n      colorVariables = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'text-shadow: none;';\n      set = false;\n      break;\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][1], '--color-text-shadow' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      if (i > 0) string = string + ', ';\n      string = string + array[i][2] + ' ' + variable[1];\n      set = true;\n    }\n  }\n\n  if (set) string = colorVariables + '\\n' + spacing + 'text-shadow: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsShadowStyle(array, spacing, reset, isDemoReset) {\n  var string = '',\n      colorVariables = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'box-shadow: none;';\n      if (isDemoReset) string = '\\n' + spacing + 'box-shadow: none !important;';\n      set = false;\n      break;\n    } else if (array[i][3] > 1) {\n      // custom shadow with framework variables\n      if (i > 0) string = string + ', ';\n      string = string + shadowVariables[array[i][3]];\n      set = true;\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][1], '--color-shadow' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      if (i > 0) string = string + ', ';\n      string = string + getBoxShadowType(array[i][3]) + array[i][2] + ' ' + variable[1];\n      set = true;\n    }\n  }\n\n  if (set) {\n    // isDemoReset -> when loading forms for components, make sure to add important to box shadow to make sure the custom shadow is showed\n    if (isDemoReset) string = string + ' !important';\n    string = colorVariables + '\\n' + spacing + 'box-shadow: ' + string + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsOutlineStyle(array, spacing, reset) {\n  var string = '';\n\n  if (array[1] && array[1] != 0) {\n    if (array[1] == 8) string = string + '\\n' + spacing + 'outline: none;';else string = string + '\\n' + spacing + 'outline: ' + array[2] + ' ' + getOutlineStyle(array[1]) + ' ' + getColorValue(array[0], reset) + ';';\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'outline-offset: ' + array[3] + ';';\n  return string;\n}\n;\nfunction getButtonsTransformStyle(array, spacing, reset) {\n  var string = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 0) {\n      string = '\\n' + spacing + 'transform: none;';\n      break;\n    } else {\n      if (i > 0) string = string + ' ';\n      string = string + getTransformProperty(array[i][0]) + '(' + array[i][1] + ')';\n      set = true;\n    }\n  }\n\n  if (set) string = '\\n' + spacing + 'transform: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsTransitionStyle(array, spacing, reset) {\n  var string = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'transition: none;';\n      break;\n    } else {\n      if (i > 0) string = string + ', ';\n      string = string + getTransitionProperty(array[i][0]) + ' ' + array[i][1] + 's ' + getTransitionEase(array[i][2]);\n      if (array[i][3] != '') string = string + ' ' + array[i][3] + 's';\n      set = true;\n    }\n  }\n\n  if (set) string = '\\n' + spacing + 'transition: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsPlaceholderStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n  if (array.length < 1 || !array[0] || array[0] == '') return '';\n  var style = '\\n' + spacing + '  color: ' + getColorValue(array[0], reset) + ';';\n\n  if (reset && reset === true) {\n    string = string + '}';\n    var selector = '.' + btnLabel;\n    if (btnStatus != 'none') selector = selector + btnStatus;\n    string = string + selector + '::placeholder {\\n' + spacing + '  opacity: 1;' + spacing + style + '\\n' + spacing + '}';\n  } else {\n    string = string + '\\n\\n' + spacing + '&::placeholder {\\n' + spacing + '  opacity: 1;' + spacing + style + '\\n' + spacing + '}';\n  }\n\n  return string;\n}\n;\nfunction getButtonsFontSizeValue(array) {\n  var fontSize = '';\n\n  if (array[1] && array[1] != 0) {\n    fontSize = array[1] == 9 ? array[2] : textArrayValues[array[1]];\n  }\n\n  return fontSize;\n}\n;\nfunction resetFormsStyleComponents() {\n  var style = '';\n  style = style + '.form-legend {color: inherit;line-height: normal;}';\n  return style;\n}\n;\nfunction getSuffixOpacity(value) {\n  if (value == 0) return '-a00';\n  if (value < 10) return '-a0' + value;\n  return '-a' + value;\n}\n;\nfunction getLuminance(hsl, iframe) {\n  if (hsl[0] == 0 && hsl[1] == 0 && hsl[2] == 1) return 1; // white\n\n  if (hsl[0] == 0 && hsl[1] == 0 && hsl[2] == 0) return 0; // black\n\n  var rgbSr = getRGBsrValues(hsl, iframe);\n  return 0.2126 * rgbSr[0] + 0.7152 * rgbSr[1] + 0.0722 * rgbSr[2];\n}\n;\nfunction getRGBsrValues(value, iframe) {\n  var rgb = getRGBValues(value, iframe);\n  var rSr = rgb[0] <= 0.03928 ? rgb[0] / 12.92 : Math.pow((rgb[0] + 0.055) / 1.055, 2.4);\n  var gSr = rgb[1] <= 0.03928 ? rgb[1] / 12.92 : Math.pow((rgb[1] + 0.055) / 1.055, 2.4);\n  var bSr = rgb[2] <= 0.03928 ? rgb[2] / 12.92 : Math.pow((rgb[2] + 0.055) / 1.055, 2.4);\n  return [rSr, gSr, bSr];\n}\n;\nfunction getRGBValues(hsl, iframe) {\n  var rgb = getRGBfromHSL(hsl);\n  return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255];\n}\n;\nfunction getRGBfromHSL(hsl) {\n  return chroma.hsl(hsl).rgb();\n}\n;\nvar loadedIframeCheck = false; //select text of a contentEditable element\n\njQuery.fn.selectText = function () {\n  var doc = document;\n  var element = this[0];\n\n  if (doc.body.createTextRange) {\n    var range = document.body.createTextRange();\n    range.moveToElementText(element);\n    range.select();\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    var range = document.createRange();\n    range.selectNodeContents(element);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n};\n\nfunction initFontList(typography) {\n  fontArray = [''];\n  btnFontIds = [0];\n\n  for (var property in typography['fontFamilyLabels']) {\n    if (typography['fontFamilyLabels'].hasOwnProperty(property)) {\n      fontArray.push(typography['fontFamilyLabels'][property]);\n      btnFontIds.push(typography['fontFamilyIds'][property]);\n    }\n  }\n}\n;\n\n(function () {\n  var demoContainer = $('.js-cd-demo-container'),\n      demoViewport = $('.js-cd-demo-viewport-size'); //when double-clicking on variables -> select all text\n\n  demoContainer.on('dblclick', '.js-css-variable-label', function (event) {\n    $(event.currentTarget).selectText();\n  }); //detect click on iframe and send to main to close popups\n\n  var iframeParent = window.parent;\n\n  if (!iframeParent) {\n    iframeParent = parent;\n  }\n\n  if (iframeParent) {\n    $(window).on('click', function () {\n      if (iframeParent.closeActivePopups != null) iframeParent.closeActivePopups();\n    }); // detect shortcut for search modal\n\n    window.addEventListener('keydown', function (event) {\n      if (event.keyCode && event.keyCode == 69 || event.key && event.key.toLowerCase() == 'e') {\n        if (event.ctrlKey || event.metaKey) iframeParent.openSiteSearch();\n      }\n    });\n  } //detect resize of the page and reset iframe height\n\n\n  var resizing = false,\n      resizingID = false,\n      mqLabels = ['xs', 'sm', 'md', 'lg', 'xl'];\n\n  if (demoViewport.length > 0) {\n    window.addEventListener(\"resize\", function (event) {\n      if (!resizing) {\n        resizing = true;\n        window.requestAnimationFrame(updateLabelSizeWindow);\n      }\n    });\n  }\n\n  $('.js-cd-demo').on('globalsUpdate', function () {\n    updateComponentGlobals();\n  });\n  $('.js-cd-demo').on('showComponent', function () {\n    var compScript = $('#comp-script');\n\n    if (compScript) {\n      var newScript = compScript.clone();\n      newScript = compScript.attr('src', compScript.attr('data-src'));\n      newScript.removeAttr('data-src');\n      newScript.removeAttr('id');\n      newScript.insertBefore(compScript);\n    }\n\n    setTimeout(function () {\n      if (iframeParent) iframeParent.revealComponent();\n    }, 300);\n  });\n\n  function updateLabelSizeWindow() {\n    var mq = getMq(),\n        sizes = getScreenSize();\n\n    if (resizing) {\n      demoContainer.trigger('windowResizing');\n      var mqLabelText = mq > 0 ? ' (' + mqLabels[mq - 1] + ')' : '';\n      demoViewport.text(sizes[0] + 'px x ' + sizes[1] + 'px' + mqLabelText).show();\n      if (resizingID) clearInterval(resizingID);\n      resizingID = setTimeout(function () {\n        demoViewport.hide();\n      }, 1000);\n    }\n\n    resizing = false;\n  }\n\n  ;\n\n  function updateComponentGlobals() {\n    //components -> if there's a project set, we should listen for changes in the viewport width as well\n    //typography and spacing are the only responsive globals\n    if (projectLoaded && (projectLoaded.typography || projectLoaded.spacing)) {\n      window.addEventListener(\"resize\", function (event) {\n        if (!resizing) {\n          resizing = true;\n          window.requestAnimationFrame(updateGlobals);\n        }\n      });\n    }\n  }\n\n  ;\n\n  function updateGlobals() {\n    var mq = getMq();\n\n    if (mq == MQ) {\n      resizing = false;\n      return;\n    }\n\n    MQ = mq;\n\n    if (projectLoaded.typography && projectLoaded.typography !== '') {\n      //typography was saved and need to be modified\n      loadTypographyStyle(JSON.parse(decodeSafeURIComponent(projectLoaded.typography)), false, mq);\n    }\n\n    if (projectLoaded.spacing && projectLoaded.spacing !== '') {\n      //typography was saved and need to be modified\n      loadSpacingStyle(JSON.parse(decodeSafeURIComponent(projectLoaded.spacing)), mq);\n    }\n\n    resizing = false;\n  }\n\n  ;\n  loadedIframeCheck = true;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/config-custom-azuriom/page.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/config-custom-azuriom/change-color.js");
/******/ 	
/******/ })()
;