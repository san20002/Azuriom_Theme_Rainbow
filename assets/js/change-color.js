/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/config-custom-azuriom/change-color.js":
/*!**************************************************!*\
  !*** ./js/config-custom-azuriom/change-color.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar jsColors = __webpack_require__(/*! ./colors */ \"./js/config-custom-azuriom/colors.js\");\n\nvar jsPage = __webpack_require__(/*! ./page */ \"./js/config-custom-azuriom/page.js\");\n\nvar _require = __webpack_require__(/*! ./page */ \"./js/config-custom-azuriom/page.js\"),\n    loadColorDefaultStyle = _require.loadColorDefaultStyle,\n    loadGlobalsStyle = _require.loadGlobalsStyle;\n\nvar PROJECT;\nvar IS_LOGGED = 1;\nvar THEMES = window.THEMES;\nvar THEMES_LANG = window.THEMES_LANG;\naxios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\nfunction onIframeLoad(page, cb) {\n  console.log('%c ========================================================================', 'color: #0a49c7');\n\n  if (page.loadedIframeCheck && page.loadedIframeCheck == true) {\n    console.log('%c Theme color load by Latshow: https://discord.gg/QF2AtgHJXY -', 'color: #FFF; font-size: 15px');\n    setTimeout(function () {\n      cb();\n    }, 500);\n  } else {\n    window.onload = function () {\n      console.log('%c Theme color load Latshow: https://discord.gg/QF2AtgHJXY --', 'color: #0a49c7');\n      cb();\n    };\n  }\n\n  console.log('%c ========================================================================', 'color: #0a49c7');\n}\n\n;\n\n(function () {\n  axios({\n    url: '/admin/themes/' + THEMES + '/config',\n    method: 'GET',\n    dataType: 'json'\n  }).then(function (response) {\n    var getConfig;\n\n    if (typeof response.data === \"string\") {\n      if (response.data.split('<!DOCTYPE html>')[0].length >= 1) {\n        getConfig = JSON.parse(response.data.split('<!DOCTYPE html>')[0]);\n      } else {\n        location.reload();\n      }\n    } else {\n      getConfig = response.data;\n    }\n\n    if (getConfig.project.color_themes_data && getConfig.project.color_themes_data !== '') {\n      PROJECT = {\n        colors: getConfig.project.color_themes_data\n      };\n    } else {\n      PROJECT = {\n        colors: ''\n      };\n    }\n\n    window.PROJECT = PROJECT;\n  })[\"finally\"](function () {\n    PROJECT = window.PROJECT;\n    var dataFrame = jsPage;\n    onIframeLoad(dataFrame, function () {\n      dataFrame.loadGlobalsStyle(PROJECT);\n    });\n    setTimeout(function () {\n      $('.js-loader-color-theme').addClass('hide');\n      $('.btn-picto-color').addClass('show');\n    }, 500);\n  });\n  /**********************\n   Input Color component\n   ***********************/\n\n  this.ColorInput = function (element) {\n    this.element = element;\n    this.inputColorHex = $(this.element).find('.js-app-color-picker__hex').find('input');\n    this.inputPreview = $(this.element).find('.js-app-color-picker__color');\n    this.inputColor = this.inputPreview.find('input');\n    this.inputColorSupported = inputColorSupported();\n    this.appColorSidebar = $(this.element).parents('.js-app-sidebar--globals');\n    this.hexValue = this.inputColorHex.val();\n    this.initColorInput();\n  };\n\n  ColorInput.prototype.initColorInput = function () {\n    var self = this; //hide/show element\n\n    this.inputColor.toggle(this.inputColorSupported); //listen to events\n    //color input - change\n\n    this.inputColor.on(\"input\", function (event) {\n      self.updateColor(event.target.value, true, true);\n    });\n    this.inputColor.on(\"change\", function (event) {\n      self.updateColor(event.target.value, true, true);\n    }); // text input - change -> hex\n\n    this.inputColorHex.on('focusout', function () {\n      if (self.hexValue == self.inputColorHex.val()) return;\n      self.updateColor($(this).val(), false, true);\n    });\n    this.inputColorHex.on('keyup', function (event) {\n      if (event.key === \"Enter\" && self.hexValue != self.inputColorHex.val()) {\n        self.updateColor($(this).val(), false, true);\n      }\n    });\n    $(this.element).on('update-picker', function (event, value) {\n      self.updateColor(chroma.hsl(value).hex(), false, false);\n    }); //this is triggered only by the contrast section in the colors global\n\n    $(this.element).on('update-contrast-picker', function (event, value1, value2) {\n      if ($(self.element).parents('.js-app-editor-section__bg-color-picker').length > 0) {\n        self.updateColor(chroma.hsl(value1).hex(), false, false);\n      } else if ($(self.element).parents('.js-app-editor-section__hc-color-picker').length > 0) {\n        self.updateColor(chroma.hsl(value2).hex(), false, false);\n      }\n    });\n  };\n\n  ColorInput.prototype.updateColor = function (color, bool, emitEvent) {\n    //first -> make sure no ; are inserted\n    color = color.replace(';', '');\n    var self = this;\n\n    if (color.indexOf('(') < 0 && color.indexOf('#') < 0) {\n      this.inputPreview.css('background-color', '#' + color);\n    } else {\n      this.inputPreview.css('background-color', color);\n    }\n\n    this.inputColorHex.val(color);\n    this.hexValue = color; //need to update the color preview next to the input element\n\n    if (!bool) {\n      this.inputColor.val(chroma(color).hex());\n    }\n\n    if (emitEvent && this.appColorSidebar.length > 0) {\n      this.appColorSidebar.trigger('color-picker-updated', [getHslFromHex(color), $(self.element)]);\n    }\n  };\n\n  function inputColorSupported() {\n    var colorInput = $('<input type=\"color\" value=\"!\" />')[0];\n    return colorInput.type === 'color' && colorInput.value !== '!';\n  }\n\n  ; //initialize the Modal objects\n\n  var colorInputs = document.getElementsByClassName('js-color-picker');\n\n  if (colorInputs.length > 0) {\n    for (var i = 0; i < colorInputs.length; i++) {\n      (function (i) {\n        new ColorInput(colorInputs[i]);\n      })(i);\n    }\n  }\n  /************************/\n\n  /* \tcolor selection popup */\n\n  /************************/\n\n\n  this.ColorSelection = function (element) {\n    this.element = element;\n    this.basicSwatches = $(this.element).find('.js-app-menu__color-swatches');\n    this.variationsSwatches = $(this.element).find('.js-app-menu__color-variations');\n    this.stateA = $(this.element).find('.js-app-menu__state-a');\n    this.stateB = $(this.element).find('.js-app-menu__state-b');\n    this.stateBCustomOpacity = this.stateB.find('.js-app-menu__color-custom-opacity');\n    this.customOpacityInput = this.stateBCustomOpacity.find('input');\n    this.primaryColors = []; //this is an array of 5 colors\n\n    this.accentColors = []; //this is an array of 5 colors\n\n    this.blackColors = []; //this is a color string\n\n    this.whiteColors = []; //this is a color string\n\n    this.contrastColors = []; //this is an array of 5 elements\n\n    this.warningColors = []; //this is an array of 5 elements\n\n    this.successColors = []; //this is an array of 5 elements\n\n    this.errorColors = []; //this is an array of 5 elements\n\n    this.opacities = [];\n    this.colorGroups = $('.js-app-editor-property__color-group'); //some default states\n\n    this.mainColorLabels = ['primary', 'accent', 'success', 'warning', 'error'];\n    this.mainColorVariationLabel = ['-lighter', '-light', '', '-dark', '-darker'];\n    this.customColorLabels = [];\n    this.contrastColorVariationLabel = ['-bg', '-contrast-lower', '-contrast-low', '-contrast-medium', '-contrast-high', '-contrast-higher'];\n    this.contrastVariations = getColorContrastPercentages();\n    this.gradientColorLabels = []; // this will have 'primary', 'secondary'\n\n    this.gradientColorIds = []; // this will have 'custom-0', 'custom-1'\n    // gradient sections\n\n    this.gradients = $(this.element).find('.js-app-menu__color-item--gradients');\n    this.gradientSwatches = this.gradients.find('.js-app-menu__color-swatch');\n    this.colorValues = []; //I'm going to pass this to the buttons object -> list of color values\n\n    this.loadPreset();\n    this.eventListener();\n  };\n\n  ColorSelection.prototype.loadPreset = function () {\n    //you should load this from the db\n    //for now just static\n    if (PROJECT && PROJECT.colors) {\n      this.initColorsFromProject();\n    } else {\n      this.initColors();\n    }\n\n    this.initColorValues();\n    this.initUiColors();\n  };\n\n  ColorSelection.prototype.initColors = function () {\n    this.primaryColors = getDefaultMainColorVariation('primary');\n    this.accentColors = getDefaultMainColorVariation('accent');\n    this.warningColors = getDefaultMainColorVariation('warning');\n    this.successColors = getDefaultMainColorVariation('success');\n    this.errorColors = getDefaultMainColorVariation('error');\n    this.blackColors = [getHslFromHex('#1c1c21')];\n    this.whiteColors = [getHslFromHex('#ffffff')];\n    this.contrastColors = getContrastVariation('#35373b', '#FFFFFF', this.contrastVariations);\n  };\n\n  ColorSelection.prototype.initColorsFromProject = function () {\n    var colors = JSON.parse(PROJECT.colors);\n    this.mainColorLabels = Object.values(colors['mainColorLabels']);\n    if (colors['customColorLabels']) this.customColorLabels = Object.values(colors['customColorLabels']);\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      var obj = colors[this.mainColorLabels[i]];\n      if (!this[this.mainColorLabels[i] + 'Colors']) this[this.mainColorLabels[i] + 'Colors'] = [];\n\n      for (var j = 0; j < 5; j++) {\n        this[this.mainColorLabels[i] + 'Colors'].push(Object.values(obj[0][j]));\n      }\n    }\n\n    for (var i = 0; i < 3; i++) {\n      if (colors['blackColors'][0][i]) this.blackColors.push(Object.values(colors['blackColors'][0][i]));\n      if (colors['whiteColors'][0][i]) this.whiteColors.push(Object.values(colors['whiteColors'][0][i]));\n    }\n\n    for (var i = 0; i < 6; i++) {\n      this.contrastColors.push(Object.values(colors['contrastColors'][0][i]));\n    } // init gradient colors\n\n\n    if (colors['gradientColorLabels']) this.gradientColorLabels = Object.values(colors['gradientColorLabels']);\n    if (colors['gradientColorIds']) this.gradientColorIds = Object.values(colors['gradientColorIds']);\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      var obj = colors[this.gradientColorIds[i] + 'Gradients'];\n      this[this.gradientColorIds[i] + 'Gradients'] = [];\n\n      for (var j = 0; j < 2; j++) {\n        this[this.gradientColorIds[i] + 'Gradients'].push(Object.values(obj[0][j]));\n      }\n    }\n  };\n\n  ColorSelection.prototype.initColorValues = function () {\n    this.colorValues['not-specified'] = '';\n    this.colorValues['transparent'] = 'transparent';\n    this.colorValues['inherit'] = 'inherit'; //main + custom colors\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      for (var j = 0; j < this.mainColorVariationLabel.length; j++) {\n        this.colorValues['--color-' + this.mainColorLabels[i] + this.mainColorVariationLabel[j]] = getHslaFromHsl(this[this.mainColorLabels[i] + 'Colors'][j], 1);\n      }\n    } //black\n\n\n    for (var i = 0; i < this.blackColors.length; i++) {\n      this.colorValues['--color-black' + this.mainColorVariationLabel[2 - i]] = getHslaFromHsl(this.blackColors[i], 1);\n    } //white\n\n\n    for (var i = 0; i < this.whiteColors.length; i++) {\n      this.colorValues['--color-white' + this.mainColorVariationLabel[2 + i]] = getHslaFromHsl(this.whiteColors[i], 1);\n    } //contrasts\n\n\n    for (var i = 0; i < this.contrastColorVariationLabel.length; i++) {\n      this.colorValues['--color' + this.contrastColorVariationLabel[i]] = getHslaFromHsl(this.contrastColors[i], 1);\n    } // gradients\n\n\n    for (var i = 0; i < this.gradientColorLabels.length; i++) {\n      this.colorValues['--gradient-' + this.gradientColorLabels[i] + '-stop-1'] = getHslaFromHsl(this[this.gradientColorIds[i] + 'Gradients'][0], 1);\n      this.colorValues['--gradient-' + this.gradientColorLabels[i] + '-stop-2'] = getHslaFromHsl(this[this.gradientColorIds[i] + 'Gradients'][1], 1);\n    }\n  };\n\n  ColorSelection.prototype.initUiColors = function () {\n    this.initMainSwatches();\n    this.initBWSwatches();\n    this.initContrastSwatches();\n    this.initGradientSwatches();\n  };\n\n  ColorSelection.prototype.initMainSwatches = function () {\n    var mainSwatch = this.basicSwatches.filter('[data-colors=\"main\"]'),\n        children = mainSwatch.children('li');\n\n    for (var i = 0; i < 2; i++) {\n      children.eq(i).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + this.mainColorLabels[i]] + ';').attr('data-item', '--color-' + this.mainColorLabels[i]);\n    }\n\n    var clonesText = this.initCustomColorSwatches(children.eq(0), false);\n    mainSwatch.append(clonesText);\n    var feedbackSwatch = this.basicSwatches.filter('[data-colors=\"feedback\"]'),\n        children = feedbackSwatch.children('li');\n\n    for (var i = 0; i < 3; i++) {\n      var j = 2;\n      if (this.mainColorLabels[i + 2] == 'success') j = 0;\n      if (this.mainColorLabels[i + 2] == 'warning') j = 1;\n      children.eq(j).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + this.mainColorLabels[i + 2]] + ';').attr('data-item', '--color-' + this.mainColorLabels[i + 2]);\n    }\n\n    var feedbackCloneText = this.initCustomColorSwatches(children.eq(0), true);\n    feedbackSwatch.append(feedbackCloneText);\n  };\n\n  ColorSelection.prototype.initCustomColorSwatches = function (item, isFeedback) {\n    var clonesText = '';\n\n    if (this.mainColorLabels.length > 5) {\n      var clone = item.clone().removeClass('app-menu__color-preview--selected');\n\n      for (var i = 5; i < this.mainColorLabels.length; i++) {\n        if (isFeedback && this.mainColorLabels[i].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[i].indexOf('custom-fdb') < 0) {\n          clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + this.mainColorLabels[i]] + ';').attr('data-item', '--color-' + this.mainColorLabels[i]);\n          clone.children('.js-app-menu__color-tooltip').text(this.customColorLabels[i - 5]);\n          clonesText = clonesText + clone[0].outerHTML;\n        }\n      }\n    }\n\n    return clonesText;\n  };\n\n  ColorSelection.prototype.initBWSwatches = function () {\n    var bwSwatch = this.basicSwatches.filter('[data-colors=\"b&w\"]'),\n        children = bwSwatch.children('li');\n    children.eq(0).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-black'] + ';').attr('data-item', '--color-black');\n    children.eq(1).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-white'] + ';').attr('data-item', '--color-white');\n  };\n\n  ColorSelection.prototype.initContrastSwatches = function () {\n    var contrastSwatch = this.basicSwatches.filter('[data-colors=\"contrast\"]'),\n        children = contrastSwatch.children('li');\n\n    for (var i = 0; i < this.contrastColorVariationLabel.length; i++) {\n      children.eq(i).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color' + this.contrastColorVariationLabel[i]] + ';').attr('data-item', '--color' + this.contrastColorVariationLabel[i]);\n    }\n  };\n\n  ColorSelection.prototype.initGradientSwatches = function () {\n    var html = '';\n\n    for (var i = 0; i < this.gradientColorLabels.length; i++) {\n      for (var j = 0; j < 2; j++) {\n        var direction = j == 0 ? 'right' : 'bottom';\n        var swatch = this.gradientSwatches.eq(j).clone().removeClass('is-hidden');\n        swatch.find('.js-app-menu__color-tooltip').text('--gradient-' + this.gradientColorLabels[i] + ' (' + direction + ')');\n        swatch.find('.js-app-menu__color-preview').attr('style', getGradientsBgColor(this.gradientColorLabels[i], this.colorValues, j)).attr('data-item', '--gradient-' + this.gradientColorLabels[i] + '-' + direction);\n        html = html + swatch[0].outerHTML;\n      }\n    }\n\n    this.gradients.find('.js-app-menu__color-swatches').html(html);\n  };\n\n  ColorSelection.prototype.eventListener = function () {\n    var self = this; //listen to click on color-preview -> also need to show correct color selection\n\n    $(self.element).on('open-color-selector', function (event, target) {\n      // toggle gradients visibility\n      self.gradients.toggleClass('is-hidden', !(target.hasClass('js-app-editor-color-preview--bg') && self.gradientColorLabels.length > 0));\n\n      if (!$(self.element).hasClass('app-menu--is-hidden')) {// self.checkOpacity(false); //click on input when another one was open\n      }\n\n      var top = target.offset().top + 30;\n      if (top + 300 > $(window).height()) top = $(window).height() - 300;\n      $(self.element).removeClass('app-menu--is-hidden').css('top', top);\n      self.selectInitialColor(target.attr('style').replace('background-color', '').replace(';', '').replace(':', '').trim(), target);\n    }); //switch from state b to state a\n\n    self.stateB.on('click', '.js-app-menu', function (event) {\n      $(self.element).removeClass('app-menu--state-b');\n    }); //listen to selection of color in popup - state a\n\n    self.stateA.on('click', '.js-app-menu__color-preview', function (event) {\n      var isSelected = $(event.target).hasClass('app-menu__color-preview--selected');\n      self.clickOnColorSectionA($(event.target), isSelected, isSelected);\n    }); //listen to selection of color in popup - state b - variations\n\n    self.variationsSwatches.on('click', '.js-app-menu__color-preview', function (event) {\n      self.selectNewColor($(event.target), $(event.target).hasClass('app-menu__color-preview--selected'), true);\n    }); //listen to focusout -> close popup\n\n    $(self.element).on('close-color-selection', function (event) {\n      // \t//check if opacity need to be added\n      if ($(self.element).hasClass('app-menu--is-hidden')) return;\n      $(self.element).addClass('app-menu--is-hidden'); // \tself.checkOpacity(false);\n    }); //listen to new opacity included - keydown to update bg/enter to add dot\n\n    checkEndTyping(self.customOpacityInput, function () {\n      // var percentage = parseInt(self.customOpacityInput.val().replace('%', '')),\n      // \topacityLabel = getOpacitySuffix(percentage),\n      var opacityLabel = self.getOpInputForSelection(),\n          mainColorLabel = self.stateB.find('.app-menu__color-preview--selected').attr('data-item'),\n          mainColor = mainColorLabel + opacityLabel;\n      var cssVariable = mainColor;\n\n      if (mainColorLabel.indexOf('custom-') > -1) {\n        cssVariable = self.stateB.find('.app-menu__color-preview--selected').next('.js-app-menu__color-tooltip').text() + opacityLabel;\n      } // $('.js-app-sidebar-editor--buttons').trigger('new-opacity-created', [cssVariable, getNewOpacity(self.colorValues[mainColorLabel], percentage)]);\n\n\n      $('.js-app-sidebar-editor--buttons').trigger('new-color-selection', [mainColor, true]);\n    });\n    this.customOpacityInput.on('focusout', function () {\n      var opacityValue = self.customOpacityInput.val(),\n          resetOpacity = getPercentageFormat(opacityValue);\n      if (opacityValue != resetOpacity) self.customOpacityInput.val(resetOpacity);\n    });\n  }; //click on preview in stata a of popup, used when loading initial color as well\n\n\n  ColorSelection.prototype.clickOnColorSectionA = function (target, isSelected, isStateBSet) {\n    var section = target.parents('.js-app-menu__color-swatches').eq(0).attr('data-colors');\n    this.stateA.find('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');\n    target.addClass('app-menu__color-preview--selected');\n\n    if (!isSelected) {\n      // need to get opacity values as well\n      var opacity = this.getOpInputForSelection();\n      var color = target.attr('data-item');\n      if (color.indexOf('--gradient-') > -1) opacity = '';\n      this.sendColorSelection(color + opacity);\n    }\n\n    if (section == \"default\" || section == \"gradients\") {\n      $(this.element).removeClass('app-menu--state-b');\n      this.stateB.find('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');\n      return;\n    }\n\n    $(this.element).addClass('app-menu--state-b');\n    this.showStateB(target, section, isStateBSet);\n  };\n\n  ColorSelection.prototype.selectNewColor = function (target, isSelcted, sendColorSelection) {\n    if (isSelcted) return;\n    target.addClass('app-menu__color-preview--selected').parent().siblings().children('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');\n\n    if (sendColorSelection) {\n      var opacity = this.getOpInputForSelection();\n      var color = target.attr('data-item');\n      if (color.indexOf('--gradient-') > -1) opacity = '';\n      this.sendColorSelection(color + opacity);\n    }\n  };\n\n  ColorSelection.prototype.getOpInputForSelection = function () {\n    return getOpInputForSelection(this.customOpacityInput.val());\n  };\n\n  ColorSelection.prototype.selectInitialColor = function (color, target) {\n    var states = [false, false, false],\n        stateAColor,\n        stateBColor = false,\n        stateCColor = false;\n\n    if (color == 'undefined') {\n      stateAColor = this.stateA.find('.js-app-menu__color-preview').eq(0);\n    } else {\n      var colorName = target.attr('data-color-lb').split('-');\n      states = this.getAllStatesColor(colorName);\n      stateAColor = this.stateA.find('[data-item=\"' + states[0] + '\"]');\n    }\n\n    this.clickOnColorSectionA(stateAColor, true, false);\n    stateBColor = states[1] ? this.stateB.find('[data-item=\"' + states[1] + '\"]') : false; //trigger click on stateBcolor -> without sending update color\n\n    if (stateBColor) this.selectNewColor(stateBColor, false, false); //select opacity element\n\n    states[2] ? this.customOpacityInput.val(states[2].slice(-2) + '%') : this.customOpacityInput.val('100%');\n  };\n\n  ColorSelection.prototype.getAllStatesColor = function (color) {\n    var itemAName, itemBName, itemCName;\n\n    if (color[2] && color[2] == 'gradient') {\n      itemAName = '--gradient-' + color[3] + '-' + color[4];\n      return [itemAName, false, false];\n    }\n\n    if (color[3] && (color[3] == 'black' || color[3] == 'white')) {\n      itemAName = '--color-' + color[3];\n      nextItems = this.getStateBCColor(itemAName, color, 4);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && (color[3] == 'primary' || color[3] == 'accent' || color[3] == 'success' || color[3] == 'error' || color[3] == 'info' || color[3] == 'warning')) {\n      itemAName = '--color-' + color[3];\n      nextItems = this.getStateBCColor(itemAName, color, 4);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && color[3] == 'custom' && color[4] == 'fdb') {\n      itemAName = '--color-' + color[3] + '-' + color[4] + '-' + color[5];\n      nextItems = this.getStateBCColor(itemAName, color, 6);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && color[3] == 'custom') {\n      itemAName = '--color-' + color[3] + '-' + color[4];\n      nextItems = this.getStateBCColor(itemAName, color, 5);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && color[3] == 'bg') {\n      itemAName = '--color-bg';\n      itemBName = itemAName;\n      itemCName = color[4] ? itemBName + '-' + color[4] : false;\n    } else if (color[3] && color[3] == 'contrast') {\n      itemAName = '--color-' + color[3] + '-' + color[4];\n      itemBName = itemAName;\n      itemCName = color[5] ? itemBName + '-' + color[5] : false;\n    } else {\n      itemAName = color[0];\n    }\n\n    return [itemAName, itemBName, itemCName];\n  };\n\n  ColorSelection.prototype.getStateBCColor = function (itemAName, color, index) {\n    var itemBName, itemCName;\n\n    if (color[index] && (color[index] == 'light' || color[index] == 'lighter' || color[index] == 'dark' || color[index] == 'darker')) {\n      itemBName = itemAName + '-' + color[index];\n      itemCName = color[index + 1] ? itemBName + '-' + color[index + 1] : false;\n    } else {\n      itemBName = itemAName;\n      itemCName = color[index] ? itemBName + '-' + color[index] : false;\n    }\n\n    return [itemBName, itemCName];\n  };\n\n  ColorSelection.prototype.sendColorSelection = function (label) {\n    var sidebar = $('.js-app-sidebar-editor--buttons');\n\n    if (sidebar.length == 0) {\n      sidebar = $('.js-app-sidebar-editor--shared-styles');\n    }\n\n    sidebar.trigger('new-color-selection', [label, true]);\n  };\n\n  ColorSelection.prototype.showStateB = function (target, section, selected) {\n    var self = this;\n    if (selected) return;\n    var label = target.next().text();\n\n    switch (section) {\n      case 'main':\n        self.getVariationsMain(label, target.attr('data-item'));\n        break;\n\n      case 'b&w':\n        self.getVariationsBW(label);\n        break;\n\n      case 'contrast':\n        self.getVariationsContrast(label);\n        break;\n\n      default:\n        self.getVariationsMain(label, target.attr('data-item'));\n    }\n  };\n\n  ColorSelection.prototype.getVariationsMain = function (label, item) {\n    var value = item.replace('--color-', ''); //custom color\n\n    var clone = this.variationsSwatches.children('li').eq(0).clone(),\n        textClones = '';\n    clone.removeClass('app-menu__color-preview--selected').children('.js-app-menu__color-preview');\n\n    for (var i = 0; i < this.mainColorVariationLabel.length; i++) {\n      clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + value + this.mainColorVariationLabel[i]] + ';').attr('data-item', '--color-' + value + this.mainColorVariationLabel[i]).toggleClass('app-menu__color-preview--selected', i == 2);\n      clone.children('.js-app-menu__color-tooltip').text(label + this.mainColorVariationLabel[i]);\n      textClones = textClones + clone[0].outerHTML;\n    }\n\n    this.variationsSwatches.html(textClones);\n  };\n\n  ColorSelection.prototype.getVariationsBW = function (label) {\n    var clone = this.variationsSwatches.children('li').eq(0).clone(),\n        textClones = '';\n    clone.removeClass('app-menu__color-preview--selected').children('.js-app-menu__color-preview');\n\n    if (label == '--color-black') {\n      for (var i = 0; i < this.blackColors.length; i++) {\n        clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-black' + this.mainColorVariationLabel[2 - i]] + ';').attr('data-item', '--color-black' + this.mainColorVariationLabel[2 - i]).toggleClass('app-menu__color-preview--selected', i == 0);\n        clone.children('.js-app-menu__color-tooltip').text('--color-black' + this.mainColorVariationLabel[2 - i]);\n        textClones = textClones + clone[0].outerHTML;\n      }\n    } else {\n      for (var i = 0; i < this.whiteColors.length; i++) {\n        clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-white' + this.mainColorVariationLabel[2 + i]] + ';').attr('data-item', '--color-white' + this.mainColorVariationLabel[2 + i]).toggleClass('app-menu__color-preview--selected', i == 0);\n        clone.children('.js-app-menu__color-tooltip').text('--color-white' + this.mainColorVariationLabel[2 + i]);\n        textClones = textClones + clone[0].outerHTML;\n      }\n    }\n\n    this.variationsSwatches.html(textClones);\n  };\n\n  ColorSelection.prototype.getVariationsContrast = function (label) {\n    var clone = this.variationsSwatches.children('li').eq(0).clone();\n    clone.children('.js-app-menu__color-preview');\n    clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues[label] + ';').attr('data-item', label).addClass('app-menu__color-preview--selected');\n    clone.children('.js-app-menu__color-tooltip').text(label);\n    this.variationsSwatches.html(clone[0].outerHTML);\n  };\n\n  function getHslaFromHsl(hsl, opacity) {\n    return 'hsla(' + parseInt(hsl[0]) + ', ' + parseInt(hsl[1] * 100) + '%, ' + parseInt(hsl[2] * 100) + '%, ' + opacity + ')';\n  }\n\n  ;\n\n  function getNewOpacity(value, opacity) {\n    if (value) {\n      return value.replace('1)', (opacity / 100).toFixed(2) + ')');\n    }\n\n    return value;\n  }\n\n  ;\n\n  function sortNumber(a, b) {\n    return a - b;\n  }\n\n  ;\n\n  function checkEndTyping(input, cb) {\n    var typingTimer; //timer identifier\n\n    var doneTypingInterval = 400; //time in ms, 5 second for example\n    //on keyup, start the countdown\n\n    input.on('keyup', function () {\n      clearTimeout(typingTimer);\n      typingTimer = setTimeout(cb, doneTypingInterval);\n    }); //on keydown, clear the countdown\n\n    input.on('keydown', function () {\n      clearTimeout(typingTimer);\n    });\n  }\n\n  ;\n\n  function getOpInputForSelection(val) {\n    var opacity = '';\n    if (isNaN(parseInt(val))) return '';\n    if (parseInt(val) > 100) return '';\n    if (parseInt(val) != 100) opacity = '-a' + ('0' + val.replace('%', '')).slice(-2);\n    return opacity;\n  }\n\n  ;\n\n  function getGradientsBgColor(label, colorValues, direction) {\n    // label e.g. primary\n    // direction -> 0 right, 1 bottom\n    var angle = direction == 0 ? '90deg' : '180deg';\n    return 'background-image: linear-gradient(' + angle + ', ' + colorValues[\"--gradient-\" + label + \"-stop-1\"] + ', ' + colorValues[\"--gradient-\" + label + \"-stop-2\"] + ');';\n  }\n\n  ;\n  var colorSelection = document.getElementsByClassName('js-app-menu--color'),\n      colorSelectionObject;\n\n  if (colorSelection.length > 0) {\n    colorSelectionObject = new ColorSelection(colorSelection[0]);\n  }\n\n  function getPercentageFormat(value) {\n    var newVal = value;\n    if (isNaN(parseInt(newVal))) newVal = '100%';\n    if (parseInt(newVal) > 100) newVal = '100%';\n    if (newVal.indexOf('%') < 0) newVal = newVal + '%';\n    return newVal;\n  }\n\n  ;\n  /************************/\n\n  /* \tColors Interactions */\n\n  /************************/\n\n  this.Colors = function (element, bool) {\n    this.element = element; //set starting point\n\n    this.primaryColors = []; //this is an array of 5 colors\n\n    this.accentColors = []; //this is an array of 5 colors\n\n    this.downloadColors = []; //this is an array of 5 colors\n\n    this.blackColors = []; //this is a color string\n\n    this.whiteColors = []; //this is a color string\n\n    this.contrastColors = []; //this is an array of 5 elements\n\n    this.contrastPecentageColors = [];\n    this.infoColors = []; //this is an array of 5 elements\n\n    this.warningColors = []; //this is an array of 5 elements\n\n    this.successColors = []; //this is an array of 5 elements\n\n    this.errorColors = []; //this is an array of 5 elements\n\n    this.themes = [];\n    this.fontRendering = [];\n    this.colorLinks = []; //some default states\n    //this should include the custom colors, if user has already created them\n\n    this.mainColorLabels = ['primary', 'accent', 'download', 'info', 'warning', 'success', 'error'];\n    this.customColorLabels = [];\n    this.gradientColorLabels = []; // this will have 'primary', 'secondary'\n\n    this.gradientColorIds = []; // this will have 'custom-0', 'custom-1'\n\n    this.selectedColor = 'primary'; //store what color the user is interacting with (e.g., main, accent ...)\n\n    this.selectedTheme = 0; //used to get the color variations of black and white\n\n    this.blackVariations = [[0, 0], [0, 0.1], [0, 0.2]];\n    this.whiteVariations = [[0, 0], [0, -0.1], [0, -0.2]]; //contrast variations\n\n    this.contrastVariations = getColorContrastPercentages(); //store items\n\n    this.colorPicker = $(this.element).find('.js-color-picker'); //main colors\n\n    this.mainColorsSection = $(this.element).find('.js-app-editor--main-colors');\n    this.mainColorVariationsInput = $(this.element).find('.js-main-color-variation');\n    this.mainColorVariationsSidebar = $(this.element).find('.js-app-editor--main-colors'); //black&white\n\n    this.blackWhiteSection = $(this.element).find('.js-app-editor--black-white'); //contrast\n\n    this.contrastSection = $(this.element).find('.js-app-editor--contrast');\n    this.contrastInputs = this.contrastSection.find('.js-app-editor-section__contrast-inputs');\n    this.fontRenderingSection = this.contrastSection.find('.js-app-editor-section__font-rendering');\n    this.basicColorPicker = $(this.element).find('.js-app-editor-section__color-picker');\n    this.bgColorPicker = $(this.element).find('.js-app-editor-section__bg-color-picker');\n    this.hcColorPicker = $(this.element).find('.js-app-editor-section__hc-color-picker');\n    this.grColorPicker = $(this.element).find('.js-app-editor-section__gr-color-picker'); // i'll store also the subelements\n\n    this.grColorPickerItems = this.grColorPicker.find('.js-color-picker'); //check if the ui has been updated for that specific color variable\n\n    this.mainColorShown = '';\n    this.blackWhiteShown = '';\n    this.contrastShown = '';\n    this.gradientShown = '';\n    this.colorOpacities = []; //iframe\n\n    this.iframe = jsColors;\n    this.colorsLoaded = false;\n    if (bool) return; //check for the frame to be loaded\n\n    this.initFrame();\n    this.loadPreset();\n    this.eventListener(); //custom colors\n    //this.mainColorLabels = ['primary', 'accent', 'warning', 'success', 'error', 'custom-0']\n    //this.customColorLables = ['--color-secondary', ...]\n    //to access custom color -> this['custom-0Colors'][themeIndex]\n    //opacities -> this.colorOpacities['--color-custom-0'] = ['20', '40']\n  };\n\n  Colors.prototype.initFrame = function () {\n    var self = this; //listen for the onload event of the frame\n\n    onIframeLoad(jsPage, function () {\n      self.frameIsLoaded();\n    });\n  };\n\n  Colors.prototype.frameIsLoaded = function () {\n    var self = this;\n\n    if (self.colorsLoaded) {\n      loadProjectColorsForColors(this.iframe);\n      loadProjectTypographyForButtons(this.iframe);\n      loadProjectSpacingForButtons(this.iframe);\n      loadProjectButtonsForColors(this.iframe);\n      loadProjectFormsForColors(this.iframe);\n      self.updateColorsDemo(false);\n      self.updateColorLinks();\n    } else {\n      setTimeout(function () {\n        self.frameIsLoaded();\n      }, 100);\n    }\n  };\n\n  Colors.prototype.loadPreset = function () {\n    //this is the function that will retrieve saved data from the database\n    // if user has already created a color palette\n    // - load it - PROJECT.colors and PROJECT.color_opacities\n    // - update the Colors object\n    if (PROJECT && PROJECT.colors) {\n      this.initColorsFromProject(JSON.parse(PROJECT.colors));\n    } else {\n      //if not saved in the db\n      this.themes = ['Default'];\n      this.initColors(0);\n    }\n\n    this.setThemeColors();\n    this.colorsLoaded = true;\n  };\n\n  Colors.prototype.setThemeColors = function () {\n    var self = this; //this function should be used to update the sidebar inputs -> main colors/ contrast / black and white\n    //when a new team is selected (or even when the first team is loaded - if there are )\n    //reset the variables for ui update\n\n    this.mainColorShown = '';\n    this.blackWhiteShown = '';\n    this.contrastShown = '';\n    this.gradientShown = ''; //set colors now - should use one of the followings according to this.selectedColor\n\n    switch (self.selectedColor) {\n      case 'black':\n        self.setBlackWhite();\n        break;\n\n      case 'white':\n        self.setBlackWhite();\n        break;\n\n      case 'contrast':\n        self.setContrast();\n        break;\n\n      default:\n        if (self.selectedColor.indexOf('gr-custom') > -1) {\n          self.setGradient();\n        } else {\n          self.setMainColors();\n        }\n\n    }\n  };\n\n  Colors.prototype.initColors = function (index) {\n    //index -> theme index\n    //set main colors\n    // if you update this -> you'll need to update the same in the ColorSelection as well\n    this.primaryColors[index] = getDefaultMainColorVariation('primary');\n    this.accentColors[index] = getDefaultMainColorVariation('accent');\n    this.downloadColors[index] = getDefaultMainColorVariation('download');\n    this.infoColors[index] = getDefaultMainColorVariation('info');\n    this.warningColors[index] = getDefaultMainColorVariation('warning');\n    this.successColors[index] = getDefaultMainColorVariation('success');\n    this.errorColors[index] = getDefaultMainColorVariation('error'); //set black and white\n\n    this.blackColors[index] = [getHslFromHex('#1c1c21')];\n    this.whiteColors[index] = [getHslFromHex('#ffffff')]; //set contrast\n\n    this.contrastPecentageColors[index] = this.contrastVariations.slice(0);\n    this.contrastColors[index] = getContrastVariation('#35373b', '#FFFFFF', this.contrastPecentageColors[this.selectedTheme]);\n    this.fontRendering[index] = false;\n  };\n\n  Colors.prototype.initColorsFromProject = function (colors) {\n    // var colors = JSON.parse(PROJECT.colors);\n    this.themes = [];\n    this.mainColorLabels = [];\n    this.customColorLabels = [];\n    this.fontRendering = [];\n    this.themes = Object.values(colors['themes']);\n    this.mainColorLabels = Object.values(colors['mainColorLabels']);\n    if (colors['customColorLabels']) this.customColorLabels = Object.values(colors['customColorLabels']);\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      var obj = colors[this.mainColorLabels[i]];\n      this[this.mainColorLabels[i] + 'Colors'] = this.convColorToArr(obj);\n    }\n\n    this.blackColors = this.convColorToArr(colors['blackColors']);\n    this.whiteColors = this.convColorToArr(colors['whiteColors']);\n    this.contrastColors = this.convColorToArr(colors['contrastColors']);\n    this.contrastPecentageColors = this.convPerceToArr(colors['contrastPecentageColors']); // font smoothing\n\n    if (colors['fontRendering']) {\n      this.fontRendering = Object.values(colors['fontRendering']);\n    } else {\n      // if it was not defined -> set it to false\n      for (var i = 0; i < this.themes.length; i++) {\n        this.fontRendering[i] = false;\n      }\n    } // color links among themes\n\n\n    if (colors['colorLinks']) {\n      for (var color in colors['colorLinks']) {\n        if (colors['colorLinks'].hasOwnProperty(color)) {\n          this.colorLinks[color] = colors['colorLinks'][color];\n        }\n      }\n    } // init gradient colors\n\n\n    if (colors['gradientColorLabels']) this.gradientColorLabels = Object.values(colors['gradientColorLabels']);\n    if (colors['gradientColorIds']) this.gradientColorIds = Object.values(colors['gradientColorIds']);\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      var obj = colors[this.gradientColorIds[i] + 'Gradients'];\n      this[this.gradientColorIds[i] + 'Gradients'] = this.convColorToArr(obj);\n    }\n  };\n\n  Colors.prototype.convColorToArr = function (obj) {\n    var array = [];\n\n    for (var property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        var subArray = [];\n        var subObj = obj[property];\n\n        for (var property2 in subObj) {\n          if (subObj.hasOwnProperty(property2)) {\n            subArray.push(Object.values(subObj[property2]));\n          }\n        }\n\n        array.push(subArray);\n      }\n    }\n\n    return array;\n  };\n\n  Colors.prototype.convPerceToArr = function (obj) {\n    var array = [];\n\n    for (var property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        array.push(Object.values(obj[property]));\n      }\n    }\n\n    return array;\n  };\n\n  Colors.prototype.initThemeColors = function (index) {\n    //set new theme equal to default color theme\n    this.primaryColors[index] = this.primaryColors[0].slice(0);\n    this.accentColors[index] = this.accentColors[0].slice(0);\n    this.downloadColors[index] = this.downloadColors[0].slice(0);\n    this.infoColors[index] = this.infoColors[0].slice(0);\n    this.warningColors[index] = this.warningColors[0].slice(0);\n    this.successColors[index] = this.successColors[0].slice(0);\n    this.errorColors[index] = this.errorColors[0].slice(0);\n    this.blackColors[index] = this.blackColors[0].slice(0);\n    this.whiteColors[index] = this.whiteColors[0].slice(0);\n    this.contrastPecentageColors[index] = this.contrastPecentageColors[0].slice(0);\n    this.contrastColors[index] = this.contrastColors[0].slice(0);\n    this.fontRendering[index] = false; //init custom colors if any\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      if (this.mainColorLabels[i].indexOf('custom-') > -1) {\n        this[this.mainColorLabels[i] + 'Colors'][index] = this[this.mainColorLabels[i] + 'Colors'][0].slice();\n      }\n    }\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      this[this.gradientColorIds[i] + 'Gradients'][index] = this[this.gradientColorIds[i] + 'Gradients'][0].slice();\n    }\n  };\n\n  Colors.prototype.setBtnColorCustomNiceLabels = function () {\n    this.iframe.setBtnColorCustomNiceLabels(this.mainColorLabels, this.customColorLabels);\n  };\n\n  Colors.prototype.setBtnGradientNiceLabels = function () {\n    this.iframe.setBtnGradientNiceLabels(this.gradientColorLabels);\n  };\n\n  Colors.prototype.eventListener = function () {\n    var self = this; //this event is triggered when one of the colors in the left sidebar is selected\n\n    $(this.element).on('content-selected', function (event, type, target, index) {\n      if (target.indexOf('gradient') > -1) {\n        self.selectNewColor(type, '--gradient-' + self.gradientColorIds[self.gradientColorLabels.indexOf(target.replace('--gradient-', ''))]);\n      } else {\n        self.selectNewColor(type, target);\n      }\n    }); //this is triggered when one of the inputs of the main color is updated\n\n    listenToParentInput($(this.mainColorVariationsSidebar), function (event) {\n      self.colorUpdated($(event.currentTarget), 'main');\n    }); //this is triggered when one of the inputs of the black/white color is updated\n\n    listenToParentInput(this.blackWhiteSection, function (event) {\n      self.colorUpdated($(event.currentTarget), 'bw');\n    }); //this is triggered when one of the inputs of the contrast color is updated\n\n    listenToParentInput(this.contrastInputs, function (event) {\n      self.contrastColorUpdated($(event.currentTarget));\n      self.updateColorsDemo(true, 'contrast');\n    }); // this is triggered when the font rendering option is changed\n\n    this.fontRenderingSection.on('change', function (event) {\n      self.updateFontRendering(event.target.value);\n      self.updateColorsDemo(true, 'fontRendering');\n    }); //this event is triggered when the color picker is updated\n\n    $(this.element).on('color-picker-updated', function (event, color, pickerElem) {\n      //new color has been selected\n      if (self.selectedColor.indexOf('gr-custom') > -1) {\n        self.setGradient(color, pickerElem);\n      } else if (self.mainColorLabels.indexOf(self.selectedColor) > -1) {\n        //check if we are changing a main color\n        self.setMainColors(color);\n      } else if (self.selectedColor == 'white' || self.selectedColor == 'black') {\n        self.setBlackWhite(color);\n      } else {\n        self.setContrast(color, pickerElem);\n      }\n\n      self.updateColorsDemo(true, self.selectedColor);\n    }); //this event is triggered when a new theme is added in the left sidebar\n\n    $(this.element).on('content-switch-added', function (event, type, title) {\n      if (type != 'colors') return;\n      self.themes.push(title);\n      self.selectedTheme = self.themes.length - 1;\n      self.initThemeColors(self.selectedTheme);\n      self.setThemeColors();\n      self.updateColorsDemo(true);\n    }); //this event is triggered when a new theme is selected in the left sidebar\n\n    $(this.element).on('content-switch-selected', function (event, type, index) {\n      if (type != 'colors') return;\n      self.selectedTheme = index; //if this is the first time (theme was already create and retrieved from the database)\n      // you should make sure the initial colors are already set\n\n      self.setThemeColors();\n      self.updateColorsDemo(false);\n    }); //this event is triggered when a theme is edited in the left sidebar\n\n    $(this.element).on('content-switch-edited', function (event, type, index, title) {\n      if (type != 'colors') return;\n      if (self.themes[index] != title && IS_LOGGED == '1') SaveAlert.yes();\n      self.themes[index] = title;\n    }); //this event is triggered when a theme is deleted in the left sidebar\n\n    $(this.element).on('content-switch-deleted', function (event, type, index, selected) {\n      if (type != 'colors') return;\n      self.removeTheme(type, index, selected);\n      self.updateColorsDemo(true);\n    }); //black&white events\n    //add a new black or white variation\n\n    this.blackWhiteSection.on('click', '.js-btn-create', function (event) {\n      self.createBlackWhiteVariation();\n      self.blackWhiteSection.children().eq(0).removeClass('app-editor-section__title--hide-body');\n      self.updateColorsDemo(true, self.selectedColor);\n    }); //remove a black or white variation\n\n    this.blackWhiteSection.on('click', '.js-btn-delete', function (event) {\n      self.deleteBlackWhiteVariation($(event.currentTarget).parents('.js-app-editor__color-bw').index());\n      self.updateColorsDemo(true, self.selectedColor);\n    }); //custom colors and gradients\n    //a new custom color has been created\n\n    $(this.element).on('custom-content-added', function (event, type, title, customLabel) {\n      if (type != 'colors') return;\n      var isGradient = customLabel.indexOf('gradient') > -1;\n\n      if (isGradient) {\n        var colorCustomLabel = customLabel.replace('#gradient-', ''); //create this new color for each theme\n\n        self[colorCustomLabel + 'Gradients'] = [];\n        var gradientValue = self.getInitialGradient();\n\n        for (var i = 0; i < self.themes.length; i++) {\n          self[colorCustomLabel + 'Gradients'][i] = gradientValue;\n        }\n\n        self.gradientColorLabels.push(title.replace('--gradient-', ''));\n        self.gradientColorIds.push(colorCustomLabel);\n        self.selectNewColor(type, '--gradient-' + colorCustomLabel);\n        self.updateColorsDemoNewCustom(self[colorCustomLabel + 'Gradients'][self.selectedTheme], title, colorCustomLabel);\n      } else {\n        var colorCustomLabel = customLabel.replace('#color-', ''); //create this new color for each theme\n\n        self[colorCustomLabel + 'Colors'] = [];\n\n        for (var i = 0; i < self.themes.length; i++) {\n          self[colorCustomLabel + 'Colors'][i] = self.primaryColors[0];\n        } //push the label to the main color labels\n\n\n        self.mainColorLabels.push(colorCustomLabel);\n        self.customColorLabels.push(title); //store labels somewhere\n\n        self.selectNewColor(type, '--color-' + colorCustomLabel);\n        self.updateColorsDemoNewCustom(self[colorCustomLabel + 'Colors'][self.selectedTheme], title, colorCustomLabel);\n      }\n    }); //a custom color name has been updated\n\n    $(this.element).on('custom-content-edited', function (event, type, index, title, section) {\n      if (type != 'colors') return;\n\n      if (section.indexOf('gradient') > -1) {\n        self.gradientColorLabels[self.gradientColorIds.indexOf(section.replace('#gradient-', ''))] = title.replace('--gradient-', '');\n      } else {\n        self.customColorLabels[self.mainColorLabels.indexOf(section.replace('#color-', '')) - 5] = title;\n      }\n\n      self.updateColorsDemoEditCustom(section, title);\n    }); //a custom color has been removed\n\n    $(this.element).on('custom-content-removed', function (event, type, index, labelId) {\n      if (type != 'colors') return;\n\n      if (labelId.indexOf('gradient') > -1) {\n        var label = labelId.replace('#gradient-', ''),\n            indexColor = self.gradientColorIds.indexOf(label);\n        self.gradientColorLabels.splice(indexColor, 1);\n        self.gradientColorIds.splice(indexColor, 1);\n        self[label + 'Gradients'] = [];\n        self.updateColorsDemoRemoveCustom('gr-' + label); // remove color from color link array\n\n        if (self.colorLinks['gr-' + label]) self.colorLinks['gr-' + label] = false;\n      } else {\n        var label = labelId.replace('#color-', ''),\n            indexColor = self.mainColorLabels.indexOf(label);\n        self.mainColorLabels.splice(indexColor, 1);\n        self.customColorLabels.splice(indexColor - 5, 1);\n        self[label + 'Colors'] = [];\n        self.updateColorsDemoRemoveCustom(label); // remove color from color link array\n\n        if (self.colorLinks[label]) self.colorLinks[label] = false;\n      }\n    }); // this event is triggered when the link button is clicked inside the color demo\n\n    $(this.element).on('updateColorLink', function (event, section, bool) {\n      if (section.indexOf('gradient') > -1) {\n        self.colorLinks[section.replace('#gradient-', 'gr-')] = bool; // e.g.self.colorLinks['gr-custom-0']\n      } else {\n        self.colorLinks[section.replace('#color-', '')] = bool;\n      }\n    });\n  };\n\n  Colors.prototype.getInitialGradient = function () {\n    var primary = this.primaryColors[0][2],\n        newHsl = primary[0] < 310 ? primary[0] + 50 : primary[0] - 50;\n    return [primary, [newHsl, primary[1], primary[2]]];\n  };\n\n  Colors.prototype.selectNewColor = function (type, target) {\n    if (type != 'colors') return;\n\n    if (target.indexOf('--color-black') > -1 || target.indexOf('--color-white') > -1) {\n      this.selectedColor = target.replace('--color-', '');\n      this.resetSidebarSections('black-white');\n      this.setBlackWhite();\n    } else if (target.indexOf('--color-') > -1) {\n      // this is a main color -> update it\n      this.selectedColor = target.replace('--color-', '');\n      this.resetSidebarSections('main');\n      this.setMainColors();\n    } else if (target.indexOf('--gradient-') > -1) {\n      this.selectedColor = target.replace('--gradient', 'gr'); // e.g., 'gr-custom-0'\n\n      this.resetSidebarSections('gradient');\n      this.setGradient();\n    } else {\n      // this is color contrast\n      this.selectedColor = 'contrast';\n      this.resetSidebarSections('contrast');\n      this.setContrast();\n    }\n  }; //TODO refacto class\n\n\n  Colors.prototype.resetSidebarSections = function (section) {\n    this.mainColorsSection.add(this.blackWhiteSection).add(this.contrastSection).add(this.basicColorPicker).add(this.bgColorPicker).add(this.hcColorPicker).add(this.grColorPicker).addClass('app-section--is-hidden');\n\n    switch (section) {\n      case 'black-white':\n        this.blackWhiteSection.add(this.basicColorPicker).removeClass('app-section--is-hidden');\n        break;\n\n      case 'contrast':\n        this.contrastSection.add(this.bgColorPicker).add(this.hcColorPicker).removeClass('app-section--is-hidden');\n        break;\n\n      case 'gradient':\n        this.grColorPicker.removeClass('app-section--is-hidden');\n        break;\n\n      default:\n        this.mainColorsSection.add(this.basicColorPicker).removeClass('app-section--is-hidden');\n    }\n  };\n\n  Colors.prototype.setMainColors = function (color) {\n    if (this.mainColorShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has not been set for this color yet\n      //or the color picker is being updated\n      this.mainColorShown = this.selectedColor;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        this.updateMultipleColorsInThemes(getMainColorVariation(color));\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; // this is used for main colors variation (primary/accent/secondary/warning/error/success)\n\n      for (var i = 0; i < 5; i++) {\n        this.setMainColor(colors[i], i);\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      this.colorPicker.trigger('update-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][2]]);\n    }\n  };\n\n  Colors.prototype.setBlackWhite = function (color) {\n    if (this.blackWhiteShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has ot been set for this color yet\n      this.blackWhiteShown = this.selectedColor;\n      var itemLength = this[this.selectedColor + 'Colors'][this.selectedTheme].length;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        this.updateMultipleColorsInThemes(this.getBlackWhiteVariation(color, itemLength)); // this[this.selectedColor+'Colors'][this.selectedTheme] = this.getBlackWhiteVariation(color, itemLength);\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; //first -> make sure there's the right number of inputs\n\n      this.checkBlackWhiteInputNumber(colors.length); // this is used for black/white colors variation\n\n      for (var i = 0; i < colors.length; i++) {\n        this.setBlackWhiteColor(colors[i], i);\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      //black and white -> main color is the first one\n      this.colorPicker.trigger('update-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][0]]);\n    }\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.updateMultipleColorsInThemes = function (value) {\n    if (this.colorLinks[this.selectedColor]) {\n      for (var i = 0; i < this.themes.length; i++) {\n        this[this.selectedColor + 'Colors'][i] = value;\n      }\n    } else {\n      this[this.selectedColor + 'Colors'][this.selectedTheme] = value;\n    }\n  };\n\n  Colors.prototype.setContrast = function (color, pickerElement) {\n    if (this.contrastShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has not been set for this color yet\n      //or the color picker is being updated\n      this.contrastShown = this.selectedColor;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        //first check if this is the bg or the hc color\n        var isBgColor = pickerElement.parents('.js-app-editor-section__bg-color-picker').length > 0;\n        var colorsScale = isBgColor ? [getHexFromHsl(color), getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][5])] : [getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][0]), getHexFromHsl(color)];\n        this[this.selectedColor + 'Colors'][this.selectedTheme] = getContrastVariation(colorsScale[0], colorsScale[1], this.contrastPecentageColors[this.selectedTheme]);\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; // this is used for contrast colors variation\n\n      for (var i = 0; i < 6; i++) {\n        this.setContrastColor(colors[i], this.contrastPecentageColors[this.selectedTheme][i], i);\n      }\n\n      this.updateFontRendering(false);\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      this.colorPicker.trigger('update-contrast-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][0], this[this.selectedColor + 'Colors'][this.selectedTheme][5]]);\n    }\n  };\n\n  Colors.prototype.setGradient = function (color, pickerElement) {\n    var gradientId = this.selectedColor.replace('gr-', '');\n\n    if (this.gradientShown.indexOf(gradientId) < 0 || color) {\n      //the ui has not been set for this color yet\n      this.gradientShown = gradientId;\n\n      if (color) {\n        var index = pickerElement.parents('.js-app-editor-section__gr-color-picker--stop-1').length > 0 ? 0 : 1;\n\n        if (this.colorLinks['gr-' + gradientId]) {\n          for (var i = 0; i < this.themes.length; i++) {\n            this[gradientId + 'Gradients'][i][index] = color;\n          }\n        } else {\n          this[gradientId + 'Gradients'][this.selectedTheme][index] = color;\n        }\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      //black and white -> main color is the first one\n      this.grColorPickerItems.eq(0).trigger('update-picker', [this[gradientId + 'Gradients'][this.selectedTheme][0]]);\n      this.grColorPickerItems.eq(1).trigger('update-picker', [this[gradientId + 'Gradients'][this.selectedTheme][1]]);\n    }\n  };\n\n  Colors.prototype.updateFontRendering = function (value) {\n    if (value) {\n      this.fontRendering[this.selectedTheme] = value;\n    }\n\n    !this.fontRendering[this.selectedTheme] ? this.fontRenderingSection.find('select').val(0) : this.fontRenderingSection.find('select').val(this.fontRendering[this.selectedTheme]);\n  };\n\n  Colors.prototype.checkBlackWhiteInputNumber = function (length) {\n    var wrappers = this.blackWhiteSection.find('.js-app-editor__color-bw');\n    if (wrappers.length == length) return;\n\n    if (wrappers.length < length) {\n      this.createBlackWhiteInputs(Number(length - wrappers.length));\n    } else {\n      this.removeBlackWhiteInputs(Number(wrappers.length - length));\n    }\n  };\n\n  Colors.prototype.createBlackWhiteInputs = function (number) {\n    var input = this.blackWhiteSection.find('.js-app-editor__color-bw').eq(0),\n        append = '';\n\n    for (var i = 0; i < number; i++) {\n      var clone = input.clone();\n      clone.removeClass('app-editor__color-item--locked app-editor__color-item--labelled').addClass('app-editor__color-item--removable');\n      append = append + clone[0].outerHTML;\n    }\n\n    this.blackWhiteSection.children('.js-app-editor-section__body').append(append);\n    this.blackWhiteInputsResetLabelClass();\n  };\n\n  Colors.prototype.removeBlackWhiteInputs = function (number) {\n    var inputs = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        tot = inputs.length;\n\n    for (var i = 0; i < number; i++) {\n      var index = tot - i - 1;\n      inputs.eq(index).remove();\n    }\n\n    this.blackWhiteInputsResetLabelClass();\n  };\n\n  Colors.prototype.blackWhiteInputsResetLabelClass = function () {\n    var inputs = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        lastItem = inputs.length - 1;\n    inputs.removeClass('app-editor__color-item--labelled').eq(lastItem).addClass('app-editor__color-item--labelled');\n  };\n\n  Colors.prototype.colorUpdated = function (target, type) {\n    //get the index of the color\n    var colorWrapper = target.parents('.js-main-color-variation'),\n        index = Number(colorWrapper.attr('data-order')),\n        inputs = colorWrapper.find('.js-hsl-color-input');\n    if (type == 'bw') index = target.parents('.js-app-editor__color-bw').index(); //update the array of colors\n\n    if (this.colorLinks[this.selectedColor]) {\n      var colorItems = type == 'bw' ? target.parents('.js-app-editor--variations-wrapper').eq(0).find('.js-app-editor__color-bw') : target.parents('.js-app-editor--variations-wrapper').eq(0).find('.js-main-color-variation');\n      this.updateColorVariationsInThemes(colorItems);\n    } else {\n      this[this.selectedColor + 'Colors'][this.selectedTheme][index] = [Number(inputs.eq(0).val()), convertStringToHsl(inputs.eq(1).val()), convertStringToHsl(inputs.eq(2).val())];\n    } //update the color preview\n\n\n    if (type == 'bw') {\n      this.setBlackWhiteColor(this[this.selectedColor + 'Colors'][this.selectedTheme][index], index);\n      this.updateColorsDemo(true);\n    } else {\n      this.setMainColor(this[this.selectedColor + 'Colors'][this.selectedTheme][index], index);\n      this.updateColorsDemo(true);\n    }\n  };\n\n  Colors.prototype.updateColorVariationsInThemes = function (colors) {\n    for (var i = 0; i < colors.length; i++) {\n      var inputs = colors.eq(i).find('.js-hsl-color-input');\n      this.updateColorInThemes(inputs, i);\n    }\n  };\n\n  Colors.prototype.updateColorInThemes = function (inputs, index) {\n    var value = Number(inputs.eq(0).val()),\n        valueHSL1 = convertStringToHsl(inputs.eq(1).val()),\n        valueHSL2 = convertStringToHsl(inputs.eq(2).val());\n\n    for (var i = 0; i < this.themes.length; i++) {\n      this[this.selectedColor + 'Colors'][i][index] = [value, valueHSL1, valueHSL2];\n      this[this.selectedColor + 'Colors'][i][index] = [Number(value), Number(valueHSL1), Number(valueHSL2)];\n    }\n  };\n\n  Colors.prototype.contrastColorUpdated = function (target) {\n    var index = target.parents('.js-app-editor__contrast-item').index(),\n        value = parseInt(target.val().replace('%', ''));\n    value = value < 0 ? 0 : value;\n    value = value > 100 ? 100 : value;\n    this.newContrastColorScale(value, index);\n  };\n\n  Colors.prototype.getBlackWhiteVariation = function (hsl, length) {\n    var blackWhiteVariations = [];\n\n    for (var i = 0; i < length; i++) {\n      blackWhiteVariations.push([hsl[0], checkPercentage(hsl[1] + this[this.selectedColor + 'Variations'][i][0]), checkPercentage(hsl[2] + this[this.selectedColor + 'Variations'][i][1])]);\n    }\n\n    return blackWhiteVariations;\n  };\n\n  Colors.prototype.getBlackWhiteSingleVariation = function (hsl, index) {\n    return [hsl[0], checkPercentage(hsl[1] + this[this.selectedColor + 'Variations'][index][0]), checkPercentage(hsl[2] + this[this.selectedColor + 'Variations'][index][1])];\n  };\n\n  Colors.prototype.setMainColor = function (color, index) {\n    var hue = parseInt(color[0]),\n        sat = Math.round(color[1] * 100),\n        lig = Math.round(color[2] * 100);\n    var inputs = this.mainColorVariationsInput.eq(index).find('.js-hsl-color-input'),\n        preview = this.mainColorVariationsInput.eq(index).find('.js-color-preview');\n    inputs.eq(0).val(hue);\n    inputs.eq(1).val(sat);\n    inputs.eq(2).val(lig);\n    preview.css('background-color', 'hsl(' + hue + ', ' + sat + '%, ' + lig + '%)');\n  };\n\n  Colors.prototype.setBlackWhiteColor = function (color, index) {\n    //first need to check if input exists\n    var hue = parseInt(color[0]),\n        sat = Math.round(color[1] * 100),\n        lig = Math.round(color[2] * 100);\n    var inputWrapper = this.blackWhiteSection.find('.js-app-editor__color-bw').eq(index),\n        inputs = inputWrapper.find('input'),\n        preview = inputWrapper.find('.js-color-preview');\n    inputs.eq(0).val(checkHue(hue));\n    inputs.eq(1).val(sat);\n    inputs.eq(2).val(lig);\n    preview.css('background-color', 'hsl(' + hue + ', ' + sat + '%, ' + lig + '%)');\n  };\n\n  Colors.prototype.setContrastColor = function (color, percentage, index) {\n    var wrapper = this.contrastInputs.find('.js-app-editor__contrast-item').eq(index),\n        input = wrapper.find('input'),\n        preview = wrapper.find('.js-color-preview');\n    input.val(percentage);\n    preview.css('background-color', 'hsl(' + parseInt(color[0]) + ', ' + parseInt(color[1] * 100) + '%, ' + parseInt(color[2] * 100) + '%)');\n  };\n\n  Colors.prototype.createBlackWhiteVariation = function () {\n    //create new item and append it\n    var variations = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        tot = variations.length,\n        clone = variations.eq(0).clone();\n    clone.removeClass('app-editor__color-item--locked app-editor__color-item--labelled').addClass('app-editor__color-item--removable');\n    clone.find('input').removeAttr('disabled');\n    this.blackWhiteSection.children('.js-app-editor-section__body').append(clone); //get the color variarion\n\n    var color = this.getBlackWhiteSingleVariation(this[this.selectedColor + 'Colors'][this.selectedTheme][0], tot); //update the variable storing the variations\n\n    this[this.selectedColor + 'Colors'][this.selectedTheme].push(color); //update the color of the input and the preview\n\n    this.setBlackWhiteColor(color, tot); //reset the list with the proper label classes\n\n    this.blackWhiteInputsResetLabelClass(); //if two variation visible -> remove plus action\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.deleteBlackWhiteVariation = function (index) {\n    //remove item from dom\n    this.blackWhiteSection.find('.js-app-editor__color-bw').eq(index).remove(); //update object stored variables\n\n    this[this.selectedColor + 'Colors'][this.selectedTheme].splice(index, 1); //reset plus visibility\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.resetBWActionVisibility = function () {\n    var sectionTitle = this.blackWhiteSection.find('.app-editor-section__title');\n    this.blackWhiteSection.find('.js-app-editor__color-bw').length > 2 ? sectionTitle.removeClass('app-editor-section__title--create') : sectionTitle.addClass('app-editor-section__title--create');\n  };\n\n  Colors.prototype.newContrastColorScale = function (value, index) {\n    var wrapper = this.contrastInputs.find('.js-app-editor__contrast-item').eq(index),\n        input = wrapper.find('input'),\n        preview = wrapper.find('.js-color-preview');\n    var color0hex = getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][0]),\n        color5hex = getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][5]);\n    var scaleColors = chroma.bezier([color0hex, color5hex]).scale().colors(101);\n    this.contrastPecentageColors[this.selectedTheme][index] = value;\n    var color = scaleColors[value],\n        hsl = chroma(color).hsl(); //need to convert to hsl\n\n    this.contrastColors[this.selectedTheme][index] = [checkHue(hsl[0]), checkPercentage(hsl[1]), checkPercentage(hsl[2])];\n    input.val(value);\n    preview.css('background-color', color);\n  };\n\n  Colors.prototype.removeTheme = function (type, index, selected) {\n    //first -> remove theme from array of stored elements\n    this.themes.splice(index, 1);\n    this.primaryColors.splice(index, 1);\n    this.accentColors.splice(index, 1);\n    this.downloadColors.splice(index, 1);\n    this.infoColors.splice(index, 1);\n    this.warningColors.splice(index, 1);\n    this.successColors.splice(index, 1);\n    this.errorColors.splice(index, 1);\n    this.blackColors.splice(index, 1);\n    this.whiteColors.splice(index, 1);\n    this.contrastColors.splice(index, 1); //remove custom color as well\n\n    if (this.mainColorLabels.length > 5) {\n      for (var i = 5; i < this.mainColorLabels.length; i++) {\n        this[this.mainColorLabels[i] + 'Colors'].splice(index, 1);\n      }\n    } // remove custom gradients\n\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      this[this.gradientColorIds[i] + 'Gradients'].splice(index, 1);\n    } //if theme was selected -> select new theme\n\n\n    if (selected) {\n      this.selectedTheme = 0;\n      this.setThemeColors();\n    }\n  };\n\n  Colors.prototype.updateColorsDemo = function (bool, label) {\n    var index = this.selectedTheme; //getArray of custom colors\n\n    var customArray = [];\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      if (this.mainColorLabels[i].indexOf('custom-') > -1) {\n        //custom color -> push in array\n        customArray.push([this.mainColorLabels[i], this[this.mainColorLabels[i] + 'Colors'][index]]);\n      }\n    }\n\n    var gradientValues = [];\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      gradientValues.push(this[this.gradientColorIds[i] + 'Gradients'][index]);\n    }\n\n    this.iframe.updateIframeColors(this.primaryColors[index], this.accentColors[index], this.downloadColors[index], this.blackColors[index], this.whiteColors[index], this.successColors[index], this.errorColors[index], this.infoColors[index], this.warningColors[index], this.contrastColors[index], this.fontRendering[index], customArray, this.customColorLabels, this.gradientColorLabels, this.gradientColorIds, gradientValues, label);\n    if (IS_LOGGED == '1' && bool) SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorLinks = function () {\n    this.iframe.updateIframeColorLinks(this.colorLinks);\n  };\n\n  Colors.prototype.updateColorsDemoNewCustom = function (array, title, customLabel) {\n    this.iframe.updateIframeColorsNewColor(array, title, customLabel);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorsDemoRemoveCustom = function (customLabel) {\n    this.iframe.updateIframeColorsRemoveColor(customLabel);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorsDemoEditCustom = function (section, title) {\n    this.iframe.updateIframeColorsEditColor(section, title);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateCopyCode = function (code) {\n    var completeCode = '',\n        spacing = '';\n\n    for (var i = 0; i < this.themes.length; i++) {\n      if (i > 0) spacing = '  '; //start from default theme\n\n      var codeMain = this.createBlockForMainColors(i, spacing),\n          codeCustom = this.createBlockForCustomColors(i, spacing, false),\n          codeBW = this.createBlockForBWColors(i, spacing),\n          codeFeedback = this.createBlockForFeedbackColors(i, spacing),\n          codeFeedbackCustom = this.createBlockForCustomColors(i, spacing, true),\n          codeContrast = this.createBlockForContrastColors(i, spacing),\n          codeGradient = this.createBlockForGradients(i, spacing);\n      var codeFontRendering = this.createBlockForFontRendering(i, spacing);\n      var themeCode = codeMain + codeCustom + codeBW + codeFeedback + codeFeedbackCustom + codeContrast + codeGradient;\n\n      if (i == 0) {\n        //default theme\n        themeCode = ':root, [data-theme=\"default\"] {\\n' + themeCode + '}';\n        if (codeFontRendering != '') themeCode = themeCode + '\\n\\nbody, [data-theme=\"default\"] {\\n' + codeFontRendering + '}';\n      } else {\n        if (codeFontRendering != '') codeFontRendering = '\\n' + codeFontRendering;\n        themeCode = '@supports(--css: variables) {\\n  [data-theme=\"' + this.themes[i].toLowerCase() + '\"] {\\n' + themeCode + codeFontRendering + '  }\\n}';\n      }\n\n      completeCode = completeCode + themeCode;\n      if (i < this.themes.length - 1) completeCode = completeCode + '\\n\\n'; // if( i == 0 ) {\n      // \tcompleteCode = completeCode + '[data-theme] {\\n  background-color: var(--color-bg);\\n  color: var(--color-contrast-high);\\n}\\n\\n';\n      // }\n    } // before returngin code -> check if need to add bg-color classes\n\n\n    completeCode = completeCode + this.getBgColorClasses();\n    return completeCode; // return code;\n  };\n\n  Colors.prototype.createBlockForMainColors = function (themeIndex, spacing) {\n    var code = spacing + '  // main\\n',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    for (var j = 0; j < 2; j++) {\n      for (var i = 0; i < 5; i++) {\n        var colorIndex = 4 - i;\n        var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n            hslCode = getHslCssFromHsl(hsl);\n        code = code + spacing + '  @include defineColorHSL(--color-' + this.mainColorLabels[j] + shades[i] + ', ' + hslCode + ');' + '\\n';\n      }\n\n      code = code + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForCustomColors = function (themeIndex, spacing, isFeedback) {\n    var code = '',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    if (this.mainColorLabels.length > 5) {\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        var label = this.customColorLabels[j];\n\n        if (isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') < 0) {\n          for (var i = 0; i < 5; i++) {\n            var colorIndex = 4 - i;\n            var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n                hslCode = getHslCssFromHsl(hsl);\n            code = code + spacing + '  @include defineColorHSL(' + this.customColorLabels[j - 5] + shades[i] + ', ' + hslCode + ');' + '\\n';\n          }\n\n          code = code + '\\n';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getCustomColorClasses = function (isFeedback) {\n    var code = '';\n\n    if (this.mainColorLabels.length > 5) {\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        var label = this.customColorLabels[j];\n\n        if (isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') < 0) {\n          code = code + '.' + this.customColorLabels[j - 5].replace('--', '') + ' { color: var(' + this.customColorLabels[j - 5] + ');}';\n          code = code + '\\n';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getCustomGradientClasses = function () {\n    var code = '';\n\n    if (this.gradientColorLabels.length > 0) {\n      for (var j = 0; j < this.gradientColorLabels.length; j++) {\n        code = code + '.bg-gradient-' + this.gradientColorLabels[j].replace('--', '') + '-right { background-image: linear-gradient(90deg, var(--gradient-' + this.gradientColorLabels[j] + '-stop-1), var(--gradient-' + this.gradientColorLabels[j] + '-stop-2));}';\n        code = code + '\\n';\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForBWColors = function (themeIndex, spacing) {\n    var code = '',\n        shadesBlack = ['', '-light', '-lighter'],\n        shadesWhite = ['', '-dark', '-darker']; //black\n\n    for (var i = 0; i < this.blackColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.blackColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-black' + shadesBlack[i] + ', ' + hslCode + ');' + '\\n';\n    } //white\n\n\n    for (var i = 0; i < this.whiteColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.whiteColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-white' + shadesWhite[i] + ', ' + hslCode + ');' + '\\n';\n    } //need to add opacities as well\n\n\n    code = code + '\\n';\n    return code;\n  };\n\n  Colors.prototype.createBlockForFeedbackColors = function (themeIndex, spacing) {\n    var code = spacing + '  // feedback\\n',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    for (var j = 2; j < 5; j++) {\n      for (var i = 0; i < 5; i++) {\n        var colorIndex = 4 - i;\n        var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n            hslCode = getHslCssFromHsl(hsl);\n        code = code + spacing + '  @include defineColorHSL(--color-' + this.mainColorLabels[j] + shades[i] + ', ' + hslCode + ');' + '\\n';\n      } //need to add opacities as well\n\n\n      code = code + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForContrastColors = function (themeIndex, spacing) {\n    var code = spacing + '  // color contrasts\\n',\n        shades = ['bg', 'contrast-lower', 'contrast-low', 'contrast-medium', 'contrast-high', 'contrast-higher'];\n\n    for (var i = 0; i < this.contrastColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.contrastColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-' + shades[i] + ', ' + hslCode + ');' + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForGradients = function (themeIndex, spacing) {\n    if (!this.gradientColorLabels || this.gradientColorLabels.length < 1) return '';\n    var code = '\\n' + spacing + '  // gradients\\n',\n        stops = ['-stop-1', '-stop-2'];\n\n    for (var i = 0; i < this.gradientColorLabels.length; i++) {\n      var stop1 = getHslCssFromHsl(this[this.gradientColorIds[i] + 'Gradients'][themeIndex][0]),\n          stop2 = getHslCssFromHsl(this[this.gradientColorIds[i] + 'Gradients'][themeIndex][1]);\n      code = code + spacing + '  @include defineColorHSL(--gradient-' + this.gradientColorLabels[i] + stops[0] + ', ' + stop1 + ');' + '\\n';\n      code = code + spacing + '  @include defineColorHSL(--gradient-' + this.gradientColorLabels[i] + stops[1] + ', ' + stop2 + ');' + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForFontRendering = function (themeIndex, spacing) {\n    var code = '';\n\n    if (this.fontRendering[themeIndex] && Number(this.fontRendering[themeIndex]) == 1) {\n      code = spacing + '  // font rendering\\n' + spacing + '  -webkit-font-smoothing: antialiased;\\n' + spacing + '  -moz-osx-font-smoothing: grayscale;\\n';\n    } else if (this.fontRendering[themeIndex] && Number(this.fontRendering[themeIndex]) == 2) {\n      code = spacing + '  // font rendering\\n' + spacing + '  -webkit-font-smoothing: auto;\\n' + spacing + '  -moz-osx-font-smoothing: auto;\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getArrayToSave = function () {\n    var colorsArray = [];\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      //store main colors + feedback colors\n      colorsArray[this.mainColorLabels[i]] = this[this.mainColorLabels[i] + 'Colors'];\n    }\n\n    colorsArray['mainColorLabels'] = this.mainColorLabels;\n\n    if (this.customColorLabels.length > 0) {\n      colorsArray['customColorLabels'] = this.customColorLabels;\n    }\n\n    colorsArray['blackColors'] = this.blackColors;\n    colorsArray['whiteColors'] = this.whiteColors;\n    colorsArray['contrastPecentageColors'] = this.contrastPecentageColors;\n    colorsArray['contrastColors'] = this.contrastColors;\n\n    if (this.fontRendering && this.fontRendering.length == this.themes.length) {\n      colorsArray['fontRendering'] = this.fontRendering;\n    } else {\n      colorsArray['fontRendering'] = [];\n\n      for (var i = 0; i < this.themes.length; i++) {\n        if (this.fontRendering[i]) colorsArray['fontRendering'][i] = this.fontRendering[i];else colorsArray['fontRendering'][i] = false;\n      }\n    }\n\n    colorsArray['themes'] = this.themes;\n    colorsArray['colorLinks'] = this.colorLinks; // gradients\n\n    if (this.gradientColorLabels.length > 0) {\n      colorsArray['gradientColorLabels'] = this.gradientColorLabels;\n    }\n\n    if (this.gradientColorIds.length > 0) {\n      colorsArray['gradientColorIds'] = this.gradientColorIds;\n\n      for (var i = 0; i < this.gradientColorIds.length; i++) {\n        //store main colors + feedback colors\n        colorsArray[this.gradientColorIds[i] + 'Gradients'] = this[this.gradientColorIds[i] + 'Gradients'];\n      }\n    }\n\n    return colorsArray;\n  };\n\n  Colors.prototype.getOpacitiesArrayToSave = function () {\n    var opacitiesArray = [];\n    opacitiesArray = this.colorOpacities;\n    return opacitiesArray;\n  };\n\n  Colors.prototype.getBgColorClasses = function () {\n    var code = '';\n    var shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    if (this.mainColorLabels.length > 5) {\n      // start from bg\n      code = '\\n\\n// background color\\n';\n\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        for (var i = 0; i < shades.length; i++) {\n          code = code + '.bg-' + this.customColorLabels[j - 5].replace('--color-', '') + shades[i] + ' { background-color: alpha(var(' + this.customColorLabels[j - 5] + shades[i] + '), var(--bg-o, 1)); }';\n          code = code + '\\n';\n        }\n      }\n    }\n\n    if (this.gradientColorLabels.length > 0) {\n      // background gradient\n      code = this.mainColorLabels.length > 5 ? code + '\\n' : code + '\\n\\n';\n      code = code + '// background gradient';\n\n      for (var i = 0; i < this.gradientColorLabels.length; i++) {\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + ' { background-image: radial-gradient(var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-top { background-image: linear-gradient(0deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-right { background-image: linear-gradient(90deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-bottom { background-image: linear-gradient(180deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-left { background-image: linear-gradient(270deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n      }\n\n      if (this.mainColorLabels.length > 5) code = code + '\\n';\n    }\n\n    if (this.mainColorLabels.length > 5) {\n      // add borders\n      code = code + '\\n// border color';\n\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        for (var i = 0; i < shades.length; i++) {\n          code = code + '\\n.border-' + this.customColorLabels[j - 5].replace('--color-', '') + shades[i] + ' { border-color: alpha(var(' + this.customColorLabels[j - 5] + shades[i] + '), var(--bg-o, 1)); }';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  function loadProjectColors(iframe) {\n    if (PROJECT && PROJECT.colors && PROJECT.colors !== '') iframe.loadColorStyle(JSON.parse(PROJECT.colors));\n  }\n\n  function loadProjectTypographyForSpacing(iframe) {\n    if (PROJECT && PROJECT.typography && PROJECT.typography !== '') iframe.loadTypographyForSpacing(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.typography)), true);else iframe.loadTypographyForSpacing(false, true);\n  }\n\n  ;\n\n  function loadProjectTypographyForButtons(iframe) {\n    if (PROJECT && PROJECT.typography && PROJECT.typography !== '') iframe.loadTypographyForButtons(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.typography)), true);else iframe.loadTypographyForButtons(false, true);\n  }\n\n  ;\n\n  function loadProjectSpacingForButtons(iframe) {\n    if (PROJECT && PROJECT.spacing && PROJECT.spacing !== '') iframe.loadSpacingForButtons(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.spacing)), true);else iframe.loadSpacingForButtons(false, true);\n  }\n\n  ;\n\n  function loadProjectButtonsForForms(iframe) {\n    if (PROJECT && PROJECT.buttons && PROJECT.buttons !== '') iframe.loadButtonsForForms(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.buttons)), true);else iframe.loadButtonsForForms(false, true);\n  }\n\n  ;\n\n  function loadProjectButtonsForColors(iframe) {\n    if (PROJECT && PROJECT.buttons && PROJECT.buttons !== '') iframe.loadButtonsForColors(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.buttons)), true);else iframe.loadButtonsForColors(false, true);\n  }\n\n  ;\n\n  function loadProjectColorsForColors(iframe) {\n    if (PROJECT && PROJECT.colors && PROJECT.colors !== '') iframe.loadColorsForColors(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.colors)), true);\n  }\n\n  ;\n\n  function loadProjectFormsForColors(iframe) {\n    if (PROJECT && PROJECT.form && PROJECT.form !== '') iframe.loadFormForColors(JSON.parse(jsPage.decodeSafeURIComponent(PROJECT.form)), true);else iframe.loadFormForColors(false, true);\n  }\n\n  ;\n\n  function replaceEmpty(array) {\n    for (var i = 0; i < array.length; i++) {\n      if (array[i].length > 1) {\n        array[i] = replaceEmpty(array[i]);\n      } else {\n        if (array[i] == '') array[i] = false;\n      }\n    }\n\n    return array;\n  }\n\n  ;\n\n  function getColorContrastPercentages() {\n    return [0, 5, 17, 55, 89, 100];\n  }\n\n  ;\n\n  function getHslCssFromHsl(hsl) {\n    return Math.round(hsl[0]) + ', ' + Math.round(hsl[1] * 100) + '%, ' + Math.round(hsl[2] * 100) + '%';\n  }\n\n  ;\n\n  function getMainColorVariation(hsl) {\n    //used to get the main color variations starting from main color\n    var colorVariationsLogic = getMainColorVaraiationLogic(hsl);\n    var mainColorVariations = [];\n    hsl[0] = checkHue(hsl[0]);\n\n    for (var i = 0; i < 4; i++) {\n      mainColorVariations.push([hsl[0], checkPercentage(hsl[1] + colorVariationsLogic[i][0]), checkPercentage(hsl[2] + colorVariationsLogic[i][1])]);\n    }\n\n    mainColorVariations.splice(2, 0, hsl);\n    return mainColorVariations;\n  }\n\n  ;\n\n  function getMainColorVaraiationLogic(hsl) {\n    var lightVaraition = 0.1,\n        lightVaraitionS = 0.2;\n\n    if (hsl[2] > 0.8) {\n      lightVaraitionS = 1;\n      lightVaraition = parseFloat(((lightVaraitionS - hsl[2]) * 0.5).toFixed(2));\n    }\n\n    var darkVaraition = -0.1,\n        darkVaraitionS = -0.2;\n\n    if (hsl[2] < 0.2) {\n      darkVaraitionS = -hsl[2];\n      darkVaraition = parseFloat((-hsl[2] * 0.5).toFixed(2));\n    }\n\n    return [[0, lightVaraitionS], [0, lightVaraition], [0, darkVaraition], [0, darkVaraitionS]];\n  }\n\n  ;\n\n  function getContrastVariation(color1, color2, array) {\n    var contrastColorVariations = [];\n    var scaleColors = chroma.bezier([color1, color2]).scale().colors(101);\n\n    for (var i = 0; i < 6; i++) {\n      var index = array[i],\n          hsl = chroma(scaleColors[index]).hsl();\n      contrastColorVariations.push([checkHue(hsl[0]), checkPercentage(hsl[1]), checkPercentage(hsl[2])]);\n    }\n\n    return contrastColorVariations;\n  }\n\n  ;\n\n  function getDefaultMainColorVariation(type) {\n    var color = [];\n\n    switch (type) {\n      case 'accent':\n        color = [[282, 0.44, 0.27], [282, 0.44, 0.37], [282, 0.44, 0.47], [282, 0.44, 0.57], [282, 0.44, 0.67]];\n        break;\n\n      case 'download':\n        color = [[145, 0.63, 0.22], [145, 0.63, 0.32], [145, 0.63, 0.42], [145, 0.63, 0.52], [145, 0.63, 0.62]];\n        break;\n\n      case 'success':\n        color = [[94, 0.48, 0.74], [94, 0.48, 0.65], [94, 0.48, 0.56], [94, 0.48, 0.48], [94, 0.48, 0.42]];\n        break;\n\n      case 'warning':\n        color = [[46, 1, 0.80], [46, 1, 0.71], [46, 1, 0.61], [46, 1, 0.50], [46, 1, 0.47]];\n        break;\n\n      case 'error':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      case 'info':\n        color = [[204, 0.62, 0.27], [204, 0.62, 0.37], [204, 0.62, 0.47], [204, 0.62, 0.57], [204, 0.62, 0.67]];\n        break;\n\n      default:\n        // primary\n        color = [[204, 0.70, 0.33], [204, 0.70, 0.43], [204, 0.70, 0.53], [204, 0.70, 0.63], [204, 0.70, 0.73]];\n    }\n\n    return color;\n  }\n\n  ; //initialize the Colors objects\n\n  var colors = document.getElementsByClassName('js-app-sidebar-editor--colors'),\n      colorObject = [];\n  setTimeout(function () {\n    if (colors.length > 0) {\n      for (var i = 0; i < colors.length; i++) {\n        (function (i) {\n          colorObject.push(new Colors(colors[i]));\n        })(i);\n      }\n    }\n  }, 1000);\n  /************************/\n\n  /* \tInput Event Listening */\n\n  /************************/\n\n  function listenToParentInput(parent, callback) {\n    parent.on('focusout input', 'input', function (event) {\n      callback(event);\n    });\n    parent.on('keyup', 'input', function (event) {\n      if (event.key && event.key.toLowerCase() === \"enter\" || event.keyCode && event.keyCode === \"13\") {\n        callback(event);\n      }\n    });\n  }\n\n  ;\n\n  function listenToParentString(parent, string, callback) {\n    parent.on('focusout', string, function (event) {\n      callback(event);\n    });\n    parent.on('keypress', string, function (event) {\n      if (event.key && event.key.toLowerCase() === \"enter\" || event.keyCode && event.keyCode === \"13\") {\n        event.preventDefault();\n        callback(event);\n      }\n    });\n  }\n\n  ;\n  /************************/\n\n  /* \tSidebar Interaction */\n\n  /************************/\n  //content switch - eg, themes in Colors\n\n  var contentSwitch = $('.js-app-content-switch');\n\n  if (contentSwitch.length > 0) {\n    var contentType = contentSwitch.attr('data-global').toLowerCase(),\n        contentList = contentSwitch.find('.js-app-content-switch__group'),\n        appSidebar = $('.js-app-sidebar--globals'); //open/close list of content\n\n    contentSwitch.on('click', '.js-app-content-item', function (event) {\n      if (!$(event.target).is('.js-add-content') && $(event.target).parents('.js-add-content').length == 0) {\n        contentSwitch.toggleClass('app-content-switch--is-open');\n      }\n    }); //listen for the click on 'add' button - new content item has been created\n\n    contentSwitch.on('click', '.js-add-content', function (event) {\n      contentSwitch.addClass('app-content-switch--is-open');\n      var initialLabel = 'Untitled';\n      contentList.find('.app-content-item--is-selected').removeClass('app-content-item--is-selected app-content-item--is-editing').children('em').attr('contenteditable', 'false');\n      var newContentItem = getNewContentSwitch(initialLabel, contentList);\n      contentList.find('.app-content-item--is-selected').children('em').attr('contenteditable', 'true').selectText();\n      appSidebar.trigger('content-switch-added', [contentType, initialLabel]);\n    }); //new content item has been selected\n\n    contentList.on('click', 'li', function (event) {\n      var selectedItem = contentList.children('.app-content-item--is-selected');\n\n      if (!selectedItem.is($(event.currentTarget)) && $(event.target).parents('.js-content-item__cta--remove').length < 1 && !$(event.target).is('.js-content-item__cta--remove')) {\n        contentList.children('.app-content-item--is-selected').removeClass('app-content-item--is-selected app-content-item--is-editing').children('em').attr('contenteditable', 'false');\n        $(event.currentTarget).addClass('app-content-item--is-selected'); //need to take care of updating content somewhere else -> trigger event\n\n        appSidebar.trigger('content-switch-selected', [contentType, $(event.currentTarget).index()]);\n      }\n    });\n    contentList.on('dblclick', 'li', function (event) {\n      if ($(event.currentTarget).hasClass('js-app-content-item--default')) return;\n      $(event.currentTarget).addClass('app-content-item--is-editing').children('em').eq(0).attr('contenteditable', 'true').focus().selectText();\n    });\n    listenToParentString(contentList, 'li', function (event) {\n      if ($(event.originalEvent.target).is('.js-content-item__cta--edit')) return;\n      $(event.currentTarget).removeClass('app-content-item--is-editing').find('em').attr('contenteditable', 'false');\n      appSidebar.trigger('content-switch-edited', [contentType, $(event.currentTarget).index(), $(event.currentTarget).find('em').text()]);\n    }); //--check if we need to load more themes\n\n    if (colorObject && colorObject[0]) {\n      //we are on the colors global\n      if (colorObject[0].themes.length > 0) {\n        for (var i = 1; i < colorObject[0].themes.length; i++) {\n          var newContentItem = getNewContentSwitch(colorObject[0].themes[i], contentList);\n          newContentItem.removeClass('app-content-item--is-selected app-content-item--is-editing');\n        }\n      }\n    }\n  }\n\n  function getNewContentSwitch(label, contentList) {\n    var newContentItem = contentList.children('li').eq(0).clone();\n    newContentItem.removeClass('js-app-content-item--default').addClass('app-content-item--is-editable app-content-item--is-editing app-content-item--is-selected').children('em').text(label);\n    contentList.append(newContentItem);\n    return newContentItem;\n  } //content groups\n\n\n  var appContentGroup = $('.js-app-content__group');\n\n  if (appContentGroup.length > 0) {\n    var contentType = appContentGroup.attr('data-global').toLowerCase(),\n        appSidebar = $('.js-app-sidebar--globals'),\n        contentItems = appContentGroup.children('li'); //listen to the click on the arrows/entire element - open/close group\n\n    appContentGroup.on('click', '.js-app-content-item--group', function (event) {\n      if (!$(event.target).is('.js-btn-create') && $(event.target).parents('.js-btn-create').length == 0) {\n        $(event.currentTarget).toggleClass('app-content-item--show-children');\n      }\n    }); //select a new content\n\n    appContentGroup.on('click', '.js-app-content-item', function (event) {\n      var sharedStyle = false; // we are gonna use this for the shared styles global only\n\n      if (!$(event.currentTarget).hasClass('app-content-item--is-selected')) {\n        //element is not already selected\n        //do not select if the item is being removed (click on trash icon)\n        if ($(event.target).is('.js-content-item__cta--delete') || $(event.target).parents('.js-content-item__cta--delete').length > 0) return;\n        appContentGroup.find('.app-content-item--is-selected').removeClass('app-content-item--is-selected');\n        $(event.currentTarget).addClass('app-content-item--is-selected'); //need to take care of updating content somewhere else -> trigger event\n        //if the content is a custom one ->pass index to bjects as well\n\n        var itemIndex = $(event.currentTarget).hasClass('js-app-content-item--is-editable') ? $(event.currentTarget).index() : false;\n        var targetLabel = $(event.currentTarget).children('.app-content-item__text').text();\n\n        if (contentType == 'colors' && $(event.currentTarget).attr('data-section').indexOf('color-custom') > -1) {\n          targetLabel = $(event.currentTarget).attr('data-section').replace('#color', '--color');\n        }\n\n        appSidebar.trigger('content-selected', [contentType, targetLabel, itemIndex, sharedStyle]);\n      }\n    });\n  } //right sidebar - generic interactions\n\n\n  var rightAppSidebar = $('.js-app-sidebar--globals');\n\n  if (rightAppSidebar.length > 0) {\n    var colorSelect = $('.js-app-menu--color');\n    rightAppSidebar.on('click', '.js-app-editor-section__title', function (event) {\n      if ($(event.target).is('.js-app-editor-section__title-cta') || $(event.target).parents('.js-app-editor-section__title-cta').length > 0) return;\n      $(event.currentTarget).toggleClass('app-editor-section__title--hide-body');\n    }); //in the sidebar - show the mq tab clicking on the mq button\n\n    rightAppSidebar.on('click', '.js-btn-responsive-rules', function (event) {\n      appSidebarEnableMq($(event.currentTarget));\n    }); //in the sidebar - remove the mq tab/reset mq clicking on delete button\n\n    rightAppSidebar.on('click', '.js-app-delete-mq', function (event) {\n      appSidebarDisableMq($(event.currentTarget), true);\n    }); //in the sidebar - select a new mq clicking on  new mq tab\n\n    rightAppSidebar.on('click', '.js-app-editor-tabs__item', function (event) {\n      appSidebarSelectMq($(event.currentTarget), true);\n    }); //in the right sidebar -> click on the reset link to reset property to default status (e.g., buttons)\n\n    rightAppSidebar.on('click', '.js-app-editor-section__reset-link', function (event) {\n      //remove edited section\n      var selectedSection = $(event.currentTarget).parents('.js-app-editor-section'),\n          mqDelete = selectedSection.find('.js-app-delete-mq');\n      selectedSection.removeClass('app-editor-section--content-edited'); // if(mqDelete.length > 0) appSidebarDisableAndResetMq(mqDelete);\n      //trigger reset of variables in js objects\n\n      rightAppSidebar.trigger('reset-status', [selectedSection]);\n    }); //color preview object\n\n    rightAppSidebar.on('click', '.js-app-editor-color-preview', function (event) {\n      colorSelect.trigger('open-color-selector', [$(event.target)]);\n    });\n\n    if (colorSelect.length > 0) {\n      $(window).on('click', function (event) {\n        if (!$(event.target).is('.js-app-editor-color-preview') && !$(event.target).is('.js-app-menu--color') && $(event.target).parents('.js-app-menu--color').length < 1) colorSelect.trigger('close-color-selection');\n      });\n      $(window).on('keyup', function (event) {\n        if (event.key && event.key.toLowerCase() === \"backspace\" || event.keyCode && event.keyCode === \"8\") {\n          colorSelect.trigger('delete-opacity');\n        }\n      });\n    } // shadow selection -> trigger custom fields\n\n\n    var shadowList = $('.js-shadow-list');\n\n    if (shadowList.length > 0) {\n      shadowList.on('change', function (event) {\n        resetShadowBlockAppearance($(event.target));\n      });\n    }\n  }\n\n  function convArrToObj(array) {\n    var thisEleObj = new Object();\n\n    if (_typeof(array) == \"object\") {\n      for (var i in array) {\n        var thisEle = convArrToObj(array[i]);\n        thisEleObj[i] = thisEle;\n      }\n    } else {\n      thisEleObj = array;\n    }\n\n    return thisEleObj;\n  }\n\n  ;\n  $('.copy-globals-code').on('click', function (event) {\n    $(this).find('.spinner-border').removeClass('d-none');\n    saveColorsCode();\n  });\n  $('#change--color #reset').on('click', function (event) {\n    Swal.fire({\n      title: THEMES_LANG.alert.reset.title,\n      text: THEMES_LANG.alert.reset.text,\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      cancelButtonText: THEMES_LANG.alert.cancel,\n      confirmButtonText: THEMES_LANG.alert.confirmButtonText\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        getConfigTheme(function (getCOnfig, response) {\n          getCOnfig.project.color_themes = null;\n          getCOnfig.project.color_themes_data = null;\n          postConfigTheme(getCOnfig, function () {\n            $('#style-color').remove();\n            PROJECT = {\n              colors: ''\n            };\n            jsPage.loadGlobalsStyle(PROJECT);\n            SaveAlert.no();\n            $('html').attr(\"style\", ' ');\n            Swal.fire(THEMES_LANG.alert.reset.confirm.title, THEMES_LANG.alert.reset.confirm.text, 'success');\n          });\n        }, function () {}, function () {});\n      }\n    });\n  });\n\n  function saveColorsCode(callback) {\n    //need to define a string for colors\n    if (!colorObject || colorObject.length == 0) callback();\n    var colorsAll = colorObject[0].getArrayToSave();\n    var colorString = JSON.stringify(convArrToObj(colorsAll));\n    updateGlobalsProject(colorString, callback);\n  }\n\n  ;\n\n  function getConfigTheme(cbThen, cbError, cbFinal) {\n    var getCOnfig;\n    axios({\n      url: '/admin/themes/' + THEMES + '/config',\n      method: 'GET',\n      dataType: 'json'\n    }).then(function (response) {\n      var getConfig;\n\n      if (typeof response.data === \"string\") {\n        getConfig = JSON.parse(response.data.split('<!DOCTYPE html>')[0]);\n      } else {\n        getConfig = response.data;\n      }\n\n      cbThen(getConfig, response);\n    })[\"catch\"](function (error) {\n      cbError(error);\n    })[\"finally\"](function () {\n      cbFinal();\n    });\n  }\n\n  function postConfigTheme(getConfig, cb) {\n    axios.post('/admin/themes/' + THEMES + '/config', {\n      advancedBan: getConfig.advancedBan,\n      articles: getConfig.articles,\n      changelog: getConfig.changelog,\n      cps: getConfig.cps,\n      discord: getConfig.discord,\n      faq: getConfig.faq,\n      footer: getConfig.footer,\n      forum: getConfig.forum,\n      header: getConfig.header,\n      home: getConfig.home,\n      pages: getConfig.pages,\n      liteBans: getConfig.liteBans,\n      profile: getConfig.profile,\n      project: getConfig.project,\n      shop: getConfig.shop,\n      staff: getConfig.staff,\n      skinApi: getConfig.skinApi,\n      support: getConfig.support,\n      sliders: getConfig.sliders,\n      vote: getConfig.vote,\n      wiki: getConfig.wiki\n    }).then(function (response) {// console.log(response);\n    })[\"catch\"](function (error) {\n      console.log(error);\n    })[\"finally\"](function () {\n      cb();\n    });\n  }\n\n  ;\n\n  function updateGlobalsProject(options, callback) {\n    getConfigTheme(function (getConfig, response) {\n      if (!colorObject || colorObject.length == 0) callback();\n      var colorsAll = colorObject[0].getArrayToSave();\n      var colorString = JSON.stringify(convArrToObj(colorsAll));\n      getConfig.project.color_themes_data = colorString;\n      getConfig.project.color_themes = $('html').attr(\"style\");\n      postConfigTheme(getConfig, function () {\n        $('.copy-globals-code').find('.spinner-border').addClass('d-none');\n        SaveAlert.no();\n        Swal.fire({\n          position: 'center',\n          icon: 'success',\n          title: THEMES_LANG.alert.save,\n          showConfirmButton: false,\n          timer: 2000\n        });\n      });\n    }, function (error) {\n      console.log(error);\n    }, function () {});\n  }\n\n  ; // Save Alert\n\n  var SaveAlert = {\n    yes: function yes() {\n      window.onbeforeunload = function () {\n        return true;\n      };\n    },\n    no: function no() {\n      window.onbeforeunload = null;\n    }\n  };\n})();\n/**********************\n iOS banner\n ***********************/\n\n\n(function () {\n  var iosBanner = $('.js-ios-pivot');\n\n  if (iosBanner.length > 0) {\n    if (!!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform)) iosBanner.removeClass('ios-pivot--is-hidden');\n  }\n})(); //here define the functions that need to be used inside the app frame\n\n\nfunction checkPercentage(val) {\n  val = Number(val);\n  if (val < 0) val = 0;\n  if (val > 1) val = 1;\n  return Number(val.toFixed(2));\n}\n\n;\n\nfunction checkHue(hue) {\n  if (isNaN(hue)) hue = 0;\n  return Math.round(parseFloat(hue));\n}\n\n;\n\nfunction getHslFromHex(hex) {\n  if (hex.indexOf('hsl(') > -1) {\n    //format is already hsl(, , )\n    return getHslFromHslString(hex);\n  }\n\n  var color = chroma(hex).hsl();\n  if (isNaN(color[0])) color[0] = 0;\n  color[0] = Math.round(color[0]);\n  color[1] = Number(Math.round(color[1] * 100) / 100);\n  color[2] = Number(Math.round(color[2] * 100) / 100);\n  return color;\n}\n\n;\n\nfunction getHslFromHslString(hex) {\n  var color = hex.replace('hsl(', '').replace(')', '').split(',');\n  color[0] = Number(color[0].trim());\n  color[1] = parseFloat((Number(color[1].trim().replace('%', '')) / 100).toFixed(2));\n  color[2] = parseFloat((Number(color[2].trim().replace('%', '')) / 100).toFixed(2));\n  return color;\n}\n\n;\n\nfunction getHexFromHsl(hsl) {\n  return chroma.hsl(hsl[0], hsl[1], hsl[2]).hex();\n}\n\n;\n\nfunction convertStringToHsl(string) {\n  string = Number(string.replace('%', ''));\n  return Number((string / 100).toFixed(2));\n}\n\n;\n\nfunction selectSidebarSection(target) {\n  $('.js-app-content__group').trigger('selectSection', [target]);\n}\n\n;\n\nfunction closeActivePopups() {\n  var colorSelection = $('.js-app-menu--color'),\n      appMenu = $('.js-app-header-menu-toggle');\n  if (colorSelection.length > 0) colorSelection.trigger('close-color-selection');\n  if (appMenu.length > 0) appMenu.trigger('close-app-menu-popup');\n}\n\n;\n\nfunction toggleColorLink(colorSection, bool) {\n  $('.js-app-sidebar-editor--colors').trigger('updateColorLink', [colorSection, bool]);\n}\n\n;\n/* License: https://codyhouse.co/mit *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/config-custom-azuriom/change-color.js\n");

/***/ }),

/***/ "./js/config-custom-azuriom/colors.js":
/*!********************************************!*\
  !*** ./js/config-custom-azuriom/colors.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"updateIframeColors\": function() { return /* binding */ updateIframeColors; },\n/* harmony export */   \"updateIframeColorLinks\": function() { return /* binding */ updateIframeColorLinks; },\n/* harmony export */   \"updateIframeColorsNewColor\": function() { return /* binding */ updateIframeColorsNewColor; },\n/* harmony export */   \"updateIframeColorsRemoveColor\": function() { return /* binding */ updateIframeColorsRemoveColor; },\n/* harmony export */   \"updateIframeColorsEditColor\": function() { return /* binding */ updateIframeColorsEditColor; },\n/* harmony export */   \"loadColorsForColors\": function() { return /* binding */ loadColorsForColors; },\n/* harmony export */   \"loadTypographyForButtons\": function() { return /* binding */ loadTypographyForButtons; },\n/* harmony export */   \"loadSpacingForButtons\": function() { return /* binding */ loadSpacingForButtons; },\n/* harmony export */   \"loadButtonsForColors\": function() { return /* binding */ loadButtonsForColors; },\n/* harmony export */   \"loadFormForColors\": function() { return /* binding */ loadFormForColors; }\n/* harmony export */ });\nvar Color = __webpack_require__(/*! ./colors */ \"./js/config-custom-azuriom/colors.js\");\n\nvar jsPage = __webpack_require__(/*! ./page */ \"./js/config-custom-azuriom/page.js\");\n\nvar colorPrimary = [],\n    colorAccent = [],\n    colorDownload = [],\n    colorBlack = '',\n    colorWhite = '',\n    colorSuccess = [],\n    colorError = [],\n    colorInfo = [],\n    colorWarning = [],\n    colorContrasts = [],\n    newColorCustom = [],\n    newGradientCustom = [],\n    colorCustoms = [],\n    gradientCustoms = [],\n    colorOpacities = [],\n    customColorLabels = [],\n    gradientColorIds = [],\n    gradientColorValues = [],\n    fontRenderingValue = '';\nfunction updateIframeColors(primary, accent, download, black, white, success, error, info, warning, contrasts, fontRendering, customs, customLabels, grLabels, grIds, grValues, label) {\n  colorPrimary = primary.slice();\n  colorAccent = accent.slice();\n  colorDownload = download.slice();\n  colorBlack = black.slice();\n  colorWhite = white.slice();\n  colorSuccess = success.slice();\n  colorError = error.slice();\n  colorInfo = info.slice();\n  colorWarning = warning.slice();\n  colorContrasts = contrasts.slice();\n  colorCustoms = customs.slice();\n  customColorLabels = customLabels;\n  gradientColorIds = grIds.slice();\n  gradientCustoms = grLabels.slice();\n  gradientColorValues = grValues.slice();\n  $('.js-cd-demo-container--colors').trigger('updateColors', [label]);\n}\n;\nfunction updateIframeColorLinks(links) {\n  $('.js-cd-demo-container--colors').trigger('updateColorLinks', [links]);\n}\n;\nfunction updateIframeColorsNewColor(array, title, customLabel) {\n  if (title.indexOf('gradient') > -1) {\n    newGradientCustom[customLabel] = array.slice();\n    $('.js-cd-demo-container--colors').trigger('createGradient', [title, customLabel]);\n  } else {\n    newColorCustom[customLabel] = array.slice();\n    $('.js-cd-demo-container--colors').trigger('createColor', [title, customLabel]);\n  }\n}\n;\nfunction updateIframeColorsRemoveColor(customLabel) {\n  if (customLabel.indexOf('gr') > -1) {\n    $('.js-cd-demo-container--colors').trigger('removeGradient', [customLabel]);\n  } else {\n    $('.js-cd-demo-container--colors').trigger('removeColor', [customLabel]);\n  }\n}\n;\nfunction updateIframeColorsEditColor(section, title) {\n  if (section.indexOf('gradient') > -1) {\n    $('.js-cd-demo-container--colors').trigger('updateGradient', [section, title]);\n  } else {\n    $('.js-cd-demo-container--colors').trigger('updateColor', [section, title]);\n  }\n}\n;\nvar projectTypography, projectSpacing, projectButtons, projectForms;\nfunction loadColorsForColors(colors) {// colors = JSON.stringify(colors)\n  // console.log(Object.values(colors['mainColorLabels']))\n  // jsPage.btnColorLabels = (colors['mainColorLabels']) ? Object.values(colors['mainColorLabels']) : [];\n  // jsPage.btnColorCustomNiceLabels = (colors['customColorLabels']) ? Object.values(colors['customColorLabels']) : [];\n  // jsPage.btnGradientsCustomNiceLabels = (colors['gradientColorLabels']) ? Object.values(colors['gradientColorLabels']) : [];\n}\n;\nfunction loadTypographyForButtons(typography) {\n  projectTypography = typography;\n  $('.js-cd-demo-container--colors').trigger('setTypographyStyle');\n}\n;\nfunction loadSpacingForButtons(spacing) {\n  projectSpacing = spacing;\n  $('.js-cd-demo-container--colors').trigger('setSpacingStyle');\n}\n;\nfunction loadButtonsForColors(buttons) {\n  projectButtons = buttons;\n  $('.js-cd-demo-container--colors').trigger('setButtonsStyle');\n}\n;\nfunction loadFormForColors(forms) {\n  projectForms = forms;\n  $('.js-cd-demo-container--colors').trigger('setFormStyle');\n}\n;\n\n(function () {\n  var colorsDemo = $('.js-cd-demo-container--colors');\n  var iframeParent = jsPage;\n  var accessibleContrastHeadings = document.getElementsByClassName('js-accessible-headings-contrast'),\n      accessibleContrastBody = document.getElementsByClassName('js-accessible-body-contrast');\n\n  if (!iframeParent) {\n    iframeParent = jsPage;\n  }\n\n  var styleTag = $('#font-rendering');\n\n  if (colorsDemo.length > 0) {\n    var resetSpaceTypo = function resetSpaceTypo(bool, mq) {\n      if (projectTypography) {\n        setTypographyStyle(bool, mq);\n      } else {\n        updateTypographyDefaultStyle(mq);\n      }\n\n      if (projectSpacing) {\n        setSpacingStyle(mq);\n      } else {\n        updateSpacingDefaultStyle(mq);\n      }\n    };\n\n    var setTypographyStyle = function setTypographyStyle(bool, mq) {\n      if (projectTypography) jsPage.loadTypographyStyle(projectTypography, bool, mq);else {\n        jsPage.loadTypographyDefaultStyle(bool, mq);\n        updateTypographyDefaultStyle(mq);\n      }\n    };\n\n    var updateTypographyDefaultStyle = function updateTypographyDefaultStyle(mq) {\n      var textBase = '1em',\n          textScale = '1.2';\n\n      if (mq >= 3) {\n        textBase = '1.25em';\n        textScale = '1.25';\n      }\n\n      jsPage.setCssVariable('--text-base-size', textBase);\n      jsPage.setCssVariable('--text-scale-ratio', textScale);\n    };\n\n    var setSpacingStyle = function setSpacingStyle(mq) {\n      if (projectSpacing) jsPage.loadSpacingStyle(projectSpacing, mq);else {\n        jsPage.loadSpacingDefaultStyle(mq);\n        updateSpacingDefaultStyle(mq);\n      }\n    };\n\n    var updateSpacingDefaultStyle = function updateSpacingDefaultStyle(mq) {\n      var spaceUnit = '1em';\n\n      if (mq >= 3) {\n        spaceUnit = '1.25em';\n      }\n\n      jsPage.setCssVariable('--space-unit', spaceUnit);\n    };\n\n    var setButtonsStyle = function setButtonsStyle(mq) {\n      if (projectButtons) jsPage.loadButtonsStyle(projectButtons, mq);else jsPage.loadButtonsDefaultStyle(mq);\n    };\n\n    var setFormsStyle = function setFormsStyle(mq) {\n      if (projectForms) jsPage.loadFormsStyle(projectForms, mq);else jsPage.loadFormsDefaultStyle(mq);\n    };\n\n    var blackWrapper = colorsDemo.find('.js-cd-demo-color__list--black'),\n        whiteWrapper = colorsDemo.find('.js-cd-demo-color__list--white');\n    var demoSwitcher = $('.js-demo-switcher');\n    colorsDemo.on('click', '.js-cd-demo-color__list', function (event) {\n      colorsDemo.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected cd-demo-item--selected');\n      $(event.currentTarget).addClass('cd-demo-color__list--selected');\n      iframeParent.selectSidebarSection($(event.currentTarget).attr('data-section'));\n    });\n    colorsDemo.on('updateColors', function (event, label) {\n      updateColorVariables(label);\n    });\n    colorsDemo.on('updateColorLinks', function (event, links) {\n      updateColorLinks(links);\n    });\n    demoSwitcher.on('click', 'button', function (event) {\n      if ($(event.target).hasClass('is-selected')) return;\n      demoSwitcher.children('.is-selected').removeClass('is-selected').siblings().addClass('is-selected');\n      $('.cd-demo-container--is-hidden').removeClass('cd-demo-container--is-hidden').siblings('[data-display]').addClass('cd-demo-container--is-hidden');\n    });\n    colorsDemo.on('createColor', function (event, title, customLabel) {\n      createCustomColor(title, customLabel);\n    });\n    colorsDemo.on('createGradient', function (event, title, customLabel) {\n      createCustomGradient(title, customLabel);\n    });\n    colorsDemo.on('removeColor', function (event, customLabel) {\n      colorsDemo.find('[data-section=\"#color-' + customLabel + '\"]').parent().remove();\n    });\n    colorsDemo.on('removeGradient', function (event, customLabel) {\n      colorsDemo.find('[data-section=\"#gradient-' + customLabel.replace('gr-', '') + '\"]').parent().remove();\n    });\n    colorsDemo.on('updateColor', function (event, section, title) {\n      updateCustomColor(section, title);\n    });\n    colorsDemo.on('updateGradient', function (event, section, title) {\n      updateCustomGradient(section, title);\n    });\n    colorsDemo.on('click', '.js-cd-demo-color__link-btn', function (event) {\n      event.preventDefault();\n      $(event.currentTarget).toggleClass('cd-demo-color__link-btn--is-active');\n      iframeParent.toggleColorLink($(event.currentTarget).parent().next().attr('data-section'), $(event.currentTarget).hasClass('cd-demo-color__link-btn--is-active'));\n    });\n    var MQRef = jsPage.getMq();\n    colorsDemo.one('setTypographyStyle', function () {\n      setTypographyStyle(true, MQRef);\n    });\n    colorsDemo.one('setSpacingStyle', function () {\n      setSpacingStyle(MQRef);\n    });\n    colorsDemo.one('setButtonsStyle', function () {\n      setButtonsStyle(MQRef);\n    });\n    colorsDemo.one('setFormStyle', function () {\n      setFormsStyle(MQRef);\n    });\n    colorsDemo.on('windowResizing', function () {\n      var mq = jsPage.getMq();\n\n      if (MQRef != mq) {\n        MQRef = mq;\n        resetSpaceTypo(false, MQRef);\n      }\n    });\n    ;\n    ;\n    ;\n    ;\n    ;\n    ;\n  }\n\n  function updateColorVariables(label) {\n    if (!label || label == 'primary') updateMainColor(colorPrimary, 'primary');\n    if (!label || label == 'accent') updateMainColor(colorAccent, 'accent');\n    if (!label || label == 'download') updateMainColor(colorDownload, 'download');\n    if (!label || label == 'success') updateMainColor(colorSuccess, 'success');\n    if (!label || label == 'error') updateMainColor(colorError, 'error');\n    if (!label || label == 'info') updateMainColor(colorInfo, 'info');\n    if (!label || label == 'warning') updateMainColor(colorWarning, 'warning');\n    if (!label || label == 'black') updateBlackWhite(colorBlack, blackWrapper, 'black');\n    if (!label || label == 'white') updateBlackWhite(colorWhite, whiteWrapper, 'white');\n    if (!label || label == 'contrast') updateContratColor();\n    if (!label || label.indexOf('custom') > -1 && label.indexOf('gr-custom') < 0) updateCustoms();\n    if (!label || label.indexOf('gr-custom') > -1) updateGradientCustoms();\n    if (!label || label == 'fontRendering') updateFontRendering();\n  }\n\n  ;\n\n  function setCompleteColorVariable(label, color) {\n    jsPage.setCssVariable(label, jsPage.getHSL(color));\n    jsPage.setColorPartVariables(label, color);\n  }\n\n  ;\n\n  function updateContratColor() {\n    setCompleteColorVariable('--color-bg', colorContrasts[0]);\n    setCompleteColorVariable('--color-contrast-lower', colorContrasts[1]);\n    setCompleteColorVariable('--color-contrast-low', colorContrasts[2]);\n    setCompleteColorVariable('--color-contrast-medium', colorContrasts[3]);\n    setCompleteColorVariable('--color-contrast-high', colorContrasts[4]);\n    setCompleteColorVariable('--color-contrast-higher', colorContrasts[5]);\n    var colorSection = colorsDemo.find('[data-section=\"#color-contrast\"]'),\n        colorLabels = colorSection.find('.js-demo-color__value');\n\n    for (var i = 0; i < colorContrasts.length; i++) {\n      colorLabels.eq(i).text(jsPage.getHSL(colorContrasts[i]));\n    }\n\n    updateAccessibleContrast();\n  }\n\n  ;\n\n  function updateFontRendering() {\n    var code = '';\n\n    if (fontRenderingValue && Number(fontRenderingValue == 1)) {\n      code = 'body{-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}';\n    } else if (fontRenderingValue && Number(fontRenderingValue == 2)) {\n      code = 'body{-webkit-font-smoothing: auto;-moz-osx-font-smoothing: auto;}';\n    }\n\n    styleTag.text(code);\n  }\n\n  ;\n\n  function updateMainColor(array, type) {\n    setCompleteColorVariable('--color-' + type + '-lighter', array[0]);\n    setCompleteColorVariable('--color-' + type + '-light', array[1]);\n    setCompleteColorVariable('--color-' + type, array[2]);\n    setCompleteColorVariable('--color-' + type + '-dark', array[3]);\n    setCompleteColorVariable('--color-' + type + '-darker', array[4]);\n    var colorSection = colorsDemo.find('[data-section=\"#color-' + type + '\"]'),\n        colorLabels = colorSection.find('.js-demo-color__value');\n\n    for (var i = 0; i < 5; i++) {\n      colorLabels.eq(i).text(jsPage.getHSL(array[i]));\n    }\n  }\n\n  ;\n\n  function updateCSSCustomColor(array, type) {\n    setCompleteColorVariable('--color-' + type + '-lighter', array[0]);\n    setCompleteColorVariable('--color-' + type + '-light', array[1]);\n    setCompleteColorVariable('--color-' + type, array[2]);\n    setCompleteColorVariable('--color-' + type + '-dark', array[3]);\n    setCompleteColorVariable('--color-' + type + '-darker', array[4]);\n  }\n\n  ;\n\n  function updateBlackWhite(array, parent, type) {\n    var children = parent.children();\n\n    if (children.length > array.length) {\n      children.eq(array.length - 1).nextAll().remove();\n    } else if (children.length < array.length) {\n      var cloneCode = children.eq(0).clone()[0].outerHTML,\n          itemsString = '';\n\n      for (var i = children.length; i < array.length; i++) {\n        itemsString = itemsString + cloneCode;\n      }\n\n      parent.append(itemsString);\n    }\n\n    children = parent.children();\n\n    for (var i = 0; i < array.length; i++) {\n      updateSingleColor(array[i], children.eq(i), getBWLabel(type, i), i);\n    }\n  }\n\n  ;\n\n  function updateSingleColor(color, item, label, index) {\n    var colorText = jsPage.getHSL(color);\n    setCompleteColorVariable('--' + label, color);\n    item.find('.js-demo-color__value').text(colorText).end().find('.js-css-variable-label').text('--' + label);\n    if (index != 0) item.children().eq(0).css('background-color', colorText);\n  }\n\n  ;\n\n  function updateCustoms() {\n    for (var i = 0; i < colorCustoms.length; i++) {\n      var customSection = $('[data-section=\"#color-' + colorCustoms[i][0] + '\"]');\n\n      if (customSection.length == 0) {\n        createCustomColorSection(customColorLabels[i], colorCustoms[i][0], false);\n      }\n\n      var colorSectionItems = $('[data-section=\"#color-' + colorCustoms[i][0] + '\"]').children(),\n          colorValues = [];\n\n      for (var j = 0; j < colorSectionItems.length; j++) {\n        var newColor = jsPage.getHSL(colorCustoms[i][1][j]);\n        colorSectionItems.eq(j).find('.js-cd-demo-color__preview').attr('style', 'background-color: ' + newColor + ';').end().find('.js-demo-color__value').text(newColor);\n        colorValues.push(newColor);\n      }\n\n      updateCSSCustomColor(colorCustoms[i][1], customColorLabels[i].replace('--color-', ''));\n    }\n  }\n\n  ;\n\n  function updateGradientCustoms() {\n    for (var i = 0; i < gradientCustoms.length; i++) {\n      var customSection = $('[data-section=\"#gradient-' + gradientColorIds[i] + '\"]');\n\n      if (customSection.length == 0) {\n        createCustomGradientSection(gradientCustoms[i], gradientColorIds[i], gradientColorValues[i], false);\n      }\n\n      var customSection = $('[data-section=\"#gradient-' + gradientColorIds[i] + '\"]');\n      var preview = customSection.find('.js-cd-demo-color__preview'),\n          values = customSection.find('.js-demo-color__value');\n      preview.attr('style', 'background-image: linear-gradient(90deg, ' + jsPage.getHSL(gradientColorValues[i][0]) + ', ' + jsPage.getHSL(gradientColorValues[i][1]) + ');');\n      values.eq(0).text(jsPage.getHSL(gradientColorValues[i][0]));\n      values.eq(1).text(jsPage.getHSL(gradientColorValues[i][1]));\n      setCompleteColorVariable('--gradient-' + gradientCustoms[i] + '-stop-1', gradientColorValues[i][0]);\n      setCompleteColorVariable('--gradient-' + gradientCustoms[i] + '-stop-2', gradientColorValues[i][1]);\n    }\n  }\n\n  ;\n\n  function getBWLabel(type, index) {\n    if (type == 'black') {\n      switch (index) {\n        case 1:\n          return 'color-black-light';\n          break;\n\n        case 2:\n          return 'color-black-lighter';\n          break;\n\n        default:\n          return 'color-black';\n      }\n    } else {\n      switch (index) {\n        case 1:\n          return 'color-white-dark';\n          break;\n\n        case 2:\n          return 'color-white-darker';\n          break;\n\n        default:\n          return 'color-white';\n      }\n    }\n  }\n\n  ;\n\n  function createCustomColor(title, customLabel) {\n    createCustomColorSection(title, customLabel, true);\n    selectIframeSection('#color-' + customLabel);\n  }\n\n  ;\n\n  function createCustomColorSection(title, customLabel, customize) {\n    var newColor = colorsDemo.children('.js-cd-demo-color').eq(0).clone(),\n        colorChildren = newColor.find('.js-cd-demo-color__preview');\n    newColor.addClass('js-cd-demo-color--custom').find('.js-cd-demo-title').text(getCustomTitleColor(title));\n    newColor.find('[data-section]').attr('data-section', '#color-' + customLabel);\n    newColor.find('.cd-demo-color__link-btn').removeClass('cd-demo-color__link-btn--is-active');\n\n    if (!customize) {\n      newColor.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n    }\n\n    if (customize) {\n      for (var i = 0; i < colorChildren.length; i++) {\n        colorChildren.eq(i).attr('style', 'background-color: ' + jsPage.getHSL(newColorCustom[customLabel][i]) + ';');\n        var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n        var cssVaraiableName = getVariableName(title);\n        labelItem.text(labelItem.text().replace('--color-primary', cssVaraiableName));\n      }\n    } else {\n      for (var i = 0; i < colorChildren.length; i++) {\n        var cssVaraiableName = getVariableName(title);\n        var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n        labelItem.text(labelItem.text().replace('--color-primary', cssVaraiableName));\n      }\n    }\n\n    if (customLabel.indexOf('custom-fdb') > -1) {\n      colorsDemo.find('.js-cd-demo-gradient').before(newColor);\n    } else {\n      colorsDemo.find('.js-cd-demo-color--black').before(newColor);\n    }\n  }\n\n  ;\n\n  function updateCustomColor(section, title) {\n    var customColorBlock = colorsDemo.find('[data-section=\"' + section + '\"]').parents('.js-cd-demo-color--custom').eq(0),\n        colorChildren = customColorBlock.find('.js-cd-demo-color__preview'),\n        oldLabel = colorChildren.eq(2).siblings('.js-css-variable-label').text();\n    customColorBlock.find('.js-cd-demo-title').text(getCustomTitleColor(title));\n\n    for (var i = 0; i < colorChildren.length; i++) {\n      var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n      var cssVaraiableName = getVariableName(title);\n      labelItem.text(labelItem.text().replace(oldLabel, cssVaraiableName));\n    }\n  }\n\n  ;\n\n  function createCustomGradient(title, customLabel) {\n    createCustomGradientSection(title, customLabel, newGradientCustom[customLabel], true);\n    selectIframeSection('#gradient-' + customLabel);\n  }\n\n  ;\n\n  function createCustomGradientSection(title, customLabel, customValue, customize) {\n    var newColor = colorsDemo.children('.js-cd-demo-gradient').eq(0).clone().removeClass('is-hidden'),\n        titleEl = newColor.find('.js-cd-demo-title'),\n        preview = newColor.find('.js-cd-demo-color__preview'),\n        values = newColor.find('.js-demo-color__value'),\n        labels = newColor.find('.js-css-variable-label');\n    titleEl.text(getCustomTitleGradient(title));\n    values.eq(0).text(jsPage.getHSL(customValue[0]));\n    values.eq(1).text(jsPage.getHSL(customValue[1]));\n    labels.eq(0).text(getGradientVariable(title) + '-stop-1');\n    labels.eq(1).text(getGradientVariable(title) + '-stop-2');\n    newColor.find('.js-cd-demo-gradient__list').attr('data-section', '#gradient-' + customLabel);\n\n    if (!customize) {\n      newColor.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n    }\n\n    if (customize) {\n      preview.attr('style', 'background-image: linear-gradient(90deg, ' + jsPage.getHSL(customValue[0]) + ', ' + jsPage.getHSL(customValue[1]) + ');');\n    }\n\n    colorsDemo.find('.js-cd-demo-color--contrast').before(newColor);\n  }\n\n  ;\n\n  function updateCustomGradient(section, title) {\n    var customGradientBlock = colorsDemo.find('[data-section=\"' + section + '\"]').parents('.js-cd-demo-gradient').eq(0),\n        titleEl = customGradientBlock.find('.js-cd-demo-title'),\n        labels = customGradientBlock.find('.js-css-variable-label');\n    titleEl.text(getCustomTitleGradient(title));\n    labels.eq(0).text(getGradientVariable(title) + '-stop-1');\n    labels.eq(1).text(getGradientVariable(title) + '-stop-2');\n  }\n\n  ;\n\n  function getCustomTitleColor(title) {\n    title = title.replace('--color-', '').replace(/-/, ' ');\n    return 'Color ' + title.charAt(0).toUpperCase() + title.slice(1);\n  }\n\n  ;\n\n  function getCustomTitleGradient(title) {\n    title = title.replace('--gradient-', '').replace(/-/, ' ');\n    return 'Gradient ' + title.charAt(0).toUpperCase() + title.slice(1);\n  }\n\n  ;\n\n  function getGradientVariable(title) {\n    if (title.indexOf('--gradient') > -1) return title;\n    return '--gradient-' + title;\n  }\n\n  ;\n\n  function getVariableName(title) {\n    title = title.replace(/ /, '-');\n    if (title.indexOf('--') != 0) title = '--' + title;\n    return title;\n  }\n\n  ;\n\n  function updateAccessibleContrast() {\n    var bgLuminance = jsPage.getLuminance(colorContrasts[0], iframeParent),\n        headingsLuminance = jsPage.getLuminance(colorContrasts[5], iframeParent),\n        bodyLuminance = jsPage.getLuminance(colorContrasts[4], iframeParent),\n        headingsContrast = bgLuminance > headingsLuminance ? (bgLuminance + 0.05) / (headingsLuminance + 0.05) : (headingsLuminance + 0.05) / (bgLuminance + 0.05),\n        bodyContrast = bgLuminance > bodyLuminance ? (bgLuminance + 0.05) / (bodyLuminance + 0.05) : (bodyLuminance + 0.05) / (bgLuminance + 0.05);\n    headingsContrast = parseFloat(headingsContrast).toFixed(2);\n    bodyContrast = parseFloat(bodyContrast).toFixed(2);\n    var headingsNote = getAccessibleContrastNote(headingsContrast),\n        bodyNote = getAccessibleContrastNote(bodyContrast);\n    if (accessibleContrastHeadings.length > 0) accessibleContrastHeadings[0].textContent = headingsNote;\n    if (accessibleContrastBody.length > 0) accessibleContrastBody[0].textContent = bodyNote;\n  }\n\n  ;\n\n  function getAccessibleContrastNote(value) {\n    var note = value >= 7 ? ' (AAA)' : ' (AA)';\n    if (value < 4.5) note = ' (low)';\n    return value + note;\n  }\n\n  ;\n\n  function updateColorLinks(links) {\n    for (var color in links) {\n      if (links.hasOwnProperty(color) && links[color]) {\n        if (color.indexOf('gr-') > -1) {\n          colorsDemo.find('[data-section=\"#gradient-' + color.replace('gr-', '') + '\"]').prev().find('.js-cd-demo-color__link-btn').addClass('cd-demo-color__link-btn--is-active');\n        } else {\n          colorsDemo.find('[data-section=\"#color-' + color + '\"]').prev().find('.js-cd-demo-color__link-btn').addClass('cd-demo-color__link-btn--is-active');\n        }\n      }\n    }\n  }\n\n  ;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/config-custom-azuriom/colors.js\n");

/***/ }),

/***/ "./js/config-custom-azuriom/page.js":
/*!******************************************!*\
  !*** ./js/config-custom-azuriom/page.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"spacingArray\": function() { return /* binding */ spacingArray; },\n/* harmony export */   \"textArray\": function() { return /* binding */ textArray; },\n/* harmony export */   \"textArrayValues\": function() { return /* binding */ textArrayValues; },\n/* harmony export */   \"fontArray\": function() { return /* binding */ fontArray; },\n/* harmony export */   \"btnFontIds\": function() { return /* binding */ btnFontIds; },\n/* harmony export */   \"btnColorCustomNiceLabels\": function() { return /* binding */ btnColorCustomNiceLabels; },\n/* harmony export */   \"btnGradientsCustomNiceLabels\": function() { return /* binding */ btnGradientsCustomNiceLabels; },\n/* harmony export */   \"btnColorLabels\": function() { return /* binding */ btnColorLabels; },\n/* harmony export */   \"shadowVariables\": function() { return /* binding */ shadowVariables; },\n/* harmony export */   \"borderRadiusValues\": function() { return /* binding */ borderRadiusValues; },\n/* harmony export */   \"setBtnColorCustomNiceLabels\": function() { return /* binding */ setBtnColorCustomNiceLabels; },\n/* harmony export */   \"setBtnGradientNiceLabels\": function() { return /* binding */ setBtnGradientNiceLabels; },\n/* harmony export */   \"decodeSafeURIComponent\": function() { return /* binding */ decodeSafeURIComponent; },\n/* harmony export */   \"getCursorValue\": function() { return /* binding */ getCursorValue; },\n/* harmony export */   \"getBorderType\": function() { return /* binding */ getBorderType; },\n/* harmony export */   \"getBorderStyle\": function() { return /* binding */ getBorderStyle; },\n/* harmony export */   \"getTextTransform\": function() { return /* binding */ getTextTransform; },\n/* harmony export */   \"getTextDecoration\": function() { return /* binding */ getTextDecoration; },\n/* harmony export */   \"getFontSmoothing\": function() { return /* binding */ getFontSmoothing; },\n/* harmony export */   \"getBoxShadowType\": function() { return /* binding */ getBoxShadowType; },\n/* harmony export */   \"getTransitionProperty\": function() { return /* binding */ getTransitionProperty; },\n/* harmony export */   \"getTransitionEase\": function() { return /* binding */ getTransitionEase; },\n/* harmony export */   \"getTransitionDelay\": function() { return /* binding */ getTransitionDelay; },\n/* harmony export */   \"getTransformProperty\": function() { return /* binding */ getTransformProperty; },\n/* harmony export */   \"getOutlineStyle\": function() { return /* binding */ getOutlineStyle; },\n/* harmony export */   \"getOutlineOffset\": function() { return /* binding */ getOutlineOffset; },\n/* harmony export */   \"getColorValue\": function() { return /* binding */ getColorValue; },\n/* harmony export */   \"getColorValueFromList\": function() { return /* binding */ getColorValueFromList; },\n/* harmony export */   \"getNiceLabelForCustom\": function() { return /* binding */ getNiceLabelForCustom; },\n/* harmony export */   \"removeOpacityFromLabel\": function() { return /* binding */ removeOpacityFromLabel; },\n/* harmony export */   \"getOpacityDecFromLabel\": function() { return /* binding */ getOpacityDecFromLabel; },\n/* harmony export */   \"checkColorIsOpacity\": function() { return /* binding */ checkColorIsOpacity; },\n/* harmony export */   \"getColorFbIos\": function() { return /* binding */ getColorFbIos; },\n/* harmony export */   \"getHSL\": function() { return /* binding */ getHSL; },\n/* harmony export */   \"getHSLA\": function() { return /* binding */ getHSLA; },\n/* harmony export */   \"setHSLAfromHSL\": function() { return /* binding */ setHSLAfromHSL; },\n/* harmony export */   \"getHSLFromString\": function() { return /* binding */ getHSLFromString; },\n/* harmony export */   \"setCssVariable\": function() { return /* binding */ setCssVariable; },\n/* harmony export */   \"getCssVariable\": function() { return /* binding */ getCssVariable; },\n/* harmony export */   \"setBodyCssVariable\": function() { return /* binding */ setBodyCssVariable; },\n/* harmony export */   \"setElementCssVariable\": function() { return /* binding */ setElementCssVariable; },\n/* harmony export */   \"windowScrollTo\": function() { return /* binding */ windowScrollTo; },\n/* harmony export */   \"selectIframeSection\": function() { return /* binding */ selectIframeSection; },\n/* harmony export */   \"selectIframeTab\": function() { return /* binding */ selectIframeTab; },\n/* harmony export */   \"getMq\": function() { return /* binding */ getMq; },\n/* harmony export */   \"getScreenSize\": function() { return /* binding */ getScreenSize; },\n/* harmony export */   \"getValidResponsiveValue\": function() { return /* binding */ getValidResponsiveValue; },\n/* harmony export */   \"getValueUnit\": function() { return /* binding */ getValueUnit; },\n/* harmony export */   \"getBodyNotFalse\": function() { return /* binding */ getBodyNotFalse; },\n/* harmony export */   \"loadGlobalsStyle\": function() { return /* binding */ loadGlobalsStyle; },\n/* harmony export */   \"loadColorStyle\": function() { return /* binding */ loadColorStyle; },\n/* harmony export */   \"loadColorDefaultStyle\": function() { return /* binding */ loadColorDefaultStyle; },\n/* harmony export */   \"setColorPartVariables\": function() { return /* binding */ setColorPartVariables; },\n/* harmony export */   \"getBWArray\": function() { return /* binding */ getBWArray; },\n/* harmony export */   \"loadTypographyStyle\": function() { return /* binding */ loadTypographyStyle; },\n/* harmony export */   \"loadTypographyDefaultStyle\": function() { return /* binding */ loadTypographyDefaultStyle; },\n/* harmony export */   \"loadTypographyStyleTag\": function() { return /* binding */ loadTypographyStyleTag; },\n/* harmony export */   \"loadTypographyCssVarStyleGuide\": function() { return /* binding */ loadTypographyCssVarStyleGuide; },\n/* harmony export */   \"loadTypographyStyleStyleGuide\": function() { return /* binding */ loadTypographyStyleStyleGuide; },\n/* harmony export */   \"getTypographyScaleVar\": function() { return /* binding */ getTypographyScaleVar; },\n/* harmony export */   \"getTextUnit\": function() { return /* binding */ getTextUnit; },\n/* harmony export */   \"getTypographyScaleVarRes\": function() { return /* binding */ getTypographyScaleVarRes; },\n/* harmony export */   \"loadSpacingStyle\": function() { return /* binding */ loadSpacingStyle; },\n/* harmony export */   \"loadSpacingDefaultStyle\": function() { return /* binding */ loadSpacingDefaultStyle; },\n/* harmony export */   \"loadSpacingStyleTag\": function() { return /* binding */ loadSpacingStyleTag; },\n/* harmony export */   \"setTypographyCssVariables\": function() { return /* binding */ setTypographyCssVariables; },\n/* harmony export */   \"getTypographyArray\": function() { return /* binding */ getTypographyArray; },\n/* harmony export */   \"getTypographyStyle\": function() { return /* binding */ getTypographyStyle; },\n/* harmony export */   \"updateSpacingCssVariables\": function() { return /* binding */ updateSpacingCssVariables; },\n/* harmony export */   \"getSpacingValues\": function() { return /* binding */ getSpacingValues; },\n/* harmony export */   \"getSpacingMultiplier\": function() { return /* binding */ getSpacingMultiplier; },\n/* harmony export */   \"getSpacingCustomScaleRatio\": function() { return /* binding */ getSpacingCustomScaleRatio; },\n/* harmony export */   \"getSpacingValidResponsiveValueCustomRatio\": function() { return /* binding */ getSpacingValidResponsiveValueCustomRatio; },\n/* harmony export */   \"getSpaceRatioCustom\": function() { return /* binding */ getSpaceRatioCustom; },\n/* harmony export */   \"loadButtonsStyle\": function() { return /* binding */ loadButtonsStyle; },\n/* harmony export */   \"loadButtonsStyleStyleGuide\": function() { return /* binding */ loadButtonsStyleStyleGuide; },\n/* harmony export */   \"loadSharedStyleStyleGuide\": function() { return /* binding */ loadSharedStyleStyleGuide; },\n/* harmony export */   \"escapeCSScharacters\": function() { return /* binding */ escapeCSScharacters; },\n/* harmony export */   \"loadButtonsDefaultStyle\": function() { return /* binding */ loadButtonsDefaultStyle; },\n/* harmony export */   \"buttonVariables\": function() { return /* binding */ buttonVariables; },\n/* harmony export */   \"loadButtonsStyleTag\": function() { return /* binding */ loadButtonsStyleTag; },\n/* harmony export */   \"loadFormsStyle\": function() { return /* binding */ loadFormsStyle; },\n/* harmony export */   \"loadFormsStyleStyleGuide\": function() { return /* binding */ loadFormsStyleStyleGuide; },\n/* harmony export */   \"formVariables\": function() { return /* binding */ formVariables; },\n/* harmony export */   \"loadFormsDefaultStyle\": function() { return /* binding */ loadFormsDefaultStyle; },\n/* harmony export */   \"loadFormsStyleTag\": function() { return /* binding */ loadFormsStyleTag; },\n/* harmony export */   \"boxShadowIsDefined\": function() { return /* binding */ boxShadowIsDefined; },\n/* harmony export */   \"getButtonsArrayStyle\": function() { return /* binding */ getButtonsArrayStyle; },\n/* harmony export */   \"buttonsCodeStyle\": function() { return /* binding */ buttonsCodeStyle; },\n/* harmony export */   \"setStatusList\": function() { return /* binding */ setStatusList; },\n/* harmony export */   \"buttonIconCodeStyle\": function() { return /* binding */ buttonIconCodeStyle; },\n/* harmony export */   \"buttonsHasTransformStyle\": function() { return /* binding */ buttonsHasTransformStyle; },\n/* harmony export */   \"getButtonCode\": function() { return /* binding */ getButtonCode; },\n/* harmony export */   \"getButtonsAppearanceStyle\": function() { return /* binding */ getButtonsAppearanceStyle; },\n/* harmony export */   \"getGradientBgStyle\": function() { return /* binding */ getGradientBgStyle; },\n/* harmony export */   \"getButtonsPaddingStyle\": function() { return /* binding */ getButtonsPaddingStyle; },\n/* harmony export */   \"getButtonsPaddingValue\": function() { return /* binding */ getButtonsPaddingValue; },\n/* harmony export */   \"getButtonsMarginStyle\": function() { return /* binding */ getButtonsMarginStyle; },\n/* harmony export */   \"getButtonsBorderStyle\": function() { return /* binding */ getButtonsBorderStyle; },\n/* harmony export */   \"getButtonsTypographyStyle\": function() { return /* binding */ getButtonsTypographyStyle; },\n/* harmony export */   \"getButtonsTextShadowStyle\": function() { return /* binding */ getButtonsTextShadowStyle; },\n/* harmony export */   \"getButtonsShadowStyle\": function() { return /* binding */ getButtonsShadowStyle; },\n/* harmony export */   \"getButtonsOutlineStyle\": function() { return /* binding */ getButtonsOutlineStyle; },\n/* harmony export */   \"getButtonsTransformStyle\": function() { return /* binding */ getButtonsTransformStyle; },\n/* harmony export */   \"getButtonsTransitionStyle\": function() { return /* binding */ getButtonsTransitionStyle; },\n/* harmony export */   \"getButtonsPlaceholderStyle\": function() { return /* binding */ getButtonsPlaceholderStyle; },\n/* harmony export */   \"getButtonsFontSizeValue\": function() { return /* binding */ getButtonsFontSizeValue; },\n/* harmony export */   \"resetFormsStyleComponents\": function() { return /* binding */ resetFormsStyleComponents; },\n/* harmony export */   \"getSuffixOpacity\": function() { return /* binding */ getSuffixOpacity; },\n/* harmony export */   \"getLuminance\": function() { return /* binding */ getLuminance; },\n/* harmony export */   \"getRGBsrValues\": function() { return /* binding */ getRGBsrValues; },\n/* harmony export */   \"getRGBValues\": function() { return /* binding */ getRGBValues; },\n/* harmony export */   \"getRGBfromHSL\": function() { return /* binding */ getRGBfromHSL; },\n/* harmony export */   \"loadedIframeCheck\": function() { return /* binding */ loadedIframeCheck; },\n/* harmony export */   \"initFontList\": function() { return /* binding */ initFontList; }\n/* harmony export */ });\n//buttons/forms default values\nvar spacingArray = ['', '0', 'var(--space-xxxxs)', 'var(--space-xxxs)', 'var(--space-xxs)', 'var(--space-xs)', 'var(--space-sm)', 'var(--space-md)', 'var(--space-lg)', 'var(--space-xl)', 'var(--space-xxl)', 'var(--space-xxxl)', 'var(--space-xxxxl)'],\n    textArray = ['', 'var(--text-xs)', 'var(--text-sm)', 'var(--text-md)', 'var(--text-lg)', 'var(--text-xl)', 'var(--text-xxl)', 'var(--text-xxxl)', 'var(--text-xxxxl)', 'inherit'],\n    textArrayValues = ['', 'var(--text-xs)', 'var(--text-sm)', 'var(--text-md)', 'var(--text-lg)', 'var(--text-xl)', 'var(--text-xxl)', 'var(--text-xxxl)', 'inherit', '', 'var(--text-xxxxl)'],\n    fontArray = ['', '--font-primary'],\n    btnFontIds = [0, 1],\n    btnColorCustomNiceLabels = [],\n    btnGradientsCustomNiceLabels = [],\n    btnColorLabels = [\"primary\", \"accent\", \"download\", \"warning\", \"success\", \"error\", \"info\"],\n    shadowVariables = ['', '', 'var(--shadow-xs)', 'var(--shadow-sm)', 'var(--shadow-md)', 'var(--shadow-lg)', 'var(--shadow-xl)'],\n    borderRadiusValues = ['', 'var(--radius-sm)', 'var(--radius-md)', 'var(--radius-lg)'];\nfunction setBtnColorCustomNiceLabels(colors, customNice) {\n  if (colors) {\n    btnColorLabels = colors;\n  }\n\n  if (customNice) {\n    btnColorCustomNiceLabels = customNice;\n  }\n}\n;\nfunction setBtnGradientNiceLabels(gradients) {\n  if (gradients && gradients.length > 0) {\n    btnGradientsCustomNiceLabels = gradients;\n  }\n}\n;\nfunction decodeSafeURIComponent(string) {\n  return decodeURIComponent(string.replace(/%\"/g, '%25\"'));\n}\n;\nfunction getCursorValue(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'auto';\n      break;\n\n    case 2:\n      return 'pointer';\n      break;\n\n    case 3:\n      return 'not-allowed';\n      break;\n\n    default:\n      return 'auto';\n  }\n}\n;\nfunction getBorderType(index) {\n  switch (index) {\n    case 0:\n      return 'border';\n      break;\n\n    case 1:\n      return 'border-top';\n      break;\n\n    case 2:\n      return 'border-right';\n      break;\n\n    case 3:\n      return 'border-bottom';\n      break;\n\n    case 4:\n      return 'border-left';\n      break;\n\n    default:\n      return 'border';\n  }\n}\n;\nfunction getBorderStyle(index) {\n  switch (index) {\n    case 0:\n      return 'none';\n      break;\n\n    case 1:\n      return 'solid';\n      break;\n\n    case 2:\n      return 'dashed';\n      break;\n\n    case 3:\n      return 'dotted';\n      break;\n\n    default:\n      return 'solid';\n  }\n}\n;\nfunction getTextTransform(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'capitalize';\n      break;\n\n    case 3:\n      return 'uppercase';\n      break;\n\n    case 4:\n      return 'lowercase';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getTextDecoration(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'underline';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getFontSmoothing() {\n  return '-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;';\n}\n;\nfunction getBoxShadowType(index) {\n  if (index == 0) return '';else return 'inset ';\n}\n;\nfunction getTransitionProperty(index) {\n  switch (index) {\n    case 0:\n      return 'all';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'background';\n      break;\n\n    case 3:\n      return 'opacity';\n      break;\n\n    case 4:\n      return 'border';\n      break;\n\n    case 5:\n      return 'box-shadow';\n      break;\n\n    case 6:\n      return 'outline';\n      break;\n\n    case 7:\n      return 'transform';\n      break;\n\n    case 8:\n      return 'color';\n      break;\n\n    default:\n      return 'all';\n  }\n}\n;\nfunction getTransitionEase(index) {\n  switch (index) {\n    case 0:\n      return 'ease';\n      break;\n\n    case 1:\n      return 'linear';\n      break;\n\n    case 2:\n      return 'ease-in';\n      break;\n\n    case 3:\n      return 'ease-out';\n      break;\n\n    case 4:\n      return 'var(--ease-in-out)';\n      break;\n\n    case 5:\n      return 'var(--ease-in)';\n      break;\n\n    case 6:\n      return 'var(--ease-out)';\n      break;\n\n    case 7:\n      return 'var(--ease-out-back)';\n      break;\n\n    default:\n      return 'ease';\n  }\n}\n;\nfunction getTransitionDelay(val) {\n  if (val == '') return '';\n  return ' ' + val + 's';\n}\n;\nfunction getTransformProperty(index) {\n  switch (index) {\n    case 0:\n      return 'none';\n      break;\n\n    case 1:\n      return 'translate';\n      break;\n\n    case 2:\n      return 'translateX';\n      break;\n\n    case 3:\n      return 'translateY';\n      break;\n\n    case 4:\n      return 'translateZ';\n      break;\n\n    case 5:\n      return 'scale';\n      break;\n\n    case 6:\n      return 'scaleX';\n      break;\n\n    case 7:\n      return 'scaleY';\n      break;\n\n    case 8:\n      return 'scaleZ';\n      break;\n\n    case 9:\n      return 'rotate';\n      break;\n\n    case 10:\n      return 'rotateX';\n      break;\n\n    case 11:\n      return 'rotateY';\n      break;\n\n    case 12:\n      return 'rotateZ';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getOutlineStyle(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'auto';\n      break;\n\n    case 2:\n      return 'dotted';\n      break;\n\n    case 3:\n      return 'dashed';\n      break;\n\n    case 4:\n      return 'solid';\n      break;\n\n    case 5:\n      return 'double';\n      break;\n\n    case 6:\n      return 'inset';\n      break;\n\n    case 7:\n      return 'outset';\n      break;\n\n    case 8:\n      return 'none';\n      break;\n\n    default:\n      return '';\n  }\n}\n;\nfunction getOutlineOffset(val) {\n  if (val == '') return '';\n  return 'outline-offset: ' + val + ';';\n}\n;\nfunction getColorValue(val, reset) {\n  if (!val || val == null) return ''; // check if inherit/transparent/default\n\n  if (val == 'transparent' || val.indexOf('transparent') == 0) return 'transparent';\n  if (val == 'inherit' || val.indexOf('inherit') == 0) return 'inherit';\n  if (val == '' || val.indexOf('-a') == 0) return ''; //check if custom color\n\n  return getColorValueFromList(val, reset);\n}\n;\nfunction getColorValueFromList(label, reset) {\n  var fallback = '';\n  if (!label || label == null) return '';\n  label = getNiceLabelForCustom(label);\n  if (!label) return ''; //check if this is an opacity value and provide fallback\n\n  if (checkColorIsOpacity(label)) {\n    if (reset && reset == true) {\n      //need to return css value\n      var basicLabel = removeOpacityFromLabel(label);\n      return 'hsla(var(' + basicLabel + '-h), var(' + basicLabel + '-s), var(' + basicLabel + '-l), ' + getOpacityDecFromLabel(label) + ')';\n    } else {\n      //return sass mixin\n      return 'alpha(var(' + removeOpacityFromLabel(label) + '), ' + getOpacityDecFromLabel(label) + ')';\n    }\n  } else {\n    return 'var(' + label + ')';\n  }\n}\n;\nfunction getNiceLabelForCustom(label) {\n  if (label.indexOf('custom-') > -1) {\n    var prefix = label.indexOf('custom-fdb-') > -1 ? 'custom-fdb-' : 'custom-';\n    var labelArray = label.split(prefix),\n        split = labelArray[1].split('-');\n\n    if (split.length > 1) {\n      var customLabel = prefix + split[0];\n      label = btnColorCustomNiceLabels[btnColorLabels.indexOf(customLabel) - 5] + labelArray[1].replace(split[0], '');\n    } else {\n      var customLabel = prefix + labelArray[1];\n      label = btnColorCustomNiceLabels[btnColorLabels.indexOf(customLabel) - 5];\n    }\n  }\n\n  return label;\n}\n;\nfunction removeOpacityFromLabel(label) {\n  return label.slice(0, -4);\n}\n;\nfunction getOpacityDecFromLabel(label) {\n  var opacity = parseInt(label.slice(-4).replace('-a', ''));\n  if (isNaN(opacity)) return 1;\n  return parseFloat((opacity / 100).toFixed(2));\n}\n;\nfunction checkColorIsOpacity(label) {\n  var array = label.split('-');\n\n  if (array.length > 0 && array[array.length - 1].indexOf('a') == 0 && array[array.length - 1].length == 3) {\n    return true;\n  }\n\n  return false;\n}\n;\nfunction getColorFbIos($color, $varLabel, $spacing, $reset) {\n  if (!$color || $color == null) return ['', ''];\n  if ($color == 'transparent' || $color == 'inherit' || $color == '') return ['', $color];\n  return ['', getColorValue($color, $reset)];\n}\n; //if you updates this -> you'll need to update the same in the app-global.js as well\n\nvar paddingVariables = ['--space-xxxxs', '--space-xxxs', '--space-xxs', '--space-xs', '--space-sm', '--space-md', '--space-lg', '--space-xl', '--space-xxl', '--space-xxxl', '--space-xxxxl'],\n    fibonacciSeq = [0.125, 0.25, 0.375, 0.5, 0.75, 1.25, 2, 3.25, 5.25, 8.5, 13.75],\n    prFourth = [0.237, 0.316, 0.422, 0.563, 0.75, 1, 1.333, 1.777, 2.369, 3.157, 4.21],\n    auFourth = [0.177, 0.25, 0.354, 0.5, 0.707, 1, 1.414, 1.999, 2.827, 3.998, 5.65],\n    prFifth = [0.133, 0.2, 0.296, 0.444, 0.667, 1, 1.5, 2.25, 3.375, 5.063, 7.59],\n    goldenRatio = [0.09, 0.146, 0.236, 0.382, 0.618, 1, 1.618, 2.618, 4.236, 6.854, 11.08],\n    spaceRatioUnit = [false, fibonacciSeq, prFourth, auFourth, prFifth, goldenRatio, ''];\nfunction getHSL(color) {\n  if (isNaN(color[0])) color[0] = 0;\n  return 'hsl(' + Math.round(color[0]) + ', ' + Math.round(color[1] * 100) + '%, ' + Math.round(color[2] * 100) + '%)';\n}\n;\nfunction getHSLA(color, opacity) {\n  if (isNaN(color[0])) color[0] = 0;\n  return 'hsla(' + Math.round(color[0]) + ', ' + Math.round(color[1] * 100) + '%, ' + Math.round(color[2] * 100) + '%, ' + parseFloat((Number(opacity) / 100).toFixed(2)) + ')';\n}\n;\nfunction setHSLAfromHSL(color, opacity) {\n  color = color.replace('hsl(', 'hsla(');\n  color = color.replace(')', ', ' + parseFloat((Number(opacity) / 100).toFixed(2)) + ')');\n  return color;\n}\n;\nfunction getHSLFromString(color) {\n  var array = color.replace('hsl(', '').replace(')', '').split(',');\n\n  if (array && array.length > 1) {\n    return [Number(array[0].trim()), parseFloat((array[1].trim().replace('%', '') / 100).toFixed(2)), parseFloat((array[2].trim().replace('%', '') / 100).toFixed(2))];\n  } else {\n    return '';\n  }\n}\n;\nfunction setCssVariable(variable, value, priority) {\n  var root = document.documentElement;\n\n  if (priority) {\n    root.style.setProperty(variable, value, priority);\n  } else {\n    root.style.setProperty(variable, value);\n  }\n}\n;\nfunction getCssVariable(variable) {\n  return getComputedStyle(document.documentElement).getPropertyValue(variable);\n}\n;\nfunction setBodyCssVariable(variable, value) {\n  var body = document.getElementsByTagName('body')[0];\n  body.style.setProperty(variable, value);\n}\n;\nfunction setElementCssVariable(className, variable, value) {\n  var element = document.getElementsByClassName(className);\n\n  if (element.length > 0) {\n    element[0].style.setProperty(variable, value);\n  }\n}\n;\nfunction windowScrollTo(val) {\n  window.scrollTo(0, val);\n}\n;\nfunction selectIframeSection(val) {\n  var section = $('[data-section=\"' + val + '\"]');\n  $('.cd-demo-item--selected').removeClass('cd-demo-item--selected');\n\n  if (section.length > 0) {\n    section.addClass('cd-demo-item--selected');\n\n    if ($('.cd-demo-color__list--selected').length > 0) {\n      $('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n      section.addClass('cd-demo-color__list--selected');\n    }\n\n    windowScrollTo(section.parent().offset().top - 20);\n  }\n}\n;\nfunction selectIframeTab(val) {\n  //remove the selection effect\n  $('.cd-demo-item--selected').removeClass('cd-demo-item--selected');\n  var section = $('[data-tab]');\n\n  if (section.length > 0) {\n    section.addClass('cd-demo-item--is-hidden');\n    section.filter('[data-tab=\"' + val + '\"]').removeClass('cd-demo-item--is-hidden');\n\n    if (val == 'tab-lh-crop') {\n      //lhcrop in typograpgy -> select --font-primary\n      selectIframeSection('--font-1');\n    }\n  }\n}\n;\nfunction getMq() {\n  var windowWidth = $(window).outerWidth(),\n      mq = 0,\n      string = ''; // check if you can get external document width\n\n  if (window.parent && window.parent.document && window.parent.document.body && window.parent.document.body.clientWidth) {\n    windowWidth = window.parent.document.body.clientWidth;\n  }\n\n  switch (true) {\n    case windowWidth >= 1440:\n      mq = 5;\n      string = 'Visible mq: > 1440px';\n      break;\n\n    case windowWidth >= 1280:\n      mq = 4;\n      string = 'Visible mq: > 1280px';\n      break;\n\n    case windowWidth >= 1024:\n      mq = 3;\n      string = 'Visible mq: > 1024px';\n      break;\n\n    case windowWidth >= 600:\n      mq = 2;\n      string = 'Visible mq: > 600px';\n      break;\n\n    case windowWidth >= 480:\n      mq = 1;\n      string = 'Visible mq: > 480px';\n      break;\n\n    default:\n      mq = 0;\n      string = 'None';\n  }\n\n  $('.js-width').text(string);\n  return mq;\n}\n;\nfunction getScreenSize() {\n  if (window.parent && window.parent.document && window.parent.document.body && window.parent.document.body.clientWidth) {\n    return [window.parent.document.body.clientWidth, $(window).outerHeight()];\n  } else {\n    return [$(window).outerWidth(), $(window).outerHeight()];\n  }\n}\n;\nfunction getValidResponsiveValue(spaceArray, index, subIndex) {\n  var item = subIndex !== false ? spaceArray[index][subIndex] : spaceArray[index];\n  if (index == 0) return item;\n\n  if (item !== false && item !== '') {\n    return item;\n  } else {\n    return getValidResponsiveValue(spaceArray, index - 1, subIndex);\n  }\n}\n;\nfunction getValueUnit(value) {\n  if (!value || value == '') return [false, false];\n  var number = parseFloat(value),\n      unit = value.replace(number, '');\n  return [number, unit];\n}\n;\nfunction getBodyNotFalse(array, mq) {\n  var newArray = [];\n\n  for (var i = 0; i < 3; i++) {\n    newArray[i] = getValidResponsiveValue(array, mq, i);\n  }\n\n  return newArray;\n}\n;\nvar projectLoaded = '';\nvar MQ = getMq();\nfunction loadGlobalsStyle(project) {\n  //for components -> load project style\n  if (project) {\n    $('.js-cd-demo').trigger('globalsUpdating');\n    projectLoaded = project;\n  }\n\n  if (project.colors && project.colors !== '' && Object.values) {\n    //colors were saved and need to be modified\n    loadColorStyle(JSON.parse(project.colors));\n  } else {\n    loadColorDefaultStyle();\n  }\n\n  if (project.typography && project.typography !== '' && Object.values) {\n    //typography was saved and need to be modified\n    loadTypographyStyle(JSON.parse(decodeSafeURIComponent(project.typography)), true, MQ);\n  } else {\n    loadTypographyDefaultStyle(true, MQ);\n  } //do the same for the other globals\n\n\n  if (project.spacing && project.spacing !== '' && Object.values) {\n    loadSpacingStyle(JSON.parse(decodeSafeURIComponent(project.spacing)), MQ);\n  } else {\n    loadSpacingDefaultStyle(MQ);\n  }\n\n  if (project.buttons && project.buttons !== '' && Object.values) {\n    loadButtonsStyle(JSON.parse(decodeSafeURIComponent(project.buttons)), MQ);\n  } else {\n    loadButtonsDefaultStyle(MQ);\n  }\n\n  if (project.form && project.form !== '' && Object.values) {\n    loadFormsStyle(JSON.parse(decodeSafeURIComponent(project.form)), MQ);\n  } else {\n    loadFormsDefaultStyle(MQ);\n  } //if you need to update style on resize\n\n\n  if (project) {\n    $('.js-cd-demo').trigger('globalsUpdate');\n  }\n\n  $('.js-cd-demo').trigger('showComponent');\n}\n;\nfunction loadColorStyle(colors) {\n  //no need to do this for custom opacities as only default one are used in components\n  var variations = ['-lighter', '-light', '', '-dark', '-darker'];\n  btnColorLabels = Object.values(colors['mainColorLabels']);\n  btnColorCustomNiceLabels = colors['customColorLabels'] ? Object.values(colors['customColorLabels']) : [];\n  btnGradientsCustomNiceLabels = colors['gradientColorLabels'] ? Object.values(colors['gradientColorLabels']) : []; //set main colors - including custom colors as well\n\n  for (var i = 0; i < btnColorLabels.length; i++) {\n    var cssVarLab = i > 4 ? btnColorCustomNiceLabels[i - 5] : '--color-' + btnColorLabels[i];\n\n    for (var j = 0; j < variations.length; j++) {\n      setCssVariable(cssVarLab + variations[j], getHSL(Object.values(colors[btnColorLabels[i]][0][j])));\n      setColorPartVariables(cssVarLab + variations[j], Object.values(colors[btnColorLabels[i]][0][j]));\n    }\n  } //set black & white\n\n\n  var bVariations = ['', '-light', '-lighter'],\n      blackArray = getBWArray(colors['blackColors'][0]),\n      whiteArray = getBWArray(colors['whiteColors'][0]);\n\n  for (var i = 0; i < blackArray.length; i++) {\n    setCssVariable('--color-black' + bVariations[i], getHSL(blackArray[i]));\n    setColorPartVariables('--color-black' + bVariations[i], blackArray[i]);\n  }\n\n  var wVariations = ['', '-dark', '-darker'];\n\n  for (var i = 0; i < whiteArray.length; i++) {\n    setCssVariable('--color-white' + wVariations[i], getHSL(whiteArray[i]));\n    setColorPartVariables('--color-white' + wVariations[i], whiteArray[i]);\n  } //set contrasts\n\n\n  var contrastLabels = ['-bg', '-contrast-lower', '-contrast-low', '-contrast-medium', '-contrast-high', '-contrast-higher'];\n\n  for (var i = 0; i < contrastLabels.length; i++) {\n    setCssVariable('--color' + contrastLabels[i], getHSL(Object.values(colors['contrastColors'][0][i])));\n    setColorPartVariables('--color' + contrastLabels[i], Object.values(colors['contrastColors'][0][i]));\n  } // set gradients\n\n\n  for (var i = 0; i < btnGradientsCustomNiceLabels.length; i++) {\n    var cssVarLab = '--gradient-' + btnGradientsCustomNiceLabels[i],\n        gradientId = colors['gradientColorIds'][i] + 'Gradients';\n    setCssVariable(cssVarLab + '-stop-1', getHSL(Object.values(colors[gradientId][0][0])));\n    setColorPartVariables(cssVarLab + '-stop-1', Object.values(colors[gradientId][0][0]));\n    setCssVariable(cssVarLab + '-stop-2', getHSL(Object.values(colors[gradientId][0][1])));\n    setColorPartVariables(cssVarLab + '-stop-2', Object.values(colors[gradientId][0][1]));\n  } //font rendering\n\n\n  var fontRenderingCode = '';\n\n  if (colors['fontRendering'] && colors['fontRendering'][0]) {\n    if (Number(colors['fontRendering'][0]) == 1) fontRenderingCode = 'body{-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}';else if (Number(colors['fontRendering'][0]) == 2) fontRenderingCode = 'body{-webkit-font-smoothing: auto;-moz-osx-font-smoothing: auto;}';\n  }\n\n  var style = '<style id=\"font-rendering-style\">' + fontRenderingCode + '</style>';\n  $('#font-rendering-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\n;\nfunction loadColorDefaultStyle() {\n  // colors array\n  var defaultColors = [['--color-primary-darker', [204, 70, 33]], ['--color-primary-dark', [204, 70, 43]], ['--color-primary', [204, 70, 53]], ['--color-primary-light', [204, 70, 63]], ['--color-primary-lighter', [204, 70, 73]], ['--color-accent-darker', [282, 44, 27]], ['--color-accent-dark', [282, 44, 37]], ['--color-accent', [282, 44, 47]], ['--color-accent-light', [282, 44, 57]], ['--color-accent-lighter', [282, 44, 67]], ['--color-download-darker', [145, 63, 22]], ['--color-download-dark', [145, 63, 32]], ['--color-download', [145, 63, 42]], ['--color-download-light', [145, 63, 52]], ['--color-download-lighter', [145, 63, 62]], ['--color-black', [240, 8, 12]], ['--color-white', [0, 0, 100]], ['--color-warning-darker', [46, 68, 29]], ['--color-warning-dark', [46, 68, 39]], ['--color-warning', [46, 68, 49]], ['--color-warning-light', [46, 68, 59]], ['--color-warning-lighter', [46, 68, 69]], ['--color-success-darker', [94, 48, 20]], ['--color-success-dark', [94, 48, 30]], ['--color-success', [94, 48, 40]], ['--color-success-light', [94, 48, 50]], ['--color-success-lighter', [94, 48, 60]], ['--color-error-darker', [6, 63, 26]], ['--color-error-dark', [6, 63, 36]], ['--color-error', [6, 63, 46]], ['--color-error-light', [6, 63, 56]], ['--color-error-lighter', [6, 63, 66]], ['--color-info-darker', [204, 62, 27]], ['--color-info-dark', [204, 62, 37]], ['--color-info', [204, 62, 47]], ['--color-info-light', [204, 62, 57]], ['--color-info-lighter', [204, 62, 67]], ['--color-bg', [220, 5, 22]], ['--color-contrast-lower', [216, 4, 25]], ['--color-contrast-low', [220, 3, 34]], ['--color-contrast-medium', [220, 2, 63]], ['--color-contrast-high', [180, 2, 90]], ['--color-contrast-higher', [0, 0, 100]]];\n\n  for (var i = 0; i < defaultColors.length; i++) {\n    setCssVariable(defaultColors[i][0], getHSL(defaultColors[i][1]));\n    setColorPartVariables(defaultColors[i][0], defaultColors[i][1]);\n  }\n}\n;\nfunction setColorPartVariables(label, colorArray) {\n  setCssVariable(label + '-h', Math.round(colorArray[0]));\n  setCssVariable(label + '-s', Math.round(colorArray[1] * 100) + '%');\n  setCssVariable(label + '-l', Math.round(colorArray[2] * 100) + '%');\n}\n;\nfunction getBWArray(obj) {\n  var array = [];\n\n  for (var property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      array.push(Object.values(obj[property]));\n    }\n  }\n\n  return array;\n}\n;\nfunction loadTypographyStyle(typography, bool, mq) {\n  if (bool) {\n    //not responsive things\n    if (typography['fontCode'] && typography != '') $(typography['fontCode']).appendTo($('head'));\n\n    for (var property in typography['fontFamilies']) {\n      if (typography['fontFamilies'].hasOwnProperty(property) && typography['fontFamilyLabels'].hasOwnProperty(property)) {\n        setBodyCssVariable(typography['fontFamilyLabels'][property], typography['fontFamilies'][property]);\n      }\n    }\n\n    if (typography['lhCropCapitalLetter']) {\n      var lhcropArray = Object.values(typography['lhCropCapitalLetter']);\n      if (lhcropArray.length > 0) setCssVariable('--font-primary-capital-letter', lhcropArray[0]);\n    }\n\n    fontArray = [''];\n    btnFontIds = [0];\n\n    for (var property in typography['fontFamilyLabels']) {\n      if (typography['fontFamilyLabels'].hasOwnProperty(property)) {\n        fontArray.push(typography['fontFamilyLabels'][property]);\n        btnFontIds.push(typography['fontFamilyIds'][property]);\n      }\n    }\n  } //body/heading style\n\n\n  var headingValues = getBodyNotFalse(getTypographyArray(typography['headingInfo']), mq),\n      bodyValues = getBodyNotFalse(getTypographyArray(typography['bodyInfo']), mq);\n  var textVariables = 'root, *{--text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));}';\n  loadTypographyStyleTag(textVariables + getTypographyStyle(headingValues, 'h1, h2, h3, h4', typography) + getTypographyStyle(bodyValues, 'body', typography));\n  setTypographyCssVariables(headingValues, bodyValues, typography, mq);\n}\n;\nfunction loadTypographyDefaultStyle(bool, mq) {\n  // set variables - get values for --text-base-size and --text-scale-ratio\n  var bodyStyle = '--font-primary: Inter, system-ui, sans-serif;--text-base-size: 1em;--text-scale-ratio: 1.2;--text-unit: 1em;--body-line-height: 1.4;--heading-line-height: 1.2;--font-primary-capital-letter: 1;',\n      allStyle = ' --text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));';\n  bodyStyle = ':root{' + bodyStyle + '}';\n  allStyle = ':root, *{' + allStyle + '}';\n  var bodyResStyle = '@media (min-width:64rem){:root{--text-base-size: 1.25em;--text-scale-ratio: 1.25;}}';\n  var headingStyle = 'h1, h2, h3, h4 {font-family: var(--font-primary);font-weight: 700;}';\n  loadTypographyStyleTag(bodyStyle + allStyle + headingStyle + bodyResStyle); // append font link\n\n  var fontLink = '<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">';\n  var typographyStyle = $('#typography-style');\n  $(fontLink).insertAfter(typographyStyle);\n}\n;\nfunction loadTypographyStyleTag(styleContent) {\n  var defaultStyle = 'mark {background-color: hsla(var(--color-accent-h), var(--color-accent-s), var(--color-accent-l), 0.2);color: inherit;}.text-component {--line-height-multiplier: 1;--text-vspace-multiplier: 1;}.text-component blockquote {padding-left: 1em;border-left: 4px solid var(--color-contrast-low);}.text-component hr {background: var(--color-contrast-low);height: 1px;}.text-component figcaption {font-size: var(--text-sm);color: var(--color-contrast-medium);}.article {--body-line-height: 1.58;--text-vspace-multiplier: 1.2;}';\n  var style = '<style id=\"typography-style\">' + styleContent + defaultStyle + '</style>';\n  $('#typography-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\nfunction loadTypographyCssVarStyleGuide(typography) {\n  var code = ':root {'; // font family definition\n\n  var fontFamilies = '',\n      fontFamilyClasses = '';\n  var scale = '';\n  var textVariables = '';\n  var scaleResponsive = '';\n\n  if (typography['fontFamilies'] && typography['fontFamilyLabels']) {\n    for (var i = 0; i < typography['fontFamilies'].length; i++) {\n      if (typography['fontFamilyLabels'][i]) {\n        fontFamilies = fontFamilies + typography['fontFamilyLabels'][i] + ': ' + typography['fontFamilies'][i] + ';';\n        fontFamilyClasses = fontFamilyClasses + typography['fontFamilyLabels'][i].replace('--', '.') + '{font-family: var(' + typography['fontFamilyLabels'][i] + ');}';\n      }\n    }\n  }\n\n  code = code + fontFamilies;\n\n  if (typography['baseSize'] && typography['scaleRatio'] && typography['bodyInfo'] && typography['headingInfo']) {\n    scale = getTypographyScaleVar(typography, 0);\n    scaleResponsive = getTypographyScaleVarRes(typography);\n    textVariables = 'root, * {--text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));}';\n  }\n\n  code = code + scale + '}' + textVariables + scaleResponsive + fontFamilyClasses;\n  return code;\n}\n;\nfunction loadTypographyStyleStyleGuide(typography) {\n  var mq = ['', '32rem', '48rem', '64rem', '80rem', '90rem'];\n  var code = '';\n\n  if (typography['bodyInfo'] && typography['headingInfo']) {\n    for (var i = 0; i < mq.length; i++) {\n      var style = '';\n\n      if (typography['bodyInfo'][i]) {\n        var bodyStyle = getTypographyStyle(typography['bodyInfo'][i], 'body', typography);\n        style = i > 0 ? style + '@media (min-width:' + mq[i] + ') {' + bodyStyle + '}' : style + bodyStyle;\n      }\n\n      if (typography['headingInfo'][i]) {\n        var headingStyle = getTypographyStyle(typography['headingInfo'][i], 'h1, h2, h3, h4', typography);\n        style = i > 0 ? style + '@media (min-width:' + mq[i] + ') {' + headingStyle + '}' : style + headingStyle;\n      }\n\n      code = code + style;\n    }\n  }\n\n  return code;\n}\n;\nfunction getTypographyScaleVar(typography, index) {\n  var code = '';\n  if (typography['baseSize'][index]) code = code + '--text-base-size: ' + typography['baseSize'][index] + ';';\n  if (typography['scaleRatio'][index]) code = code + '--text-scale-ratio: ' + typography['scaleRatio'][index] + ';';\n  if (typography['bodyInfo'][index] && typography['bodyInfo'][index][2]) code = code + '--body-line-height: ' + typography['bodyInfo'][index][2] + ';';\n  if (typography['headingInfo'][index] && typography['headingInfo'][index][2]) code = code + '--heading-line-height: ' + typography['headingInfo'][index][2] + ';';\n  if (index == 0) code = code + '--text-unit: ' + getTextUnit(typography);\n  return code;\n}\nfunction getTextUnit(typography) {\n  var textUnit = '1em';\n  if (typography['baseSize'][0] && (typography['baseSize'][0].indexOf('px') > -1 || typography['baseSize'][0].indexOf('rem') > -1)) textUnit = 'var(--text-base-size)';\n  return textUnit;\n}\n;\nfunction getTypographyScaleVarRes(typography) {\n  var mq = ['', '32rem', '48rem', '64rem', '80rem', '90rem'];\n  var code = '';\n\n  for (var i = 1; i < mq.length; i++) {\n    code = code + '@media (min-width:' + mq[i] + ') {:root{' + getTypographyScaleVar(typography, i) + '}}';\n  }\n\n  return code;\n}\nfunction loadSpacingStyle(spacing, mq) {\n  var spaceUnit = getValidResponsiveValue(Object.values(spacing['spaceUnit']), mq, false),\n      spaceRatioCustom = getSpaceRatioCustom(spacing['customSpaceRatio']); // var srList = getSpacingValues(Object.values(spacing['spaceRatio']), spaceUnit, mq, spaceRatioCustom),\n  // this will return only the list of the multiplier (not including the --space-unit)\n\n  var srList = getSpacingMultiplier(Object.values(spacing['spaceRatio']), mq, spaceRatioCustom),\n      paddingVariable = srList[getValidResponsiveValue(Object.values(spacing['padding']), mq, false) - 1];\n  updateSpacingCssVariables(srList, paddingVariable, spaceUnit);\n}\n;\nfunction loadSpacingDefaultStyle(mq) {\n  var responsiveSpacing = '@media (min-width:64rem){:root{--space-unit:  1.25em;}}'; // var style = '<style id=\"spacing-style\">'+responsiveSpacing+'</style>';\n  // $('#spacing-style').remove();\n  // var baseStyle = $('#cd-base-part-1');\n  // $(style).insertAfter(baseStyle);\n  // load after component style -> this will need to overwrite the default spacing style\n  // $('head').append(style);\n\n  loadSpacingStyleTag(responsiveSpacing);\n}\n;\nfunction loadSpacingStyleTag(style) {\n  var style = '<style id=\"spacing-style\">' + style + '</style>';\n  $('#spacing-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\n;\nfunction setTypographyCssVariables(headingValues, bodyValues, typography, mq) {\n  //css variables\n  if (headingValues[2] && headingValues[2] != '') {\n    setCssVariable('--heading-line-height', headingValues[2]); // setElementCssVariable('text-component', '--heading-line-height', headingValues[2]);\n  }\n\n  if (bodyValues[2] && bodyValues[2] != '') {\n    setCssVariable('--body-line-height', bodyValues[2]); // setElementCssVariable('text-component', '--body-line-height', bodyValues[2]);\n  }\n\n  setCssVariable('--text-base-size', getValidResponsiveValue(Object.values(typography['baseSize']), mq, false));\n  setCssVariable('--text-scale-ratio', getValidResponsiveValue(Object.values(typography['scaleRatio']), mq, false));\n  setCssVariable('--text-unit', getTextUnit(typography));\n}\n;\nfunction getTypographyArray(obj) {\n  var arr = [];\n\n  for (var i = 0; i < 6; i++) {\n    arr.push(Object.values(obj[i]));\n  }\n\n  return arr;\n}\n;\nfunction getTypographyStyle(array, selector, typography) {\n  var style = '';\n\n  if (parseInt(array[0]) && parseInt(array[0]) != 0) {\n    var fontIds = Object.values(typography['fontFamilyIds']); // importantCss = selector == 'body' ? '!important' : '';\n\n    style = style + 'font-family: ' + typography['fontFamilies'][fontIds.indexOf(parseInt(array[0]))] + ';';\n  }\n\n  if (array[1] && array[1] != '') style = style + 'font-weight: ' + array[1] + ';';\n  return selector + '{' + style + '}';\n}\n; // export function updateSpacingCssVariables(list, padding, spaceUnit) {\n// \tsetCssVariable('--space-unit', spaceUnit);\n// \tsetCssVariable('--component-padding', padding);\n// \tfor(var i = 0; i < list.length; i++) {\n// \t\tsetCssVariable(paddingVariables[i], list[i]);\n// \t}\n// };\n\nfunction updateSpacingCssVariables(list, padding, spaceUnit) {\n  setCssVariable('--space-unit', spaceUnit);\n  var spacingVariables = '--component-padding:' + 'calc(' + padding + ' * var(--space-unit));';\n\n  for (var i = 0; i < list.length; i++) {\n    spacingVariables = spacingVariables + paddingVariables[i] + ': calc(' + list[i] + ' * var(--space-unit));';\n  }\n\n  spacingVariables = 'root, *{' + spacingVariables + '}';\n  loadSpacingStyleTag(spacingVariables);\n}\n;\nfunction getSpacingValues(spaceRatio, su, mq, spaceRatioCustom) {\n  var list = spaceRatioUnit[getValidResponsiveValue(spaceRatio, mq, false)];\n\n  if (list == '') {\n    //custom scale\n    list = getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio);\n  }\n\n  var spaceList = [];\n  var suArray = getValueUnit(su);\n\n  if (suArray[0] === false) {\n    suArray[0] = 1;\n    suArray[1] = 'em';\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    var updated = Math.round(list[i] * suArray[0] * 1000) / 1000;\n    spaceList.push(updated + suArray[1]);\n  }\n\n  return spaceList;\n}\n;\nfunction getSpacingMultiplier(spaceRatio, mq, spaceRatioCustom) {\n  var list = spaceRatioUnit[getValidResponsiveValue(spaceRatio, mq, false)];\n\n  if (list == '') {\n    //custom scale\n    list = getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio);\n  }\n\n  return list;\n}\n;\nfunction getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio) {\n  var array = [];\n\n  for (var i = 0; i < spaceRatioUnit[1].length; i++) {\n    array[i] = getSpacingValidResponsiveValueCustomRatio(spaceRatioCustom[i], mq, spaceRatio);\n  }\n\n  return array;\n}\n;\nfunction getSpacingValidResponsiveValueCustomRatio(spaceArray, index, spaceRatio) {\n  if (index == 0) return spaceArray[0];\n  var item = spaceArray[index];\n\n  if (item !== false && item !== '' && spaceRatio[index] == 6) {\n    //item defined and space ratio set to custom\n    return item;\n  } else {\n    return getSpacingValidResponsiveValueCustomRatio(spaceArray, index - 1, spaceRatio);\n  }\n}\n;\nfunction getSpaceRatioCustom(obj) {\n  var arr = [];\n\n  for (var i = 0; i < 11; i++) {\n    arr.push(Object.values(obj[i]));\n  }\n\n  return arr;\n}\n;\nfunction loadButtonsStyle(buttons) {\n  //convert obj to array;\n  var buttonsArray = getButtonsArrayStyle(buttons['style']);\n  var btnsList = ['btn', 'btn--primary', 'btn--subtle', 'btn--accent', 'btn--disabled', 'btn--sm', 'btn--md', 'btn--lg'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      code = '';\n\n  for (var i = 0; i < btnsList.length; i++) {\n    code = code + buttonsCodeStyle(buttonsArray[btnsList[i]], btnsList[i], statusList, statusPriorityList, false, true);\n  } // get code for btn--icon\n\n\n  var btnIconCode = buttonIconCodeStyle(buttonsArray['btn']); // get code for button variables\n\n  var btnVariables = buttonVariables(buttonsArray);\n  loadButtonsStyleTag(btnVariables + code + btnIconCode);\n}\n;\nfunction loadButtonsStyleStyleGuide(buttons) {\n  // buttonsArray = buttons['btnStyle']\n  if (!buttons['btnStyle']) return '';\n  var buttonsArray = buttons['btnStyle']; // button-icon class\n\n  var btnIconCode = '';\n\n  if (buttonsArray['btn']) {\n    btnIconCode = buttonIconCodeStyle(buttonsArray['btn']);\n  } // button CSS variables\n\n\n  var btnVariables = buttonVariables(buttonsArray); // buttons style\n\n  var btnsList = ['btn', 'btn--primary', 'btn--subtle', 'btn--accent', 'btn--disabled', 'btn--sm', 'btn--md', 'btn--lg'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      btnStyle = ''; // default btns style\n\n  for (var i = 0; i < btnsList.length; i++) {\n    btnStyle = btnStyle + buttonsCodeStyle(buttonsArray[btnsList[i]], btnsList[i], statusList, statusPriorityList, false, true);\n  } // custom btns code\n\n\n  if (buttons['customBtns'] && buttons['customBtns'].length > 0) {\n    for (var i = 0; i < buttons['customBtns'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(buttonsArray[buttons['customBtns'][i][1]], buttons['customBtns'][i][0], statusList, statusPriorityList, false, true);\n    }\n  }\n\n  return btnVariables + btnStyle + btnIconCode;\n}\n;\nfunction loadSharedStyleStyleGuide(shared_style) {\n  var statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      btnStyle = '';\n\n  if (shared_style['customStyles'] && shared_style['customStyles'].length > 0) {\n    for (var i = 0; i < shared_style['customStyles'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(shared_style.customStyleArray[shared_style['customStyles'][i][1]], escapeCSScharacters(shared_style['customStyles'][i][0]), statusList, statusPriorityList, false);\n    }\n  }\n\n  if (shared_style['customTextStyles'] && shared_style['customTextStyles'].length > 0) {\n    for (var i = 0; i < shared_style['customTextStyles'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(shared_style.customTextStyleArray[shared_style['customTextStyles'][i][1]], escapeCSScharacters(shared_style['customTextStyles'][i][0]), statusList, statusPriorityList, false);\n    }\n  }\n\n  return btnStyle;\n}\n;\nfunction escapeCSScharacters(label) {\n  label = label.replace(/\\:/g, '\\\\:');\n  label = label.replace(/\\%/g, '\\\\%');\n  label = label.replace(/\\//g, '\\\\/');\n  return label;\n}\n;\nfunction loadButtonsDefaultStyle(mq) {\n  var btnsStyle = ':root {--btn-font-size: 1em;--btn-padding-x: var(--space-sm); --btn-padding-y: var(--space-xxs); -btn-radius: 0.25em;}.btn {line-height: 1.2;box-shadow: var(--shadow-xs);-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;transition: .2s; will-change: transform;}.btn:hover {cursor: pointer;box-shadow: var(--shadow-sm);}.btn:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-contrast-higher-h), var(--color-contrast-higher-s), var(--color-contrast-higher-l), 0.15);outline: none;}.btn:active {transform: translateY(2px);}.btn--primary {background-color: var(--color-primary);color: var(--color-white)}.btn--primary:hover {background-color: var(--color-primary-dark);}.btn--primary:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-primary-h), var(--color-primary-s), var(--color-primary-l), 0.2);}.btn--subtle {background-color: var(--color-contrast-lower);color: var(--color-contrast-higher);}.btn--accent {background-color: var(--color-accent);color: var(--color-white);}.btn--accent:hover {background-color: var(--color-accent-dark);}.btn--accent:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-accent-h), var(--color-accent-s), var(--color-accent-l), 0.2);}.btn--disabled, .btn[disabled], .btn[readonly] {opacity: 0.6;cursor: not-allowed;}.btn--sm{font-size: 0.8em;}.btn--md{font-size: 1.2em;}.btn--lg{font-size: 1.4em;}';\n  loadButtonsStyleTag(btnsStyle);\n}\n;\nfunction buttonVariables(btnStyle) {\n  var sizes = [['btn', ''], ['btn--sm', '-sm'], ['btn--md', '-md'], ['btn--lg', '-lg']];\n  var string = '';\n\n  for (var i = 0; i < sizes.length; i++) {\n    if (btnStyle[sizes[i][0]] && btnStyle[sizes[i][0]]['none'] && btnStyle[sizes[i][0]]['none']['typography']) {\n      var fontBase = getButtonsFontSizeValue(btnStyle[sizes[i][0]]['none']['typography']);\n      if (fontBase != '') string = string + '--btn-font-size' + sizes[i][1] + ':' + fontBase + ';';\n    }\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['padding'] && btnStyle['btn']['none']['padding'][1]) {\n    string = string + '--btn-padding-x:' + getButtonsPaddingValue(btnStyle['btn']['none']['padding'][1]) + ';';\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['padding'] && btnStyle['btn']['none']['padding'][0]) {\n    string = string + '--btn-padding-y:' + getButtonsPaddingValue(btnStyle['btn']['none']['padding'][0]) + ';';\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['appearance']) {\n    if (btnStyle['btn']['none']['appearance'][2]) {\n      string = string + '--btn-radius:' + btnStyle['btn']['none']['appearance'][2] + ';';\n    } else {\n      string = string + '--btn-radius: 0em;';\n    }\n  }\n\n  return ':root{' + string + '}';\n}\n;\nfunction loadButtonsStyleTag(style) {\n  var styleEl = '<style id=\"buttons-style\">' + style + '</style>';\n  var baseStyle = $('#cd-base-part-1');\n  $(styleEl).insertAfter(baseStyle); // $('head').append(styleEl);\n}\n;\nfunction loadFormsStyle(forms) {\n  var formsArray = getButtonsArrayStyle(forms['style']);\n  var formsList = ['form-control', '[disabled]', '[aria-invalid]', 'legend', 'form-label'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      code = '';\n  code = resetFormsStyleComponents();\n\n  for (var i = 0; i < formsList.length; i++) {\n    code = code + buttonsCodeStyle(formsArray[formsList[i]], formsList[i], statusList, statusPriorityList, true);\n  } // get code for form variables\n\n\n  var btnVariables = formVariables(formsArray['form-control']);\n  loadFormsStyleTag(btnVariables + code);\n}\n;\nfunction loadFormsStyleStyleGuide(form) {\n  // form elements style\n  if (!form['btnStyle']) return '';\n  var formsArray = form['btnStyle'];\n  var formsList = ['form-control', '[disabled]', '[aria-invalid]', 'legend', 'form-label'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      formStyle = '';\n\n  for (var i = 0; i < formsList.length; i++) {\n    formStyle = formStyle + buttonsCodeStyle(formsArray[formsList[i]], formsList[i], statusList, statusPriorityList, true);\n  } // get code for form variables\n\n\n  var formCSSVariables = formVariables(formsArray['form-control']);\n  return formStyle + formCSSVariables;\n}\n;\nfunction formVariables(formStyle) {\n  var string = '';\n\n  if (formStyle && formStyle['none'] && formStyle['none']['padding'] && formStyle['none']['padding'][1]) {\n    string = string + '--form-control-padding-x:' + getButtonsPaddingValue(formStyle['none']['padding'][1]) + ';';\n  }\n\n  if (formStyle && formStyle['none'] && formStyle['none']['padding'] && formStyle['none']['padding'][0]) {\n    string = string + '--form-control-padding-y:' + getButtonsPaddingValue(formStyle['none']['padding'][0]) + ';';\n  }\n\n  if (formStyle && formStyle['none'] && formStyle['none']['appearance']) {\n    if (formStyle['none']['appearance'][2]) {\n      string = string + '--form-control-radius:' + formStyle['none']['appearance'][2] + ';';\n    } else {\n      string = string + '--form-control-radius: 0em;';\n    }\n  }\n\n  return ':root{' + string + '}';\n}\n;\nfunction loadFormsDefaultStyle(mq) {\n  var formStyle = ':root {--form-control-padding-x: var(--space-xs);--form-control-padding-y: var(--space-xxs);--form-control-radius: 0.25em;}.form-control {line-height: 1.2;background-color: var(--color-bg);border: 2px solid var(--color-contrast-low);transition: 0.2s;}.form-control:focus {border-color: var(--color-primary);box-shadow: 0px 0px 0px 2px hsla(var(--color-primary-h), var(--color-primary-s),var(--color-primary-l), 0.2);outline: none;}.form-control[aria-invalid=\"true\"], .form-control--error {border-color: var(--color-error);}.form-control[aria-invalid=\"true\"]:focus, .form-control--error:focus {border-color: var(--color-error);box-shadow: 0px 0px 0px 2px hsla(var(--color-error-h), var(--color-error-s),var(--color-error-l), 0.2);}.form-control--disabled, .form-control[disabled], .form-control[readonly] {cursor: not-allowed;}.form-label {font-size: var(--text-sm);}.form-legend{font-size: var(--text-md);}';\n  formStyle = formStyle + '.form-control::placeholder{opacity: 1;color: var(--color-contrast-medium);}';\n  loadFormsStyleTag(formStyle);\n}\n;\nfunction loadFormsStyleTag(style) {\n  var defaultStyle = '.form-error-msg {background-color: hsla(var(--color-error-h),var(--color-error-s), var(--color-error-l), 0.2);color: inherit;border-radius: var(--radius-md);padding: var(--space-xs);}';\n  var styleEl = '<style id=\"forms-style\">' + style + defaultStyle + '</style>';\n  var baseStyle = $('#cd-base-part-1');\n  $(styleEl).insertAfter(baseStyle); // $('head').append(styleEl);\n}\n;\nfunction boxShadowIsDefined(array) {\n  return array && array[0] && array[0][1] && array[0][1] != '';\n}\n;\nfunction getButtonsArrayStyle(obj) {\n  var array = [];\n\n  for (var property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      array[property] = [];\n\n      for (var subproperty in obj[property]) {\n        if (obj[property].hasOwnProperty(subproperty)) {\n          array[property][subproperty] = [];\n\n          for (var val in obj[property][subproperty]) {\n            if (obj[property][subproperty].hasOwnProperty(val)) {\n              if (val == 'border' || val == 'textShadow' || val == 'shadow' || val == 'transform' || val == 'transition') {\n                array[property][subproperty][val] = [];\n\n                for (var subVal in obj[property][subproperty][val]) {\n                  if (obj[property][subproperty][val].hasOwnProperty(subVal)) {\n                    array[property][subproperty][val][subVal] = Object.values(obj[property][subproperty][val][subVal]);\n                  }\n                }\n              } else {\n                array[property][subproperty][val] = Object.values(obj[property][subproperty][val]);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return array;\n}\n;\nfunction buttonsCodeStyle(style, btnLabel, statusList, statusPriorityList, isDemoReset, isButton) {\n  var string = '';\n  if (!style) return string;\n  var btnLabelmodified = btnLabel;\n\n  if (btnLabel == '[disabled]') {\n    btnLabelmodified = 'form-control--disabled, .form-control[disabled], .form-control[readonly]';\n  } else if (btnLabel == '[aria-invalid]') {\n    btnLabelmodified = 'form-control[aria-invalid=\"true\"], .form-control--error';\n  } else if (btnLabel == 'legend') {\n    btnLabelmodified = 'form-legend';\n  } else if (btnLabel == 'btn--disabled') {\n    btnLabelmodified = 'btn--disabled, .btn[disabled], .btn[readonly]';\n  }\n\n  var btnHasTransform = isButton && buttonsHasTransformStyle(style, statusPriorityList);\n\n  for (var i = 0; i < statusPriorityList.length; i++) {\n    var styleLabel = i == 0 ? '.' + btnLabelmodified : setStatusList('.' + btnLabelmodified, statusPriorityList[i]);\n    var newCode = getButtonCode(style[statusPriorityList[i]], '', true, btnLabel, statusPriorityList[i], isDemoReset, btnHasTransform && i == 0);\n    newCode = newCode.trim();\n\n    if (newCode.slice(-1) == '}') {\n      string = string + styleLabel + '{' + newCode;\n    } else {\n      string = string + styleLabel + '{' + newCode + '}';\n    }\n  }\n\n  string = string.replace(/\\n/g, '');\n  return string;\n}\n;\nfunction setStatusList(label, status) {\n  // e.g., if label = '.form-control[aria-invalid=\"true\"], .form-control--error' and status = ':focus', return '.form-control[aria-invalid=\"true\"]:focus, .form-control--error:focus'\n  var labelArray = label.split(',');\n\n  if (labelArray.length == 1) {\n    return label + status;\n  } else {\n    var newLabel = '';\n\n    for (var i = 0; i < labelArray.length; i++) {\n      if (i > 0) newLabel = newLabel + ',';\n      newLabel = newLabel + labelArray[i] + status;\n    }\n\n    return newLabel;\n  }\n}\n;\nfunction buttonIconCodeStyle(btnStyle) {\n  var code = '';\n\n  if (btnStyle && btnStyle['none'] && btnStyle['none']['padding'] && btnStyle['none']['padding'][0] && btnStyle['none']['padding'][0] != 0) {\n    code = '.btn--icon {padding: ' + spacingArray[btnStyle['none']['padding'][0]] + ';}';\n  }\n\n  return code;\n}\n;\nfunction buttonsHasTransformStyle(style, priorityList) {\n  var hasTransform = false;\n\n  for (var i = 1; i < priorityList.length; i++) {\n    if (!style[priorityList[i]]) return;\n    var transform = style[priorityList[i]]['transform'];\n\n    if (transform.length > 1 || transform.length > 0 && transform[0][0] != 0) {\n      hasTransform = true;\n      break;\n    }\n  }\n\n  return hasTransform;\n}\n;\nfunction getButtonCode(array, spacing, reset, btnLabel, btnStatus, isDemoReset, btnHasTransform) {\n  var string = '';\n\n  for (var property in array) {\n    switch (property) {\n      case 'appearance':\n        string = string + getButtonsAppearanceStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'padding':\n        string = string + getButtonsPaddingStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'margin':\n        string = string + getButtonsMarginStyle(array[property], spacing, reset);\n        break;\n\n      case 'border':\n        string = string + getButtonsBorderStyle(array[property], spacing, reset);\n        break;\n\n      case 'typography':\n        string = string + getButtonsTypographyStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'textShadow':\n        string = string + getButtonsTextShadowStyle(array[property], spacing, reset);\n        break;\n\n      case 'shadow':\n        string = string + getButtonsShadowStyle(array[property], spacing, reset, isDemoReset);\n        break;\n\n      case 'outline':\n        string = string + getButtonsOutlineStyle(array[property], spacing, reset);\n        break;\n\n      case 'transform':\n        string = string + getButtonsTransformStyle(array[property], spacing, reset);\n        break;\n\n      case 'transition':\n        string = string + getButtonsTransitionStyle(array[property], spacing, reset);\n        break;\n\n      case 'placeholder':\n        string = string + getButtonsPlaceholderStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n    }\n  }\n\n  if (btnHasTransform) string = string + '\\n' + spacing + 'will-change: transform;';\n  return string;\n}\n;\nfunction getButtonsAppearanceStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n\n  if (array[0]) {\n    if (array[0].indexOf('--gradient-') > -1) {\n      string = string + '\\n' + spacing + getGradientBgStyle(array[0]);\n    } else {\n      string = string + '\\n' + spacing + 'background: ' + getColorValue(array[0], reset) + ';';\n    }\n  }\n\n  if (array[1]) string = string + '\\n' + spacing + 'color: ' + getColorValue(array[1], reset) + ';';\n\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {// for copy code -> no need to add border-radius in code -> css variables already set\n  } else {\n    if (array[7] && array[7] > 0) {\n      string = string + '\\n' + spacing + 'border-radius: ' + borderRadiusValues[array[7]] + ';';\n    } else if (array[2] && array[2] != '') {\n      string = string + '\\n' + spacing + 'border-radius: ' + array[2] + ';';\n    }\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'opacity: ' + array[3] + ';';\n  if (array[4] && array[4] != 0) string = string + '\\n' + spacing + 'cursor: ' + getCursorValue(array[4]) + ';';\n  return string;\n}\n;\nfunction getGradientBgStyle(label) {\n  var angle = label.indexOf('-right') > -1 ? '90deg' : '180deg',\n      niceLabel = label.replace('-right', '').replace('-bottom', '');\n  return 'background: linear-gradient(' + angle + ', var(' + niceLabel + '-stop-1), var(' + niceLabel + '-stop-2));';\n}\n;\nfunction getButtonsPaddingStyle(array, spacing, reset, btnLabel, btnStatus) {\n  //Y - X\n  // for copy code -> no need to add padding in code -> css variables already set\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) return '';\n  var string = '';\n  if (array.length < 1) return string;\n\n  if (array[0] != 0 && array[1] != 0) {\n    string = string + '\\n' + spacing + 'padding: ' + spacingArray[array[0]] + ' ' + spacingArray[array[1]] + ';';\n  } else {\n    if (array[0] != 0) string = string + '\\n' + spacing + 'padding-top: ' + spacingArray[array[0]] + ';\\n' + spacing + 'padding-bottom: ' + spacingArray[array[0]] + ';';\n    if (array[1] != 0) string = string + '\\n' + spacing + 'padding-left: ' + spacingArray[array[1]] + ';\\n' + spacing + 'padding-right: ' + spacingArray[array[1]] + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsPaddingValue(value) {\n  // setting css variables for copy code only\n  var padding = '';\n  if (value != 0) padding = spacingArray[value];\n  return padding;\n}\n;\nfunction getButtonsMarginStyle(array, spacing, reset) {\n  //top left right bottom\n  var string = '';\n  if (array.length < 1) return string;\n\n  if (array[0] != 0 && array[1] != 0 && array[2] != 0 && array[3] != 0) {\n    string = string + '\\n' + spacing + 'margin: ' + spacingArray[array[0]] + ' ' + spacingArray[array[2]] + ' ' + spacingArray[array[3]] + ' ' + spacingArray[array[1]] + ';';\n  } else {\n    if (array[0] != 0) string = string + '\\n' + spacing + 'margin-top: ' + spacingArray[array[0]] + ';';\n    if (array[1] != 0) string = string + '\\n' + spacing + 'margin-left: ' + spacingArray[array[1]] + ';';\n    if (array[2] != 0) string = string + '\\n' + spacing + 'margin-right: ' + spacingArray[array[2]] + ';';\n    if (array[3] != 0) string = string + '\\n' + spacing + 'margin-bottom: ' + spacingArray[array[3]] + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsBorderStyle(array, spacing, reset) {\n  var string = '',\n      colorVariables = '';\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][3] == 0) string = string + '\\n' + spacing + getBorderType(array[i][1]) + ': none;';else if (array[i][2] == '') {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][0], '--color-border' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      string = string + '\\n' + spacing + getBorderType(array[i][1]) + '-color: ' + variable[1] + ';';\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][0], '--color-border' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      string = string + '\\n' + spacing + getBorderType(array[i][1]) + ': ' + array[i][2] + ' ' + getBorderStyle(array[i][3]) + ' ' + variable[1] + ';'; // string = string + '\\n'+spacing+getBorderType(array[i][1])+': '+array[i][2]+' '+getBorderStyle(array[i][3])+' '+getColorValue(array[i][0], reset)+';';\n    }\n  }\n\n  return colorVariables + string;\n}\n;\nfunction getButtonsTypographyStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n  if (array[0]) string = string + '\\n' + spacing + 'font-family: var(' + fontArray[btnFontIds.indexOf(array[0])] + ');';\n\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {// for copy code -> no need to add font-size in code -> css variables already set\n  } else {\n    if (array[1] && array[1] != 0) {\n      var fontSize = array[1] == 9 ? array[2] : textArrayValues[array[1]];\n\n      if (btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {\n        if (btnLabel == 'btn') string = string + '\\n' + spacing + '--btn-font-size: ' + fontSize + ';';else string = string + '\\n' + spacing + '--form-control-font-size: ' + fontSize + ';';\n      } else {\n        string = string + '\\n' + spacing + 'font-size: ' + fontSize + ';';\n      }\n    }\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'font-weight: ' + array[3] + ';';\n  if (array[4] && array[4] != 0) string = string + '\\n' + spacing + 'text-transform: ' + getTextTransform(array[4]) + ';';\n  if (array[5] && array[5] != 0) string = string + '\\n' + spacing + 'text-decoration: ' + getTextDecoration(array[5]) + ';';\n  if (btnLabel == 'btn' && btnStatus == 'none' && (!array[5] || array[5] == 0)) string = string + '\\n' + spacing + 'text-decoration: none;';\n  if (array[6] && array[6] != '') string = string + '\\n' + spacing + 'line-height: ' + array[6] + ';';\n  if (array[7] && array[7] != '') string = string + '\\n' + spacing + 'letter-spacing: ' + array[7] + ';';\n\n  if (array[8] && array[8] != 0) {\n    if (reset && reset === true) {\n      string = string + '\\n' + spacing + getFontSmoothing();\n    } else {\n      string = string + '\\n' + spacing + '@include fontSmooth;';\n    }\n  }\n\n  return string;\n}\n;\nfunction getButtonsTextShadowStyle(array, spacing, reset) {\n  var string = '',\n      colorVariables = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'text-shadow: none;';\n      set = false;\n      break;\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][1], '--color-text-shadow' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      if (i > 0) string = string + ', ';\n      string = string + array[i][2] + ' ' + variable[1];\n      set = true;\n    }\n  }\n\n  if (set) string = colorVariables + '\\n' + spacing + 'text-shadow: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsShadowStyle(array, spacing, reset, isDemoReset) {\n  var string = '',\n      colorVariables = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'box-shadow: none;';\n      if (isDemoReset) string = '\\n' + spacing + 'box-shadow: none !important;';\n      set = false;\n      break;\n    } else if (array[i][3] > 1) {\n      // custom shadow with framework variables\n      if (i > 0) string = string + ', ';\n      string = string + shadowVariables[array[i][3]];\n      set = true;\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][1], '--color-shadow' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      if (i > 0) string = string + ', ';\n      string = string + getBoxShadowType(array[i][3]) + array[i][2] + ' ' + variable[1];\n      set = true;\n    }\n  }\n\n  if (set) {\n    // isDemoReset -> when loading forms for components, make sure to add important to box shadow to make sure the custom shadow is showed\n    if (isDemoReset) string = string + ' !important';\n    string = colorVariables + '\\n' + spacing + 'box-shadow: ' + string + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsOutlineStyle(array, spacing, reset) {\n  var string = '';\n\n  if (array[1] && array[1] != 0) {\n    if (array[1] == 8) string = string + '\\n' + spacing + 'outline: none;';else string = string + '\\n' + spacing + 'outline: ' + array[2] + ' ' + getOutlineStyle(array[1]) + ' ' + getColorValue(array[0], reset) + ';';\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'outline-offset: ' + array[3] + ';';\n  return string;\n}\n;\nfunction getButtonsTransformStyle(array, spacing, reset) {\n  var string = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 0) {\n      string = '\\n' + spacing + 'transform: none;';\n      break;\n    } else {\n      if (i > 0) string = string + ' ';\n      string = string + getTransformProperty(array[i][0]) + '(' + array[i][1] + ')';\n      set = true;\n    }\n  }\n\n  if (set) string = '\\n' + spacing + 'transform: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsTransitionStyle(array, spacing, reset) {\n  var string = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'transition: none;';\n      break;\n    } else {\n      if (i > 0) string = string + ', ';\n      string = string + getTransitionProperty(array[i][0]) + ' ' + array[i][1] + 's ' + getTransitionEase(array[i][2]);\n      if (array[i][3] != '') string = string + ' ' + array[i][3] + 's';\n      set = true;\n    }\n  }\n\n  if (set) string = '\\n' + spacing + 'transition: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsPlaceholderStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n  if (array.length < 1 || !array[0] || array[0] == '') return '';\n  var style = '\\n' + spacing + '  color: ' + getColorValue(array[0], reset) + ';';\n\n  if (reset && reset === true) {\n    string = string + '}';\n    var selector = '.' + btnLabel;\n    if (btnStatus != 'none') selector = selector + btnStatus;\n    string = string + selector + '::placeholder {\\n' + spacing + '  opacity: 1;' + spacing + style + '\\n' + spacing + '}';\n  } else {\n    string = string + '\\n\\n' + spacing + '&::placeholder {\\n' + spacing + '  opacity: 1;' + spacing + style + '\\n' + spacing + '}';\n  }\n\n  return string;\n}\n;\nfunction getButtonsFontSizeValue(array) {\n  var fontSize = '';\n\n  if (array[1] && array[1] != 0) {\n    fontSize = array[1] == 9 ? array[2] : textArrayValues[array[1]];\n  }\n\n  return fontSize;\n}\n;\nfunction resetFormsStyleComponents() {\n  var style = '';\n  style = style + '.form-legend {color: inherit;line-height: normal;}';\n  return style;\n}\n;\nfunction getSuffixOpacity(value) {\n  if (value == 0) return '-a00';\n  if (value < 10) return '-a0' + value;\n  return '-a' + value;\n}\n;\nfunction getLuminance(hsl, iframe) {\n  if (hsl[0] == 0 && hsl[1] == 0 && hsl[2] == 1) return 1; // white\n\n  if (hsl[0] == 0 && hsl[1] == 0 && hsl[2] == 0) return 0; // black\n\n  var rgbSr = getRGBsrValues(hsl, iframe);\n  return 0.2126 * rgbSr[0] + 0.7152 * rgbSr[1] + 0.0722 * rgbSr[2];\n}\n;\nfunction getRGBsrValues(value, iframe) {\n  var rgb = getRGBValues(value, iframe);\n  var rSr = rgb[0] <= 0.03928 ? rgb[0] / 12.92 : Math.pow((rgb[0] + 0.055) / 1.055, 2.4);\n  var gSr = rgb[1] <= 0.03928 ? rgb[1] / 12.92 : Math.pow((rgb[1] + 0.055) / 1.055, 2.4);\n  var bSr = rgb[2] <= 0.03928 ? rgb[2] / 12.92 : Math.pow((rgb[2] + 0.055) / 1.055, 2.4);\n  return [rSr, gSr, bSr];\n}\n;\nfunction getRGBValues(hsl, iframe) {\n  var rgb = getRGBfromHSL(hsl);\n  return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255];\n}\n;\nfunction getRGBfromHSL(hsl) {\n  return chroma.hsl(hsl).rgb();\n}\n;\nvar loadedIframeCheck = false; //select text of a contentEditable element\n\njQuery.fn.selectText = function () {\n  var doc = document;\n  var element = this[0];\n\n  if (doc.body.createTextRange) {\n    var range = document.body.createTextRange();\n    range.moveToElementText(element);\n    range.select();\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    var range = document.createRange();\n    range.selectNodeContents(element);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n};\n\nfunction initFontList(typography) {\n  fontArray = [''];\n  btnFontIds = [0];\n\n  for (var property in typography['fontFamilyLabels']) {\n    if (typography['fontFamilyLabels'].hasOwnProperty(property)) {\n      fontArray.push(typography['fontFamilyLabels'][property]);\n      btnFontIds.push(typography['fontFamilyIds'][property]);\n    }\n  }\n}\n;\n\n(function () {\n  var demoContainer = $('.js-cd-demo-container'),\n      demoViewport = $('.js-cd-demo-viewport-size'); //when double-clicking on variables -> select all text\n\n  demoContainer.on('dblclick', '.js-css-variable-label', function (event) {\n    $(event.currentTarget).selectText();\n  }); //detect click on iframe and send to main to close popups\n\n  var iframeParent = window.parent;\n\n  if (!iframeParent) {\n    iframeParent = parent;\n  }\n\n  if (iframeParent) {\n    $(window).on('click', function () {\n      if (iframeParent.closeActivePopups != null) iframeParent.closeActivePopups();\n    }); // detect shortcut for search modal\n\n    window.addEventListener('keydown', function (event) {\n      if (event.keyCode && event.keyCode == 69 || event.key && event.key.toLowerCase() == 'e') {\n        if (event.ctrlKey || event.metaKey) iframeParent.openSiteSearch();\n      }\n    });\n  } //detect resize of the page and reset iframe height\n\n\n  var resizing = false,\n      resizingID = false,\n      mqLabels = ['xs', 'sm', 'md', 'lg', 'xl'];\n\n  if (demoViewport.length > 0) {\n    window.addEventListener(\"resize\", function (event) {\n      if (!resizing) {\n        resizing = true;\n        window.requestAnimationFrame(updateLabelSizeWindow);\n      }\n    });\n  }\n\n  $('.js-cd-demo').on('globalsUpdate', function () {\n    updateComponentGlobals();\n  });\n  $('.js-cd-demo').on('showComponent', function () {\n    var compScript = $('#comp-script');\n\n    if (compScript) {\n      var newScript = compScript.clone();\n      newScript = compScript.attr('src', compScript.attr('data-src'));\n      newScript.removeAttr('data-src');\n      newScript.removeAttr('id');\n      newScript.insertBefore(compScript);\n    }\n\n    setTimeout(function () {\n      if (iframeParent) iframeParent.revealComponent();\n    }, 300);\n  });\n\n  function updateLabelSizeWindow() {\n    var mq = getMq(),\n        sizes = getScreenSize();\n\n    if (resizing) {\n      demoContainer.trigger('windowResizing');\n      var mqLabelText = mq > 0 ? ' (' + mqLabels[mq - 1] + ')' : '';\n      demoViewport.text(sizes[0] + 'px x ' + sizes[1] + 'px' + mqLabelText).show();\n      if (resizingID) clearInterval(resizingID);\n      resizingID = setTimeout(function () {\n        demoViewport.hide();\n      }, 1000);\n    }\n\n    resizing = false;\n  }\n\n  ;\n\n  function updateComponentGlobals() {\n    //components -> if there's a project set, we should listen for changes in the viewport width as well\n    //typography and spacing are the only responsive globals\n    if (projectLoaded && (projectLoaded.typography || projectLoaded.spacing)) {\n      window.addEventListener(\"resize\", function (event) {\n        if (!resizing) {\n          resizing = true;\n          window.requestAnimationFrame(updateGlobals);\n        }\n      });\n    }\n  }\n\n  ;\n\n  function updateGlobals() {\n    var mq = getMq();\n\n    if (mq == MQ) {\n      resizing = false;\n      return;\n    }\n\n    MQ = mq;\n\n    if (projectLoaded.typography && projectLoaded.typography !== '') {\n      //typography was saved and need to be modified\n      loadTypographyStyle(JSON.parse(decodeSafeURIComponent(projectLoaded.typography)), false, mq);\n    }\n\n    if (projectLoaded.spacing && projectLoaded.spacing !== '') {\n      //typography was saved and need to be modified\n      loadSpacingStyle(JSON.parse(decodeSafeURIComponent(projectLoaded.spacing)), mq);\n    }\n\n    resizing = false;\n  }\n\n  ;\n  loadedIframeCheck = true;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9jb25maWctY3VzdG9tLWF6dXJpb20vcGFnZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDTyxJQUFJQSxZQUFZLEdBQUcsQ0FBQyxFQUFELEVBQUssR0FBTCxFQUFVLG9CQUFWLEVBQWdDLG1CQUFoQyxFQUFxRCxrQkFBckQsRUFBeUUsaUJBQXpFLEVBQTRGLGlCQUE1RixFQUErRyxpQkFBL0csRUFBa0ksaUJBQWxJLEVBQXFKLGlCQUFySixFQUF3SyxrQkFBeEssRUFBNEwsbUJBQTVMLEVBQWlOLG9CQUFqTixDQUFuQjtBQUFBLElBQ0hDLFNBQVMsR0FBRyxDQUFDLEVBQUQsRUFBSyxnQkFBTCxFQUF1QixnQkFBdkIsRUFBeUMsZ0JBQXpDLEVBQTJELGdCQUEzRCxFQUE2RSxnQkFBN0UsRUFBK0YsaUJBQS9GLEVBQWtILGtCQUFsSCxFQUFzSSxtQkFBdEksRUFBMkosU0FBM0osQ0FEVDtBQUFBLElBRUhDLGVBQWUsR0FBRyxDQUFDLEVBQUQsRUFBSyxnQkFBTCxFQUF1QixnQkFBdkIsRUFBeUMsZ0JBQXpDLEVBQTJELGdCQUEzRCxFQUE2RSxnQkFBN0UsRUFBK0YsaUJBQS9GLEVBQWtILGtCQUFsSCxFQUFzSSxTQUF0SSxFQUFpSixFQUFqSixFQUFxSixtQkFBckosQ0FGZjtBQUFBLElBR0hDLFNBQVMsR0FBRyxDQUFDLEVBQUQsRUFBSyxnQkFBTCxDQUhUO0FBQUEsSUFJSEMsVUFBVSxHQUFHLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FKVjtBQUFBLElBS0hDLHdCQUF3QixHQUFHLEVBTHhCO0FBQUEsSUFNSEMsNEJBQTRCLEdBQUcsRUFONUI7QUFBQSxJQU9IQyxjQUFjLEdBQUcsQ0FBQyxTQUFELEVBQVksUUFBWixFQUFzQixVQUF0QixF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ZSxhQUFhLENBQUNXLFVBQWQsSUFBNEJYLGFBQWEsQ0FBQ1csVUFBZCxLQUE2QixFQUE3RCxFQUFpRTtBQUM3RDtBQUNBQyxNQUFBQSxtQkFBbUIsQ0FBQ0osSUFBSSxDQUFDQyxLQUFMLENBQVd6SCxzQkFBc0IsQ0FBQ2dILGFBQWEsQ0FBQ1csVUFBZixDQUFqQyxDQUFELEVBQStELEtBQS9ELEVBQXNFMUIsRUFBdEUsQ0FBbkI7QUFDSDs7QUFFRCxRQUFJZSxhQUFhLENBQUNjLE9BQWQsSUFBeUJkLGFBQWEsQ0FBQ2MsT0FBZCxLQUEwQixFQUF2RCxFQUEyRDtBQUN2RDtBQUNBQyxNQUFBQSxnQkFBZ0IsQ0FBQ1AsSUFBSSxDQUFDQyxLQUFMLENBQVd6SCxzQkFBc0IsQ0FBQ2dILGFBQWEsQ0FBQ2MsT0FBZixDQUFqQyxDQUFELEVBQTREN0IsRUFBNUQsQ0FBaEI7QUFDSDs7QUFDRGlPLElBQUFBLFFBQVEsR0FBRyxLQUFYO0FBQ0g7O0FBQ0Q7QUFFQTlCLEVBQUFBLGlCQUFpQixHQUFHLElBQXBCO0FBQ0gsQ0FqSEEsR0FBRCIsInNvdXJjZXMiOlsid2VicGFjazovL1JhaW5ib3cvLi9qcy9jb25maWctY3VzdG9tLWF6dXJpb20vcGFnZS5qcz8wNDAwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vYnV0dG9ucy9mb3JtcyBkZWZhdWx0IHZhbHVlc1xuZXhwb3J0IGxldCBzcGFjaW5nQXJyYXkgPSBbJycsICcwJywgJ3ZhcigtLXNwYWNlLXh4eHhzKScsICd2YXIoLS1zcGFjZS14eHhzKScsICd2YXIoLS1zcGFjZS14eHMpJywgJ3ZhcigtLXNwYWNlLXhzKScsICd2YXIoLS1zcGFjZS1zbSknLCAndmFyKC0tc3BhY2UtbWQpJywgJ3ZhcigtLXNwYWNlLWxnKScsICd2YXIoLS1zcGFjZS14bCknLCAndmFyKC0tc3BhY2UteHhsKScsICd2YXIoLS1zcGFjZS14eHhsKScsICd2YXIoLS1zcGFjZS14eHh4bCknXSxcbiAgICB0ZXh0QXJyYXkgPSBbJycsICd2YXIoLS10ZXh0LXhzKScsICd2YXIoLS10ZXh0LXNtKScsICd2YXIoLS10ZXh0LW1kKScsICd2YXIoLS10ZXh0LWxnKScsICd2YXIoLS10ZXh0LXhsKScsICd2YXIoLS10ZXh0LXh4bCknLCAndmFyKC0tdGV4dC14eHhsKScsICd2YXIoLS10ZXh0LXh4eHhsKScsICdpbmhlcml0J10sXG4gICAgdGV4dEFycmF5VmFsdWVzID0gWycnLCAndmFyKC0tdGV4dC14cyknLCAndmFyKC0tdGV4dC1zbSknLCAndmFyKC0tdGV4dC1tZCknLCAndmFyKC0tdGV4dC1sZyknLCAndmFyKC0tdGV4dC14bCknLCAndmFyKC0tdGV4dC14eGwpJywgJ3ZhcigtLXRleHQteHh4bCknLCAnaW5oZXJpdCcsICcnLCAndmFyKC0tdGV4dC14eHh4bCknXSxcbiAgICBmb250QXJyYXkgPSBbJycsICctLWZvbnQtcHJpbWFyeSddLFxuICAgIGJ0bkZvbnRJZHMgPSBbMCwgMV0sXG4gICAgYnRuQ29sb3JDdXN0b21OaWNlTGFiZWxzID0gW10sXG4gICAgYnRuR3JhZGllbnRzQ3VzdG9tTmljZUxhYmVscyA9IFtdLFxuICAgIGJ0bkNvbG9yTGFiZWxzID0gW1wicHJpbWFyeVwiLCBcImFjY2VudFwiLCBcImRvd25sb2FkXCIsIFwid2FybmluZ1wiLCBcInN1Y2Nlc3NcIiwgXCJlcnJvclwiLCBcImluZm9cIl0sXG4gICAgc2hhZG93VmFyaWFibGVzID0gWycnLCAnJywgJ3ZhcigtLXNoYWRvdy14cyknLCAndmFyKC0tc2hhZG93LXNtKScsICd2YXIoLS1zaGFkb3ctbWQpJywgJ3ZhcigtLXNoYWRvdy1sZyknLCAndmFyKC0tc2hhZG93LXhsKSddLFxuICAgIGJvcmRlclJhZGl1c1ZhbHVlcyA9IFsnJywgJ3ZhcigtLXJhZGl1cy1zbSknLCAndmFyKC0tcmFkaXVzLW1kKScsICd2YXIoLS1yYWRpdXMtbGcpJ11cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldEJ0bkNvbG9yQ3VzdG9tTmljZUxhYmVscyhjb2xvcnMsIGN1c3RvbU5pY2UpIHtcbiAgICBpZiAoY29sb3JzKSB7XG4gICAgICAgIGJ0bkNvbG9yTGFiZWxzID0gY29sb3JzO1xuICAgIH1cbiAgICBpZiAoY3VzdG9tTmljZSkge1xuICAgICAgICBidG5Db2xvckN1c3RvbU5pY2VMYWJlbHMgPSBjdXN0b21OaWNlO1xuICAgIH1cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldEJ0bkdyYWRpZW50TmljZUxhYmVscyhncmFkaWVudHMpIHtcbiAgICBpZiAoZ3JhZGllbnRzICYmIGdyYWRpZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGJ0bkdyYWRpZW50c0N1c3RvbU5pY2VMYWJlbHMgPSBncmFkaWVudHM7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlU2FmZVVSSUNvbXBvbmVudChzdHJpbmcpIHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cmluZy5yZXBsYWNlKC8lXCIvZywgJyUyNVwiJykpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3Vyc29yVmFsdWUoaW5kZXgpIHtcbiAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gJ2F1dG8nO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiAncG9pbnRlcic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuICdub3QtYWxsb3dlZCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnYXV0byc7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm9yZGVyVHlwZShpbmRleCkge1xuICAgIHN3aXRjaCAoaW5kZXgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcmV0dXJuICdib3JkZXInO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiAnYm9yZGVyLXRvcCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuICdib3JkZXItcmlnaHQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiAnYm9yZGVyLWJvdHRvbSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcmV0dXJuICdib3JkZXItbGVmdCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnYm9yZGVyJztcbiAgICB9XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCb3JkZXJTdHlsZShpbmRleCkge1xuICAgIHN3aXRjaCAoaW5kZXgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcmV0dXJuICdub25lJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gJ3NvbGlkJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gJ2Rhc2hlZCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuICdkb3R0ZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJ3NvbGlkJztcbiAgICB9XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXh0VHJhbnNmb3JtKGluZGV4KSB7XG4gICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuICdub25lJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gJ2NhcGl0YWxpemUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiAndXBwZXJjYXNlJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICByZXR1cm4gJ2xvd2VyY2FzZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnbm9uZSc7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGV4dERlY29yYXRpb24oaW5kZXgpIHtcbiAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gJ25vbmUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiAndW5kZXJsaW5lJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICdub25lJztcbiAgICB9XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGb250U21vb3RoaW5nKCkge1xuICAgIHJldHVybiAnLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTsnO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm94U2hhZG93VHlwZShpbmRleCkge1xuICAgIGlmIChpbmRleCA9PSAwKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gJ2luc2V0ICc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcGVydHkoaW5kZXgpIHtcbiAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiAnYWxsJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gJ25vbmUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiAnYmFja2dyb3VuZCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuICdvcGFjaXR5JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICByZXR1cm4gJ2JvcmRlcic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgcmV0dXJuICdib3gtc2hhZG93JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICByZXR1cm4gJ291dGxpbmUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICByZXR1cm4gJ2NvbG9yJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICdhbGwnO1xuICAgIH1cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25FYXNlKGluZGV4KSB7XG4gICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gJ2Vhc2UnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiAnbGluZWFyJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gJ2Vhc2UtaW4nO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiAnZWFzZS1vdXQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHJldHVybiAndmFyKC0tZWFzZS1pbi1vdXQpJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICByZXR1cm4gJ3ZhcigtLWVhc2UtaW4pJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICByZXR1cm4gJ3ZhcigtLWVhc2Utb3V0KSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgcmV0dXJuICd2YXIoLS1lYXNlLW91dC1iYWNrKSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnZWFzZSc7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkRlbGF5KHZhbCkge1xuICAgIGlmICh2YWwgPT0gJycpXG4gICAgICAgIHJldHVybiAnJztcbiAgICByZXR1cm4gJyAnICsgdmFsICsgJ3MnO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNmb3JtUHJvcGVydHkoaW5kZXgpIHtcbiAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiAnbm9uZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlWCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGVZJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZVonO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIHJldHVybiAnc2NhbGUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHJldHVybiAnc2NhbGVYJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICByZXR1cm4gJ3NjYWxlWSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmV0dXJuICdzY2FsZVonO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIHJldHVybiAncm90YXRlJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgcmV0dXJuICdyb3RhdGVYJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgcmV0dXJuICdyb3RhdGVZJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgcmV0dXJuICdyb3RhdGVaJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICdub25lJztcbiAgICB9XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPdXRsaW5lU3R5bGUoaW5kZXgpIHtcbiAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gJ2F1dG8nO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiAnZG90dGVkJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gJ2Rhc2hlZCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcmV0dXJuICdzb2xpZCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgcmV0dXJuICdkb3VibGUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHJldHVybiAnaW5zZXQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIHJldHVybiAnb3V0c2V0JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICByZXR1cm4gJ25vbmUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3V0bGluZU9mZnNldCh2YWwpIHtcbiAgICBpZiAodmFsID09ICcnKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgcmV0dXJuICdvdXRsaW5lLW9mZnNldDogJyArIHZhbCArICc7Jztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbG9yVmFsdWUodmFsLCByZXNldCkge1xuICAgIGlmICghdmFsIHx8IHZhbCA9PSBudWxsKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgLy8gY2hlY2sgaWYgaW5oZXJpdC90cmFuc3BhcmVudC9kZWZhdWx0XG4gICAgaWYgKHZhbCA9PSAndHJhbnNwYXJlbnQnIHx8IHZhbC5pbmRleE9mKCd0cmFuc3BhcmVudCcpID09IDApXG4gICAgICAgIHJldHVybiAndHJhbnNwYXJlbnQnO1xuICAgIGlmICh2YWwgPT0gJ2luaGVyaXQnIHx8IHZhbC5pbmRleE9mKCdpbmhlcml0JykgPT0gMClcbiAgICAgICAgcmV0dXJuICdpbmhlcml0JztcbiAgICBpZiAodmFsID09ICcnIHx8IHZhbC5pbmRleE9mKCctYScpID09IDApXG4gICAgICAgIHJldHVybiAnJztcbiAgICAvL2NoZWNrIGlmIGN1c3RvbSBjb2xvclxuICAgIHJldHVybiBnZXRDb2xvclZhbHVlRnJvbUxpc3QodmFsLCByZXNldCk7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xvclZhbHVlRnJvbUxpc3QobGFiZWwsIHJlc2V0KSB7XG4gICAgdmFyIGZhbGxiYWNrID0gJyc7XG4gICAgaWYgKCFsYWJlbCB8fCBsYWJlbCA9PSBudWxsKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgbGFiZWwgPSBnZXROaWNlTGFiZWxGb3JDdXN0b20obGFiZWwpO1xuICAgIGlmICghbGFiZWwpXG4gICAgICAgIHJldHVybiAnJztcbiAgICAvL2NoZWNrIGlmIHRoaXMgaXMgYW4gb3BhY2l0eSB2YWx1ZSBhbmQgcHJvdmlkZSBmYWxsYmFja1xuICAgIGlmIChjaGVja0NvbG9ySXNPcGFjaXR5KGxhYmVsKSkge1xuICAgICAgICBpZiAocmVzZXQgJiYgcmVzZXQgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy9uZWVkIHRvIHJldHVybiBjc3MgdmFsdWVcbiAgICAgICAgICAgIHZhciBiYXNpY0xhYmVsID0gcmVtb3ZlT3BhY2l0eUZyb21MYWJlbChsYWJlbCk7XG4gICAgICAgICAgICByZXR1cm4gJ2hzbGEodmFyKCcgKyBiYXNpY0xhYmVsICsgJy1oKSwgdmFyKCcgKyBiYXNpY0xhYmVsICsgJy1zKSwgdmFyKCcgKyBiYXNpY0xhYmVsICsgJy1sKSwgJyArIGdldE9wYWNpdHlEZWNGcm9tTGFiZWwobGFiZWwpICsgJyknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9yZXR1cm4gc2FzcyBtaXhpblxuICAgICAgICAgICAgcmV0dXJuICdhbHBoYSh2YXIoJyArIHJlbW92ZU9wYWNpdHlGcm9tTGFiZWwobGFiZWwpICsgJyksICcgKyBnZXRPcGFjaXR5RGVjRnJvbUxhYmVsKGxhYmVsKSArICcpJztcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAndmFyKCcgKyBsYWJlbCArICcpJztcbiAgICB9XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROaWNlTGFiZWxGb3JDdXN0b20obGFiZWwpIHtcbiAgICBpZiAobGFiZWwuaW5kZXhPZignY3VzdG9tLScpID4gLTEpIHtcbiAgICAgICAgdmFyIHByZWZpeCA9IChsYWJlbC5pbmRleE9mKCdjdXN0b20tZmRiLScpID4gLTEpID8gJ2N1c3RvbS1mZGItJyA6ICdjdXN0b20tJztcbiAgICAgICAgdmFyIGxhYmVsQXJyYXkgPSBsYWJlbC5zcGxpdChwcmVmaXgpXG4gICAgICAgICAgICAsIHNwbGl0ID0gbGFiZWxBcnJheVsxXS5zcGxpdCgnLScpO1xuICAgICAgICBpZiAoc3BsaXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdmFyIGN1c3RvbUxhYmVsID0gcHJlZml4ICsgc3BsaXRbMF07XG4gICAgICAgICAgICBsYWJlbCA9IGJ0bkNvbG9yQ3VzdG9tTmljZUxhYmVsc1tidG5Db2xvckxhYmVscy5pbmRleE9mKGN1c3RvbUxhYmVsKSAtIDVdICsgbGFiZWxBcnJheVsxXS5yZXBsYWNlKHNwbGl0WzBdLCAnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY3VzdG9tTGFiZWwgPSBwcmVmaXggKyBsYWJlbEFycmF5WzFdO1xuICAgICAgICAgICAgbGFiZWwgPSBidG5Db2xvckN1c3RvbU5pY2VMYWJlbHNbYnRuQ29sb3JMYWJlbHMuaW5kZXhPZihjdXN0b21MYWJlbCkgLSA1XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGFiZWw7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVPcGFjaXR5RnJvbUxhYmVsKGxhYmVsKSB7XG4gICAgcmV0dXJuIGxhYmVsLnNsaWNlKDAsIC00KTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wYWNpdHlEZWNGcm9tTGFiZWwobGFiZWwpIHtcbiAgICB2YXIgb3BhY2l0eSA9IHBhcnNlSW50KGxhYmVsLnNsaWNlKC00KS5yZXBsYWNlKCctYScsICcnKSk7XG4gICAgaWYgKGlzTmFOKG9wYWNpdHkpKVxuICAgICAgICByZXR1cm4gMTtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCgob3BhY2l0eSAvIDEwMCkudG9GaXhlZCgyKSk7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0NvbG9ySXNPcGFjaXR5KGxhYmVsKSB7XG4gICAgdmFyIGFycmF5ID0gbGFiZWwuc3BsaXQoJy0nKTtcbiAgICBpZiAoYXJyYXkubGVuZ3RoID4gMCAmJiBhcnJheVthcnJheS5sZW5ndGggLSAxXS5pbmRleE9mKCdhJykgPT0gMCAmJiBhcnJheVthcnJheS5sZW5ndGggLSAxXS5sZW5ndGggPT0gMykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sb3JGYklvcygkY29sb3IsICR2YXJMYWJlbCwgJHNwYWNpbmcsICRyZXNldCkge1xuICAgIGlmICghJGNvbG9yIHx8ICRjb2xvciA9PSBudWxsKVxuICAgICAgICByZXR1cm4gWycnLCAnJ107XG4gICAgaWYgKCRjb2xvciA9PSAndHJhbnNwYXJlbnQnIHx8ICRjb2xvciA9PSAnaW5oZXJpdCcgfHwgJGNvbG9yID09ICcnKVxuICAgICAgICByZXR1cm4gWycnLCAkY29sb3JdO1xuICAgIHJldHVybiBbJycsIGdldENvbG9yVmFsdWUoJGNvbG9yLCAkcmVzZXQpXTtcbn1cbjsvL2lmIHlvdSB1cGRhdGVzIHRoaXMgLT4geW91J2xsIG5lZWQgdG8gdXBkYXRlIHRoZSBzYW1lIGluIHRoZSBhcHAtZ2xvYmFsLmpzIGFzIHdlbGxcbmxldCBwYWRkaW5nVmFyaWFibGVzID0gWyctLXNwYWNlLXh4eHhzJywgJy0tc3BhY2UteHh4cycsICctLXNwYWNlLXh4cycsICctLXNwYWNlLXhzJywgJy0tc3BhY2Utc20nLCAnLS1zcGFjZS1tZCcsICctLXNwYWNlLWxnJywgJy0tc3BhY2UteGwnLCAnLS1zcGFjZS14eGwnLCAnLS1zcGFjZS14eHhsJywgJy0tc3BhY2UteHh4eGwnXVxuICAgICwgZmlib25hY2NpU2VxID0gWzAuMTI1LCAwLjI1LCAwLjM3NSwgMC41LCAwLjc1LCAxLjI1LCAyLCAzLjI1LCA1LjI1LCA4LjUsIDEzLjc1XVxuICAgICwgcHJGb3VydGggPSBbMC4yMzcsIDAuMzE2LCAwLjQyMiwgMC41NjMsIDAuNzUsIDEsIDEuMzMzLCAxLjc3NywgMi4zNjksIDMuMTU3LCA0LjIxXVxuICAgICwgYXVGb3VydGggPSBbMC4xNzcsIDAuMjUsIDAuMzU0LCAwLjUsIDAuNzA3LCAxLCAxLjQxNCwgMS45OTksIDIuODI3LCAzLjk5OCwgNS42NV1cbiAgICAsIHByRmlmdGggPSBbMC4xMzMsIDAuMiwgMC4yOTYsIDAuNDQ0LCAwLjY2NywgMSwgMS41LCAyLjI1LCAzLjM3NSwgNS4wNjMsIDcuNTldXG4gICAgLCBnb2xkZW5SYXRpbyA9IFswLjA5LCAwLjE0NiwgMC4yMzYsIDAuMzgyLCAwLjYxOCwgMSwgMS42MTgsIDIuNjE4LCA0LjIzNiwgNi44NTQsIDExLjA4XVxuICAgICwgc3BhY2VSYXRpb1VuaXQgPSBbZmFsc2UsIGZpYm9uYWNjaVNlcSwgcHJGb3VydGgsIGF1Rm91cnRoLCBwckZpZnRoLCBnb2xkZW5SYXRpbywgJyddO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SFNMKGNvbG9yKSB7XG4gICAgaWYgKGlzTmFOKGNvbG9yWzBdKSlcbiAgICAgICAgY29sb3JbMF0gPSAwO1xuICAgIHJldHVybiAnaHNsKCcgKyBNYXRoLnJvdW5kKGNvbG9yWzBdKSArICcsICcgKyBNYXRoLnJvdW5kKGNvbG9yWzFdICogMTAwKSArICclLCAnICsgTWF0aC5yb3VuZChjb2xvclsyXSAqIDEwMCkgKyAnJSknO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SFNMQShjb2xvciwgb3BhY2l0eSkge1xuICAgIGlmIChpc05hTihjb2xvclswXSkpXG4gICAgICAgIGNvbG9yWzBdID0gMDtcbiAgICByZXR1cm4gJ2hzbGEoJyArIE1hdGgucm91bmQoY29sb3JbMF0pICsgJywgJyArIE1hdGgucm91bmQoY29sb3JbMV0gKiAxMDApICsgJyUsICcgKyBNYXRoLnJvdW5kKGNvbG9yWzJdICogMTAwKSArICclLCAnICsgcGFyc2VGbG9hdCgoTnVtYmVyKG9wYWNpdHkpIC8gMTAwKS50b0ZpeGVkKDIpKSArICcpJztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldEhTTEFmcm9tSFNMKGNvbG9yLCBvcGFjaXR5KSB7XG4gICAgY29sb3IgPSBjb2xvci5yZXBsYWNlKCdoc2woJywgJ2hzbGEoJyk7XG4gICAgY29sb3IgPSBjb2xvci5yZXBsYWNlKCcpJywgJywgJyArIHBhcnNlRmxvYXQoKE51bWJlcihvcGFjaXR5KSAvIDEwMCkudG9GaXhlZCgyKSkgKyAnKScpO1xuICAgIHJldHVybiBjb2xvcjtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhTTEZyb21TdHJpbmcoY29sb3IpIHtcbiAgICB2YXIgYXJyYXkgPSBjb2xvci5yZXBsYWNlKCdoc2woJywgJycpLnJlcGxhY2UoJyknLCAnJykuc3BsaXQoJywnKTtcbiAgICBpZiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoID4gMSkge1xuICAgICAgICByZXR1cm4gW051bWJlcihhcnJheVswXS50cmltKCkpLCBwYXJzZUZsb2F0KCgoYXJyYXlbMV0udHJpbSgpLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwKS50b0ZpeGVkKDIpKSwgcGFyc2VGbG9hdCgoKGFycmF5WzJdLnRyaW0oKS5yZXBsYWNlKCclJywgJycpKSAvIDEwMCkudG9GaXhlZCgyKSldO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldENzc1ZhcmlhYmxlKHZhcmlhYmxlLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgICB2YXIgcm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBpZiAocHJpb3JpdHkpIHtcbiAgICAgICAgcm9vdC5zdHlsZS5zZXRQcm9wZXJ0eSh2YXJpYWJsZSwgdmFsdWUsIHByaW9yaXR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByb290LnN0eWxlLnNldFByb3BlcnR5KHZhcmlhYmxlLCB2YWx1ZSk7XG4gICAgfVxuXG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDc3NWYXJpYWJsZSh2YXJpYWJsZSkge1xuICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSh2YXJpYWJsZSk7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRCb2R5Q3NzVmFyaWFibGUodmFyaWFibGUsIHZhbHVlKSB7XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICAgIGJvZHkuc3R5bGUuc2V0UHJvcGVydHkodmFyaWFibGUsIHZhbHVlKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldEVsZW1lbnRDc3NWYXJpYWJsZShjbGFzc05hbWUsIHZhcmlhYmxlLCB2YWx1ZSkge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc05hbWUpO1xuICAgIGlmIChlbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgZWxlbWVudFswXS5zdHlsZS5zZXRQcm9wZXJ0eSh2YXJpYWJsZSwgdmFsdWUpO1xuICAgIH1cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIHdpbmRvd1Njcm9sbFRvKHZhbCkge1xuICAgIHdpbmRvdy5zY3JvbGxUbygwLCB2YWwpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0SWZyYW1lU2VjdGlvbih2YWwpIHtcbiAgICB2YXIgc2VjdGlvbiA9ICQoJ1tkYXRhLXNlY3Rpb249XCInICsgdmFsICsgJ1wiXScpO1xuICAgICQoJy5jZC1kZW1vLWl0ZW0tLXNlbGVjdGVkJykucmVtb3ZlQ2xhc3MoJ2NkLWRlbW8taXRlbS0tc2VsZWN0ZWQnKTtcbiAgICBpZiAoc2VjdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNlY3Rpb24uYWRkQ2xhc3MoJ2NkLWRlbW8taXRlbS0tc2VsZWN0ZWQnKTtcbiAgICAgICAgaWYgKCQoJy5jZC1kZW1vLWNvbG9yX19saXN0LS1zZWxlY3RlZCcpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICQoJy5jZC1kZW1vLWNvbG9yX19saXN0LS1zZWxlY3RlZCcpLnJlbW92ZUNsYXNzKCdjZC1kZW1vLWNvbG9yX19saXN0LS1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgc2VjdGlvbi5hZGRDbGFzcygnY2QtZGVtby1jb2xvcl9fbGlzdC0tc2VsZWN0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB3aW5kb3dTY3JvbGxUbyhzZWN0aW9uLnBhcmVudCgpLm9mZnNldCgpLnRvcCAtIDIwKTtcbiAgICB9XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RJZnJhbWVUYWIodmFsKSB7XG4gICAgLy9yZW1vdmUgdGhlIHNlbGVjdGlvbiBlZmZlY3RcbiAgICAkKCcuY2QtZGVtby1pdGVtLS1zZWxlY3RlZCcpLnJlbW92ZUNsYXNzKCdjZC1kZW1vLWl0ZW0tLXNlbGVjdGVkJyk7XG4gICAgdmFyIHNlY3Rpb24gPSAkKCdbZGF0YS10YWJdJyk7XG4gICAgaWYgKHNlY3Rpb24ubGVuZ3RoID4gMCkge1xuICAgICAgICBzZWN0aW9uLmFkZENsYXNzKCdjZC1kZW1vLWl0ZW0tLWlzLWhpZGRlbicpO1xuICAgICAgICBzZWN0aW9uLmZpbHRlcignW2RhdGEtdGFiPVwiJyArIHZhbCArICdcIl0nKS5yZW1vdmVDbGFzcygnY2QtZGVtby1pdGVtLS1pcy1oaWRkZW4nKTtcblxuICAgICAgICBpZiAodmFsID09ICd0YWItbGgtY3JvcCcpIHtcbiAgICAgICAgICAgIC8vbGhjcm9wIGluIHR5cG9ncmFwZ3kgLT4gc2VsZWN0IC0tZm9udC1wcmltYXJ5XG4gICAgICAgICAgICBzZWxlY3RJZnJhbWVTZWN0aW9uKCctLWZvbnQtMScpO1xuICAgICAgICB9XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TXEoKSB7XG4gICAgdmFyIHdpbmRvd1dpZHRoID0gJCh3aW5kb3cpLm91dGVyV2lkdGgoKVxuICAgICAgICAsIG1xID0gMFxuICAgICAgICAsIHN0cmluZyA9ICcnO1xuICAgIC8vIGNoZWNrIGlmIHlvdSBjYW4gZ2V0IGV4dGVybmFsIGRvY3VtZW50IHdpZHRoXG4gICAgaWYgKHdpbmRvdy5wYXJlbnQgJiYgd2luZG93LnBhcmVudC5kb2N1bWVudCAmJiB3aW5kb3cucGFyZW50LmRvY3VtZW50LmJvZHkgJiYgd2luZG93LnBhcmVudC5kb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoKSB7XG4gICAgICAgIHdpbmRvd1dpZHRoID0gd2luZG93LnBhcmVudC5kb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgY2FzZSB3aW5kb3dXaWR0aCA+PSAxNDQwOlxuICAgICAgICAgICAgbXEgPSA1O1xuICAgICAgICAgICAgc3RyaW5nID0gJ1Zpc2libGUgbXE6ID4gMTQ0MHB4JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHdpbmRvd1dpZHRoID49IDEyODA6XG4gICAgICAgICAgICBtcSA9IDQ7XG4gICAgICAgICAgICBzdHJpbmcgPSAnVmlzaWJsZSBtcTogPiAxMjgwcHgnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2Ugd2luZG93V2lkdGggPj0gMTAyNDpcbiAgICAgICAgICAgIG1xID0gMztcbiAgICAgICAgICAgIHN0cmluZyA9ICdWaXNpYmxlIG1xOiA+IDEwMjRweCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB3aW5kb3dXaWR0aCA+PSA2MDA6XG4gICAgICAgICAgICBtcSA9IDI7XG4gICAgICAgICAgICBzdHJpbmcgPSAnVmlzaWJsZSBtcTogPiA2MDBweCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB3aW5kb3dXaWR0aCA+PSA0ODA6XG4gICAgICAgICAgICBtcSA9IDE7XG4gICAgICAgICAgICBzdHJpbmcgPSAnVmlzaWJsZSBtcTogPiA0ODBweCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIG1xID0gMDtcbiAgICAgICAgICAgIHN0cmluZyA9ICdOb25lJztcbiAgICB9XG4gICAgJCgnLmpzLXdpZHRoJykudGV4dChzdHJpbmcpO1xuICAgIHJldHVybiBtcTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcmVlblNpemUoKSB7XG4gICAgaWYgKHdpbmRvdy5wYXJlbnQgJiYgd2luZG93LnBhcmVudC5kb2N1bWVudCAmJiB3aW5kb3cucGFyZW50LmRvY3VtZW50LmJvZHkgJiYgd2luZG93LnBhcmVudC5kb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoKSB7XG4gICAgICAgIHJldHVybiBbd2luZG93LnBhcmVudC5kb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoLCAkKHdpbmRvdykub3V0ZXJIZWlnaHQoKV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFskKHdpbmRvdykub3V0ZXJXaWR0aCgpLCAkKHdpbmRvdykub3V0ZXJIZWlnaHQoKV07XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsaWRSZXNwb25zaXZlVmFsdWUoc3BhY2VBcnJheSwgaW5kZXgsIHN1YkluZGV4KSB7XG4gICAgdmFyIGl0ZW0gPSAoc3ViSW5kZXggIT09IGZhbHNlKSA/IHNwYWNlQXJyYXlbaW5kZXhdW3N1YkluZGV4XSA6IHNwYWNlQXJyYXlbaW5kZXhdO1xuICAgIGlmIChpbmRleCA9PSAwKVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICBpZiAoaXRlbSAhPT0gZmFsc2UgJiYgaXRlbSAhPT0gJycpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGdldFZhbGlkUmVzcG9uc2l2ZVZhbHVlKHNwYWNlQXJyYXksIGluZGV4IC0gMSwgc3ViSW5kZXgpO1xuICAgIH1cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlVW5pdCh2YWx1ZSkge1xuICAgIGlmICghdmFsdWUgfHwgdmFsdWUgPT0gJycpXG4gICAgICAgIHJldHVybiBbZmFsc2UsIGZhbHNlXTtcbiAgICB2YXIgbnVtYmVyID0gcGFyc2VGbG9hdCh2YWx1ZSlcbiAgICAgICAgLCB1bml0ID0gdmFsdWUucmVwbGFjZShudW1iZXIsICcnKTtcbiAgICByZXR1cm4gW251bWJlciwgdW5pdF07XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCb2R5Tm90RmFsc2UoYXJyYXksIG1xKSB7XG4gICAgdmFyIG5ld0FycmF5ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgbmV3QXJyYXlbaV0gPSBnZXRWYWxpZFJlc3BvbnNpdmVWYWx1ZShhcnJheSwgbXEsIGkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3QXJyYXk7XG59XG47XG52YXIgcHJvamVjdExvYWRlZCA9ICcnO1xudmFyIE1RID0gZ2V0TXEoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRHbG9iYWxzU3R5bGUocHJvamVjdCkge1xuICAgIC8vZm9yIGNvbXBvbmVudHMgLT4gbG9hZCBwcm9qZWN0IHN0eWxlXG4gICAgaWYgKHByb2plY3QpIHtcbiAgICAgICAgJCgnLmpzLWNkLWRlbW8nKS50cmlnZ2VyKCdnbG9iYWxzVXBkYXRpbmcnKTtcbiAgICAgICAgcHJvamVjdExvYWRlZCA9IHByb2plY3Q7XG4gICAgfVxuXG4gICAgaWYgKHByb2plY3QuY29sb3JzICYmIHByb2plY3QuY29sb3JzICE9PSAnJyAmJiBPYmplY3QudmFsdWVzKSB7XG4gICAgICAgIC8vY29sb3JzIHdlcmUgc2F2ZWQgYW5kIG5lZWQgdG8gYmUgbW9kaWZpZWRcbiAgICAgICAgbG9hZENvbG9yU3R5bGUoSlNPTi5wYXJzZShwcm9qZWN0LmNvbG9ycykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRDb2xvckRlZmF1bHRTdHlsZSgpO1xuICAgIH1cblxuICAgIGlmIChwcm9qZWN0LnR5cG9ncmFwaHkgJiYgcHJvamVjdC50eXBvZ3JhcGh5ICE9PSAnJyAmJiBPYmplY3QudmFsdWVzKSB7XG4gICAgICAgIC8vdHlwb2dyYXBoeSB3YXMgc2F2ZWQgYW5kIG5lZWQgdG8gYmUgbW9kaWZpZWRcbiAgICAgICAgbG9hZFR5cG9ncmFwaHlTdHlsZShKU09OLnBhcnNlKGRlY29kZVNhZmVVUklDb21wb25lbnQocHJvamVjdC50eXBvZ3JhcGh5KSksIHRydWUsIE1RKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkVHlwb2dyYXBoeURlZmF1bHRTdHlsZSh0cnVlLCBNUSk7XG4gICAgfVxuICAgIC8vZG8gdGhlIHNhbWUgZm9yIHRoZSBvdGhlciBnbG9iYWxzXG4gICAgaWYgKHByb2plY3Quc3BhY2luZyAmJiBwcm9qZWN0LnNwYWNpbmcgIT09ICcnICYmIE9iamVjdC52YWx1ZXMpIHtcbiAgICAgICAgbG9hZFNwYWNpbmdTdHlsZShKU09OLnBhcnNlKGRlY29kZVNhZmVVUklDb21wb25lbnQocHJvamVjdC5zcGFjaW5nKSksIE1RKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkU3BhY2luZ0RlZmF1bHRTdHlsZShNUSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2plY3QuYnV0dG9ucyAmJiBwcm9qZWN0LmJ1dHRvbnMgIT09ICcnICYmIE9iamVjdC52YWx1ZXMpIHtcbiAgICAgICAgbG9hZEJ1dHRvbnNTdHlsZShKU09OLnBhcnNlKGRlY29kZVNhZmVVUklDb21wb25lbnQocHJvamVjdC5idXR0b25zKSksIE1RKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkQnV0dG9uc0RlZmF1bHRTdHlsZShNUSk7XG4gICAgfVxuICAgIGlmIChwcm9qZWN0LmZvcm0gJiYgcHJvamVjdC5mb3JtICE9PSAnJyAmJiBPYmplY3QudmFsdWVzKSB7XG4gICAgICAgIGxvYWRGb3Jtc1N0eWxlKEpTT04ucGFyc2UoZGVjb2RlU2FmZVVSSUNvbXBvbmVudChwcm9qZWN0LmZvcm0pKSwgTVEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRGb3Jtc0RlZmF1bHRTdHlsZShNUSk7XG4gICAgfVxuICAgIC8vaWYgeW91IG5lZWQgdG8gdXBkYXRlIHN0eWxlIG9uIHJlc2l6ZVxuICAgIGlmIChwcm9qZWN0KSB7XG4gICAgICAgICQoJy5qcy1jZC1kZW1vJykudHJpZ2dlcignZ2xvYmFsc1VwZGF0ZScpO1xuICAgIH1cbiAgICAkKCcuanMtY2QtZGVtbycpLnRyaWdnZXIoJ3Nob3dDb21wb25lbnQnKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRDb2xvclN0eWxlKGNvbG9ycykge1xuICAgIC8vbm8gbmVlZCB0byBkbyB0aGlzIGZvciBjdXN0b20gb3BhY2l0aWVzIGFzIG9ubHkgZGVmYXVsdCBvbmUgYXJlIHVzZWQgaW4gY29tcG9uZW50c1xuICAgIHZhciB2YXJpYXRpb25zID0gWyctbGlnaHRlcicsICctbGlnaHQnLCAnJywgJy1kYXJrJywgJy1kYXJrZXInXTtcblxuICAgIGJ0bkNvbG9yTGFiZWxzID0gT2JqZWN0LnZhbHVlcyhjb2xvcnNbJ21haW5Db2xvckxhYmVscyddKTtcbiAgICBidG5Db2xvckN1c3RvbU5pY2VMYWJlbHMgPSAoY29sb3JzWydjdXN0b21Db2xvckxhYmVscyddKSA/IE9iamVjdC52YWx1ZXMoY29sb3JzWydjdXN0b21Db2xvckxhYmVscyddKSA6IFtdO1xuICAgIGJ0bkdyYWRpZW50c0N1c3RvbU5pY2VMYWJlbHMgPSAoY29sb3JzWydncmFkaWVudENvbG9yTGFiZWxzJ10pID8gT2JqZWN0LnZhbHVlcyhjb2xvcnNbJ2dyYWRpZW50Q29sb3JMYWJlbHMnXSkgOiBbXTtcbiAgICAvL3NldCBtYWluIGNvbG9ycyAtIGluY2x1ZGluZyBjdXN0b20gY29sb3JzIGFzIHdlbGxcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ0bkNvbG9yTGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjc3NWYXJMYWIgPSAoaSA+IDQpID8gYnRuQ29sb3JDdXN0b21OaWNlTGFiZWxzW2kgLSA1XSA6ICctLWNvbG9yLScgKyBidG5Db2xvckxhYmVsc1tpXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YXJpYXRpb25zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBzZXRDc3NWYXJpYWJsZShjc3NWYXJMYWIgKyB2YXJpYXRpb25zW2pdLCBnZXRIU0woT2JqZWN0LnZhbHVlcyhjb2xvcnNbYnRuQ29sb3JMYWJlbHNbaV1dWzBdW2pdKSkpO1xuICAgICAgICAgICAgc2V0Q29sb3JQYXJ0VmFyaWFibGVzKGNzc1ZhckxhYiArIHZhcmlhdGlvbnNbal0sIE9iamVjdC52YWx1ZXMoY29sb3JzW2J0bkNvbG9yTGFiZWxzW2ldXVswXVtqXSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9zZXQgYmxhY2sgJiB3aGl0ZVxuICAgIHZhciBiVmFyaWF0aW9ucyA9IFsnJywgJy1saWdodCcsICctbGlnaHRlciddXG4gICAgICAgICwgYmxhY2tBcnJheSA9IGdldEJXQXJyYXkoY29sb3JzWydibGFja0NvbG9ycyddWzBdKVxuICAgICAgICAsIHdoaXRlQXJyYXkgPSBnZXRCV0FycmF5KGNvbG9yc1snd2hpdGVDb2xvcnMnXVswXSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsYWNrQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2V0Q3NzVmFyaWFibGUoJy0tY29sb3ItYmxhY2snICsgYlZhcmlhdGlvbnNbaV0sIGdldEhTTChibGFja0FycmF5W2ldKSk7XG4gICAgICAgIHNldENvbG9yUGFydFZhcmlhYmxlcygnLS1jb2xvci1ibGFjaycgKyBiVmFyaWF0aW9uc1tpXSwgYmxhY2tBcnJheVtpXSk7XG4gICAgfVxuICAgIHZhciB3VmFyaWF0aW9ucyA9IFsnJywgJy1kYXJrJywgJy1kYXJrZXInXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdoaXRlQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2V0Q3NzVmFyaWFibGUoJy0tY29sb3Itd2hpdGUnICsgd1ZhcmlhdGlvbnNbaV0sIGdldEhTTCh3aGl0ZUFycmF5W2ldKSk7XG4gICAgICAgIHNldENvbG9yUGFydFZhcmlhYmxlcygnLS1jb2xvci13aGl0ZScgKyB3VmFyaWF0aW9uc1tpXSwgd2hpdGVBcnJheVtpXSk7XG4gICAgfVxuXG4gICAgLy9zZXQgY29udHJhc3RzXG4gICAgdmFyIGNvbnRyYXN0TGFiZWxzID0gWyctYmcnLCAnLWNvbnRyYXN0LWxvd2VyJywgJy1jb250cmFzdC1sb3cnLCAnLWNvbnRyYXN0LW1lZGl1bScsICctY29udHJhc3QtaGlnaCcsICctY29udHJhc3QtaGlnaGVyJ107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250cmFzdExhYmVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZXRDc3NWYXJpYWJsZSgnLS1jb2xvcicgKyBjb250cmFzdExhYmVsc1tpXSwgZ2V0SFNMKE9iamVjdC52YWx1ZXMoY29sb3JzWydjb250cmFzdENvbG9ycyddWzBdW2ldKSkpO1xuICAgICAgICBzZXRDb2xvclBhcnRWYXJpYWJsZXMoJy0tY29sb3InICsgY29udHJhc3RMYWJlbHNbaV0sIE9iamVjdC52YWx1ZXMoY29sb3JzWydjb250cmFzdENvbG9ycyddWzBdW2ldKSk7XG4gICAgfVxuXG4gICAgLy8gc2V0IGdyYWRpZW50c1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnRuR3JhZGllbnRzQ3VzdG9tTmljZUxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY3NzVmFyTGFiID0gJy0tZ3JhZGllbnQtJyArIGJ0bkdyYWRpZW50c0N1c3RvbU5pY2VMYWJlbHNbaV1cbiAgICAgICAgICAgICwgZ3JhZGllbnRJZCA9IGNvbG9yc1snZ3JhZGllbnRDb2xvcklkcyddW2ldICsgJ0dyYWRpZW50cyc7XG4gICAgICAgIHNldENzc1ZhcmlhYmxlKGNzc1ZhckxhYiArICctc3RvcC0xJywgZ2V0SFNMKE9iamVjdC52YWx1ZXMoY29sb3JzW2dyYWRpZW50SWRdWzBdWzBdKSkpO1xuICAgICAgICBzZXRDb2xvclBhcnRWYXJpYWJsZXMoY3NzVmFyTGFiICsgJy1zdG9wLTEnLCBPYmplY3QudmFsdWVzKGNvbG9yc1tncmFkaWVudElkXVswXVswXSkpO1xuICAgICAgICBzZXRDc3NWYXJpYWJsZShjc3NWYXJMYWIgKyAnLXN0b3AtMicsIGdldEhTTChPYmplY3QudmFsdWVzKGNvbG9yc1tncmFkaWVudElkXVswXVsxXSkpKTtcbiAgICAgICAgc2V0Q29sb3JQYXJ0VmFyaWFibGVzKGNzc1ZhckxhYiArICctc3RvcC0yJywgT2JqZWN0LnZhbHVlcyhjb2xvcnNbZ3JhZGllbnRJZF1bMF1bMV0pKTtcbiAgICB9XG5cbiAgICAvL2ZvbnQgcmVuZGVyaW5nXG4gICAgdmFyIGZvbnRSZW5kZXJpbmdDb2RlID0gJyc7XG4gICAgaWYgKGNvbG9yc1snZm9udFJlbmRlcmluZyddICYmIGNvbG9yc1snZm9udFJlbmRlcmluZyddWzBdKSB7XG4gICAgICAgIGlmIChOdW1iZXIoY29sb3JzWydmb250UmVuZGVyaW5nJ11bMF0pID09IDEpXG4gICAgICAgICAgICBmb250UmVuZGVyaW5nQ29kZSA9ICdib2R5ey13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7fSc7XG4gICAgICAgIGVsc2UgaWYgKE51bWJlcihjb2xvcnNbJ2ZvbnRSZW5kZXJpbmcnXVswXSkgPT0gMilcbiAgICAgICAgICAgIGZvbnRSZW5kZXJpbmdDb2RlID0gJ2JvZHl7LXdlYmtpdC1mb250LXNtb290aGluZzogYXV0bzstbW96LW9zeC1mb250LXNtb290aGluZzogYXV0bzt9JztcbiAgICB9XG4gICAgdmFyIHN0eWxlID0gJzxzdHlsZSBpZD1cImZvbnQtcmVuZGVyaW5nLXN0eWxlXCI+JyArIGZvbnRSZW5kZXJpbmdDb2RlICsgJzwvc3R5bGU+JztcbiAgICAkKCcjZm9udC1yZW5kZXJpbmctc3R5bGUnKS5yZW1vdmUoKTtcbiAgICB2YXIgYmFzZVN0eWxlID0gJCgnI2NkLWJhc2UtcGFydC0xJyk7XG4gICAgJChzdHlsZSkuaW5zZXJ0QWZ0ZXIoYmFzZVN0eWxlKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRDb2xvckRlZmF1bHRTdHlsZSgpIHtcbiAgICAvLyBjb2xvcnMgYXJyYXlcbiAgICB2YXIgZGVmYXVsdENvbG9ycyA9IFtcbiAgICAgICAgWyctLWNvbG9yLXByaW1hcnktZGFya2VyJywgWzIwNCwgNzAsIDMzXV0sXG4gICAgICAgIFsnLS1jb2xvci1wcmltYXJ5LWRhcmsnLCBbMjA0LCA3MCwgNDNdXSxcbiAgICAgICAgWyctLWNvbG9yLXByaW1hcnknLCBbMjA0LCA3MCwgNTNdXSxcbiAgICAgICAgWyctLWNvbG9yLXByaW1hcnktbGlnaHQnLCBbMjA0LCA3MCwgNjNdXSxcbiAgICAgICAgWyctLWNvbG9yLXByaW1hcnktbGlnaHRlcicsIFsyMDQsIDcwLCA3M11dLFxuICAgICAgICBbJy0tY29sb3ItYWNjZW50LWRhcmtlcicsIFsyODIsIDQ0LCAyN11dLFxuICAgICAgICBbJy0tY29sb3ItYWNjZW50LWRhcmsnLCBbMjgyLCA0NCwgMzddXSxcbiAgICAgICAgWyctLWNvbG9yLWFjY2VudCcsIFsyODIsIDQ0LCA0N11dLFxuICAgICAgICBbJy0tY29sb3ItYWNjZW50LWxpZ2h0JywgWzI4MiwgNDQsIDU3XV0sXG4gICAgICAgIFsnLS1jb2xvci1hY2NlbnQtbGlnaHRlcicsIFsyODIsIDQ0LCA2N11dLFxuICAgICAgICBbJy0tY29sb3ItZG93bmxvYWQtZGFya2VyJywgWzE0NSwgNjMsIDIyXV0sXG4gICAgICAgIFsnLS1jb2xvci1kb3dubG9hZC1kYXJrJywgWzE0NSwgNjMsIDMyXV0sXG4gICAgICAgIFsnLS1jb2xvci1kb3dubG9hZCcsIFsxNDUsIDYzLCA0Ml1dLFxuICAgICAgICBbJy0tY29sb3ItZG93bmxvYWQtbGlnaHQnLCBbMTQ1LCA2MywgNTJdXSxcbiAgICAgICAgWyctLWNvbG9yLWRvd25sb2FkLWxpZ2h0ZXInLCBbMTQ1LCA2MywgNjJdXSxcbiAgICAgICAgWyctLWNvbG9yLWJsYWNrJywgWzI0MCwgOCwgMTJdXSxcbiAgICAgICAgWyctLWNvbG9yLXdoaXRlJywgWzAsIDAsIDEwMF1dLFxuICAgICAgICBbJy0tY29sb3Itd2FybmluZy1kYXJrZXInLCBbNDYsIDY4LCAyOV1dLFxuICAgICAgICBbJy0tY29sb3Itd2FybmluZy1kYXJrJywgWzQ2LCA2OCwgMzldXSxcbiAgICAgICAgWyctLWNvbG9yLXdhcm5pbmcnLCBbNDYsIDY4LCA0OV1dLFxuICAgICAgICBbJy0tY29sb3Itd2FybmluZy1saWdodCcsIFs0NiwgNjgsIDU5XV0sXG4gICAgICAgIFsnLS1jb2xvci13YXJuaW5nLWxpZ2h0ZXInLCBbNDYsIDY4LCA2OV1dLFxuICAgICAgICBbJy0tY29sb3Itc3VjY2Vzcy1kYXJrZXInLCBbOTQsIDQ4LCAyMF1dLFxuICAgICAgICBbJy0tY29sb3Itc3VjY2Vzcy1kYXJrJywgWzk0LCA0OCwgMzBdXSxcbiAgICAgICAgWyctLWNvbG9yLXN1Y2Nlc3MnLCBbOTQsIDQ4LCA0MF1dLFxuICAgICAgICBbJy0tY29sb3Itc3VjY2Vzcy1saWdodCcsIFs5NCwgNDgsIDUwXV0sXG4gICAgICAgIFsnLS1jb2xvci1zdWNjZXNzLWxpZ2h0ZXInLCBbOTQsIDQ4LCA2MF1dLFxuICAgICAgICBbJy0tY29sb3ItZXJyb3ItZGFya2VyJywgWzYsIDYzLCAyNl1dLFxuICAgICAgICBbJy0tY29sb3ItZXJyb3ItZGFyaycsIFs2LCA2MywgMzZdXSxcbiAgICAgICAgWyctLWNvbG9yLWVycm9yJywgWzYsIDYzLCA0Nl1dLFxuICAgICAgICBbJy0tY29sb3ItZXJyb3ItbGlnaHQnLCBbNiwgNjMsIDU2XV0sXG4gICAgICAgIFsnLS1jb2xvci1lcnJvci1saWdodGVyJywgWzYsIDYzLCA2Nl1dLFxuICAgICAgICBbJy0tY29sb3ItaW5mby1kYXJrZXInLCBbMjA0LCA2MiwgMjddXSxcbiAgICAgICAgWyctLWNvbG9yLWluZm8tZGFyaycsIFsyMDQsIDYyLCAzN11dLFxuICAgICAgICBbJy0tY29sb3ItaW5mbycsIFsyMDQsIDYyLCA0N11dLFxuICAgICAgICBbJy0tY29sb3ItaW5mby1saWdodCcsIFsyMDQsIDYyLCA1N11dLFxuICAgICAgICBbJy0tY29sb3ItaW5mby1saWdodGVyJywgWzIwNCwgNjIsIDY3XV0sXG4gICAgICAgIFsnLS1jb2xvci1iZycsIFsyMjAsIDUsIDIyXV0sXG4gICAgICAgIFsnLS1jb2xvci1jb250cmFzdC1sb3dlcicsIFsyMTYsIDQsIDI1XV0sXG4gICAgICAgIFsnLS1jb2xvci1jb250cmFzdC1sb3cnLCBbMjIwLCAzLCAzNF1dLFxuICAgICAgICBbJy0tY29sb3ItY29udHJhc3QtbWVkaXVtJywgWzIyMCwgMiwgNjNdXSxcbiAgICAgICAgWyctLWNvbG9yLWNvbnRyYXN0LWhpZ2gnLCBbMTgwLCAyLCA5MF1dLFxuICAgICAgICBbJy0tY29sb3ItY29udHJhc3QtaGlnaGVyJywgWzAsIDAsIDEwMF1dXG4gICAgXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlZmF1bHRDb2xvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2V0Q3NzVmFyaWFibGUoZGVmYXVsdENvbG9yc1tpXVswXSwgZ2V0SFNMKGRlZmF1bHRDb2xvcnNbaV1bMV0pKTtcbiAgICAgICAgc2V0Q29sb3JQYXJ0VmFyaWFibGVzKGRlZmF1bHRDb2xvcnNbaV1bMF0sIGRlZmF1bHRDb2xvcnNbaV1bMV0pO1xuICAgIH1cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbG9yUGFydFZhcmlhYmxlcyhsYWJlbCwgY29sb3JBcnJheSkge1xuICAgIHNldENzc1ZhcmlhYmxlKGxhYmVsICsgJy1oJywgTWF0aC5yb3VuZChjb2xvckFycmF5WzBdKSk7XG4gICAgc2V0Q3NzVmFyaWFibGUobGFiZWwgKyAnLXMnLCBNYXRoLnJvdW5kKGNvbG9yQXJyYXlbMV0gKiAxMDApICsgJyUnKTtcbiAgICBzZXRDc3NWYXJpYWJsZShsYWJlbCArICctbCcsIE1hdGgucm91bmQoY29sb3JBcnJheVsyXSAqIDEwMCkgKyAnJScpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QldBcnJheShvYmopIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2goT2JqZWN0LnZhbHVlcyhvYmpbcHJvcGVydHldKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFR5cG9ncmFwaHlTdHlsZSh0eXBvZ3JhcGh5LCBib29sLCBtcSkge1xuICAgIGlmIChib29sKSB7XG4gICAgICAgIC8vbm90IHJlc3BvbnNpdmUgdGhpbmdzXG4gICAgICAgIGlmICh0eXBvZ3JhcGh5Wydmb250Q29kZSddICYmIHR5cG9ncmFwaHkgIT0gJycpXG4gICAgICAgICAgICAkKHR5cG9ncmFwaHlbJ2ZvbnRDb2RlJ10pLmFwcGVuZFRvKCQoJ2hlYWQnKSk7XG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHR5cG9ncmFwaHlbJ2ZvbnRGYW1pbGllcyddKSB7XG4gICAgICAgICAgICBpZiAodHlwb2dyYXBoeVsnZm9udEZhbWlsaWVzJ10uaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIHR5cG9ncmFwaHlbJ2ZvbnRGYW1pbHlMYWJlbHMnXS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBzZXRCb2R5Q3NzVmFyaWFibGUodHlwb2dyYXBoeVsnZm9udEZhbWlseUxhYmVscyddW3Byb3BlcnR5XSwgdHlwb2dyYXBoeVsnZm9udEZhbWlsaWVzJ11bcHJvcGVydHldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwb2dyYXBoeVsnbGhDcm9wQ2FwaXRhbExldHRlciddKSB7XG4gICAgICAgICAgICB2YXIgbGhjcm9wQXJyYXkgPSBPYmplY3QudmFsdWVzKHR5cG9ncmFwaHlbJ2xoQ3JvcENhcGl0YWxMZXR0ZXInXSk7XG4gICAgICAgICAgICBpZiAobGhjcm9wQXJyYXkubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICBzZXRDc3NWYXJpYWJsZSgnLS1mb250LXByaW1hcnktY2FwaXRhbC1sZXR0ZXInLCBsaGNyb3BBcnJheVswXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb250QXJyYXkgPSBbJyddO1xuICAgICAgICBidG5Gb250SWRzID0gWzBdO1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0eXBvZ3JhcGh5Wydmb250RmFtaWx5TGFiZWxzJ10pIHtcbiAgICAgICAgICAgIGlmICh0eXBvZ3JhcGh5Wydmb250RmFtaWx5TGFiZWxzJ10uaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgZm9udEFycmF5LnB1c2godHlwb2dyYXBoeVsnZm9udEZhbWlseUxhYmVscyddW3Byb3BlcnR5XSk7XG4gICAgICAgICAgICAgICAgYnRuRm9udElkcy5wdXNoKHR5cG9ncmFwaHlbJ2ZvbnRGYW1pbHlJZHMnXVtwcm9wZXJ0eV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9ib2R5L2hlYWRpbmcgc3R5bGVcbiAgICB2YXIgaGVhZGluZ1ZhbHVlcyA9IGdldEJvZHlOb3RGYWxzZShnZXRUeXBvZ3JhcGh5QXJyYXkodHlwb2dyYXBoeVsnaGVhZGluZ0luZm8nXSksIG1xKVxuICAgICAgICAsIGJvZHlWYWx1ZXMgPSBnZXRCb2R5Tm90RmFsc2UoZ2V0VHlwb2dyYXBoeUFycmF5KHR5cG9ncmFwaHlbJ2JvZHlJbmZvJ10pLCBtcSk7XG5cbiAgICB2YXIgdGV4dFZhcmlhYmxlcyA9ICdyb290LCAqey0tdGV4dC14czogY2FsYygodmFyKC0tdGV4dC11bml0KSAvIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKSAvIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQtc206IGNhbGModmFyKC0tdGV4dC14cykgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LW1kOiBjYWxjKHZhcigtLXRleHQtc20pICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LWxnOiBjYWxjKHZhcigtLXRleHQtbWQpICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykpOy0tdGV4dC14bDogY2FsYyh2YXIoLS10ZXh0LWxnKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQteHhsOiBjYWxjKHZhcigtLXRleHQteGwpICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykpOy0tdGV4dC14eHhsOiBjYWxjKHZhcigtLXRleHQteHhsKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQteHh4eGw6IGNhbGModmFyKC0tdGV4dC14eHhsKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTt9JztcblxuICAgIGxvYWRUeXBvZ3JhcGh5U3R5bGVUYWcodGV4dFZhcmlhYmxlcyArIGdldFR5cG9ncmFwaHlTdHlsZShoZWFkaW5nVmFsdWVzLCAnaDEsIGgyLCBoMywgaDQnLCB0eXBvZ3JhcGh5KSArIGdldFR5cG9ncmFwaHlTdHlsZShib2R5VmFsdWVzLCAnYm9keScsIHR5cG9ncmFwaHkpKTtcblxuICAgIHNldFR5cG9ncmFwaHlDc3NWYXJpYWJsZXMoaGVhZGluZ1ZhbHVlcywgYm9keVZhbHVlcywgdHlwb2dyYXBoeSwgbXEpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFR5cG9ncmFwaHlEZWZhdWx0U3R5bGUoYm9vbCwgbXEpIHtcbiAgICAvLyBzZXQgdmFyaWFibGVzIC0gZ2V0IHZhbHVlcyBmb3IgLS10ZXh0LWJhc2Utc2l6ZSBhbmQgLS10ZXh0LXNjYWxlLXJhdGlvXG4gICAgdmFyIGJvZHlTdHlsZSA9ICctLWZvbnQtcHJpbWFyeTogSW50ZXIsIHN5c3RlbS11aSwgc2Fucy1zZXJpZjstLXRleHQtYmFzZS1zaXplOiAxZW07LS10ZXh0LXNjYWxlLXJhdGlvOiAxLjI7LS10ZXh0LXVuaXQ6IDFlbTstLWJvZHktbGluZS1oZWlnaHQ6IDEuNDstLWhlYWRpbmctbGluZS1oZWlnaHQ6IDEuMjstLWZvbnQtcHJpbWFyeS1jYXBpdGFsLWxldHRlcjogMTsnXG4gICAgICAgICxcbiAgICAgICAgYWxsU3R5bGUgPSAnIC0tdGV4dC14czogY2FsYygodmFyKC0tdGV4dC11bml0KSAvIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKSAvIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQtc206IGNhbGModmFyKC0tdGV4dC14cykgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LW1kOiBjYWxjKHZhcigtLXRleHQtc20pICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LWxnOiBjYWxjKHZhcigtLXRleHQtbWQpICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykpOy0tdGV4dC14bDogY2FsYyh2YXIoLS10ZXh0LWxnKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQteHhsOiBjYWxjKHZhcigtLXRleHQteGwpICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykpOy0tdGV4dC14eHhsOiBjYWxjKHZhcigtLXRleHQteHhsKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQteHh4eGw6IGNhbGModmFyKC0tdGV4dC14eHhsKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTsnO1xuXG4gICAgYm9keVN0eWxlID0gJzpyb290eycgKyBib2R5U3R5bGUgKyAnfSc7XG4gICAgYWxsU3R5bGUgPSAnOnJvb3QsICp7JyArIGFsbFN0eWxlICsgJ30nO1xuXG4gICAgdmFyIGJvZHlSZXNTdHlsZSA9ICdAbWVkaWEgKG1pbi13aWR0aDo2NHJlbSl7OnJvb3R7LS10ZXh0LWJhc2Utc2l6ZTogMS4yNWVtOy0tdGV4dC1zY2FsZS1yYXRpbzogMS4yNTt9fSc7XG5cbiAgICB2YXIgaGVhZGluZ1N0eWxlID0gJ2gxLCBoMiwgaDMsIGg0IHtmb250LWZhbWlseTogdmFyKC0tZm9udC1wcmltYXJ5KTtmb250LXdlaWdodDogNzAwO30nO1xuXG4gICAgbG9hZFR5cG9ncmFwaHlTdHlsZVRhZyhib2R5U3R5bGUgKyBhbGxTdHlsZSArIGhlYWRpbmdTdHlsZSArIGJvZHlSZXNTdHlsZSk7XG5cbiAgICAvLyBhcHBlbmQgZm9udCBsaW5rXG4gICAgdmFyIGZvbnRMaW5rID0gJzxsaW5rIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUludGVyOndnaHRAMzAwOzQwMDs1MDA7NjAwOzcwMCZkaXNwbGF5PXN3YXBcIiByZWw9XCJzdHlsZXNoZWV0XCI+JztcbiAgICB2YXIgdHlwb2dyYXBoeVN0eWxlID0gJCgnI3R5cG9ncmFwaHktc3R5bGUnKTtcbiAgICAkKGZvbnRMaW5rKS5pbnNlcnRBZnRlcih0eXBvZ3JhcGh5U3R5bGUpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFR5cG9ncmFwaHlTdHlsZVRhZyhzdHlsZUNvbnRlbnQpIHtcbiAgICB2YXIgZGVmYXVsdFN0eWxlID0gJ21hcmsge2JhY2tncm91bmQtY29sb3I6IGhzbGEodmFyKC0tY29sb3ItYWNjZW50LWgpLCB2YXIoLS1jb2xvci1hY2NlbnQtcyksIHZhcigtLWNvbG9yLWFjY2VudC1sKSwgMC4yKTtjb2xvcjogaW5oZXJpdDt9LnRleHQtY29tcG9uZW50IHstLWxpbmUtaGVpZ2h0LW11bHRpcGxpZXI6IDE7LS10ZXh0LXZzcGFjZS1tdWx0aXBsaWVyOiAxO30udGV4dC1jb21wb25lbnQgYmxvY2txdW90ZSB7cGFkZGluZy1sZWZ0OiAxZW07Ym9yZGVyLWxlZnQ6IDRweCBzb2xpZCB2YXIoLS1jb2xvci1jb250cmFzdC1sb3cpO30udGV4dC1jb21wb25lbnQgaHIge2JhY2tncm91bmQ6IHZhcigtLWNvbG9yLWNvbnRyYXN0LWxvdyk7aGVpZ2h0OiAxcHg7fS50ZXh0LWNvbXBvbmVudCBmaWdjYXB0aW9uIHtmb250LXNpemU6IHZhcigtLXRleHQtc20pO2NvbG9yOiB2YXIoLS1jb2xvci1jb250cmFzdC1tZWRpdW0pO30uYXJ0aWNsZSB7LS1ib2R5LWxpbmUtaGVpZ2h0OiAxLjU4Oy0tdGV4dC12c3BhY2UtbXVsdGlwbGllcjogMS4yO30nO1xuICAgIHZhciBzdHlsZSA9ICc8c3R5bGUgaWQ9XCJ0eXBvZ3JhcGh5LXN0eWxlXCI+JyArIHN0eWxlQ29udGVudCArIGRlZmF1bHRTdHlsZSArICc8L3N0eWxlPic7XG4gICAgJCgnI3R5cG9ncmFwaHktc3R5bGUnKS5yZW1vdmUoKTtcblxuICAgIHZhciBiYXNlU3R5bGUgPSAkKCcjY2QtYmFzZS1wYXJ0LTEnKTtcbiAgICAkKHN0eWxlKS5pbnNlcnRBZnRlcihiYXNlU3R5bGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFR5cG9ncmFwaHlDc3NWYXJTdHlsZUd1aWRlKHR5cG9ncmFwaHkpIHtcbiAgICB2YXIgY29kZSA9ICc6cm9vdCB7JztcbiAgICAvLyBmb250IGZhbWlseSBkZWZpbml0aW9uXG4gICAgdmFyIGZvbnRGYW1pbGllcyA9ICcnXG4gICAgICAgICwgZm9udEZhbWlseUNsYXNzZXMgPSAnJztcbiAgICB2YXIgc2NhbGUgPSAnJztcbiAgICB2YXIgdGV4dFZhcmlhYmxlcyA9ICcnO1xuICAgIHZhciBzY2FsZVJlc3BvbnNpdmUgPSAnJztcbiAgICBpZiAodHlwb2dyYXBoeVsnZm9udEZhbWlsaWVzJ10gJiYgdHlwb2dyYXBoeVsnZm9udEZhbWlseUxhYmVscyddKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwb2dyYXBoeVsnZm9udEZhbWlsaWVzJ10ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBvZ3JhcGh5Wydmb250RmFtaWx5TGFiZWxzJ11baV0pIHtcbiAgICAgICAgICAgICAgICBmb250RmFtaWxpZXMgPSBmb250RmFtaWxpZXMgKyB0eXBvZ3JhcGh5Wydmb250RmFtaWx5TGFiZWxzJ11baV0gKyAnOiAnICsgdHlwb2dyYXBoeVsnZm9udEZhbWlsaWVzJ11baV0gKyAnOyc7XG4gICAgICAgICAgICAgICAgZm9udEZhbWlseUNsYXNzZXMgPSBmb250RmFtaWx5Q2xhc3NlcyArIHR5cG9ncmFwaHlbJ2ZvbnRGYW1pbHlMYWJlbHMnXVtpXS5yZXBsYWNlKCctLScsICcuJykgKyAne2ZvbnQtZmFtaWx5OiB2YXIoJyArIHR5cG9ncmFwaHlbJ2ZvbnRGYW1pbHlMYWJlbHMnXVtpXSArICcpO30nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvZGUgPSBjb2RlICsgZm9udEZhbWlsaWVzO1xuICAgIGlmICh0eXBvZ3JhcGh5WydiYXNlU2l6ZSddICYmIHR5cG9ncmFwaHlbJ3NjYWxlUmF0aW8nXSAmJiB0eXBvZ3JhcGh5Wydib2R5SW5mbyddICYmIHR5cG9ncmFwaHlbJ2hlYWRpbmdJbmZvJ10pIHtcbiAgICAgICAgc2NhbGUgPSBnZXRUeXBvZ3JhcGh5U2NhbGVWYXIodHlwb2dyYXBoeSwgMCk7XG4gICAgICAgIHNjYWxlUmVzcG9uc2l2ZSA9IGdldFR5cG9ncmFwaHlTY2FsZVZhclJlcyh0eXBvZ3JhcGh5KTtcbiAgICAgICAgdGV4dFZhcmlhYmxlcyA9ICdyb290LCAqIHstLXRleHQteHM6IGNhbGMoKHZhcigtLXRleHQtdW5pdCkgLyB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSkgLyB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LXNtOiBjYWxjKHZhcigtLXRleHQteHMpICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykpOy0tdGV4dC1tZDogY2FsYyh2YXIoLS10ZXh0LXNtKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykpOy0tdGV4dC1sZzogY2FsYyh2YXIoLS10ZXh0LW1kKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQteGw6IGNhbGModmFyKC0tdGV4dC1sZykgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LXh4bDogY2FsYyh2YXIoLS10ZXh0LXhsKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQteHh4bDogY2FsYyh2YXIoLS10ZXh0LXh4bCkgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LXh4eHhsOiBjYWxjKHZhcigtLXRleHQteHh4bCkgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7fSdcbiAgICB9XG5cbiAgICBjb2RlID0gY29kZSArIHNjYWxlICsgJ30nICsgdGV4dFZhcmlhYmxlcyArIHNjYWxlUmVzcG9uc2l2ZSArIGZvbnRGYW1pbHlDbGFzc2VzO1xuICAgIHJldHVybiBjb2RlO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFR5cG9ncmFwaHlTdHlsZVN0eWxlR3VpZGUodHlwb2dyYXBoeSkge1xuICAgIHZhciBtcSA9IFsnJywgJzMycmVtJywgJzQ4cmVtJywgJzY0cmVtJywgJzgwcmVtJywgJzkwcmVtJ107XG4gICAgdmFyIGNvZGUgPSAnJztcbiAgICBpZiAodHlwb2dyYXBoeVsnYm9keUluZm8nXSAmJiB0eXBvZ3JhcGh5WydoZWFkaW5nSW5mbyddKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9ICcnO1xuICAgICAgICAgICAgaWYgKHR5cG9ncmFwaHlbJ2JvZHlJbmZvJ11baV0pIHtcbiAgICAgICAgICAgICAgICB2YXIgYm9keVN0eWxlID0gZ2V0VHlwb2dyYXBoeVN0eWxlKHR5cG9ncmFwaHlbJ2JvZHlJbmZvJ11baV0sICdib2R5JywgdHlwb2dyYXBoeSk7XG4gICAgICAgICAgICAgICAgc3R5bGUgPSAoaSA+IDApID8gc3R5bGUgKyAnQG1lZGlhIChtaW4td2lkdGg6JyArIG1xW2ldICsgJykgeycgKyBib2R5U3R5bGUgKyAnfScgOiBzdHlsZSArIGJvZHlTdHlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBvZ3JhcGh5WydoZWFkaW5nSW5mbyddW2ldKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlYWRpbmdTdHlsZSA9IGdldFR5cG9ncmFwaHlTdHlsZSh0eXBvZ3JhcGh5WydoZWFkaW5nSW5mbyddW2ldLCAnaDEsIGgyLCBoMywgaDQnLCB0eXBvZ3JhcGh5KTtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IChpID4gMCkgPyBzdHlsZSArICdAbWVkaWEgKG1pbi13aWR0aDonICsgbXFbaV0gKyAnKSB7JyArIGhlYWRpbmdTdHlsZSArICd9JyA6IHN0eWxlICsgaGVhZGluZ1N0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29kZSA9IGNvZGUgKyBzdHlsZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb2RlO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwb2dyYXBoeVNjYWxlVmFyKHR5cG9ncmFwaHksIGluZGV4KSB7XG4gICAgdmFyIGNvZGUgPSAnJztcbiAgICBpZiAodHlwb2dyYXBoeVsnYmFzZVNpemUnXVtpbmRleF0pXG4gICAgICAgIGNvZGUgPSBjb2RlICsgJy0tdGV4dC1iYXNlLXNpemU6ICcgKyB0eXBvZ3JhcGh5WydiYXNlU2l6ZSddW2luZGV4XSArICc7JztcbiAgICBpZiAodHlwb2dyYXBoeVsnc2NhbGVSYXRpbyddW2luZGV4XSlcbiAgICAgICAgY29kZSA9IGNvZGUgKyAnLS10ZXh0LXNjYWxlLXJhdGlvOiAnICsgdHlwb2dyYXBoeVsnc2NhbGVSYXRpbyddW2luZGV4XSArICc7JztcbiAgICBpZiAodHlwb2dyYXBoeVsnYm9keUluZm8nXVtpbmRleF0gJiYgdHlwb2dyYXBoeVsnYm9keUluZm8nXVtpbmRleF1bMl0pXG4gICAgICAgIGNvZGUgPSBjb2RlICsgJy0tYm9keS1saW5lLWhlaWdodDogJyArIHR5cG9ncmFwaHlbJ2JvZHlJbmZvJ11baW5kZXhdWzJdICsgJzsnO1xuICAgIGlmICh0eXBvZ3JhcGh5WydoZWFkaW5nSW5mbyddW2luZGV4XSAmJiB0eXBvZ3JhcGh5WydoZWFkaW5nSW5mbyddW2luZGV4XVsyXSlcbiAgICAgICAgY29kZSA9IGNvZGUgKyAnLS1oZWFkaW5nLWxpbmUtaGVpZ2h0OiAnICsgdHlwb2dyYXBoeVsnaGVhZGluZ0luZm8nXVtpbmRleF1bMl0gKyAnOyc7XG4gICAgaWYgKGluZGV4ID09IDApXG4gICAgICAgIGNvZGUgPSBjb2RlICsgJy0tdGV4dC11bml0OiAnICsgZ2V0VGV4dFVuaXQodHlwb2dyYXBoeSk7XG4gICAgcmV0dXJuIGNvZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXh0VW5pdCh0eXBvZ3JhcGh5KSB7XG4gICAgdmFyIHRleHRVbml0ID0gJzFlbSc7XG4gICAgaWYgKHR5cG9ncmFwaHlbJ2Jhc2VTaXplJ11bMF0gJiYgKHR5cG9ncmFwaHlbJ2Jhc2VTaXplJ11bMF0uaW5kZXhPZigncHgnKSA+IC0xIHx8IHR5cG9ncmFwaHlbJ2Jhc2VTaXplJ11bMF0uaW5kZXhPZigncmVtJykgPiAtMSkpXG4gICAgICAgIHRleHRVbml0ID0gJ3ZhcigtLXRleHQtYmFzZS1zaXplKSc7XG4gICAgcmV0dXJuIHRleHRVbml0O1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwb2dyYXBoeVNjYWxlVmFyUmVzKHR5cG9ncmFwaHkpIHtcbiAgICB2YXIgbXEgPSBbJycsICczMnJlbScsICc0OHJlbScsICc2NHJlbScsICc4MHJlbScsICc5MHJlbSddO1xuICAgIHZhciBjb2RlID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBtcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb2RlID0gY29kZSArICdAbWVkaWEgKG1pbi13aWR0aDonICsgbXFbaV0gKyAnKSB7OnJvb3R7JyArIGdldFR5cG9ncmFwaHlTY2FsZVZhcih0eXBvZ3JhcGh5LCBpKSArICd9fSdcbiAgICB9XG4gICAgcmV0dXJuIGNvZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkU3BhY2luZ1N0eWxlKHNwYWNpbmcsIG1xKSB7XG4gICAgdmFyIHNwYWNlVW5pdCA9IGdldFZhbGlkUmVzcG9uc2l2ZVZhbHVlKE9iamVjdC52YWx1ZXMoc3BhY2luZ1snc3BhY2VVbml0J10pLCBtcSwgZmFsc2UpXG4gICAgICAgICwgc3BhY2VSYXRpb0N1c3RvbSA9IGdldFNwYWNlUmF0aW9DdXN0b20oc3BhY2luZ1snY3VzdG9tU3BhY2VSYXRpbyddKTtcbiAgICAvLyB2YXIgc3JMaXN0ID0gZ2V0U3BhY2luZ1ZhbHVlcyhPYmplY3QudmFsdWVzKHNwYWNpbmdbJ3NwYWNlUmF0aW8nXSksIHNwYWNlVW5pdCwgbXEsIHNwYWNlUmF0aW9DdXN0b20pLFxuXG4gICAgLy8gdGhpcyB3aWxsIHJldHVybiBvbmx5IHRoZSBsaXN0IG9mIHRoZSBtdWx0aXBsaWVyIChub3QgaW5jbHVkaW5nIHRoZSAtLXNwYWNlLXVuaXQpXG4gICAgdmFyIHNyTGlzdCA9IGdldFNwYWNpbmdNdWx0aXBsaWVyKE9iamVjdC52YWx1ZXMoc3BhY2luZ1snc3BhY2VSYXRpbyddKSwgbXEsIHNwYWNlUmF0aW9DdXN0b20pXG4gICAgICAgICwgcGFkZGluZ1ZhcmlhYmxlID0gc3JMaXN0W2dldFZhbGlkUmVzcG9uc2l2ZVZhbHVlKE9iamVjdC52YWx1ZXMoc3BhY2luZ1sncGFkZGluZyddKSwgbXEsIGZhbHNlKSAtIDFdO1xuICAgIHVwZGF0ZVNwYWNpbmdDc3NWYXJpYWJsZXMoc3JMaXN0LCBwYWRkaW5nVmFyaWFibGUsIHNwYWNlVW5pdCk7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkU3BhY2luZ0RlZmF1bHRTdHlsZShtcSkge1xuICAgIHZhciByZXNwb25zaXZlU3BhY2luZyA9ICdAbWVkaWEgKG1pbi13aWR0aDo2NHJlbSl7OnJvb3R7LS1zcGFjZS11bml0OiAgMS4yNWVtO319JztcbiAgICAvLyB2YXIgc3R5bGUgPSAnPHN0eWxlIGlkPVwic3BhY2luZy1zdHlsZVwiPicrcmVzcG9uc2l2ZVNwYWNpbmcrJzwvc3R5bGU+JztcbiAgICAvLyAkKCcjc3BhY2luZy1zdHlsZScpLnJlbW92ZSgpO1xuXG4gICAgLy8gdmFyIGJhc2VTdHlsZSA9ICQoJyNjZC1iYXNlLXBhcnQtMScpO1xuICAgIC8vICQoc3R5bGUpLmluc2VydEFmdGVyKGJhc2VTdHlsZSk7XG4gICAgLy8gbG9hZCBhZnRlciBjb21wb25lbnQgc3R5bGUgLT4gdGhpcyB3aWxsIG5lZWQgdG8gb3ZlcndyaXRlIHRoZSBkZWZhdWx0IHNwYWNpbmcgc3R5bGVcbiAgICAvLyAkKCdoZWFkJykuYXBwZW5kKHN0eWxlKTtcbiAgICBsb2FkU3BhY2luZ1N0eWxlVGFnKHJlc3BvbnNpdmVTcGFjaW5nKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTcGFjaW5nU3R5bGVUYWcoc3R5bGUpIHtcbiAgICB2YXIgc3R5bGUgPSAnPHN0eWxlIGlkPVwic3BhY2luZy1zdHlsZVwiPicgKyBzdHlsZSArICc8L3N0eWxlPic7XG4gICAgJCgnI3NwYWNpbmctc3R5bGUnKS5yZW1vdmUoKTtcbiAgICB2YXIgYmFzZVN0eWxlID0gJCgnI2NkLWJhc2UtcGFydC0xJyk7XG4gICAgJChzdHlsZSkuaW5zZXJ0QWZ0ZXIoYmFzZVN0eWxlKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFR5cG9ncmFwaHlDc3NWYXJpYWJsZXMoaGVhZGluZ1ZhbHVlcywgYm9keVZhbHVlcywgdHlwb2dyYXBoeSwgbXEpIHtcbiAgICAvL2NzcyB2YXJpYWJsZXNcbiAgICBpZiAoaGVhZGluZ1ZhbHVlc1syXSAmJiBoZWFkaW5nVmFsdWVzWzJdICE9ICcnKSB7XG4gICAgICAgIHNldENzc1ZhcmlhYmxlKCctLWhlYWRpbmctbGluZS1oZWlnaHQnLCBoZWFkaW5nVmFsdWVzWzJdKTtcbiAgICAgICAgLy8gc2V0RWxlbWVudENzc1ZhcmlhYmxlKCd0ZXh0LWNvbXBvbmVudCcsICctLWhlYWRpbmctbGluZS1oZWlnaHQnLCBoZWFkaW5nVmFsdWVzWzJdKTtcbiAgICB9XG4gICAgaWYgKGJvZHlWYWx1ZXNbMl0gJiYgYm9keVZhbHVlc1syXSAhPSAnJykge1xuICAgICAgICBzZXRDc3NWYXJpYWJsZSgnLS1ib2R5LWxpbmUtaGVpZ2h0JywgYm9keVZhbHVlc1syXSk7XG4gICAgICAgIC8vIHNldEVsZW1lbnRDc3NWYXJpYWJsZSgndGV4dC1jb21wb25lbnQnLCAnLS1ib2R5LWxpbmUtaGVpZ2h0JywgYm9keVZhbHVlc1syXSk7XG4gICAgfVxuXG4gICAgc2V0Q3NzVmFyaWFibGUoJy0tdGV4dC1iYXNlLXNpemUnLCBnZXRWYWxpZFJlc3BvbnNpdmVWYWx1ZShPYmplY3QudmFsdWVzKHR5cG9ncmFwaHlbJ2Jhc2VTaXplJ10pLCBtcSwgZmFsc2UpKTtcbiAgICBzZXRDc3NWYXJpYWJsZSgnLS10ZXh0LXNjYWxlLXJhdGlvJywgZ2V0VmFsaWRSZXNwb25zaXZlVmFsdWUoT2JqZWN0LnZhbHVlcyh0eXBvZ3JhcGh5WydzY2FsZVJhdGlvJ10pLCBtcSwgZmFsc2UpKTtcbiAgICBzZXRDc3NWYXJpYWJsZSgnLS10ZXh0LXVuaXQnLCBnZXRUZXh0VW5pdCh0eXBvZ3JhcGh5KSk7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBvZ3JhcGh5QXJyYXkob2JqKSB7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgIGFyci5wdXNoKE9iamVjdC52YWx1ZXMob2JqW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBvZ3JhcGh5U3R5bGUoYXJyYXksIHNlbGVjdG9yLCB0eXBvZ3JhcGh5KSB7XG4gICAgdmFyIHN0eWxlID0gJyc7XG4gICAgaWYgKHBhcnNlSW50KGFycmF5WzBdKSAmJiBwYXJzZUludChhcnJheVswXSkgIT0gMCkge1xuICAgICAgICB2YXIgZm9udElkcyA9IE9iamVjdC52YWx1ZXModHlwb2dyYXBoeVsnZm9udEZhbWlseUlkcyddKTtcbiAgICAgICAgLy8gaW1wb3J0YW50Q3NzID0gc2VsZWN0b3IgPT0gJ2JvZHknID8gJyFpbXBvcnRhbnQnIDogJyc7XG4gICAgICAgIHN0eWxlID0gc3R5bGUgKyAnZm9udC1mYW1pbHk6ICcgKyB0eXBvZ3JhcGh5Wydmb250RmFtaWxpZXMnXVtmb250SWRzLmluZGV4T2YocGFyc2VJbnQoYXJyYXlbMF0pKV0gKyAnOyc7XG4gICAgfVxuICAgIGlmIChhcnJheVsxXSAmJiBhcnJheVsxXSAhPSAnJylcbiAgICAgICAgc3R5bGUgPSBzdHlsZSArICdmb250LXdlaWdodDogJyArIGFycmF5WzFdICsgJzsnO1xuICAgIHJldHVybiBzZWxlY3RvciArICd7JyArIHN0eWxlICsgJ30nO1xufVxuO1xuLy8gZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVNwYWNpbmdDc3NWYXJpYWJsZXMobGlzdCwgcGFkZGluZywgc3BhY2VVbml0KSB7XG4vLyBcdHNldENzc1ZhcmlhYmxlKCctLXNwYWNlLXVuaXQnLCBzcGFjZVVuaXQpO1xuLy8gXHRzZXRDc3NWYXJpYWJsZSgnLS1jb21wb25lbnQtcGFkZGluZycsIHBhZGRpbmcpO1xuLy8gXHRmb3IodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuLy8gXHRcdHNldENzc1ZhcmlhYmxlKHBhZGRpbmdWYXJpYWJsZXNbaV0sIGxpc3RbaV0pO1xuLy8gXHR9XG4vLyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlU3BhY2luZ0Nzc1ZhcmlhYmxlcyhsaXN0LCBwYWRkaW5nLCBzcGFjZVVuaXQpIHtcbiAgICBzZXRDc3NWYXJpYWJsZSgnLS1zcGFjZS11bml0Jywgc3BhY2VVbml0KTtcbiAgICB2YXIgc3BhY2luZ1ZhcmlhYmxlcyA9ICctLWNvbXBvbmVudC1wYWRkaW5nOicgKyAnY2FsYygnICsgcGFkZGluZyArICcgKiB2YXIoLS1zcGFjZS11bml0KSk7JztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3BhY2luZ1ZhcmlhYmxlcyA9IHNwYWNpbmdWYXJpYWJsZXMgKyBwYWRkaW5nVmFyaWFibGVzW2ldICsgJzogY2FsYygnICsgbGlzdFtpXSArICcgKiB2YXIoLS1zcGFjZS11bml0KSk7JztcbiAgICB9XG4gICAgc3BhY2luZ1ZhcmlhYmxlcyA9ICdyb290LCAqeycgKyBzcGFjaW5nVmFyaWFibGVzICsgJ30nO1xuICAgIGxvYWRTcGFjaW5nU3R5bGVUYWcoc3BhY2luZ1ZhcmlhYmxlcyk7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTcGFjaW5nVmFsdWVzKHNwYWNlUmF0aW8sIHN1LCBtcSwgc3BhY2VSYXRpb0N1c3RvbSkge1xuICAgIHZhciBsaXN0ID0gc3BhY2VSYXRpb1VuaXRbZ2V0VmFsaWRSZXNwb25zaXZlVmFsdWUoc3BhY2VSYXRpbywgbXEsIGZhbHNlKV07XG4gICAgaWYgKGxpc3QgPT0gJycpIHtcbiAgICAgICAgLy9jdXN0b20gc2NhbGVcbiAgICAgICAgbGlzdCA9IGdldFNwYWNpbmdDdXN0b21TY2FsZVJhdGlvKG1xLCBzcGFjZVJhdGlvQ3VzdG9tLCBzcGFjZVJhdGlvKTtcbiAgICB9XG5cbiAgICB2YXIgc3BhY2VMaXN0ID0gW107XG4gICAgdmFyIHN1QXJyYXkgPSBnZXRWYWx1ZVVuaXQoc3UpO1xuICAgIGlmIChzdUFycmF5WzBdID09PSBmYWxzZSkge1xuICAgICAgICBzdUFycmF5WzBdID0gMTtcbiAgICAgICAgc3VBcnJheVsxXSA9ICdlbSc7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdXBkYXRlZCA9IE1hdGgucm91bmQobGlzdFtpXSAqIHN1QXJyYXlbMF0gKiAxMDAwKSAvIDEwMDA7XG4gICAgICAgIHNwYWNlTGlzdC5wdXNoKHVwZGF0ZWQgKyBzdUFycmF5WzFdKTtcbiAgICB9XG4gICAgcmV0dXJuIHNwYWNlTGlzdDtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNwYWNpbmdNdWx0aXBsaWVyKHNwYWNlUmF0aW8sIG1xLCBzcGFjZVJhdGlvQ3VzdG9tKSB7XG4gICAgdmFyIGxpc3QgPSBzcGFjZVJhdGlvVW5pdFtnZXRWYWxpZFJlc3BvbnNpdmVWYWx1ZShzcGFjZVJhdGlvLCBtcSwgZmFsc2UpXTtcbiAgICBpZiAobGlzdCA9PSAnJykge1xuICAgICAgICAvL2N1c3RvbSBzY2FsZVxuICAgICAgICBsaXN0ID0gZ2V0U3BhY2luZ0N1c3RvbVNjYWxlUmF0aW8obXEsIHNwYWNlUmF0aW9DdXN0b20sIHNwYWNlUmF0aW8pO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdDtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNwYWNpbmdDdXN0b21TY2FsZVJhdGlvKG1xLCBzcGFjZVJhdGlvQ3VzdG9tLCBzcGFjZVJhdGlvKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGFjZVJhdGlvVW5pdFsxXS5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcnJheVtpXSA9IGdldFNwYWNpbmdWYWxpZFJlc3BvbnNpdmVWYWx1ZUN1c3RvbVJhdGlvKHNwYWNlUmF0aW9DdXN0b21baV0sIG1xLCBzcGFjZVJhdGlvKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3BhY2luZ1ZhbGlkUmVzcG9uc2l2ZVZhbHVlQ3VzdG9tUmF0aW8oc3BhY2VBcnJheSwgaW5kZXgsIHNwYWNlUmF0aW8pIHtcbiAgICBpZiAoaW5kZXggPT0gMClcbiAgICAgICAgcmV0dXJuIHNwYWNlQXJyYXlbMF07XG4gICAgdmFyIGl0ZW0gPSBzcGFjZUFycmF5W2luZGV4XTtcbiAgICBpZiAoaXRlbSAhPT0gZmFsc2UgJiYgaXRlbSAhPT0gJycgJiYgc3BhY2VSYXRpb1tpbmRleF0gPT0gNikge1xuICAgICAgICAvL2l0ZW0gZGVmaW5lZCBhbmQgc3BhY2UgcmF0aW8gc2V0IHRvIGN1c3RvbVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ2V0U3BhY2luZ1ZhbGlkUmVzcG9uc2l2ZVZhbHVlQ3VzdG9tUmF0aW8oc3BhY2VBcnJheSwgaW5kZXggLSAxLCBzcGFjZVJhdGlvKTtcbiAgICB9XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTcGFjZVJhdGlvQ3VzdG9tKG9iaikge1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDExOyBpKyspIHtcbiAgICAgICAgYXJyLnB1c2goT2JqZWN0LnZhbHVlcyhvYmpbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRCdXR0b25zU3R5bGUoYnV0dG9ucykge1xuICAgIC8vY29udmVydCBvYmogdG8gYXJyYXk7XG4gICAgdmFyIGJ1dHRvbnNBcnJheSA9IGdldEJ1dHRvbnNBcnJheVN0eWxlKGJ1dHRvbnNbJ3N0eWxlJ10pO1xuICAgIHZhciBidG5zTGlzdCA9IFsnYnRuJywgJ2J0bi0tcHJpbWFyeScsICdidG4tLXN1YnRsZScsICdidG4tLWFjY2VudCcsICdidG4tLWRpc2FibGVkJywgJ2J0bi0tc20nLCAnYnRuLS1tZCcsICdidG4tLWxnJ11cbiAgICAgICAgLCBzdGF0dXNMaXN0ID0gWydub25lJywgJzphY3RpdmUnLCAnOmhvdmVyJywgJzpmb2N1cyddXG4gICAgICAgICwgc3RhdHVzUHJpb3JpdHlMaXN0ID0gWydub25lJywgJzpob3ZlcicsICc6Zm9jdXMnLCAnOmFjdGl2ZSddXG4gICAgICAgICwgY29kZSA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidG5zTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb2RlID0gY29kZSArIGJ1dHRvbnNDb2RlU3R5bGUoYnV0dG9uc0FycmF5W2J0bnNMaXN0W2ldXSwgYnRuc0xpc3RbaV0sIHN0YXR1c0xpc3QsIHN0YXR1c1ByaW9yaXR5TGlzdCwgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgICAvLyBnZXQgY29kZSBmb3IgYnRuLS1pY29uXG4gICAgdmFyIGJ0bkljb25Db2RlID0gYnV0dG9uSWNvbkNvZGVTdHlsZShidXR0b25zQXJyYXlbJ2J0biddKTtcbiAgICAvLyBnZXQgY29kZSBmb3IgYnV0dG9uIHZhcmlhYmxlc1xuICAgIHZhciBidG5WYXJpYWJsZXMgPSBidXR0b25WYXJpYWJsZXMoYnV0dG9uc0FycmF5KTtcbiAgICBsb2FkQnV0dG9uc1N0eWxlVGFnKGJ0blZhcmlhYmxlcyArIGNvZGUgKyBidG5JY29uQ29kZSk7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkQnV0dG9uc1N0eWxlU3R5bGVHdWlkZShidXR0b25zKSB7XG4gICAgLy8gYnV0dG9uc0FycmF5ID0gYnV0dG9uc1snYnRuU3R5bGUnXVxuICAgIGlmICghYnV0dG9uc1snYnRuU3R5bGUnXSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIHZhciBidXR0b25zQXJyYXkgPSBidXR0b25zWydidG5TdHlsZSddO1xuICAgIC8vIGJ1dHRvbi1pY29uIGNsYXNzXG4gICAgdmFyIGJ0bkljb25Db2RlID0gJyc7XG4gICAgaWYgKGJ1dHRvbnNBcnJheVsnYnRuJ10pIHtcbiAgICAgICAgYnRuSWNvbkNvZGUgPSBidXR0b25JY29uQ29kZVN0eWxlKGJ1dHRvbnNBcnJheVsnYnRuJ10pO1xuICAgIH1cbiAgICAvLyBidXR0b24gQ1NTIHZhcmlhYmxlc1xuICAgIHZhciBidG5WYXJpYWJsZXMgPSBidXR0b25WYXJpYWJsZXMoYnV0dG9uc0FycmF5KTtcbiAgICAvLyBidXR0b25zIHN0eWxlXG4gICAgdmFyIGJ0bnNMaXN0ID0gWydidG4nLCAnYnRuLS1wcmltYXJ5JywgJ2J0bi0tc3VidGxlJywgJ2J0bi0tYWNjZW50JywgJ2J0bi0tZGlzYWJsZWQnLCAnYnRuLS1zbScsICdidG4tLW1kJywgJ2J0bi0tbGcnXVxuICAgICAgICAsIHN0YXR1c0xpc3QgPSBbJ25vbmUnLCAnOmFjdGl2ZScsICc6aG92ZXInLCAnOmZvY3VzJ11cbiAgICAgICAgLCBzdGF0dXNQcmlvcml0eUxpc3QgPSBbJ25vbmUnLCAnOmhvdmVyJywgJzpmb2N1cycsICc6YWN0aXZlJ11cbiAgICAgICAgLCBidG5TdHlsZSA9ICcnO1xuICAgIC8vIGRlZmF1bHQgYnRucyBzdHlsZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnRuc0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYnRuU3R5bGUgPSBidG5TdHlsZSArIGJ1dHRvbnNDb2RlU3R5bGUoYnV0dG9uc0FycmF5W2J0bnNMaXN0W2ldXSwgYnRuc0xpc3RbaV0sIHN0YXR1c0xpc3QsIHN0YXR1c1ByaW9yaXR5TGlzdCwgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgICAvLyBjdXN0b20gYnRucyBjb2RlXG4gICAgaWYgKGJ1dHRvbnNbJ2N1c3RvbUJ0bnMnXSAmJiBidXR0b25zWydjdXN0b21CdG5zJ10ubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1dHRvbnNbJ2N1c3RvbUJ0bnMnXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYnRuU3R5bGUgPSBidG5TdHlsZSArIGJ1dHRvbnNDb2RlU3R5bGUoYnV0dG9uc0FycmF5W2J1dHRvbnNbJ2N1c3RvbUJ0bnMnXVtpXVsxXV0sIGJ1dHRvbnNbJ2N1c3RvbUJ0bnMnXVtpXVswXSwgc3RhdHVzTGlzdCwgc3RhdHVzUHJpb3JpdHlMaXN0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYnRuVmFyaWFibGVzICsgYnRuU3R5bGUgKyBidG5JY29uQ29kZTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTaGFyZWRTdHlsZVN0eWxlR3VpZGUoc2hhcmVkX3N0eWxlKSB7XG4gICAgdmFyIHN0YXR1c0xpc3QgPSBbJ25vbmUnLCAnOmFjdGl2ZScsICc6aG92ZXInLCAnOmZvY3VzJ11cbiAgICAgICAgLCBzdGF0dXNQcmlvcml0eUxpc3QgPSBbJ25vbmUnLCAnOmhvdmVyJywgJzpmb2N1cycsICc6YWN0aXZlJ11cbiAgICAgICAgLCBidG5TdHlsZSA9ICcnO1xuICAgIGlmIChzaGFyZWRfc3R5bGVbJ2N1c3RvbVN0eWxlcyddICYmIHNoYXJlZF9zdHlsZVsnY3VzdG9tU3R5bGVzJ10ubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNoYXJlZF9zdHlsZVsnY3VzdG9tU3R5bGVzJ10ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJ0blN0eWxlID0gYnRuU3R5bGUgKyBidXR0b25zQ29kZVN0eWxlKHNoYXJlZF9zdHlsZS5jdXN0b21TdHlsZUFycmF5W3NoYXJlZF9zdHlsZVsnY3VzdG9tU3R5bGVzJ11baV1bMV1dLCBlc2NhcGVDU1NjaGFyYWN0ZXJzKHNoYXJlZF9zdHlsZVsnY3VzdG9tU3R5bGVzJ11baV1bMF0pLCBzdGF0dXNMaXN0LCBzdGF0dXNQcmlvcml0eUxpc3QsIGZhbHNlKTtcblxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzaGFyZWRfc3R5bGVbJ2N1c3RvbVRleHRTdHlsZXMnXSAmJiBzaGFyZWRfc3R5bGVbJ2N1c3RvbVRleHRTdHlsZXMnXS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2hhcmVkX3N0eWxlWydjdXN0b21UZXh0U3R5bGVzJ10ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJ0blN0eWxlID0gYnRuU3R5bGUgKyBidXR0b25zQ29kZVN0eWxlKHNoYXJlZF9zdHlsZS5jdXN0b21UZXh0U3R5bGVBcnJheVtzaGFyZWRfc3R5bGVbJ2N1c3RvbVRleHRTdHlsZXMnXVtpXVsxXV0sIGVzY2FwZUNTU2NoYXJhY3RlcnMoc2hhcmVkX3N0eWxlWydjdXN0b21UZXh0U3R5bGVzJ11baV1bMF0pLCBzdGF0dXNMaXN0LCBzdGF0dXNQcmlvcml0eUxpc3QsIGZhbHNlKTtcblxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBidG5TdHlsZTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUNTU2NoYXJhY3RlcnMobGFiZWwpIHtcbiAgICBsYWJlbCA9IGxhYmVsLnJlcGxhY2UoL1xcOi9nLCAnXFxcXDonKTtcbiAgICBsYWJlbCA9IGxhYmVsLnJlcGxhY2UoL1xcJS9nLCAnXFxcXCUnKTtcbiAgICBsYWJlbCA9IGxhYmVsLnJlcGxhY2UoL1xcLy9nLCAnXFxcXC8nKTtcbiAgICByZXR1cm4gbGFiZWxcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRCdXR0b25zRGVmYXVsdFN0eWxlKG1xKSB7XG4gICAgdmFyIGJ0bnNTdHlsZSA9ICc6cm9vdCB7LS1idG4tZm9udC1zaXplOiAxZW07LS1idG4tcGFkZGluZy14OiB2YXIoLS1zcGFjZS1zbSk7IC0tYnRuLXBhZGRpbmcteTogdmFyKC0tc3BhY2UteHhzKTsgLWJ0bi1yYWRpdXM6IDAuMjVlbTt9LmJ0biB7bGluZS1oZWlnaHQ6IDEuMjtib3gtc2hhZG93OiB2YXIoLS1zaGFkb3cteHMpOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7dHJhbnNpdGlvbjogLjJzOyB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO30uYnRuOmhvdmVyIHtjdXJzb3I6IHBvaW50ZXI7Ym94LXNoYWRvdzogdmFyKC0tc2hhZG93LXNtKTt9LmJ0bjpmb2N1cyB7Ym94LXNoYWRvdzogMHB4IDBweCAwcHggMnB4IGhzbGEodmFyKC0tY29sb3ItY29udHJhc3QtaGlnaGVyLWgpLCB2YXIoLS1jb2xvci1jb250cmFzdC1oaWdoZXItcyksIHZhcigtLWNvbG9yLWNvbnRyYXN0LWhpZ2hlci1sKSwgMC4xNSk7b3V0bGluZTogbm9uZTt9LmJ0bjphY3RpdmUge3RyYW5zZm9ybTogdHJhbnNsYXRlWSgycHgpO30uYnRuLS1wcmltYXJ5IHtiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1wcmltYXJ5KTtjb2xvcjogdmFyKC0tY29sb3Itd2hpdGUpfS5idG4tLXByaW1hcnk6aG92ZXIge2JhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLXByaW1hcnktZGFyayk7fS5idG4tLXByaW1hcnk6Zm9jdXMge2JveC1zaGFkb3c6IDBweCAwcHggMHB4IDJweCBoc2xhKHZhcigtLWNvbG9yLXByaW1hcnktaCksIHZhcigtLWNvbG9yLXByaW1hcnktcyksIHZhcigtLWNvbG9yLXByaW1hcnktbCksIDAuMik7fS5idG4tLXN1YnRsZSB7YmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItY29udHJhc3QtbG93ZXIpO2NvbG9yOiB2YXIoLS1jb2xvci1jb250cmFzdC1oaWdoZXIpO30uYnRuLS1hY2NlbnQge2JhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLWFjY2VudCk7Y29sb3I6IHZhcigtLWNvbG9yLXdoaXRlKTt9LmJ0bi0tYWNjZW50OmhvdmVyIHtiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1hY2NlbnQtZGFyayk7fS5idG4tLWFjY2VudDpmb2N1cyB7Ym94LXNoYWRvdzogMHB4IDBweCAwcHggMnB4IGhzbGEodmFyKC0tY29sb3ItYWNjZW50LWgpLCB2YXIoLS1jb2xvci1hY2NlbnQtcyksIHZhcigtLWNvbG9yLWFjY2VudC1sKSwgMC4yKTt9LmJ0bi0tZGlzYWJsZWQsIC5idG5bZGlzYWJsZWRdLCAuYnRuW3JlYWRvbmx5XSB7b3BhY2l0eTogMC42O2N1cnNvcjogbm90LWFsbG93ZWQ7fS5idG4tLXNte2ZvbnQtc2l6ZTogMC44ZW07fS5idG4tLW1ke2ZvbnQtc2l6ZTogMS4yZW07fS5idG4tLWxne2ZvbnQtc2l6ZTogMS40ZW07fSc7XG4gICAgbG9hZEJ1dHRvbnNTdHlsZVRhZyhidG5zU3R5bGUpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gYnV0dG9uVmFyaWFibGVzKGJ0blN0eWxlKSB7XG4gICAgdmFyIHNpemVzID0gW1snYnRuJywgJyddLCBbJ2J0bi0tc20nLCAnLXNtJ10sIFsnYnRuLS1tZCcsICctbWQnXSwgWydidG4tLWxnJywgJy1sZyddXTtcbiAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYnRuU3R5bGVbc2l6ZXNbaV1bMF1dICYmIGJ0blN0eWxlW3NpemVzW2ldWzBdXVsnbm9uZSddICYmIGJ0blN0eWxlW3NpemVzW2ldWzBdXVsnbm9uZSddWyd0eXBvZ3JhcGh5J10pIHtcbiAgICAgICAgICAgIHZhciBmb250QmFzZSA9IGdldEJ1dHRvbnNGb250U2l6ZVZhbHVlKGJ0blN0eWxlW3NpemVzW2ldWzBdXVsnbm9uZSddWyd0eXBvZ3JhcGh5J10pO1xuICAgICAgICAgICAgaWYgKGZvbnRCYXNlICE9ICcnKVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWJ0bi1mb250LXNpemUnICsgc2l6ZXNbaV1bMV0gKyAnOicgKyBmb250QmFzZSArICc7J1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChidG5TdHlsZVsnYnRuJ10gJiYgYnRuU3R5bGVbJ2J0biddWydub25lJ10gJiYgYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ3BhZGRpbmcnXSAmJiBidG5TdHlsZVsnYnRuJ11bJ25vbmUnXVsncGFkZGluZyddWzFdKSB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWJ0bi1wYWRkaW5nLXg6JyArIGdldEJ1dHRvbnNQYWRkaW5nVmFsdWUoYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ3BhZGRpbmcnXVsxXSkgKyAnOyc7XG4gICAgfVxuICAgIGlmIChidG5TdHlsZVsnYnRuJ10gJiYgYnRuU3R5bGVbJ2J0biddWydub25lJ10gJiYgYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ3BhZGRpbmcnXSAmJiBidG5TdHlsZVsnYnRuJ11bJ25vbmUnXVsncGFkZGluZyddWzBdKSB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWJ0bi1wYWRkaW5nLXk6JyArIGdldEJ1dHRvbnNQYWRkaW5nVmFsdWUoYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ3BhZGRpbmcnXVswXSkgKyAnOyc7XG4gICAgfVxuICAgIGlmIChidG5TdHlsZVsnYnRuJ10gJiYgYnRuU3R5bGVbJ2J0biddWydub25lJ10gJiYgYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ2FwcGVhcmFuY2UnXSkge1xuICAgICAgICBpZiAoYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ2FwcGVhcmFuY2UnXVsyXSkge1xuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJy0tYnRuLXJhZGl1czonICsgYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ2FwcGVhcmFuY2UnXVsyXSArICc7JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWJ0bi1yYWRpdXM6IDBlbTsnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICc6cm9vdHsnICsgc3RyaW5nICsgJ30nO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEJ1dHRvbnNTdHlsZVRhZyhzdHlsZSkge1xuICAgIHZhciBzdHlsZUVsID0gJzxzdHlsZSBpZD1cImJ1dHRvbnMtc3R5bGVcIj4nICsgc3R5bGUgKyAnPC9zdHlsZT4nO1xuICAgIHZhciBiYXNlU3R5bGUgPSAkKCcjY2QtYmFzZS1wYXJ0LTEnKTtcbiAgICAkKHN0eWxlRWwpLmluc2VydEFmdGVyKGJhc2VTdHlsZSk7XG4gICAgLy8gJCgnaGVhZCcpLmFwcGVuZChzdHlsZUVsKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRGb3Jtc1N0eWxlKGZvcm1zKSB7XG4gICAgdmFyIGZvcm1zQXJyYXkgPSBnZXRCdXR0b25zQXJyYXlTdHlsZShmb3Jtc1snc3R5bGUnXSk7XG4gICAgdmFyIGZvcm1zTGlzdCA9IFsnZm9ybS1jb250cm9sJywgJ1tkaXNhYmxlZF0nLCAnW2FyaWEtaW52YWxpZF0nLCAnbGVnZW5kJywgJ2Zvcm0tbGFiZWwnXVxuICAgICAgICAsIHN0YXR1c0xpc3QgPSBbJ25vbmUnLCAnOmFjdGl2ZScsICc6aG92ZXInLCAnOmZvY3VzJ11cbiAgICAgICAgLCBzdGF0dXNQcmlvcml0eUxpc3QgPSBbJ25vbmUnLCAnOmhvdmVyJywgJzpmb2N1cycsICc6YWN0aXZlJ11cbiAgICAgICAgLCBjb2RlID0gJyc7XG4gICAgY29kZSA9IHJlc2V0Rm9ybXNTdHlsZUNvbXBvbmVudHMoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybXNMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBjb2RlICsgYnV0dG9uc0NvZGVTdHlsZShmb3Jtc0FycmF5W2Zvcm1zTGlzdFtpXV0sIGZvcm1zTGlzdFtpXSwgc3RhdHVzTGlzdCwgc3RhdHVzUHJpb3JpdHlMaXN0LCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZ2V0IGNvZGUgZm9yIGZvcm0gdmFyaWFibGVzXG4gICAgdmFyIGJ0blZhcmlhYmxlcyA9IGZvcm1WYXJpYWJsZXMoZm9ybXNBcnJheVsnZm9ybS1jb250cm9sJ10pO1xuICAgIGxvYWRGb3Jtc1N0eWxlVGFnKGJ0blZhcmlhYmxlcyArIGNvZGUpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEZvcm1zU3R5bGVTdHlsZUd1aWRlKGZvcm0pIHtcbiAgICAvLyBmb3JtIGVsZW1lbnRzIHN0eWxlXG4gICAgaWYgKCFmb3JtWydidG5TdHlsZSddKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgdmFyIGZvcm1zQXJyYXkgPSBmb3JtWydidG5TdHlsZSddO1xuICAgIHZhciBmb3Jtc0xpc3QgPSBbJ2Zvcm0tY29udHJvbCcsICdbZGlzYWJsZWRdJywgJ1thcmlhLWludmFsaWRdJywgJ2xlZ2VuZCcsICdmb3JtLWxhYmVsJ11cbiAgICAgICAgLCBzdGF0dXNMaXN0ID0gWydub25lJywgJzphY3RpdmUnLCAnOmhvdmVyJywgJzpmb2N1cyddXG4gICAgICAgICwgc3RhdHVzUHJpb3JpdHlMaXN0ID0gWydub25lJywgJzpob3ZlcicsICc6Zm9jdXMnLCAnOmFjdGl2ZSddXG4gICAgICAgICwgZm9ybVN0eWxlID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3Jtc0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9ybVN0eWxlID0gZm9ybVN0eWxlICsgYnV0dG9uc0NvZGVTdHlsZShmb3Jtc0FycmF5W2Zvcm1zTGlzdFtpXV0sIGZvcm1zTGlzdFtpXSwgc3RhdHVzTGlzdCwgc3RhdHVzUHJpb3JpdHlMaXN0LCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZ2V0IGNvZGUgZm9yIGZvcm0gdmFyaWFibGVzXG4gICAgdmFyIGZvcm1DU1NWYXJpYWJsZXMgPSBmb3JtVmFyaWFibGVzKGZvcm1zQXJyYXlbJ2Zvcm0tY29udHJvbCddKTtcbiAgICByZXR1cm4gZm9ybVN0eWxlICsgZm9ybUNTU1ZhcmlhYmxlcztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1WYXJpYWJsZXMoZm9ybVN0eWxlKSB7XG4gICAgdmFyIHN0cmluZyA9ICcnO1xuICAgIGlmIChmb3JtU3R5bGUgJiYgZm9ybVN0eWxlWydub25lJ10gJiYgZm9ybVN0eWxlWydub25lJ11bJ3BhZGRpbmcnXSAmJiBmb3JtU3R5bGVbJ25vbmUnXVsncGFkZGluZyddWzFdKSB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWZvcm0tY29udHJvbC1wYWRkaW5nLXg6JyArIGdldEJ1dHRvbnNQYWRkaW5nVmFsdWUoZm9ybVN0eWxlWydub25lJ11bJ3BhZGRpbmcnXVsxXSkgKyAnOyc7XG4gICAgfVxuICAgIGlmIChmb3JtU3R5bGUgJiYgZm9ybVN0eWxlWydub25lJ10gJiYgZm9ybVN0eWxlWydub25lJ11bJ3BhZGRpbmcnXSAmJiBmb3JtU3R5bGVbJ25vbmUnXVsncGFkZGluZyddWzBdKSB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWZvcm0tY29udHJvbC1wYWRkaW5nLXk6JyArIGdldEJ1dHRvbnNQYWRkaW5nVmFsdWUoZm9ybVN0eWxlWydub25lJ11bJ3BhZGRpbmcnXVswXSkgKyAnOyc7XG4gICAgfVxuICAgIGlmIChmb3JtU3R5bGUgJiYgZm9ybVN0eWxlWydub25lJ10gJiYgZm9ybVN0eWxlWydub25lJ11bJ2FwcGVhcmFuY2UnXSkge1xuICAgICAgICBpZiAoZm9ybVN0eWxlWydub25lJ11bJ2FwcGVhcmFuY2UnXVsyXSkge1xuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJy0tZm9ybS1jb250cm9sLXJhZGl1czonICsgZm9ybVN0eWxlWydub25lJ11bJ2FwcGVhcmFuY2UnXVsyXSArICc7JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWZvcm0tY29udHJvbC1yYWRpdXM6IDBlbTsnO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgcmV0dXJuICc6cm9vdHsnICsgc3RyaW5nICsgJ30nO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEZvcm1zRGVmYXVsdFN0eWxlKG1xKSB7XG4gICAgdmFyIGZvcm1TdHlsZSA9ICc6cm9vdCB7LS1mb3JtLWNvbnRyb2wtcGFkZGluZy14OiB2YXIoLS1zcGFjZS14cyk7LS1mb3JtLWNvbnRyb2wtcGFkZGluZy15OiB2YXIoLS1zcGFjZS14eHMpOy0tZm9ybS1jb250cm9sLXJhZGl1czogMC4yNWVtO30uZm9ybS1jb250cm9sIHtsaW5lLWhlaWdodDogMS4yO2JhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLWJnKTtib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1jb2xvci1jb250cmFzdC1sb3cpO3RyYW5zaXRpb246IDAuMnM7fS5mb3JtLWNvbnRyb2w6Zm9jdXMge2JvcmRlci1jb2xvcjogdmFyKC0tY29sb3ItcHJpbWFyeSk7Ym94LXNoYWRvdzogMHB4IDBweCAwcHggMnB4IGhzbGEodmFyKC0tY29sb3ItcHJpbWFyeS1oKSwgdmFyKC0tY29sb3ItcHJpbWFyeS1zKSx2YXIoLS1jb2xvci1wcmltYXJ5LWwpLCAwLjIpO291dGxpbmU6IG5vbmU7fS5mb3JtLWNvbnRyb2xbYXJpYS1pbnZhbGlkPVwidHJ1ZVwiXSwgLmZvcm0tY29udHJvbC0tZXJyb3Ige2JvcmRlci1jb2xvcjogdmFyKC0tY29sb3ItZXJyb3IpO30uZm9ybS1jb250cm9sW2FyaWEtaW52YWxpZD1cInRydWVcIl06Zm9jdXMsIC5mb3JtLWNvbnRyb2wtLWVycm9yOmZvY3VzIHtib3JkZXItY29sb3I6IHZhcigtLWNvbG9yLWVycm9yKTtib3gtc2hhZG93OiAwcHggMHB4IDBweCAycHggaHNsYSh2YXIoLS1jb2xvci1lcnJvci1oKSwgdmFyKC0tY29sb3ItZXJyb3ItcyksdmFyKC0tY29sb3ItZXJyb3ItbCksIDAuMik7fS5mb3JtLWNvbnRyb2wtLWRpc2FibGVkLCAuZm9ybS1jb250cm9sW2Rpc2FibGVkXSwgLmZvcm0tY29udHJvbFtyZWFkb25seV0ge2N1cnNvcjogbm90LWFsbG93ZWQ7fS5mb3JtLWxhYmVsIHtmb250LXNpemU6IHZhcigtLXRleHQtc20pO30uZm9ybS1sZWdlbmR7Zm9udC1zaXplOiB2YXIoLS10ZXh0LW1kKTt9JztcbiAgICBmb3JtU3R5bGUgPSBmb3JtU3R5bGUgKyAnLmZvcm0tY29udHJvbDo6cGxhY2Vob2xkZXJ7b3BhY2l0eTogMTtjb2xvcjogdmFyKC0tY29sb3ItY29udHJhc3QtbWVkaXVtKTt9JztcbiAgICBsb2FkRm9ybXNTdHlsZVRhZyhmb3JtU3R5bGUpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEZvcm1zU3R5bGVUYWcoc3R5bGUpIHtcbiAgICB2YXIgZGVmYXVsdFN0eWxlID0gJy5mb3JtLWVycm9yLW1zZyB7YmFja2dyb3VuZC1jb2xvcjogaHNsYSh2YXIoLS1jb2xvci1lcnJvci1oKSx2YXIoLS1jb2xvci1lcnJvci1zKSwgdmFyKC0tY29sb3ItZXJyb3ItbCksIDAuMik7Y29sb3I6IGluaGVyaXQ7Ym9yZGVyLXJhZGl1czogdmFyKC0tcmFkaXVzLW1kKTtwYWRkaW5nOiB2YXIoLS1zcGFjZS14cyk7fSc7XG4gICAgdmFyIHN0eWxlRWwgPSAnPHN0eWxlIGlkPVwiZm9ybXMtc3R5bGVcIj4nICsgc3R5bGUgKyBkZWZhdWx0U3R5bGUgKyAnPC9zdHlsZT4nO1xuICAgIHZhciBiYXNlU3R5bGUgPSAkKCcjY2QtYmFzZS1wYXJ0LTEnKTtcbiAgICAkKHN0eWxlRWwpLmluc2VydEFmdGVyKGJhc2VTdHlsZSk7XG4gICAgLy8gJCgnaGVhZCcpLmFwcGVuZChzdHlsZUVsKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGJveFNoYWRvd0lzRGVmaW5lZChhcnJheSkge1xuICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXlbMF0gJiYgYXJyYXlbMF1bMV0gJiYgYXJyYXlbMF1bMV0gIT0gJycpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uc0FycmF5U3R5bGUob2JqKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICBhcnJheVtwcm9wZXJ0eV0gPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIHN1YnByb3BlcnR5IGluIG9ialtwcm9wZXJ0eV0pIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqW3Byb3BlcnR5XS5oYXNPd25Qcm9wZXJ0eShzdWJwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbcHJvcGVydHldW3N1YnByb3BlcnR5XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB2YWwgaW4gb2JqW3Byb3BlcnR5XVtzdWJwcm9wZXJ0eV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmpbcHJvcGVydHldW3N1YnByb3BlcnR5XS5oYXNPd25Qcm9wZXJ0eSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCA9PSAnYm9yZGVyJyB8fCB2YWwgPT0gJ3RleHRTaGFkb3cnIHx8IHZhbCA9PSAnc2hhZG93JyB8fCB2YWwgPT0gJ3RyYW5zZm9ybScgfHwgdmFsID09ICd0cmFuc2l0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtwcm9wZXJ0eV1bc3VicHJvcGVydHldW3ZhbF0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc3ViVmFsIGluIG9ialtwcm9wZXJ0eV1bc3VicHJvcGVydHldW3ZhbF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmpbcHJvcGVydHldW3N1YnByb3BlcnR5XVt2YWxdLmhhc093blByb3BlcnR5KHN1YlZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtwcm9wZXJ0eV1bc3VicHJvcGVydHldW3ZhbF1bc3ViVmFsXSA9IE9iamVjdC52YWx1ZXMob2JqW3Byb3BlcnR5XVtzdWJwcm9wZXJ0eV1bdmFsXVtzdWJWYWxdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W3Byb3BlcnR5XVtzdWJwcm9wZXJ0eV1bdmFsXSA9IE9iamVjdC52YWx1ZXMob2JqW3Byb3BlcnR5XVtzdWJwcm9wZXJ0eV1bdmFsXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGJ1dHRvbnNDb2RlU3R5bGUoc3R5bGUsIGJ0bkxhYmVsLCBzdGF0dXNMaXN0LCBzdGF0dXNQcmlvcml0eUxpc3QsIGlzRGVtb1Jlc2V0LCBpc0J1dHRvbikge1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICBpZiAoIXN0eWxlKVxuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgIHZhciBidG5MYWJlbG1vZGlmaWVkID0gYnRuTGFiZWw7XG4gICAgaWYgKGJ0bkxhYmVsID09ICdbZGlzYWJsZWRdJykge1xuICAgICAgICBidG5MYWJlbG1vZGlmaWVkID0gJ2Zvcm0tY29udHJvbC0tZGlzYWJsZWQsIC5mb3JtLWNvbnRyb2xbZGlzYWJsZWRdLCAuZm9ybS1jb250cm9sW3JlYWRvbmx5XSc7XG4gICAgfSBlbHNlIGlmIChidG5MYWJlbCA9PSAnW2FyaWEtaW52YWxpZF0nKSB7XG4gICAgICAgIGJ0bkxhYmVsbW9kaWZpZWQgPSAnZm9ybS1jb250cm9sW2FyaWEtaW52YWxpZD1cInRydWVcIl0sIC5mb3JtLWNvbnRyb2wtLWVycm9yJztcbiAgICB9IGVsc2UgaWYgKGJ0bkxhYmVsID09ICdsZWdlbmQnKSB7XG4gICAgICAgIGJ0bkxhYmVsbW9kaWZpZWQgPSAnZm9ybS1sZWdlbmQnO1xuICAgIH0gZWxzZSBpZiAoYnRuTGFiZWwgPT0gJ2J0bi0tZGlzYWJsZWQnKSB7XG4gICAgICAgIGJ0bkxhYmVsbW9kaWZpZWQgPSAnYnRuLS1kaXNhYmxlZCwgLmJ0bltkaXNhYmxlZF0sIC5idG5bcmVhZG9ubHldJztcbiAgICB9XG4gICAgdmFyIGJ0bkhhc1RyYW5zZm9ybSA9IGlzQnV0dG9uICYmIGJ1dHRvbnNIYXNUcmFuc2Zvcm1TdHlsZShzdHlsZSwgc3RhdHVzUHJpb3JpdHlMaXN0KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXR1c1ByaW9yaXR5TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc3R5bGVMYWJlbCA9IChpID09IDApID8gJy4nICsgYnRuTGFiZWxtb2RpZmllZCA6IHNldFN0YXR1c0xpc3QoJy4nICsgYnRuTGFiZWxtb2RpZmllZCwgc3RhdHVzUHJpb3JpdHlMaXN0W2ldKTtcbiAgICAgICAgdmFyIG5ld0NvZGUgPSBnZXRCdXR0b25Db2RlKHN0eWxlW3N0YXR1c1ByaW9yaXR5TGlzdFtpXV0sICcnLCB0cnVlLCBidG5MYWJlbCwgc3RhdHVzUHJpb3JpdHlMaXN0W2ldLCBpc0RlbW9SZXNldCwgKGJ0bkhhc1RyYW5zZm9ybSAmJiBpID09IDApKTtcbiAgICAgICAgbmV3Q29kZSA9IG5ld0NvZGUudHJpbSgpO1xuICAgICAgICBpZiAobmV3Q29kZS5zbGljZSgtMSkgPT0gJ30nKSB7XG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBzdHlsZUxhYmVsICsgJ3snICsgbmV3Q29kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIHN0eWxlTGFiZWwgKyAneycgKyBuZXdDb2RlICsgJ30nO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9cXG4vZywgJycpO1xuICAgIHJldHVybiBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRTdGF0dXNMaXN0KGxhYmVsLCBzdGF0dXMpIHtcbiAgICAvLyBlLmcuLCBpZiBsYWJlbCA9ICcuZm9ybS1jb250cm9sW2FyaWEtaW52YWxpZD1cInRydWVcIl0sIC5mb3JtLWNvbnRyb2wtLWVycm9yJyBhbmQgc3RhdHVzID0gJzpmb2N1cycsIHJldHVybiAnLmZvcm0tY29udHJvbFthcmlhLWludmFsaWQ9XCJ0cnVlXCJdOmZvY3VzLCAuZm9ybS1jb250cm9sLS1lcnJvcjpmb2N1cydcbiAgICB2YXIgbGFiZWxBcnJheSA9IGxhYmVsLnNwbGl0KCcsJyk7XG4gICAgaWYgKGxhYmVsQXJyYXkubGVuZ3RoID09IDEpIHtcbiAgICAgICAgcmV0dXJuIGxhYmVsICsgc3RhdHVzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBuZXdMYWJlbCA9ICcnXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFiZWxBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPiAwKVxuICAgICAgICAgICAgICAgIG5ld0xhYmVsID0gbmV3TGFiZWwgKyAnLCc7XG4gICAgICAgICAgICBuZXdMYWJlbCA9IG5ld0xhYmVsICsgbGFiZWxBcnJheVtpXSArIHN0YXR1cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3TGFiZWw7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gYnV0dG9uSWNvbkNvZGVTdHlsZShidG5TdHlsZSkge1xuICAgIHZhciBjb2RlID0gJyc7XG4gICAgaWYgKGJ0blN0eWxlICYmIGJ0blN0eWxlWydub25lJ10gJiYgYnRuU3R5bGVbJ25vbmUnXVsncGFkZGluZyddICYmIGJ0blN0eWxlWydub25lJ11bJ3BhZGRpbmcnXVswXSAmJiBidG5TdHlsZVsnbm9uZSddWydwYWRkaW5nJ11bMF0gIT0gMCkge1xuICAgICAgICBjb2RlID0gJy5idG4tLWljb24ge3BhZGRpbmc6ICcgKyBzcGFjaW5nQXJyYXlbYnRuU3R5bGVbJ25vbmUnXVsncGFkZGluZyddWzBdXSArICc7fSc7XG4gICAgfVxuICAgIHJldHVybiBjb2RlO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gYnV0dG9uc0hhc1RyYW5zZm9ybVN0eWxlKHN0eWxlLCBwcmlvcml0eUxpc3QpIHtcbiAgICB2YXIgaGFzVHJhbnNmb3JtID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBwcmlvcml0eUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFzdHlsZVtwcmlvcml0eUxpc3RbaV1dKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgdHJhbnNmb3JtID0gc3R5bGVbcHJpb3JpdHlMaXN0W2ldXVsndHJhbnNmb3JtJ107XG4gICAgICAgIGlmICh0cmFuc2Zvcm0ubGVuZ3RoID4gMSB8fCAodHJhbnNmb3JtLmxlbmd0aCA+IDAgJiYgdHJhbnNmb3JtWzBdWzBdICE9IDApKSB7XG4gICAgICAgICAgICBoYXNUcmFuc2Zvcm0gPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhc1RyYW5zZm9ybTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1dHRvbkNvZGUoYXJyYXksIHNwYWNpbmcsIHJlc2V0LCBidG5MYWJlbCwgYnRuU3RhdHVzLCBpc0RlbW9SZXNldCwgYnRuSGFzVHJhbnNmb3JtKSB7XG4gICAgdmFyIHN0cmluZyA9ICcnO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGFycmF5KSB7XG4gICAgICAgIHN3aXRjaCAocHJvcGVydHkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FwcGVhcmFuY2UnOlxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIGdldEJ1dHRvbnNBcHBlYXJhbmNlU3R5bGUoYXJyYXlbcHJvcGVydHldLCBzcGFjaW5nLCByZXNldCwgYnRuTGFiZWwsIGJ0blN0YXR1cyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwYWRkaW5nJzpcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBnZXRCdXR0b25zUGFkZGluZ1N0eWxlKGFycmF5W3Byb3BlcnR5XSwgc3BhY2luZywgcmVzZXQsIGJ0bkxhYmVsLCBidG5TdGF0dXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWFyZ2luJzpcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBnZXRCdXR0b25zTWFyZ2luU3R5bGUoYXJyYXlbcHJvcGVydHldLCBzcGFjaW5nLCByZXNldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdib3JkZXInOlxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIGdldEJ1dHRvbnNCb3JkZXJTdHlsZShhcnJheVtwcm9wZXJ0eV0sIHNwYWNpbmcsIHJlc2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3R5cG9ncmFwaHknOlxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIGdldEJ1dHRvbnNUeXBvZ3JhcGh5U3R5bGUoYXJyYXlbcHJvcGVydHldLCBzcGFjaW5nLCByZXNldCwgYnRuTGFiZWwsIGJ0blN0YXR1cyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0ZXh0U2hhZG93JzpcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBnZXRCdXR0b25zVGV4dFNoYWRvd1N0eWxlKGFycmF5W3Byb3BlcnR5XSwgc3BhY2luZywgcmVzZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2hhZG93JzpcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBnZXRCdXR0b25zU2hhZG93U3R5bGUoYXJyYXlbcHJvcGVydHldLCBzcGFjaW5nLCByZXNldCwgaXNEZW1vUmVzZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnb3V0bGluZSc6XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgZ2V0QnV0dG9uc091dGxpbmVTdHlsZShhcnJheVtwcm9wZXJ0eV0sIHNwYWNpbmcsIHJlc2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RyYW5zZm9ybSc6XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgZ2V0QnV0dG9uc1RyYW5zZm9ybVN0eWxlKGFycmF5W3Byb3BlcnR5XSwgc3BhY2luZywgcmVzZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndHJhbnNpdGlvbic6XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgZ2V0QnV0dG9uc1RyYW5zaXRpb25TdHlsZShhcnJheVtwcm9wZXJ0eV0sIHNwYWNpbmcsIHJlc2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3BsYWNlaG9sZGVyJzpcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBnZXRCdXR0b25zUGxhY2Vob2xkZXJTdHlsZShhcnJheVtwcm9wZXJ0eV0sIHNwYWNpbmcsIHJlc2V0LCBidG5MYWJlbCwgYnRuU3RhdHVzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYnRuSGFzVHJhbnNmb3JtKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTsnO1xuICAgIHJldHVybiBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25zQXBwZWFyYW5jZVN0eWxlKGFycmF5LCBzcGFjaW5nLCByZXNldCwgYnRuTGFiZWwsIGJ0blN0YXR1cykge1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICBpZiAoYXJyYXlbMF0pIHtcbiAgICAgICAgaWYgKGFycmF5WzBdLmluZGV4T2YoJy0tZ3JhZGllbnQtJykgPiAtMSkge1xuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJ1xcbicgKyBzcGFjaW5nICsgZ2V0R3JhZGllbnRCZ1N0eWxlKGFycmF5WzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdiYWNrZ3JvdW5kOiAnICsgZ2V0Q29sb3JWYWx1ZShhcnJheVswXSwgcmVzZXQpICsgJzsnO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChhcnJheVsxXSlcbiAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJ1xcbicgKyBzcGFjaW5nICsgJ2NvbG9yOiAnICsgZ2V0Q29sb3JWYWx1ZShhcnJheVsxXSwgcmVzZXQpICsgJzsnO1xuICAgIGlmIChyZXNldCAmJiByZXNldCAhPSB0cnVlICYmIGJ0blN0YXR1cyA9PSAnbm9uZScgJiYgKGJ0bkxhYmVsID09ICdidG4nIHx8IGJ0bkxhYmVsID09ICdmb3JtLWNvbnRyb2wnKSkgey8vIGZvciBjb3B5IGNvZGUgLT4gbm8gbmVlZCB0byBhZGQgYm9yZGVyLXJhZGl1cyBpbiBjb2RlIC0+IGNzcyB2YXJpYWJsZXMgYWxyZWFkeSBzZXRcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYXJyYXlbN10gJiYgYXJyYXlbN10gPiAwKSB7XG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnYm9yZGVyLXJhZGl1czogJyArIGJvcmRlclJhZGl1c1ZhbHVlc1thcnJheVs3XV0gKyAnOyc7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJyYXlbMl0gJiYgYXJyYXlbMl0gIT0gJycpIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdib3JkZXItcmFkaXVzOiAnICsgYXJyYXlbMl0gKyAnOyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFycmF5WzNdICYmIGFycmF5WzNdICE9ICcnKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnb3BhY2l0eTogJyArIGFycmF5WzNdICsgJzsnO1xuICAgIGlmIChhcnJheVs0XSAmJiBhcnJheVs0XSAhPSAwKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnY3Vyc29yOiAnICsgZ2V0Q3Vyc29yVmFsdWUoYXJyYXlbNF0pICsgJzsnO1xuICAgIHJldHVybiBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmFkaWVudEJnU3R5bGUobGFiZWwpIHtcbiAgICB2YXIgYW5nbGUgPSBsYWJlbC5pbmRleE9mKCctcmlnaHQnKSA+IC0xID8gJzkwZGVnJyA6ICcxODBkZWcnXG4gICAgICAgICwgbmljZUxhYmVsID0gbGFiZWwucmVwbGFjZSgnLXJpZ2h0JywgJycpLnJlcGxhY2UoJy1ib3R0b20nLCAnJyk7XG4gICAgcmV0dXJuICdiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoJyArIGFuZ2xlICsgJywgdmFyKCcgKyBuaWNlTGFiZWwgKyAnLXN0b3AtMSksIHZhcignICsgbmljZUxhYmVsICsgJy1zdG9wLTIpKTsnO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uc1BhZGRpbmdTdHlsZShhcnJheSwgc3BhY2luZywgcmVzZXQsIGJ0bkxhYmVsLCBidG5TdGF0dXMpIHtcbiAgICAvL1kgLSBYXG4gICAgLy8gZm9yIGNvcHkgY29kZSAtPiBubyBuZWVkIHRvIGFkZCBwYWRkaW5nIGluIGNvZGUgLT4gY3NzIHZhcmlhYmxlcyBhbHJlYWR5IHNldFxuICAgIGlmIChyZXNldCAmJiByZXNldCAhPSB0cnVlICYmIGJ0blN0YXR1cyA9PSAnbm9uZScgJiYgKGJ0bkxhYmVsID09ICdidG4nIHx8IGJ0bkxhYmVsID09ICdmb3JtLWNvbnRyb2wnKSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICBpZiAoYXJyYXkubGVuZ3RoIDwgMSlcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICBpZiAoYXJyYXlbMF0gIT0gMCAmJiBhcnJheVsxXSAhPSAwKSB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdwYWRkaW5nOiAnICsgc3BhY2luZ0FycmF5W2FycmF5WzBdXSArICcgJyArIHNwYWNpbmdBcnJheVthcnJheVsxXV0gKyAnOyc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFycmF5WzBdICE9IDApXG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAncGFkZGluZy10b3A6ICcgKyBzcGFjaW5nQXJyYXlbYXJyYXlbMF1dICsgJztcXG4nICsgc3BhY2luZyArICdwYWRkaW5nLWJvdHRvbTogJyArIHNwYWNpbmdBcnJheVthcnJheVswXV0gKyAnOyc7XG4gICAgICAgIGlmIChhcnJheVsxXSAhPSAwKVxuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJ1xcbicgKyBzcGFjaW5nICsgJ3BhZGRpbmctbGVmdDogJyArIHNwYWNpbmdBcnJheVthcnJheVsxXV0gKyAnO1xcbicgKyBzcGFjaW5nICsgJ3BhZGRpbmctcmlnaHQ6ICcgKyBzcGFjaW5nQXJyYXlbYXJyYXlbMV1dICsgJzsnO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uc1BhZGRpbmdWYWx1ZSh2YWx1ZSkge1xuICAgIC8vIHNldHRpbmcgY3NzIHZhcmlhYmxlcyBmb3IgY29weSBjb2RlIG9ubHlcbiAgICB2YXIgcGFkZGluZyA9ICcnO1xuICAgIGlmICh2YWx1ZSAhPSAwKVxuICAgICAgICBwYWRkaW5nID0gc3BhY2luZ0FycmF5W3ZhbHVlXTtcbiAgICByZXR1cm4gcGFkZGluZztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1dHRvbnNNYXJnaW5TdHlsZShhcnJheSwgc3BhY2luZywgcmVzZXQpIHtcbiAgICAvL3RvcCBsZWZ0IHJpZ2h0IGJvdHRvbVxuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICBpZiAoYXJyYXkubGVuZ3RoIDwgMSlcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICBpZiAoYXJyYXlbMF0gIT0gMCAmJiBhcnJheVsxXSAhPSAwICYmIGFycmF5WzJdICE9IDAgJiYgYXJyYXlbM10gIT0gMCkge1xuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnbWFyZ2luOiAnICsgc3BhY2luZ0FycmF5W2FycmF5WzBdXSArICcgJyArIHNwYWNpbmdBcnJheVthcnJheVsyXV0gKyAnICcgKyBzcGFjaW5nQXJyYXlbYXJyYXlbM11dICsgJyAnICsgc3BhY2luZ0FycmF5W2FycmF5WzFdXSArICc7JztcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYXJyYXlbMF0gIT0gMClcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdtYXJnaW4tdG9wOiAnICsgc3BhY2luZ0FycmF5W2FycmF5WzBdXSArICc7JztcbiAgICAgICAgaWYgKGFycmF5WzFdICE9IDApXG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnbWFyZ2luLWxlZnQ6ICcgKyBzcGFjaW5nQXJyYXlbYXJyYXlbMV1dICsgJzsnO1xuICAgICAgICBpZiAoYXJyYXlbMl0gIT0gMClcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdtYXJnaW4tcmlnaHQ6ICcgKyBzcGFjaW5nQXJyYXlbYXJyYXlbMl1dICsgJzsnO1xuICAgICAgICBpZiAoYXJyYXlbM10gIT0gMClcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdtYXJnaW4tYm90dG9tOiAnICsgc3BhY2luZ0FycmF5W2FycmF5WzNdXSArICc7JztcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1dHRvbnNCb3JkZXJTdHlsZShhcnJheSwgc3BhY2luZywgcmVzZXQpIHtcbiAgICB2YXIgc3RyaW5nID0gJydcbiAgICAgICAgLCBjb2xvclZhcmlhYmxlcyA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycmF5W2ldWzNdID09IDApXG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyBnZXRCb3JkZXJUeXBlKGFycmF5W2ldWzFdKSArICc6IG5vbmU7JztcbiAgICAgICAgZWxzZSBpZiAoYXJyYXlbaV1bMl0gPT0gJycpIHtcbiAgICAgICAgICAgIHZhciBhcHAgPSBhcnJheS5sZW5ndGggPiAxID8gJy0nICsgKGkgKyAxKSA6ICcnO1xuICAgICAgICAgICAgdmFyIHZhcmlhYmxlID0gZ2V0Q29sb3JGYklvcyhhcnJheVtpXVswXSwgJy0tY29sb3ItYm9yZGVyJyArIGFwcCwgc3BhY2luZywgcmVzZXQpO1xuICAgICAgICAgICAgY29sb3JWYXJpYWJsZXMgPSBjb2xvclZhcmlhYmxlcyArIHZhcmlhYmxlWzBdO1xuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJ1xcbicgKyBzcGFjaW5nICsgZ2V0Qm9yZGVyVHlwZShhcnJheVtpXVsxXSkgKyAnLWNvbG9yOiAnICsgdmFyaWFibGVbMV0gKyAnOyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYXBwID0gYXJyYXkubGVuZ3RoID4gMSA/ICctJyArIChpICsgMSkgOiAnJztcbiAgICAgICAgICAgIHZhciB2YXJpYWJsZSA9IGdldENvbG9yRmJJb3MoYXJyYXlbaV1bMF0sICctLWNvbG9yLWJvcmRlcicgKyBhcHAsIHNwYWNpbmcsIHJlc2V0KTtcbiAgICAgICAgICAgIGNvbG9yVmFyaWFibGVzID0gY29sb3JWYXJpYWJsZXMgKyB2YXJpYWJsZVswXTtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArIGdldEJvcmRlclR5cGUoYXJyYXlbaV1bMV0pICsgJzogJyArIGFycmF5W2ldWzJdICsgJyAnICsgZ2V0Qm9yZGVyU3R5bGUoYXJyYXlbaV1bM10pICsgJyAnICsgdmFyaWFibGVbMV0gKyAnOyc7XG4gICAgICAgICAgICAvLyBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJytzcGFjaW5nK2dldEJvcmRlclR5cGUoYXJyYXlbaV1bMV0pKyc6ICcrYXJyYXlbaV1bMl0rJyAnK2dldEJvcmRlclN0eWxlKGFycmF5W2ldWzNdKSsnICcrZ2V0Q29sb3JWYWx1ZShhcnJheVtpXVswXSwgcmVzZXQpKyc7JztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29sb3JWYXJpYWJsZXMgKyBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25zVHlwb2dyYXBoeVN0eWxlKGFycmF5LCBzcGFjaW5nLCByZXNldCwgYnRuTGFiZWwsIGJ0blN0YXR1cykge1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICBpZiAoYXJyYXlbMF0pXG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdmb250LWZhbWlseTogdmFyKCcgKyBmb250QXJyYXlbYnRuRm9udElkcy5pbmRleE9mKGFycmF5WzBdKV0gKyAnKTsnO1xuICAgIGlmIChyZXNldCAmJiByZXNldCAhPSB0cnVlICYmIGJ0blN0YXR1cyA9PSAnbm9uZScgJiYgKGJ0bkxhYmVsID09ICdidG4nIHx8IGJ0bkxhYmVsID09ICdmb3JtLWNvbnRyb2wnKSkgey8vIGZvciBjb3B5IGNvZGUgLT4gbm8gbmVlZCB0byBhZGQgZm9udC1zaXplIGluIGNvZGUgLT4gY3NzIHZhcmlhYmxlcyBhbHJlYWR5IHNldFxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChhcnJheVsxXSAmJiBhcnJheVsxXSAhPSAwKSB7XG4gICAgICAgICAgICB2YXIgZm9udFNpemUgPSAoYXJyYXlbMV0gPT0gOSkgPyBhcnJheVsyXSA6IHRleHRBcnJheVZhbHVlc1thcnJheVsxXV07XG4gICAgICAgICAgICBpZiAoYnRuU3RhdHVzID09ICdub25lJyAmJiAoYnRuTGFiZWwgPT0gJ2J0bicgfHwgYnRuTGFiZWwgPT0gJ2Zvcm0tY29udHJvbCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJ0bkxhYmVsID09ICdidG4nKVxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnLS1idG4tZm9udC1zaXplOiAnICsgZm9udFNpemUgKyAnOyc7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnLS1mb3JtLWNvbnRyb2wtZm9udC1zaXplOiAnICsgZm9udFNpemUgKyAnOyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdmb250LXNpemU6ICcgKyBmb250U2l6ZSArICc7JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXJyYXlbM10gJiYgYXJyYXlbM10gIT0gJycpXG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdmb250LXdlaWdodDogJyArIGFycmF5WzNdICsgJzsnO1xuICAgIGlmIChhcnJheVs0XSAmJiBhcnJheVs0XSAhPSAwKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAndGV4dC10cmFuc2Zvcm06ICcgKyBnZXRUZXh0VHJhbnNmb3JtKGFycmF5WzRdKSArICc7JztcbiAgICBpZiAoYXJyYXlbNV0gJiYgYXJyYXlbNV0gIT0gMClcbiAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJ1xcbicgKyBzcGFjaW5nICsgJ3RleHQtZGVjb3JhdGlvbjogJyArIGdldFRleHREZWNvcmF0aW9uKGFycmF5WzVdKSArICc7JztcbiAgICBpZiAoYnRuTGFiZWwgPT0gJ2J0bicgJiYgYnRuU3RhdHVzID09ICdub25lJyAmJiAoIWFycmF5WzVdIHx8IGFycmF5WzVdID09IDApKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAndGV4dC1kZWNvcmF0aW9uOiBub25lOyc7XG4gICAgaWYgKGFycmF5WzZdICYmIGFycmF5WzZdICE9ICcnKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnbGluZS1oZWlnaHQ6ICcgKyBhcnJheVs2XSArICc7J1xuICAgIGlmIChhcnJheVs3XSAmJiBhcnJheVs3XSAhPSAnJylcbiAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJ1xcbicgKyBzcGFjaW5nICsgJ2xldHRlci1zcGFjaW5nOiAnICsgYXJyYXlbN10gKyAnOydcbiAgICBpZiAoYXJyYXlbOF0gJiYgYXJyYXlbOF0gIT0gMCkge1xuICAgICAgICBpZiAocmVzZXQgJiYgcmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArIGdldEZvbnRTbW9vdGhpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdAaW5jbHVkZSBmb250U21vb3RoOyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1dHRvbnNUZXh0U2hhZG93U3R5bGUoYXJyYXksIHNwYWNpbmcsIHJlc2V0KSB7XG4gICAgdmFyIHN0cmluZyA9ICcnXG4gICAgICAgICwgY29sb3JWYXJpYWJsZXMgPSAnJ1xuICAgICAgICAsIHNldCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycmF5W2ldWzBdID09IDEpIHtcbiAgICAgICAgICAgIHN0cmluZyA9ICdcXG4nICsgc3BhY2luZyArICd0ZXh0LXNoYWRvdzogbm9uZTsnO1xuICAgICAgICAgICAgc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhcHAgPSBhcnJheS5sZW5ndGggPiAxID8gJy0nICsgKGkgKyAxKSA6ICcnO1xuICAgICAgICAgICAgdmFyIHZhcmlhYmxlID0gZ2V0Q29sb3JGYklvcyhhcnJheVtpXVsxXSwgJy0tY29sb3ItdGV4dC1zaGFkb3cnICsgYXBwLCBzcGFjaW5nLCByZXNldCk7XG4gICAgICAgICAgICBjb2xvclZhcmlhYmxlcyA9IGNvbG9yVmFyaWFibGVzICsgdmFyaWFibGVbMF07XG4gICAgICAgICAgICBpZiAoaSA+IDApXG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJywgJztcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIGFycmF5W2ldWzJdICsgJyAnICsgdmFyaWFibGVbMV07XG4gICAgICAgICAgICBzZXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzZXQpXG4gICAgICAgIHN0cmluZyA9IGNvbG9yVmFyaWFibGVzICsgJ1xcbicgKyBzcGFjaW5nICsgJ3RleHQtc2hhZG93OiAnICsgc3RyaW5nICsgJzsnO1xuICAgIHJldHVybiBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25zU2hhZG93U3R5bGUoYXJyYXksIHNwYWNpbmcsIHJlc2V0LCBpc0RlbW9SZXNldCkge1xuICAgIHZhciBzdHJpbmcgPSAnJ1xuICAgICAgICAsIGNvbG9yVmFyaWFibGVzID0gJydcbiAgICAgICAgLCBzZXQgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhcnJheVtpXVswXSA9PSAxKSB7XG4gICAgICAgICAgICBzdHJpbmcgPSAnXFxuJyArIHNwYWNpbmcgKyAnYm94LXNoYWRvdzogbm9uZTsnO1xuICAgICAgICAgICAgaWYgKGlzRGVtb1Jlc2V0KVxuICAgICAgICAgICAgICAgIHN0cmluZyA9ICdcXG4nICsgc3BhY2luZyArICdib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7JztcbiAgICAgICAgICAgIHNldCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJyYXlbaV1bM10gPiAxKSB7XG4gICAgICAgICAgICAvLyBjdXN0b20gc2hhZG93IHdpdGggZnJhbWV3b3JrIHZhcmlhYmxlc1xuICAgICAgICAgICAgaWYgKGkgPiAwKVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICcsICc7XG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBzaGFkb3dWYXJpYWJsZXNbYXJyYXlbaV1bM11dO1xuICAgICAgICAgICAgc2V0ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhcHAgPSBhcnJheS5sZW5ndGggPiAxID8gJy0nICsgKGkgKyAxKSA6ICcnO1xuICAgICAgICAgICAgdmFyIHZhcmlhYmxlID0gZ2V0Q29sb3JGYklvcyhhcnJheVtpXVsxXSwgJy0tY29sb3Itc2hhZG93JyArIGFwcCwgc3BhY2luZywgcmVzZXQpO1xuICAgICAgICAgICAgY29sb3JWYXJpYWJsZXMgPSBjb2xvclZhcmlhYmxlcyArIHZhcmlhYmxlWzBdO1xuICAgICAgICAgICAgaWYgKGkgPiAwKVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICcsICc7XG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBnZXRCb3hTaGFkb3dUeXBlKGFycmF5W2ldWzNdKSArIGFycmF5W2ldWzJdICsgJyAnICsgdmFyaWFibGVbMV07XG4gICAgICAgICAgICBzZXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzZXQpIHtcbiAgICAgICAgLy8gaXNEZW1vUmVzZXQgLT4gd2hlbiBsb2FkaW5nIGZvcm1zIGZvciBjb21wb25lbnRzLCBtYWtlIHN1cmUgdG8gYWRkIGltcG9ydGFudCB0byBib3ggc2hhZG93IHRvIG1ha2Ugc3VyZSB0aGUgY3VzdG9tIHNoYWRvdyBpcyBzaG93ZWRcbiAgICAgICAgaWYgKGlzRGVtb1Jlc2V0KVxuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJyAhaW1wb3J0YW50JztcbiAgICAgICAgc3RyaW5nID0gY29sb3JWYXJpYWJsZXMgKyAnXFxuJyArIHNwYWNpbmcgKyAnYm94LXNoYWRvdzogJyArIHN0cmluZyArICc7JztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5nO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uc091dGxpbmVTdHlsZShhcnJheSwgc3BhY2luZywgcmVzZXQpIHtcbiAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgaWYgKGFycmF5WzFdICYmIGFycmF5WzFdICE9IDApIHtcbiAgICAgICAgaWYgKGFycmF5WzFdID09IDgpXG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnb3V0bGluZTogbm9uZTsnO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnb3V0bGluZTogJyArIGFycmF5WzJdICsgJyAnICsgZ2V0T3V0bGluZVN0eWxlKGFycmF5WzFdKSArICcgJyArIGdldENvbG9yVmFsdWUoYXJyYXlbMF0sIHJlc2V0KSArICc7JztcbiAgICB9XG4gICAgaWYgKGFycmF5WzNdICYmIGFycmF5WzNdICE9ICcnKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnb3V0bGluZS1vZmZzZXQ6ICcgKyBhcnJheVszXSArICc7JztcbiAgICByZXR1cm4gc3RyaW5nO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uc1RyYW5zZm9ybVN0eWxlKGFycmF5LCBzcGFjaW5nLCByZXNldCkge1xuICAgIHZhciBzdHJpbmcgPSAnJ1xuICAgICAgICAsIHNldCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycmF5W2ldWzBdID09IDApIHtcbiAgICAgICAgICAgIHN0cmluZyA9ICdcXG4nICsgc3BhY2luZyArICd0cmFuc2Zvcm06IG5vbmU7JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGkgPiAwKVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICcgJztcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIGdldFRyYW5zZm9ybVByb3BlcnR5KGFycmF5W2ldWzBdKSArICcoJyArIGFycmF5W2ldWzFdICsgJyknO1xuICAgICAgICAgICAgc2V0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2V0KVxuICAgICAgICBzdHJpbmcgPSAnXFxuJyArIHNwYWNpbmcgKyAndHJhbnNmb3JtOiAnICsgc3RyaW5nICsgJzsnO1xuICAgIHJldHVybiBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25zVHJhbnNpdGlvblN0eWxlKGFycmF5LCBzcGFjaW5nLCByZXNldCkge1xuICAgIHZhciBzdHJpbmcgPSAnJ1xuICAgICAgICAsIHNldCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycmF5W2ldWzBdID09IDEpIHtcbiAgICAgICAgICAgIHN0cmluZyA9ICdcXG4nICsgc3BhY2luZyArICd0cmFuc2l0aW9uOiBub25lOyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpID4gMClcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnLCAnO1xuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgZ2V0VHJhbnNpdGlvblByb3BlcnR5KGFycmF5W2ldWzBdKSArICcgJyArIGFycmF5W2ldWzFdICsgJ3MgJyArIGdldFRyYW5zaXRpb25FYXNlKGFycmF5W2ldWzJdKTtcbiAgICAgICAgICAgIGlmIChhcnJheVtpXVszXSAhPSAnJylcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnICcgKyBhcnJheVtpXVszXSArICdzJztcbiAgICAgICAgICAgIHNldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNldClcbiAgICAgICAgc3RyaW5nID0gJ1xcbicgKyBzcGFjaW5nICsgJ3RyYW5zaXRpb246ICcgKyBzdHJpbmcgKyAnOyc7XG4gICAgcmV0dXJuIHN0cmluZztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1dHRvbnNQbGFjZWhvbGRlclN0eWxlKGFycmF5LCBzcGFjaW5nLCByZXNldCwgYnRuTGFiZWwsIGJ0blN0YXR1cykge1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICBpZiAoYXJyYXkubGVuZ3RoIDwgMSB8fCAhYXJyYXlbMF0gfHwgYXJyYXlbMF0gPT0gJycpXG4gICAgICAgIHJldHVybiAnJztcbiAgICB2YXIgc3R5bGUgPSAnXFxuJyArIHNwYWNpbmcgKyAnICBjb2xvcjogJyArIGdldENvbG9yVmFsdWUoYXJyYXlbMF0sIHJlc2V0KSArICc7JztcblxuICAgIGlmIChyZXNldCAmJiByZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnfSc7XG4gICAgICAgIHZhciBzZWxlY3RvciA9ICcuJyArIGJ0bkxhYmVsO1xuICAgICAgICBpZiAoYnRuU3RhdHVzICE9ICdub25lJylcbiAgICAgICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgKyBidG5TdGF0dXM7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArIHNlbGVjdG9yICsgJzo6cGxhY2Vob2xkZXIge1xcbicgKyBzcGFjaW5nICsgJyAgb3BhY2l0eTogMTsnICsgc3BhY2luZyArIHN0eWxlICsgJ1xcbicgKyBzcGFjaW5nICsgJ30nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG5cXG4nICsgc3BhY2luZyArICcmOjpwbGFjZWhvbGRlciB7XFxuJyArIHNwYWNpbmcgKyAnICBvcGFjaXR5OiAxOycgKyBzcGFjaW5nICsgc3R5bGUgKyAnXFxuJyArIHNwYWNpbmcgKyAnfSc7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25zRm9udFNpemVWYWx1ZShhcnJheSkge1xuICAgIHZhciBmb250U2l6ZSA9ICcnO1xuICAgIGlmIChhcnJheVsxXSAmJiBhcnJheVsxXSAhPSAwKSB7XG4gICAgICAgIGZvbnRTaXplID0gKGFycmF5WzFdID09IDkpID8gYXJyYXlbMl0gOiB0ZXh0QXJyYXlWYWx1ZXNbYXJyYXlbMV1dO1xuICAgIH1cbiAgICByZXR1cm4gZm9udFNpemU7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldEZvcm1zU3R5bGVDb21wb25lbnRzKCkge1xuICAgIHZhciBzdHlsZSA9ICcnO1xuICAgIHN0eWxlID0gc3R5bGUgKyAnLmZvcm0tbGVnZW5kIHtjb2xvcjogaW5oZXJpdDtsaW5lLWhlaWdodDogbm9ybWFsO30nO1xuICAgIHJldHVybiBzdHlsZTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN1ZmZpeE9wYWNpdHkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gMClcbiAgICAgICAgcmV0dXJuICctYTAwJztcbiAgICBpZiAodmFsdWUgPCAxMClcbiAgICAgICAgcmV0dXJuICctYTAnICsgdmFsdWU7XG4gICAgcmV0dXJuICctYScgKyB2YWx1ZTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEx1bWluYW5jZShoc2wsIGlmcmFtZSkge1xuICAgIGlmIChoc2xbMF0gPT0gMCAmJiBoc2xbMV0gPT0gMCAmJiBoc2xbMl0gPT0gMSlcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgLy8gd2hpdGVcbiAgICBpZiAoaHNsWzBdID09IDAgJiYgaHNsWzFdID09IDAgJiYgaHNsWzJdID09IDApXG4gICAgICAgIHJldHVybiAwO1xuICAgIC8vIGJsYWNrXG4gICAgdmFyIHJnYlNyID0gZ2V0UkdCc3JWYWx1ZXMoaHNsLCBpZnJhbWUpO1xuICAgIHJldHVybiAoMC4yMTI2ICogcmdiU3JbMF0gKyAwLjcxNTIgKiByZ2JTclsxXSArIDAuMDcyMiAqIHJnYlNyWzJdKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJHQnNyVmFsdWVzKHZhbHVlLCBpZnJhbWUpIHtcbiAgICB2YXIgcmdiID0gZ2V0UkdCVmFsdWVzKHZhbHVlLCBpZnJhbWUpO1xuICAgIHZhciByU3IgPSAocmdiWzBdIDw9IDAuMDM5MjgpID8gcmdiWzBdIC8gMTIuOTIgOiBNYXRoLnBvdygoKHJnYlswXSArIDAuMDU1KSAvIDEuMDU1KSwgMi40KTtcbiAgICB2YXIgZ1NyID0gKHJnYlsxXSA8PSAwLjAzOTI4KSA/IHJnYlsxXSAvIDEyLjkyIDogTWF0aC5wb3coKChyZ2JbMV0gKyAwLjA1NSkgLyAxLjA1NSksIDIuNCk7XG4gICAgdmFyIGJTciA9IChyZ2JbMl0gPD0gMC4wMzkyOCkgPyByZ2JbMl0gLyAxMi45MiA6IE1hdGgucG93KCgocmdiWzJdICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpO1xuICAgIHJldHVybiBbclNyLCBnU3IsIGJTcl07XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSR0JWYWx1ZXMoaHNsLCBpZnJhbWUpIHtcbiAgICB2YXIgcmdiID0gZ2V0UkdCZnJvbUhTTChoc2wpO1xuICAgIHJldHVybiBbcmdiWzBdIC8gMjU1LCByZ2JbMV0gLyAyNTUsIHJnYlsyXSAvIDI1NV07XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSR0Jmcm9tSFNMKGhzbCkge1xuICAgIHJldHVybiBjaHJvbWEuaHNsKGhzbCkucmdiKCk7XG59O1xuZXhwb3J0IGxldCBsb2FkZWRJZnJhbWVDaGVjayA9IGZhbHNlO1xuLy9zZWxlY3QgdGV4dCBvZiBhIGNvbnRlbnRFZGl0YWJsZSBlbGVtZW50XG5qUXVlcnkuZm4uc2VsZWN0VGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZG9jID0gZG9jdW1lbnQ7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzWzBdO1xuICAgIGlmIChkb2MuYm9keS5jcmVhdGVUZXh0UmFuZ2UpIHtcbiAgICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuYm9keS5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgICAgcmFuZ2UubW92ZVRvRWxlbWVudFRleHQoZWxlbWVudCk7XG4gICAgICAgIHJhbmdlLnNlbGVjdCgpO1xuICAgIH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgICAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMoZWxlbWVudCk7XG4gICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICB9XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0Rm9udExpc3QodHlwb2dyYXBoeSkge1xuICAgIGZvbnRBcnJheSA9IFsnJ107XG4gICAgYnRuRm9udElkcyA9IFswXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0eXBvZ3JhcGh5Wydmb250RmFtaWx5TGFiZWxzJ10pIHtcbiAgICAgICAgaWYgKHR5cG9ncmFwaHlbJ2ZvbnRGYW1pbHlMYWJlbHMnXS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIGZvbnRBcnJheS5wdXNoKHR5cG9ncmFwaHlbJ2ZvbnRGYW1pbHlMYWJlbHMnXVtwcm9wZXJ0eV0pO1xuICAgICAgICAgICAgYnRuRm9udElkcy5wdXNoKHR5cG9ncmFwaHlbJ2ZvbnRGYW1pbHlJZHMnXVtwcm9wZXJ0eV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBkZW1vQ29udGFpbmVyID0gJCgnLmpzLWNkLWRlbW8tY29udGFpbmVyJylcbiAgICAgICAgLCBkZW1vVmlld3BvcnQgPSAkKCcuanMtY2QtZGVtby12aWV3cG9ydC1zaXplJyk7XG4gICAgLy93aGVuIGRvdWJsZS1jbGlja2luZyBvbiB2YXJpYWJsZXMgLT4gc2VsZWN0IGFsbCB0ZXh0XG4gICAgZGVtb0NvbnRhaW5lci5vbignZGJsY2xpY2snLCAnLmpzLWNzcy12YXJpYWJsZS1sYWJlbCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnNlbGVjdFRleHQoKTtcbiAgICB9KTtcblxuICAgIC8vZGV0ZWN0IGNsaWNrIG9uIGlmcmFtZSBhbmQgc2VuZCB0byBtYWluIHRvIGNsb3NlIHBvcHVwc1xuICAgIHZhciBpZnJhbWVQYXJlbnQgPSB3aW5kb3cucGFyZW50O1xuICAgIGlmICghaWZyYW1lUGFyZW50KSB7XG4gICAgICAgIGlmcmFtZVBhcmVudCA9IHBhcmVudDtcbiAgICB9XG5cbiAgICBpZiAoaWZyYW1lUGFyZW50KSB7XG4gICAgICAgICQod2luZG93KS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaWZyYW1lUGFyZW50LmNsb3NlQWN0aXZlUG9wdXBzICE9IG51bGwpXG4gICAgICAgICAgICAgICAgaWZyYW1lUGFyZW50LmNsb3NlQWN0aXZlUG9wdXBzKCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBkZXRlY3Qgc2hvcnRjdXQgZm9yIHNlYXJjaCBtb2RhbFxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgJiYgZXZlbnQua2V5Q29kZSA9PSA2OSB8fCBldmVudC5rZXkgJiYgZXZlbnQua2V5LnRvTG93ZXJDYXNlKCkgPT0gJ2UnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSlcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lUGFyZW50Lm9wZW5TaXRlU2VhcmNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vZGV0ZWN0IHJlc2l6ZSBvZiB0aGUgcGFnZSBhbmQgcmVzZXQgaWZyYW1lIGhlaWdodFxuICAgIHZhciByZXNpemluZyA9IGZhbHNlXG4gICAgICAgICwgcmVzaXppbmdJRCA9IGZhbHNlXG4gICAgICAgICwgbXFMYWJlbHMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107XG4gICAgaWYgKGRlbW9WaWV3cG9ydC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKCFyZXNpemluZykge1xuICAgICAgICAgICAgICAgIHJlc2l6aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZUxhYmVsU2l6ZVdpbmRvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICQoJy5qcy1jZC1kZW1vJykub24oJ2dsb2JhbHNVcGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZUNvbXBvbmVudEdsb2JhbHMoKTtcbiAgICB9KTtcblxuICAgICQoJy5qcy1jZC1kZW1vJykub24oJ3Nob3dDb21wb25lbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb21wU2NyaXB0ID0gJCgnI2NvbXAtc2NyaXB0Jyk7XG4gICAgICAgIGlmIChjb21wU2NyaXB0KSB7XG4gICAgICAgICAgICB2YXIgbmV3U2NyaXB0ID0gY29tcFNjcmlwdC5jbG9uZSgpO1xuICAgICAgICAgICAgbmV3U2NyaXB0ID0gY29tcFNjcmlwdC5hdHRyKCdzcmMnLCBjb21wU2NyaXB0LmF0dHIoJ2RhdGEtc3JjJykpO1xuICAgICAgICAgICAgbmV3U2NyaXB0LnJlbW92ZUF0dHIoJ2RhdGEtc3JjJyk7XG4gICAgICAgICAgICBuZXdTY3JpcHQucmVtb3ZlQXR0cignaWQnKTtcbiAgICAgICAgICAgIG5ld1NjcmlwdC5pbnNlcnRCZWZvcmUoY29tcFNjcmlwdCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaWZyYW1lUGFyZW50KVxuICAgICAgICAgICAgICAgIGlmcmFtZVBhcmVudC5yZXZlYWxDb21wb25lbnQoKTtcbiAgICAgICAgfSwgMzAwKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUxhYmVsU2l6ZVdpbmRvdygpIHtcbiAgICAgICAgdmFyIG1xID0gZ2V0TXEoKVxuICAgICAgICAgICAgLCBzaXplcyA9IGdldFNjcmVlblNpemUoKTtcbiAgICAgICAgaWYgKHJlc2l6aW5nKSB7XG4gICAgICAgICAgICBkZW1vQ29udGFpbmVyLnRyaWdnZXIoJ3dpbmRvd1Jlc2l6aW5nJyk7XG4gICAgICAgICAgICB2YXIgbXFMYWJlbFRleHQgPSAobXEgPiAwKSA/ICcgKCcgKyBtcUxhYmVsc1ttcSAtIDFdICsgJyknIDogJyc7XG4gICAgICAgICAgICBkZW1vVmlld3BvcnQudGV4dChzaXplc1swXSArICdweCB4ICcgKyBzaXplc1sxXSArICdweCcgKyBtcUxhYmVsVGV4dCkuc2hvdygpO1xuICAgICAgICAgICAgaWYgKHJlc2l6aW5nSUQpXG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChyZXNpemluZ0lEKTtcbiAgICAgICAgICAgIHJlc2l6aW5nSUQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBkZW1vVmlld3BvcnQuaGlkZSgpO1xuICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzaXppbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgO1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50R2xvYmFscygpIHtcbiAgICAgICAgLy9jb21wb25lbnRzIC0+IGlmIHRoZXJlJ3MgYSBwcm9qZWN0IHNldCwgd2Ugc2hvdWxkIGxpc3RlbiBmb3IgY2hhbmdlcyBpbiB0aGUgdmlld3BvcnQgd2lkdGggYXMgd2VsbFxuICAgICAgICAvL3R5cG9ncmFwaHkgYW5kIHNwYWNpbmcgYXJlIHRoZSBvbmx5IHJlc3BvbnNpdmUgZ2xvYmFsc1xuICAgICAgICBpZiAocHJvamVjdExvYWRlZCAmJiAocHJvamVjdExvYWRlZC50eXBvZ3JhcGh5IHx8IHByb2plY3RMb2FkZWQuc3BhY2luZykpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmICghcmVzaXppbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzaXppbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZUdsb2JhbHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIDtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUdsb2JhbHMoKSB7XG4gICAgICAgIHZhciBtcSA9IGdldE1xKCk7XG4gICAgICAgIGlmIChtcSA9PSBNUSkge1xuICAgICAgICAgICAgcmVzaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBNUSA9IG1xO1xuXG4gICAgICAgIGlmIChwcm9qZWN0TG9hZGVkLnR5cG9ncmFwaHkgJiYgcHJvamVjdExvYWRlZC50eXBvZ3JhcGh5ICE9PSAnJykge1xuICAgICAgICAgICAgLy90eXBvZ3JhcGh5IHdhcyBzYXZlZCBhbmQgbmVlZCB0byBiZSBtb2RpZmllZFxuICAgICAgICAgICAgbG9hZFR5cG9ncmFwaHlTdHlsZShKU09OLnBhcnNlKGRlY29kZVNhZmVVUklDb21wb25lbnQocHJvamVjdExvYWRlZC50eXBvZ3JhcGh5KSksIGZhbHNlLCBtcSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvamVjdExvYWRlZC5zcGFjaW5nICYmIHByb2plY3RMb2FkZWQuc3BhY2luZyAhPT0gJycpIHtcbiAgICAgICAgICAgIC8vdHlwb2dyYXBoeSB3YXMgc2F2ZWQgYW5kIG5lZWQgdG8gYmUgbW9kaWZpZWRcbiAgICAgICAgICAgIGxvYWRTcGFjaW5nU3R5bGUoSlNPTi5wYXJzZShkZWNvZGVTYWZlVVJJQ29tcG9uZW50KHByb2plY3RMb2FkZWQuc3BhY2luZykpLCBtcSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzaXppbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgO1xuXG4gICAgbG9hZGVkSWZyYW1lQ2hlY2sgPSB0cnVlO1xufSgpKTtcbiJdLCJuYW1lcyI6WyJzcGFjaW5nQXJyYXkiLCJ0ZXh0QXJyYXkiLCJ0ZXh0QXJyYXlWYWx1ZXMiLCJmb250QXJyYXkiLCJidG5Gb250SWRzIiwiYnRuQ29sb3JDdXN0b21OaWNlTGFiZWxzIiwiYnRuR3JhZGllbnRzQ3VzdG9tTmljZUxhYmVscyIsImJ0bkNvbG9yTGFiZWxzIiwic2hhZG93VmFyaWFibGVzIiwiYm9yZGVyUmFkaXVzVmFsdWVzIiwic2V0QnRuQ29sb3JDdXN0b21OaWNlTGFiZWxzIiwiY29sb3JzIiwiY3VzdG9tTmljZSIsInNldEJ0bkdyYWRpZW50TmljZUxhYmVscyIsImdyYWRpZW50cyIsImxlbmd0aCIsImRlY29kZVNhZmVVUklDb21wb25lbnQiLCJzdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlIiwiZ2V0Q3Vyc29yVmFsdWUiLCJpbmRleCIsImdldEJvcmRlclR5cGUiLCJnZXRCb3JkZXJTdHlsZSIsImdldFRleHRUcmFuc2Zvcm0iLCJnZXRUZXh0RGVjb3JhdGlvbiIsImdldEZvbnRTbW9vdGhpbmciLCJnZXRCb3hTaGFkb3dUeXBlIiwiZ2V0VHJhbnNpdGlvblByb3BlcnR5IiwiZ2V0VHJhbnNpdGlvbkVhc2UiLCJnZXRUcmFuc2l0aW9uRGVsYXkiLCJ2YWwiLCJnZXRUcmFuc2Zvcm1Qcm9wZXJ0eSIsImdldE91dGxpbmVTdHlsZSIsImdldE91dGxpbmVPZmZzZXQiLCJnZXRDb2xvclZhbHVlIiwicmVzZXQiLCJpbmRleE9mIiwiZ2V0Q29sb3JWYWx1ZUZyb21MaXN0IiwibGFiZWwiLCJmYWxsYmFjayIsImdldE5pY2VMYWJlbEZvckN1c3RvbSIsImNoZWNrQ29sb3JJc09wYWNpdHkiLCJiYXNpY0xhYmVsIiwicmVtb3ZlT3BhY2l0eUZyb21MYWJlbCIsImdldE9wYWNpdHlEZWNGcm9tTGFiZWwiLCJwcmVmaXgiLCJsYWJlbEFycmF5Iiwic3BsaXQiLCJjdXN0b21MYWJlbCIsInNsaWNlIiwib3BhY2l0eSIsInBhcnNlSW50IiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsImFycmF5IiwiZ2V0Q29sb3JGYklvcyIsIiRjb2xvciIsIiR2YXJMYWJlbCIsIiRzcGFjaW5nIiwiJHJlc2V0IiwicGFkZGluZ1ZhcmlhYmxlcyIsImZpYm9uYWNjaVNlcSIsInByRm91cnRoIiwiYXVGb3VydGgiLCJwckZpZnRoIiwiZ29sZGVuUmF0aW8iLCJzcGFjZVJhdGlvVW5pdCIsImdldEhTTCIsImNvbG9yIiwiTWF0aCIsInJvdW5kIiwiZ2V0SFNMQSIsIk51bWJlciIsInNldEhTTEFmcm9tSFNMIiwiZ2V0SFNMRnJvbVN0cmluZyIsInRyaW0iLCJzZXRDc3NWYXJpYWJsZSIsInZhcmlhYmxlIiwidmFsdWUiLCJwcmlvcml0eSIsInJvb3QiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJnZXRDc3NWYXJpYWJsZSIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwic2V0Qm9keUNzc1ZhcmlhYmxlIiwiYm9keSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2V0RWxlbWVudENzc1ZhcmlhYmxlIiwiY2xhc3NOYW1lIiwiZWxlbWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJ3aW5kb3dTY3JvbGxUbyIsIndpbmRvdyIsInNjcm9sbFRvIiwic2VsZWN0SWZyYW1lU2VjdGlvbiIsInNlY3Rpb24iLCIkIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsInBhcmVudCIsIm9mZnNldCIsInRvcCIsInNlbGVjdElmcmFtZVRhYiIsImZpbHRlciIsImdldE1xIiwid2luZG93V2lkdGgiLCJvdXRlcldpZHRoIiwibXEiLCJjbGllbnRXaWR0aCIsInRleHQiLCJnZXRTY3JlZW5TaXplIiwib3V0ZXJIZWlnaHQiLCJnZXRWYWxpZFJlc3BvbnNpdmVWYWx1ZSIsInNwYWNlQXJyYXkiLCJzdWJJbmRleCIsIml0ZW0iLCJnZXRWYWx1ZVVuaXQiLCJudW1iZXIiLCJ1bml0IiwiZ2V0Qm9keU5vdEZhbHNlIiwibmV3QXJyYXkiLCJpIiwicHJvamVjdExvYWRlZCIsIk1RIiwibG9hZEdsb2JhbHNTdHlsZSIsInByb2plY3QiLCJ0cmlnZ2VyIiwiT2JqZWN0IiwidmFsdWVzIiwibG9hZENvbG9yU3R5bGUiLCJKU09OIiwicGFyc2UiLCJsb2FkQ29sb3JEZWZhdWx0U3R5bGUiLCJ0eXBvZ3JhcGh5IiwibG9hZFR5cG9ncmFwaHlTdHlsZSIsImxvYWRUeXBvZ3JhcGh5RGVmYXVsdFN0eWxlIiwic3BhY2luZyIsImxvYWRTcGFjaW5nU3R5bGUiLCJsb2FkU3BhY2luZ0RlZmF1bHRTdHlsZSIsImJ1dHRvbnMiLCJsb2FkQnV0dG9uc1N0eWxlIiwibG9hZEJ1dHRvbnNEZWZhdWx0U3R5bGUiLCJmb3JtIiwibG9hZEZvcm1zU3R5bGUiLCJsb2FkRm9ybXNEZWZhdWx0U3R5bGUiLCJ2YXJpYXRpb25zIiwiY3NzVmFyTGFiIiwiaiIsInNldENvbG9yUGFydFZhcmlhYmxlcyIsImJWYXJpYXRpb25zIiwiYmxhY2tBcnJheSIsImdldEJXQXJyYXkiLCJ3aGl0ZUFycmF5Iiwid1ZhcmlhdGlvbnMiLCJjb250cmFzdExhYmVscyIsImdyYWRpZW50SWQiLCJmb250UmVuZGVyaW5nQ29kZSIsInJlbW92ZSIsImJhc2VTdHlsZSIsImluc2VydEFmdGVyIiwiZGVmYXVsdENvbG9ycyIsImNvbG9yQXJyYXkiLCJvYmoiLCJwcm9wZXJ0eSIsImhhc093blByb3BlcnR5IiwicHVzaCIsImJvb2wiLCJhcHBlbmRUbyIsImxoY3JvcEFycmF5IiwiaGVhZGluZ1ZhbHVlcyIsImdldFR5cG9ncmFwaHlBcnJheSIsImJvZHlWYWx1ZXMiLCJ0ZXh0VmFyaWFibGVzIiwibG9hZFR5cG9ncmFwaHlTdHlsZVRhZyIsImdldFR5cG9ncmFwaHlTdHlsZSIsInNldFR5cG9ncmFwaHlDc3NWYXJpYWJsZXMiLCJib2R5U3R5bGUiLCJhbGxTdHlsZSIsImJvZHlSZXNTdHlsZSIsImhlYWRpbmdTdHlsZSIsImZvbnRMaW5rIiwidHlwb2dyYXBoeVN0eWxlIiwic3R5bGVDb250ZW50IiwiZGVmYXVsdFN0eWxlIiwibG9hZFR5cG9ncmFwaHlDc3NWYXJTdHlsZUd1aWRlIiwiY29kZSIsImZvbnRGYW1pbGllcyIsImZvbnRGYW1pbHlDbGFzc2VzIiwic2NhbGUiLCJzY2FsZVJlc3BvbnNpdmUiLCJnZXRUeXBvZ3JhcGh5U2NhbGVWYXIiLCJnZXRUeXBvZ3JhcGh5U2NhbGVWYXJSZXMiLCJsb2FkVHlwb2dyYXBoeVN0eWxlU3R5bGVHdWlkZSIsImdldFRleHRVbml0IiwidGV4dFVuaXQiLCJzcGFjZVVuaXQiLCJzcGFjZVJhdGlvQ3VzdG9tIiwiZ2V0U3BhY2VSYXRpb0N1c3RvbSIsInNyTGlzdCIsImdldFNwYWNpbmdNdWx0aXBsaWVyIiwicGFkZGluZ1ZhcmlhYmxlIiwidXBkYXRlU3BhY2luZ0Nzc1ZhcmlhYmxlcyIsInJlc3BvbnNpdmVTcGFjaW5nIiwibG9hZFNwYWNpbmdTdHlsZVRhZyIsImFyciIsInNlbGVjdG9yIiwiZm9udElkcyIsImxpc3QiLCJwYWRkaW5nIiwic3BhY2luZ1ZhcmlhYmxlcyIsImdldFNwYWNpbmdWYWx1ZXMiLCJzcGFjZVJhdGlvIiwic3UiLCJnZXRTcGFjaW5nQ3VzdG9tU2NhbGVSYXRpbyIsInNwYWNlTGlzdCIsInN1QXJyYXkiLCJ1cGRhdGVkIiwiZ2V0U3BhY2luZ1ZhbGlkUmVzcG9uc2l2ZVZhbHVlQ3VzdG9tUmF0aW8iLCJidXR0b25zQXJyYXkiLCJnZXRCdXR0b25zQXJyYXlTdHlsZSIsImJ0bnNMaXN0Iiwic3RhdHVzTGlzdCIsInN0YXR1c1ByaW9yaXR5TGlzdCIsImJ1dHRvbnNDb2RlU3R5bGUiLCJidG5JY29uQ29kZSIsImJ1dHRvbkljb25Db2RlU3R5bGUiLCJidG5WYXJpYWJsZXMiLCJidXR0b25WYXJpYWJsZXMiLCJsb2FkQnV0dG9uc1N0eWxlVGFnIiwibG9hZEJ1dHRvbnNTdHlsZVN0eWxlR3VpZGUiLCJidG5TdHlsZSIsImxvYWRTaGFyZWRTdHlsZVN0eWxlR3VpZGUiLCJzaGFyZWRfc3R5bGUiLCJjdXN0b21TdHlsZUFycmF5IiwiZXNjYXBlQ1NTY2hhcmFjdGVycyIsImN1c3RvbVRleHRTdHlsZUFycmF5IiwiYnRuc1N0eWxlIiwic2l6ZXMiLCJmb250QmFzZSIsImdldEJ1dHRvbnNGb250U2l6ZVZhbHVlIiwiZ2V0QnV0dG9uc1BhZGRpbmdWYWx1ZSIsInN0eWxlRWwiLCJmb3JtcyIsImZvcm1zQXJyYXkiLCJmb3Jtc0xpc3QiLCJyZXNldEZvcm1zU3R5bGVDb21wb25lbnRzIiwiZm9ybVZhcmlhYmxlcyIsImxvYWRGb3Jtc1N0eWxlVGFnIiwibG9hZEZvcm1zU3R5bGVTdHlsZUd1aWRlIiwiZm9ybVN0eWxlIiwiZm9ybUNTU1ZhcmlhYmxlcyIsImJveFNoYWRvd0lzRGVmaW5lZCIsInN1YnByb3BlcnR5Iiwic3ViVmFsIiwiYnRuTGFiZWwiLCJpc0RlbW9SZXNldCIsImlzQnV0dG9uIiwiYnRuTGFiZWxtb2RpZmllZCIsImJ0bkhhc1RyYW5zZm9ybSIsImJ1dHRvbnNIYXNUcmFuc2Zvcm1TdHlsZSIsInN0eWxlTGFiZWwiLCJzZXRTdGF0dXNMaXN0IiwibmV3Q29kZSIsImdldEJ1dHRvbkNvZGUiLCJzdGF0dXMiLCJuZXdMYWJlbCIsInByaW9yaXR5TGlzdCIsImhhc1RyYW5zZm9ybSIsInRyYW5zZm9ybSIsImJ0blN0YXR1cyIsImdldEJ1dHRvbnNBcHBlYXJhbmNlU3R5bGUiLCJnZXRCdXR0b25zUGFkZGluZ1N0eWxlIiwiZ2V0QnV0dG9uc01hcmdpblN0eWxlIiwiZ2V0QnV0dG9uc0JvcmRlclN0eWxlIiwiZ2V0QnV0dG9uc1R5cG9ncmFwaHlTdHlsZSIsImdldEJ1dHRvbnNUZXh0U2hhZG93U3R5bGUiLCJnZXRCdXR0b25zU2hhZG93U3R5bGUiLCJnZXRCdXR0b25zT3V0bGluZVN0eWxlIiwiZ2V0QnV0dG9uc1RyYW5zZm9ybVN0eWxlIiwiZ2V0QnV0dG9uc1RyYW5zaXRpb25TdHlsZSIsImdldEJ1dHRvbnNQbGFjZWhvbGRlclN0eWxlIiwiZ2V0R3JhZGllbnRCZ1N0eWxlIiwiYW5nbGUiLCJuaWNlTGFiZWwiLCJjb2xvclZhcmlhYmxlcyIsImFwcCIsImZvbnRTaXplIiwic2V0IiwiZ2V0U3VmZml4T3BhY2l0eSIsImdldEx1bWluYW5jZSIsImhzbCIsImlmcmFtZSIsInJnYlNyIiwiZ2V0UkdCc3JWYWx1ZXMiLCJyZ2IiLCJnZXRSR0JWYWx1ZXMiLCJyU3IiLCJwb3ciLCJnU3IiLCJiU3IiLCJnZXRSR0Jmcm9tSFNMIiwiY2hyb21hIiwibG9hZGVkSWZyYW1lQ2hlY2siLCJqUXVlcnkiLCJmbiIsInNlbGVjdFRleHQiLCJkb2MiLCJjcmVhdGVUZXh0UmFuZ2UiLCJyYW5nZSIsIm1vdmVUb0VsZW1lbnRUZXh0Iiwic2VsZWN0IiwiZ2V0U2VsZWN0aW9uIiwic2VsZWN0aW9uIiwiY3JlYXRlUmFuZ2UiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImluaXRGb250TGlzdCIsImRlbW9Db250YWluZXIiLCJkZW1vVmlld3BvcnQiLCJvbiIsImV2ZW50IiwiY3VycmVudFRhcmdldCIsImlmcmFtZVBhcmVudCIsImNsb3NlQWN0aXZlUG9wdXBzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImtleUNvZGUiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsImN0cmxLZXkiLCJtZXRhS2V5Iiwib3BlblNpdGVTZWFyY2giLCJyZXNpemluZyIsInJlc2l6aW5nSUQiLCJtcUxhYmVscyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVwZGF0ZUxhYmVsU2l6ZVdpbmRvdyIsInVwZGF0ZUNvbXBvbmVudEdsb2JhbHMiLCJjb21wU2NyaXB0IiwibmV3U2NyaXB0IiwiY2xvbmUiLCJhdHRyIiwicmVtb3ZlQXR0ciIsImluc2VydEJlZm9yZSIsInNldFRpbWVvdXQiLCJyZXZlYWxDb21wb25lbnQiLCJtcUxhYmVsVGV4dCIsInNob3ciLCJjbGVhckludGVydmFsIiwiaGlkZSIsInVwZGF0ZUdsb2JhbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/config-custom-azuriom/page.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/
/************************************************************************/
/******/
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/config-custom-azuriom/change-color.js");
/******/
/******/ })()
;
