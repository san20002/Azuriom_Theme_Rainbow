/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/change-color.js":
/*!****************************!*\
  !*** ./js/change-color.js ***!
  \****************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar PROJECT = {\n  color: {}\n};\nvar IS_LOGGED = 1;\n\n(function () {\n  loadGlobalsStyle(PROJECT);\n})();\n/**********************\n Input Color component\n ***********************/\n\n\n(function () {\n  this.ColorInput = function (element) {\n    this.element = element;\n    this.inputColorHex = $(this.element).find('.js-app-color-picker__hex').find('input');\n    this.inputPreview = $(this.element).find('.js-app-color-picker__color');\n    this.inputColor = this.inputPreview.find('input');\n    this.inputColorSupported = inputColorSupported();\n    this.appColorSidebar = $(this.element).parents('.js-app-sidebar--globals');\n    this.hexValue = this.inputColorHex.val();\n    this.initColorInput();\n  };\n\n  ColorInput.prototype.initColorInput = function () {\n    var self = this; //hide/show element\n\n    this.inputColor.toggle(this.inputColorSupported); //listen to events\n    //color input - change\n\n    this.inputColor.on(\"input\", function (event) {\n      self.updateColor(event.target.value, true, true);\n    });\n    this.inputColor.on(\"change\", function (event) {\n      self.updateColor(event.target.value, true, true);\n    }); // text input - change -> hex\n\n    this.inputColorHex.on('focusout', function () {\n      if (self.hexValue == self.inputColorHex.val()) return;\n      self.updateColor($(this).val(), false, true);\n    });\n    this.inputColorHex.on('keyup', function (event) {\n      if (event.key === \"Enter\" && self.hexValue != self.inputColorHex.val()) {\n        self.updateColor($(this).val(), false, true);\n      }\n    });\n    $(this.element).on('update-picker', function (event, value) {\n      self.updateColor(chroma.hsl(value).hex(), false, false);\n    }); //this is triggered only by the contrast section in the colors global\n\n    $(this.element).on('update-contrast-picker', function (event, value1, value2) {\n      if ($(self.element).parents('.js-app-editor-section__bg-color-picker').length > 0) {\n        self.updateColor(chroma.hsl(value1).hex(), false, false);\n      } else if ($(self.element).parents('.js-app-editor-section__hc-color-picker').length > 0) {\n        self.updateColor(chroma.hsl(value2).hex(), false, false);\n      }\n    });\n  };\n\n  ColorInput.prototype.updateColor = function (color, bool, emitEvent) {\n    //first -> make sure no ; are inserted\n    color = color.replace(';', '');\n    var self = this;\n\n    if (color.indexOf('(') < 0 && color.indexOf('#') < 0) {\n      this.inputPreview.css('background-color', '#' + color);\n    } else {\n      this.inputPreview.css('background-color', color);\n    }\n\n    this.inputColorHex.val(color);\n    this.hexValue = color; //need to update the color preview next to the input element\n\n    if (!bool) {\n      this.inputColor.val(chroma(color).hex());\n    }\n\n    if (emitEvent && this.appColorSidebar.length > 0) {\n      this.appColorSidebar.trigger('color-picker-updated', [getHslFromHex(color), $(self.element)]);\n    }\n  };\n\n  function inputColorSupported() {\n    var colorInput = $('<input type=\"color\" value=\"!\" />')[0];\n    return colorInput.type === 'color' && colorInput.value !== '!';\n  }\n\n  ; //initialize the Modal objects\n\n  var colorInputs = document.getElementsByClassName('js-color-picker');\n\n  if (colorInputs.length > 0) {\n    for (var i = 0; i < colorInputs.length; i++) {\n      (function (i) {\n        new ColorInput(colorInputs[i]);\n      })(i);\n    }\n  }\n  /************************/\n\n  /* \tColors Interactions */\n\n  /************************/\n\n\n  this.Colors = function (element, bool) {\n    this.element = element; //set starting point\n\n    this.primaryColors = []; //this is an array of 5 colors\n\n    this.accentColors = []; //this is an array of 5 colors\n\n    this.downloadColors = []; //this is an array of 5 colors\n\n    this.blackColors = []; //this is a color string\n\n    this.whiteColors = []; //this is a color string\n\n    this.contrastColors = []; //this is an array of 5 elements\n\n    this.contrastPecentageColors = [];\n    this.warningColors = []; //this is an array of 5 elements\n\n    this.successColors = []; //this is an array of 5 elements\n\n    this.errorColors = []; //this is an array of 5 elements\n\n    this.infoColors = []; //this is an array of 5 elements\n\n    this.themes = [];\n    this.colorLinks = []; //some default states\n    //this should include the custom colors, if user has already created them\n\n    this.mainColorLabels = ['primary', 'accent', 'download', 'warning', 'success', 'error', 'info'];\n    this.customColorLabels = [];\n    this.gradientColorLabels = []; // this will have 'primary', 'secondary'\n\n    this.gradientColorIds = []; // this will have 'custom-0', 'custom-1'\n\n    this.selectedColor = 'primary'; //store what color the user is interacting with (e.g., main, accent ...)\n\n    this.selectedTheme = 0; //used to get the color variations of black and white\n\n    this.blackVariations = [[0, 0], [0, 0.1], [0, 0.2]];\n    this.whiteVariations = [[0, 0], [0, -0.1], [0, -0.2]]; //contrast variations\n\n    this.contrastVariations = getColorContrastPercentages(); //store items\n\n    this.colorPicker = $(this.element).find('.js-color-picker'); //main colors\n\n    this.mainColorsSection = $(this.element).find('.js-app-editor--main-colors');\n    this.mainColorVariationsInput = $(this.element).find('.js-main-color-variation');\n    this.mainColorVariationsSidebar = $(this.element).find('.js-app-editor--main-colors'); //black&white\n\n    this.blackWhiteSection = $(this.element).find('.js-app-editor--black-white'); //contrast\n\n    this.contrastSection = $(this.element).find('.js-app-editor--contrast');\n    this.contrastInputs = this.contrastSection.find('.js-app-editor-section__contrast-inputs');\n    this.basicColorPicker = $(this.element).find('.js-app-editor-section__color-picker');\n    this.bgColorPicker = $(this.element).find('.js-app-editor-section__bg-color-picker');\n    this.hcColorPicker = $(this.element).find('.js-app-editor-section__hc-color-picker');\n    this.grColorPicker = $(this.element).find('.js-app-editor-section__gr-color-picker'); // i'll store also the subelements\n\n    this.grColorPickerItems = this.grColorPicker.find('.js-color-picker'); //check if the ui has been updated for that specific color variable\n\n    this.mainColorShown = '';\n    this.blackWhiteShown = '';\n    this.contrastShown = '';\n    this.gradientShown = '';\n    this.colorOpacities = []; //iframe\n\n    this.colorsLoaded = false;\n    if (bool) return; //check for the frame to be loaded\n\n    this.initFrame();\n    this.loadPreset();\n    this.eventListener();\n  };\n\n  Colors.prototype.initFrame = function () {\n    var self = this;\n    self.frameIsLoaded();\n  };\n\n  Colors.prototype.frameIsLoaded = function () {\n    var self = this;\n\n    if (self.colorsLoaded) {\n      self.updateColorsDemo(false);\n      showIframe();\n    } else {\n      setTimeout(function () {\n        self.frameIsLoaded();\n      }, 100);\n    }\n  };\n\n  Colors.prototype.loadPreset = function () {\n    this.themes = ['Default'];\n    this.initColors(0);\n    this.setThemeColors();\n    this.colorsLoaded = true;\n  };\n\n  Colors.prototype.setThemeColors = function () {\n    var self = this; //this function should be used to update the sidebar inputs -> main colors/ contrast / black and white\n    //when a new team is selected (or even when the first team is loaded - if there are )\n    //reset the variables for ui update\n\n    this.mainColorShown = '';\n    this.blackWhiteShown = '';\n    this.contrastShown = '';\n    this.gradientShown = ''; //set colors now - should use one of the followings according to this.selectedColor\n\n    switch (self.selectedColor) {\n      case 'black':\n        self.setBlackWhite();\n        break;\n\n      case 'white':\n        self.setBlackWhite();\n        break;\n\n      case 'contrast':\n        self.setContrast();\n        break;\n\n      default:\n        self.setMainColors();\n    }\n  };\n\n  Colors.prototype.initColors = function (index) {\n    //index -> theme index\n    //set main colors\n    // if you update this -> you'll need to update the same in the ColorSelection as well\n    this.primaryColors[index] = getDefaultMainColorVariation('primary');\n    this.accentColors[index] = getDefaultMainColorVariation('accent');\n    this.downloadColors[index] = getDefaultMainColorVariation('download');\n    this.warningColors[index] = getDefaultMainColorVariation('warning');\n    this.successColors[index] = getDefaultMainColorVariation('success');\n    this.errorColors[index] = getDefaultMainColorVariation('error');\n    this.infoColors[index] = getDefaultMainColorVariation('infoC'); //set black and white\n\n    this.blackColors[index] = [getHslFromHex('#1c1c21')];\n    this.whiteColors[index] = [getHslFromHex('#ffffff')]; //set contrast\n\n    this.contrastPecentageColors[index] = this.contrastVariations.slice(0);\n    this.contrastColors[index] = getContrastVariation('#35373b', '#FFFFFF', this.contrastPecentageColors[this.selectedTheme]);\n  };\n\n  Colors.prototype.convColorToArr = function (obj) {\n    var array = [];\n\n    for (var property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        var subArray = [];\n        var subObj = obj[property];\n\n        for (var property2 in subObj) {\n          if (subObj.hasOwnProperty(property2)) {\n            subArray.push(Object.values(subObj[property2]));\n          }\n        }\n\n        array.push(subArray);\n      }\n    }\n\n    return array;\n  };\n\n  Colors.prototype.convPerceToArr = function (obj) {\n    var array = [];\n\n    for (var property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        array.push(Object.values(obj[property]));\n      }\n    }\n\n    return array;\n  };\n\n  Colors.prototype.initThemeColors = function (index) {\n    //set new theme equal to default color theme\n    this.primaryColors[index] = this.primaryColors[0].slice(0);\n    this.accentColors[index] = this.accentColors[0].slice(0);\n    this.downloadColors[index] = this.downloadColors[0].slice(0);\n    this.warningColors[index] = this.warningColors[0].slice(0);\n    this.successColors[index] = this.successColors[0].slice(0);\n    this.errorColors[index] = this.errorColors[0].slice(0);\n    this.infoColors[index] = this.infoColors[0].slice(0);\n    this.blackColors[index] = this.blackColors[0].slice(0);\n    this.whiteColors[index] = this.whiteColors[0].slice(0);\n    this.contrastPecentageColors[index] = this.contrastPecentageColors[0].slice(0);\n    this.contrastColors[index] = this.contrastColors[0].slice(0); //init custom colors if any\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      if (this.mainColorLabels[i].indexOf('custom-') > -1) {\n        this[this.mainColorLabels[i] + 'Colors'][index] = this[this.mainColorLabels[i] + 'Colors'][0].slice();\n      }\n    }\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      this[this.gradientColorIds[i] + 'Gradients'][index] = this[this.gradientColorIds[i] + 'Gradients'][0].slice();\n    }\n  };\n\n  Colors.prototype.setBtnColorCustomNiceLabels = function () {\n    setBtnColorCustomNiceLabels(this.mainColorLabels, this.customColorLabels);\n  };\n\n  Colors.prototype.setBtnGradientNiceLabels = function () {\n    setBtnGradientNiceLabels(this.gradientColorLabels);\n  };\n\n  Colors.prototype.eventListener = function () {\n    var self = this; //this event is triggered when one of the colors in the left sidebar is selected\n\n    $(this.element).on('content-selected', function (event, type, target, index) {\n      if (target.indexOf('gradient') > -1) {\n        self.selectNewColor(type, '--gradient-' + self.gradientColorIds[self.gradientColorLabels.indexOf(target.replace('--gradient-', ''))]);\n      } else {\n        self.selectNewColor(type, target);\n      }\n    }); //this is triggered when one of the inputs of the main color is updated\n\n    listenToParentInput($(this.mainColorVariationsSidebar), function (event) {\n      self.colorUpdated($(event.currentTarget), 'main');\n    }); //this is triggered when one of the inputs of the black/white color is updated\n\n    listenToParentInput(this.blackWhiteSection, function (event) {\n      self.colorUpdated($(event.currentTarget), 'bw');\n    }); //this is triggered when one of the inputs of the contrast color is updated\n\n    listenToParentInput(this.contrastInputs, function (event) {\n      self.contrastColorUpdated($(event.currentTarget));\n      self.updateColorsDemo(true, 'contrast');\n    }); //this event is triggered when the color picker is updated\n\n    $(this.element).on('color-picker-updated', function (event, color, pickerElem) {\n      //new color has been selected\n      if (self.selectedColor.indexOf('gr-custom') > -1) {} else if (self.mainColorLabels.indexOf(self.selectedColor) > -1) {\n        //check if we are changing a main color\n        self.setMainColors(color);\n      } else if (self.selectedColor == 'white' || self.selectedColor == 'black') {\n        self.setBlackWhite(color);\n      } else {\n        self.setContrast(color, pickerElem);\n      }\n\n      self.updateColorsDemo(true, self.selectedColor);\n    });\n  };\n\n  Colors.prototype.selectNewColor = function (type, target) {\n    if (type != 'colors') return;\n\n    if (target.indexOf('--color-black') > -1 || target.indexOf('--color-white') > -1) {\n      this.selectedColor = target.replace('--color-', '');\n      this.resetSidebarSections('black-white');\n      this.setBlackWhite();\n    } else if (target.indexOf('--color-') > -1) {\n      // this is a main color -> update it\n      this.selectedColor = target.replace('--color-', '');\n      this.resetSidebarSections('main');\n      this.setMainColors();\n    } else {\n      // this is color contrast\n      this.selectedColor = 'contrast';\n      this.resetSidebarSections('contrast');\n      this.setContrast();\n    }\n  };\n\n  Colors.prototype.resetSidebarSections = function (section) {\n    this.mainColorsSection.add(this.blackWhiteSection).add(this.contrastSection).add(this.basicColorPicker).add(this.bgColorPicker).add(this.hcColorPicker).add(this.grColorPicker).addClass('d-none');\n\n    switch (section) {\n      case 'black-white':\n        this.blackWhiteSection.add(this.basicColorPicker).removeClass('d-none');\n        break;\n\n      case 'contrast':\n        this.contrastSection.add(this.bgColorPicker).add(this.hcColorPicker).removeClass('d-none');\n        break;\n\n      default:\n        this.mainColorsSection.add(this.basicColorPicker).removeClass('d-none');\n    }\n  };\n\n  Colors.prototype.setMainColors = function (color) {\n    if (this.mainColorShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has not been set for this color yet\n      //or the color picker is being updated\n      this.mainColorShown = this.selectedColor;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        this.updateMultipleColorsInThemes(getMainColorVariation(color));\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; // this is used for main colors variation (primary/accent/secondary/warning/error/success)\n\n      for (var i = 0; i < 5; i++) {\n        this.setMainColor(colors[i], i);\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      this.colorPicker.trigger('update-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][2]]);\n    }\n  };\n\n  Colors.prototype.setBlackWhite = function (color) {\n    if (this.blackWhiteShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has ot been set for this color yet\n      this.blackWhiteShown = this.selectedColor;\n      var itemLength = this[this.selectedColor + 'Colors'][this.selectedTheme].length;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        this.updateMultipleColorsInThemes(this.getBlackWhiteVariation(color, itemLength)); // this[this.selectedColor+'Colors'][this.selectedTheme] = this.getBlackWhiteVariation(color, itemLength);\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; //first -> make sure there's the right number of inputs\n\n      this.checkBlackWhiteInputNumber(colors.length); // this is used for black/white colors variation\n\n      for (var i = 0; i < colors.length; i++) {\n        this.setBlackWhiteColor(colors[i], i);\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      //black and white -> main color is the first one\n      this.colorPicker.trigger('update-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][0]]);\n    }\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.updateMultipleColorsInThemes = function (value) {\n    if (this.colorLinks[this.selectedColor]) {\n      for (var i = 0; i < this.themes.length; i++) {\n        this[this.selectedColor + 'Colors'][i] = value;\n      }\n    } else {\n      this[this.selectedColor + 'Colors'][this.selectedTheme] = value;\n    }\n  };\n\n  Colors.prototype.setContrast = function (color, pickerElement) {\n    if (this.contrastShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has not been set for this color yet\n      //or the color picker is being updated\n      this.contrastShown = this.selectedColor;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        //first check if this is the bg or the hc color\n        var isBgColor = pickerElement.parents('.js-app-editor-section__bg-color-picker').length > 0;\n        var colorsScale = isBgColor ? [getHexFromHsl(color), getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][5])] : [getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][0]), getHexFromHsl(color)];\n        this[this.selectedColor + 'Colors'][this.selectedTheme] = getContrastVariation(colorsScale[0], colorsScale[1], this.contrastPecentageColors[this.selectedTheme]);\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; // this is used for contrast colors variation\n\n      for (var i = 0; i < 6; i++) {\n        this.setContrastColor(colors[i], this.contrastPecentageColors[this.selectedTheme][i], i);\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      this.colorPicker.trigger('update-contrast-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][0], this[this.selectedColor + 'Colors'][this.selectedTheme][5]]);\n    }\n  };\n\n  Colors.prototype.checkBlackWhiteInputNumber = function (length) {\n    var wrappers = this.blackWhiteSection.find('.js-app-editor__color-bw');\n    if (wrappers.length == length) return;\n\n    if (wrappers.length < length) {\n      this.createBlackWhiteInputs(Number(length - wrappers.length));\n    } else {\n      this.removeBlackWhiteInputs(Number(wrappers.length - length));\n    }\n  };\n\n  Colors.prototype.createBlackWhiteInputs = function (number) {\n    var input = this.blackWhiteSection.find('.js-app-editor__color-bw').eq(0),\n        append = '';\n\n    for (var i = 0; i < number; i++) {\n      var clone = input.clone();\n      clone.removeClass('app-editor__color-item--locked app-editor__color-item--labelled').addClass('app-editor__color-item--removable');\n      append = append + clone[0].outerHTML;\n    }\n\n    this.blackWhiteSection.children('.js-app-editor-section__body').append(append);\n    this.blackWhiteInputsResetLabelClass();\n  };\n\n  Colors.prototype.removeBlackWhiteInputs = function (number) {\n    var inputs = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        tot = inputs.length;\n\n    for (var i = 0; i < number; i++) {\n      var index = tot - i - 1;\n      inputs.eq(index).remove();\n    }\n\n    this.blackWhiteInputsResetLabelClass();\n  };\n\n  Colors.prototype.blackWhiteInputsResetLabelClass = function () {\n    var inputs = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        lastItem = inputs.length - 1;\n    inputs.removeClass('app-editor__color-item--labelled').eq(lastItem).addClass('app-editor__color-item--labelled');\n  };\n\n  Colors.prototype.colorUpdated = function (target, type) {\n    //get the index of the color\n    var colorWrapper = target.parents('.js-main-color-variation'),\n        index = Number(colorWrapper.attr('data-order')),\n        inputs = colorWrapper.find('.js-hsl-color-input');\n    if (type == 'bw') index = target.parents('.js-app-editor__color-bw').index(); //update the array of colors\n\n    if (this.colorLinks[this.selectedColor]) {\n      var colorItems = type == 'bw' ? target.parents('.js-app-editor--variations-wrapper').eq(0).find('.js-app-editor__color-bw') : target.parents('.js-app-editor--variations-wrapper').eq(0).find('.js-main-color-variation');\n      this.updateColorVariationsInThemes(colorItems);\n    } else {\n      this[this.selectedColor + 'Colors'][this.selectedTheme][index] = [Number(inputs.eq(0).val()), convertStringToHsl(inputs.eq(1).val()), convertStringToHsl(inputs.eq(2).val())];\n    } //update the color preview\n\n\n    if (type == 'bw') {\n      this.setBlackWhiteColor(this[this.selectedColor + 'Colors'][this.selectedTheme][index], index);\n      this.updateColorsDemo(true);\n    } else {\n      this.setMainColor(this[this.selectedColor + 'Colors'][this.selectedTheme][index], index);\n      this.updateColorsDemo(true);\n    }\n  };\n\n  Colors.prototype.updateColorVariationsInThemes = function (colors) {\n    for (var i = 0; i < colors.length; i++) {\n      var inputs = colors.eq(i).find('.js-hsl-color-input');\n      this.updateColorInThemes(inputs, i);\n    }\n  };\n\n  Colors.prototype.updateColorInThemes = function (inputs, index) {\n    var value = Number(inputs.eq(0).val()),\n        valueHSL1 = convertStringToHsl(inputs.eq(1).val()),\n        valueHSL2 = convertStringToHsl(inputs.eq(2).val());\n\n    for (var i = 0; i < this.themes.length; i++) {\n      this[this.selectedColor + 'Colors'][i][index] = [value, valueHSL1, valueHSL2];\n      this[this.selectedColor + 'Colors'][i][index] = [Number(value), Number(valueHSL1), Number(valueHSL2)];\n    }\n  };\n\n  Colors.prototype.contrastColorUpdated = function (target) {\n    var index = target.parents('.js-app-editor__contrast-item').index(),\n        value = parseInt(target.val().replace('%', ''));\n    value = value < 0 ? 0 : value;\n    value = value > 100 ? 100 : value;\n    this.newContrastColorScale(value, index);\n  };\n\n  Colors.prototype.getBlackWhiteVariation = function (hsl, length) {\n    var blackWhiteVariations = [];\n\n    for (var i = 0; i < length; i++) {\n      blackWhiteVariations.push([hsl[0], checkPercentage(hsl[1] + this[this.selectedColor + 'Variations'][i][0]), checkPercentage(hsl[2] + this[this.selectedColor + 'Variations'][i][1])]);\n    }\n\n    return blackWhiteVariations;\n  };\n\n  Colors.prototype.getBlackWhiteSingleVariation = function (hsl, index) {\n    return [hsl[0], checkPercentage(hsl[1] + this[this.selectedColor + 'Variations'][index][0]), checkPercentage(hsl[2] + this[this.selectedColor + 'Variations'][index][1])];\n  };\n\n  Colors.prototype.setMainColor = function (color, index) {\n    var hue = parseInt(color[0]),\n        sat = Math.round(color[1] * 100),\n        lig = Math.round(color[2] * 100);\n    var inputs = this.mainColorVariationsInput.eq(index).find('.js-hsl-color-input'),\n        preview = this.mainColorVariationsInput.eq(index).find('.js-color-preview');\n    inputs.eq(0).val(hue);\n    inputs.eq(1).val(sat);\n    inputs.eq(2).val(lig);\n    preview.css('background-color', 'hsl(' + hue + ', ' + sat + '%, ' + lig + '%)');\n  };\n\n  Colors.prototype.setBlackWhiteColor = function (color, index) {\n    //first need to check if input exists\n    var hue = parseInt(color[0]),\n        sat = Math.round(color[1] * 100),\n        lig = Math.round(color[2] * 100);\n    var inputWrapper = this.blackWhiteSection.find('.js-app-editor__color-bw').eq(index),\n        inputs = inputWrapper.find('input'),\n        preview = inputWrapper.find('.js-color-preview');\n    inputs.eq(0).val(checkHue(hue));\n    inputs.eq(1).val(sat);\n    inputs.eq(2).val(lig);\n    preview.css('background-color', 'hsl(' + hue + ', ' + sat + '%, ' + lig + '%)');\n  };\n\n  Colors.prototype.setContrastColor = function (color, percentage, index) {\n    var wrapper = this.contrastInputs.find('.js-app-editor__contrast-item').eq(index),\n        input = wrapper.find('input'),\n        preview = wrapper.find('.js-color-preview');\n    input.val(percentage);\n    preview.css('background-color', 'hsl(' + parseInt(color[0]) + ', ' + parseInt(color[1] * 100) + '%, ' + parseInt(color[2] * 100) + '%)');\n  };\n\n  Colors.prototype.createBlackWhiteVariation = function () {\n    //create new item and append it\n    var variations = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        tot = variations.length,\n        clone = variations.eq(0).clone();\n    clone.removeClass('app-editor__color-item--locked app-editor__color-item--labelled').addClass('app-editor__color-item--removable');\n    clone.find('input').removeAttr('disabled');\n    this.blackWhiteSection.children('.js-app-editor-section__body').append(clone); //get the color variarion\n\n    var color = this.getBlackWhiteSingleVariation(this[this.selectedColor + 'Colors'][this.selectedTheme][0], tot); //update the variable storing the variations\n\n    this[this.selectedColor + 'Colors'][this.selectedTheme].push(color); //update the color of the input and the preview\n\n    this.setBlackWhiteColor(color, tot); //reset the list with the proper label classes\n\n    this.blackWhiteInputsResetLabelClass(); //if two variation visible -> remove plus action\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.resetBWActionVisibility = function () {\n    var sectionTitle = this.blackWhiteSection.find('.app-editor-section__title');\n    this.blackWhiteSection.find('.js-app-editor__color-bw').length > 2 ? sectionTitle.removeClass('app-editor-section__title--create') : sectionTitle.addClass('app-editor-section__title--create');\n  };\n\n  Colors.prototype.newContrastColorScale = function (value, index) {\n    var wrapper = this.contrastInputs.find('.js-app-editor__contrast-item').eq(index),\n        input = wrapper.find('input'),\n        preview = wrapper.find('.js-color-preview');\n    var color0hex = getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][0]),\n        color5hex = getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][5]);\n    var scaleColors = chroma.bezier([color0hex, color5hex]).scale().colors(101);\n    this.contrastPecentageColors[this.selectedTheme][index] = value;\n    var color = scaleColors[value],\n        hsl = chroma(color).hsl(); //need to convert to hsl\n\n    this.contrastColors[this.selectedTheme][index] = [checkHue(hsl[0]), checkPercentage(hsl[1]), checkPercentage(hsl[2])];\n    input.val(value);\n    preview.css('background-color', color);\n  };\n\n  Colors.prototype.removeTheme = function (type, index, selected) {\n    //first -> remove theme from array of stored elements\n    this.themes.splice(index, 1);\n    this.primaryColors.splice(index, 1);\n    this.accentColors.splice(index, 1);\n    this.downloadColors.splice(index, 1);\n    this.warningColors.splice(index, 1);\n    this.successColors.splice(index, 1);\n    this.errorColors.splice(index, 1);\n    this.infoColors.splice(index, 1);\n    this.blackColors.splice(index, 1);\n    this.whiteColors.splice(index, 1);\n    this.contrastColors.splice(index, 1); //remove custom color as well\n\n    if (this.mainColorLabels.length > 5) {\n      for (var i = 5; i < this.mainColorLabels.length; i++) {\n        this[this.mainColorLabels[i] + 'Colors'].splice(index, 1);\n      }\n    } // remove custom gradients\n\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      this[this.gradientColorIds[i] + 'Gradients'].splice(index, 1);\n    } //if theme was selected -> select new theme\n\n\n    if (selected) {\n      this.selectedTheme = 0;\n      this.setThemeColors();\n    }\n  };\n\n  Colors.prototype.updateColorsDemo = function (bool, label) {\n    var index = this.selectedTheme; //getArray of custom colors\n\n    var customArray = [];\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      if (this.mainColorLabels[i].indexOf('custom-') > -1) {\n        //custom color -> push in array\n        customArray.push([this.mainColorLabels[i], this[this.mainColorLabels[i] + 'Colors'][index]]);\n      }\n    }\n\n    var gradientValues = [];\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      gradientValues.push(this[this.gradientColorIds[i] + 'Gradients'][index]);\n    }\n\n    updateIframeColors(this.primaryColors[index], this.accentColors[index], this.downloadColors[index], this.blackColors[index], this.whiteColors[index], this.successColors[index], this.errorColors[index], this.infoColors[index], this.warningColors[index], this.contrastColors[index], customArray, this.customColorLabels, this.gradientColorLabels, this.gradientColorIds, gradientValues, label);\n    if (IS_LOGGED == '1' && bool) SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorsDemoNewCustom = function (array, title, customLabel) {\n    updateIframeColorsNewColor(array, title, customLabel);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorsDemoRemoveCustom = function (customLabel) {\n    updateIframeColorsRemoveColor(customLabel);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorsDemoEditCustom = function (section, title) {\n    updateIframeColorsEditColor(section, title);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateCopyCode = function (code) {\n    var completeCode = '',\n        spacing = '';\n\n    for (var i = 0; i < this.themes.length; i++) {\n      if (i > 0) spacing = '  '; //start from default theme\n\n      var codeMain = this.createBlockForMainColors(i, spacing),\n          codeCustom = this.createBlockForCustomColors(i, spacing, false),\n          codeBW = this.createBlockForBWColors(i, spacing),\n          codeFeedback = this.createBlockForFeedbackColors(i, spacing),\n          codeFeedbackCustom = this.createBlockForCustomColors(i, spacing, true),\n          codeContrast = this.createBlockForContrastColors(i, spacing),\n          codeGradient = this.createBlockForGradients(i, spacing);\n      var themeCode = codeMain + codeCustom + codeBW + codeFeedback + codeFeedbackCustom + codeContrast + codeGradient;\n      completeCode = completeCode + themeCode;\n      if (i < this.themes.length - 1) completeCode = completeCode + '\\n\\n';\n    } // before returngin code -> check if need to add bg-color classes\n\n\n    completeCode = completeCode + this.getBgColorClasses();\n    return completeCode; // return code;\n  };\n\n  Colors.prototype.createBlockForMainColors = function (themeIndex, spacing) {\n    var code = spacing + '  // main\\n',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    for (var j = 0; j < 2; j++) {\n      for (var i = 0; i < 5; i++) {\n        var colorIndex = 4 - i;\n        var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n            hslCode = getHslCssFromHsl(hsl);\n        code = code + spacing + '  @include defineColorHSL(--color-' + this.mainColorLabels[j] + shades[i] + ', ' + hslCode + ');' + '\\n';\n      }\n\n      code = code + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForCustomColors = function (themeIndex, spacing, isFeedback) {\n    var code = '',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    if (this.mainColorLabels.length > 5) {\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        var label = this.customColorLabels[j];\n\n        if (isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') < 0) {\n          for (var i = 0; i < 5; i++) {\n            var colorIndex = 4 - i;\n            var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n                hslCode = getHslCssFromHsl(hsl);\n            code = code + spacing + '  @include defineColorHSL(' + this.customColorLabels[j - 5] + shades[i] + ', ' + hslCode + ');' + '\\n';\n          }\n\n          code = code + '\\n';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getCustomColorClasses = function (isFeedback) {\n    var code = '';\n\n    if (this.mainColorLabels.length > 5) {\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        var label = this.customColorLabels[j];\n\n        if (isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') < 0) {\n          code = code + '.' + this.customColorLabels[j - 5].replace('--', '') + ' { color: var(' + this.customColorLabels[j - 5] + ');}';\n          code = code + '\\n';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForBWColors = function (themeIndex, spacing) {\n    var code = '',\n        shadesBlack = ['', '-light', '-lighter'],\n        shadesWhite = ['', '-dark', '-darker']; //black\n\n    for (var i = 0; i < this.blackColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.blackColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-black' + shadesBlack[i] + ', ' + hslCode + ');' + '\\n';\n    } //white\n\n\n    for (var i = 0; i < this.whiteColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.whiteColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-white' + shadesWhite[i] + ', ' + hslCode + ');' + '\\n';\n    } //need to add opacities as well\n\n\n    code = code + '\\n';\n    return code;\n  };\n\n  Colors.prototype.createBlockForFeedbackColors = function (themeIndex, spacing) {\n    var code = spacing + '  // feedback\\n',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    for (var j = 2; j < 5; j++) {\n      for (var i = 0; i < 5; i++) {\n        var colorIndex = 4 - i;\n        var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n            hslCode = getHslCssFromHsl(hsl);\n        code = code + spacing + '  @include defineColorHSL(--color-' + this.mainColorLabels[j] + shades[i] + ', ' + hslCode + ');' + '\\n';\n      } //need to add opacities as well\n\n\n      code = code + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForContrastColors = function (themeIndex, spacing) {\n    var code = spacing + '  // color contrasts\\n',\n        shades = ['bg', 'contrast-lower', 'contrast-low', 'contrast-medium', 'contrast-high', 'contrast-higher'];\n\n    for (var i = 0; i < this.contrastColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.contrastColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-' + shades[i] + ', ' + hslCode + ');' + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getArrayToSave = function () {\n    var colorsArray = [];\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      //store main colors + feedback colors\n      colorsArray[this.mainColorLabels[i]] = this[this.mainColorLabels[i] + 'Colors'];\n    }\n\n    colorsArray['mainColorLabels'] = this.mainColorLabels;\n\n    if (this.customColorLabels.length > 0) {\n      colorsArray['customColorLabels'] = this.customColorLabels;\n    }\n\n    colorsArray['blackColors'] = this.blackColors;\n    colorsArray['whiteColors'] = this.whiteColors;\n    colorsArray['contrastPecentageColors'] = this.contrastPecentageColors;\n    colorsArray['contrastColors'] = this.contrastColors;\n    colorsArray['themes'] = this.themes;\n    colorsArray['colorLinks'] = this.colorLinks; // gradients\n\n    if (this.gradientColorLabels.length > 0) {\n      colorsArray['gradientColorLabels'] = this.gradientColorLabels;\n    }\n\n    if (this.gradientColorIds.length > 0) {\n      colorsArray['gradientColorIds'] = this.gradientColorIds;\n\n      for (var i = 0; i < this.gradientColorIds.length; i++) {\n        //store main colors + feedback colors\n        colorsArray[this.gradientColorIds[i] + 'Gradients'] = this[this.gradientColorIds[i] + 'Gradients'];\n      }\n    }\n\n    return colorsArray;\n  };\n\n  Colors.prototype.getBgColorClasses = function () {\n    var code = '';\n    var shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    if (this.mainColorLabels.length > 5) {\n      // start from bg\n      code = '\\n\\n// background color\\n';\n\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        for (var i = 0; i < shades.length; i++) {\n          code = code + '.bg-' + this.customColorLabels[j - 5].replace('--color-', '') + shades[i] + ' { background-color: alpha(var(' + this.customColorLabels[j - 5] + shades[i] + '), var(--bg-o, 1)); }';\n          code = code + '\\n';\n        }\n      }\n    }\n\n    if (this.gradientColorLabels.length > 0) {\n      // background gradient\n      code = this.mainColorLabels.length > 5 ? code + '\\n' : code + '\\n\\n';\n      code = code + '// background gradient';\n\n      for (var i = 0; i < this.gradientColorLabels.length; i++) {\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + ' { background-image: radial-gradient(var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-top { background-image: linear-gradient(0deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-right { background-image: linear-gradient(90deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-bottom { background-image: linear-gradient(180deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-left { background-image: linear-gradient(270deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n      }\n\n      if (this.mainColorLabels.length > 5) code = code + '\\n';\n    }\n\n    if (this.mainColorLabels.length > 5) {\n      // add borders\n      code = code + '\\n// border color';\n\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        for (var i = 0; i < shades.length; i++) {\n          code = code + '\\n.border-' + this.customColorLabels[j - 5].replace('--color-', '') + shades[i] + ' { border-color: alpha(var(' + this.customColorLabels[j - 5] + shades[i] + '), var(--bg-o, 1)); }';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  function getColorContrastPercentages() {\n    return [0, 5, 17, 55, 89, 100];\n  }\n\n  ;\n\n  function getHslCssFromHsl(hsl) {\n    return Math.round(hsl[0]) + ', ' + Math.round(hsl[1] * 100) + '%, ' + Math.round(hsl[2] * 100) + '%';\n  }\n\n  ;\n\n  function getMainColorVariation(hsl) {\n    //used to get the main color variations starting from main color\n    var colorVariationsLogic = getMainColorVaraiationLogic(hsl);\n    var mainColorVariations = [];\n    hsl[0] = checkHue(hsl[0]);\n\n    for (var i = 0; i < 4; i++) {\n      mainColorVariations.push([hsl[0], checkPercentage(hsl[1] + colorVariationsLogic[i][0]), checkPercentage(hsl[2] + colorVariationsLogic[i][1])]);\n    }\n\n    mainColorVariations.splice(2, 0, hsl);\n    return mainColorVariations;\n  }\n\n  ;\n\n  function getMainColorVaraiationLogic(hsl) {\n    var lightVaraition = 0.1,\n        lightVaraitionS = 0.2;\n\n    if (hsl[2] > 0.8) {\n      lightVaraitionS = 1;\n      lightVaraition = parseFloat(((lightVaraitionS - hsl[2]) * 0.5).toFixed(2));\n    }\n\n    var darkVaraition = -0.1,\n        darkVaraitionS = -0.2;\n\n    if (hsl[2] < 0.2) {\n      darkVaraitionS = -hsl[2];\n      darkVaraition = parseFloat((-hsl[2] * 0.5).toFixed(2));\n    }\n\n    return [[0, lightVaraitionS], [0, lightVaraition], [0, darkVaraition], [0, darkVaraitionS]];\n  }\n\n  ;\n\n  function getContrastVariation(color1, color2, array) {\n    var contrastColorVariations = [];\n    var scaleColors = chroma.bezier([color1, color2]).scale().colors(101);\n\n    for (var i = 0; i < 6; i++) {\n      var index = array[i],\n          hsl = chroma(scaleColors[index]).hsl();\n      contrastColorVariations.push([checkHue(hsl[0]), checkPercentage(hsl[1]), checkPercentage(hsl[2])]);\n    }\n\n    return contrastColorVariations;\n  }\n\n  ;\n\n  function getDefaultMainColorVariation(type) {\n    var color = [];\n\n    switch (type) {\n      case 'accent':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      case 'download':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      case 'success':\n        color = [[94, 0.48, 0.74], [94, 0.48, 0.65], [94, 0.48, 0.56], [94, 0.48, 0.48], [94, 0.48, 0.42]];\n        break;\n\n      case 'warning':\n        color = [[46, 1, 0.80], [46, 1, 0.71], [46, 1, 0.61], [46, 1, 0.50], [46, 1, 0.47]];\n        break;\n\n      case 'error':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      case 'info':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      default:\n        // primary\n        color = [[204, 0.70, 0.33], [204, 0.70, 0.43], [204, 0.70, 0.53], [204, 0.70, 0.63], [204, 0.70, 0.73]];\n    }\n\n    return color;\n  }\n\n  ; //initialize the Colors objects\n\n  var colors = document.getElementsByClassName('js-app-sidebar-editor--colors'),\n      colorObject = [];\n\n  if (colors.length > 0) {\n    for (var i = 0; i < colors.length; i++) {\n      (function (i) {\n        colorObject.push(new Colors(colors[i]));\n      })(i);\n    }\n  }\n  /************************/\n\n  /* \tInput Event Listening */\n\n  /************************/\n\n\n  function listenToParentInput(parent, callback) {\n    parent.on('focusout input', 'input', function (event) {\n      callback(event);\n    });\n    parent.on('keyup', 'input', function (event) {\n      if (event.key && event.key.toLowerCase() === \"enter\" || event.keyCode && event.keyCode === \"13\") {\n        callback(event);\n      }\n    });\n  }\n\n  ;\n\n  function listenToParentString(parent, string, callback) {\n    parent.on('focusout', string, function (event) {\n      callback(event);\n    });\n    parent.on('keypress', string, function (event) {\n      if (event.key && event.key.toLowerCase() === \"enter\" || event.keyCode && event.keyCode === \"13\") {\n        event.preventDefault();\n        callback(event);\n      }\n    });\n  }\n\n  ;\n  /************************/\n\n  /* \tSidebar Interaction */\n\n  /************************/\n  //content switch - eg, themes in Colors\n\n  var contentSwitch = $('.js-app-content-switch');\n\n  if (contentSwitch.length > 0) {\n    var contentType = contentSwitch.attr('data-global').toLowerCase(),\n        contentList = contentSwitch.find('.js-app-content-switch__group'),\n        appSidebar = $('.js-app-sidebar--globals'); //open/close list of content\n\n    contentSwitch.on('click', '.js-app-content-item', function (event) {\n      if (!$(event.target).is('.js-add-content') && $(event.target).parents('.js-add-content').length == 0) {\n        contentSwitch.toggleClass('app-content-switch--is-open');\n      }\n    }); //listen for the click on 'add' button - new content item has been created\n\n    contentSwitch.on('click', '.js-add-content', function (event) {\n      contentSwitch.addClass('app-content-switch--is-open');\n      var initialLabel = 'Untitled';\n      contentList.find('.app-content-item--is-selected').removeClass('app-content-item--is-selected app-content-item--is-editing').children('em').attr('contenteditable', 'false');\n      var newContentItem = getNewContentSwitch(initialLabel, contentList);\n      contentList.find('.app-content-item--is-selected').children('em').attr('contenteditable', 'true').selectText();\n      appSidebar.trigger('content-switch-added', [contentType, initialLabel]);\n    }); //new content item has been selected\n\n    contentList.on('click', 'li', function (event) {\n      var selectedItem = contentList.children('.app-content-item--is-selected');\n\n      if (!selectedItem.is($(event.currentTarget)) && $(event.target).parents('.js-content-item__cta--remove').length < 1 && !$(event.target).is('.js-content-item__cta--remove')) {\n        contentList.children('.app-content-item--is-selected').removeClass('app-content-item--is-selected app-content-item--is-editing').children('em').attr('contenteditable', 'false');\n        $(event.currentTarget).addClass('app-content-item--is-selected'); //need to take care of updating content somewhere else -> trigger event\n\n        appSidebar.trigger('content-switch-selected', [contentType, $(event.currentTarget).index()]);\n      }\n    });\n    contentList.on('dblclick', 'li', function (event) {\n      if ($(event.currentTarget).hasClass('js-app-content-item--default')) return;\n      $(event.currentTarget).addClass('app-content-item--is-editing').children('em').eq(0).attr('contenteditable', 'true').focus().selectText();\n    });\n    listenToParentString(contentList, 'li', function (event) {\n      if ($(event.originalEvent.target).is('.js-content-item__cta--edit')) return;\n      $(event.currentTarget).removeClass('app-content-item--is-editing').find('em').attr('contenteditable', 'false');\n      appSidebar.trigger('content-switch-edited', [contentType, $(event.currentTarget).index(), $(event.currentTarget).find('em').text()]);\n    }); //--check if we need to load more themes\n\n    if (colorObject && colorObject[0]) {\n      //we are on the colors global\n      if (colorObject[0].themes.length > 0) {\n        for (var i = 1; i < colorObject[0].themes.length; i++) {\n          var newContentItem = getNewContentSwitch(colorObject[0].themes[i], contentList);\n          newContentItem.removeClass('app-content-item--is-selected app-content-item--is-editing');\n        }\n      }\n    }\n  }\n\n  function getNewContentSwitch(label, contentList) {\n    var newContentItem = contentList.children('li').eq(0).clone();\n    newContentItem.removeClass('js-app-content-item--default').addClass('app-content-item--is-editable app-content-item--is-editing app-content-item--is-selected').children('em').text(label);\n    contentList.append(newContentItem);\n    return newContentItem;\n  } //content groups\n\n\n  var appContentGroup = $('.js-app-content__group');\n\n  if (appContentGroup.length > 0) {\n    var contentType = appContentGroup.attr('data-global').toLowerCase(),\n        appSidebar = $('.js-app-sidebar--globals'),\n        contentItems = appContentGroup.children('li'); //listen to the click on the arrows/entire element - open/close group\n\n    appContentGroup.on('click', '.js-app-content-item--group', function (event) {\n      if (!$(event.target).is('.js-btn-create') && $(event.target).parents('.js-btn-create').length == 0) {\n        $(event.currentTarget).toggleClass('app-content-item--show-children');\n      }\n    }); //select a new content\n\n    appContentGroup.on('click', '.js-app-content-item', function (event) {\n      var sharedStyle = false; // we are gonna use this for the shared styles global only\n\n      if (!$(event.currentTarget).hasClass('app-content-item--is-selected')) {\n        //element is not already selected\n        //do not select if the item is being removed (click on trash icon)\n        if ($(event.target).is('.js-content-item__cta--delete') || $(event.target).parents('.js-content-item__cta--delete').length > 0) return;\n        appContentGroup.find('.app-content-item--is-selected').removeClass('app-content-item--is-selected');\n        $(event.currentTarget).addClass('app-content-item--is-selected'); //need to take care of updating content somewhere else -> trigger event\n        //if the content is a custom one ->pass index to bjects as well\n\n        var itemIndex = $(event.currentTarget).hasClass('js-app-content-item--is-editable') ? $(event.currentTarget).index() : false;\n        var targetLabel = $(event.currentTarget).children('.app-content-item__text').text();\n\n        if (contentType == 'colors' && $(event.currentTarget).attr('data-section').indexOf('color-custom') > -1) {\n          targetLabel = $(event.currentTarget).attr('data-section').replace('#color', '--color');\n        }\n\n        appSidebar.trigger('content-selected', [contentType, targetLabel, itemIndex, sharedStyle]);\n      }\n    });\n  } //right sidebar - generic interactions\n\n\n  var rightAppSidebar = $('.js-app-sidebar--globals');\n\n  if (rightAppSidebar.length > 0) {\n    var colorSelect = $('.js-app-menu--color');\n    rightAppSidebar.on('click', '.js-app-editor-section__title', function (event) {\n      if ($(event.target).is('.js-app-editor-section__title-cta') || $(event.target).parents('.js-app-editor-section__title-cta').length > 0) return;\n      $(event.currentTarget).toggleClass('app-editor-section__title--hide-body');\n    }); //in the sidebar - show the mq tab clicking on the mq button\n\n    rightAppSidebar.on('click', '.js-btn-responsive-rules', function (event) {\n      appSidebarEnableMq($(event.currentTarget));\n    }); //in the sidebar - remove the mq tab/reset mq clicking on delete button\n\n    rightAppSidebar.on('click', '.js-app-delete-mq', function (event) {\n      appSidebarDisableMq($(event.currentTarget), true);\n    }); //in the sidebar - select a new mq clicking on  new mq tab\n\n    rightAppSidebar.on('click', '.js-app-editor-tabs__item', function (event) {\n      appSidebarSelectMq($(event.currentTarget), true);\n    }); //in the right sidebar -> click on the reset link to reset property to default status (e.g., buttons)\n\n    rightAppSidebar.on('click', '.js-app-editor-section__reset-link', function (event) {\n      //remove edited section\n      var selectedSection = $(event.currentTarget).parents('.js-app-editor-section'),\n          mqDelete = selectedSection.find('.js-app-delete-mq');\n      selectedSection.removeClass('app-editor-section--content-edited'); // if(mqDelete.length > 0) appSidebarDisableAndResetMq(mqDelete);\n      //trigger reset of variables in js objects\n\n      rightAppSidebar.trigger('reset-status', [selectedSection]);\n    }); //color preview object\n\n    rightAppSidebar.on('click', '.js-app-editor-color-preview', function (event) {\n      colorSelect.trigger('open-color-selector', [$(event.target)]);\n    });\n\n    if (colorSelect.length > 0) {\n      $(window).on('click', function (event) {\n        if (!$(event.target).is('.js-app-editor-color-preview') && !$(event.target).is('.js-app-menu--color') && $(event.target).parents('.js-app-menu--color').length < 1) colorSelect.trigger('close-color-selection');\n      });\n      $(window).on('keyup', function (event) {\n        if (event.key && event.key.toLowerCase() === \"backspace\" || event.keyCode && event.keyCode === \"8\") {\n          colorSelect.trigger('delete-opacity');\n        }\n      });\n    } // shadow selection -> trigger custom fields\n\n\n    var shadowList = $('.js-shadow-list');\n\n    if (shadowList.length > 0) {\n      shadowList.on('change', function (event) {\n        resetShadowBlockAppearance($(event.target));\n      });\n    }\n  }\n  /* --------------------------------\n    copy code/view code function\n   --------------------------------- */\n  //copy code - detect if there's a copy code element available\n\n\n  if ($('.js-copy-code').length > 0) {\n    var clipboard = new ClipboardJS('.js-copy-code', {\n      text: function text(trigger) {\n        var format = $(trigger).attr('data-type'),\n            container = $(trigger).parents('.js-code-action-wrapper').eq(0);\n        return container.attr('data-' + format);\n      }\n    });\n    clipboard.on('success', function (event) {\n      showCopySuccess(event, false);\n      if ($(event.trigger).hasClass('js-copy-code--dependencies')) showDependenciesModal(event.trigger);\n    }); // switcher css/scss\n\n    if (localStorage.getItem('cd-copy-css') == 'css') {\n      // user wants to copy css by default\n      var splitBtn = $('.js-btn-split__label');\n      if (splitBtn) splitBtn.text('CSS').parent().attr('data-type', 'css');\n    }\n  }\n\n  if ($('.js-modal__copy').length > 0) {\n    var clipboard = new ClipboardJS('.js-modal__copy', {\n      text: function text(trigger) {\n        var format = $(trigger).attr('data-copy') ? $(trigger).attr('data-copy') : 'html',\n            code = $(trigger).prev().find('.js-modal__code').text();\n        console.log(code);\n        return code;\n      }\n    });\n    clipboard.on('success', function (event) {\n      showCopySuccess(event, true);\n    });\n  } //TODO Create btn save\n\n\n  axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n  $('.copy-globals-code').on('click', function () {\n    console.log('CODE');\n    var getCOnfig;\n    axios({\n      url: '/admin/themes/dofus-default/config',\n      method: 'GET',\n      dataType: 'json'\n    }).then(function (response) {\n      if (!colorObject || colorObject.length == 0) callback();\n      var colorsAll = colorObject[0].getArrayToSave();\n      var colorString = JSON.stringify(convArrToObj(colorsAll));\n      getCOnfig = JSON.parse(response.data.split('<!DOCTYPE html>')[0]);\n      getCOnfig.color_themes_data = colorString;\n      getCOnfig.color_themes = $('html').attr(\"style\");\n      axios.post('/admin/themes/dofus-default/config', {\n        discordId: getCOnfig.discordId,\n        headerIcons: getCOnfig.headerIcons,\n        headerVisibilityText: getCOnfig.headerVisibilityText,\n        sliders: getCOnfig.sliders,\n        articleLike: getCOnfig.articleLike,\n        articleComment: getCOnfig.articleComment,\n        voteIcons: getCOnfig.voteIcons,\n        cgu: getCOnfig.cgu,\n        cgu_link: getCOnfig.cgu_link,\n        cgv: getCOnfig.cgv,\n        cgv_link: getCOnfig.cgv_link,\n        download: getCOnfig.download,\n        download_link: getCOnfig.download_link,\n        footer_description: getCOnfig.footer_description,\n        footer_links: getCOnfig.footer_links,\n        color_themes: getCOnfig.color_themes,\n        color_themes_data: getCOnfig.color_themes_data\n      }).then(function (response) {\n        console.log(response);\n        SaveAlert.no();\n      })[\"catch\"](function (error) {\n        console.log(error);\n      })[\"finally\"](function () {});\n    })[\"catch\"](function (error) {\n      console.log(error);\n    })[\"finally\"](function () {});\n  }); //copy code for globals -need to adpt code before copying\n\n  if ($('.js-globals-copy-code').length > 0) {\n    var clipboard = new ClipboardJS('.js-globals-copy-code', {\n      text: function text(trigger) {\n        console.log($(trigger));\n        var format = $(trigger).attr('data-type'),\n            parent = $(trigger).parents('.js-code-action-wrapper').eq(0),\n            code = parent.attr('data-' + format);\n        code = modifyGlobalCode(code, parent.attr('data-demo'), parent);\n        console.log(code);\n        return code;\n      }\n    });\n    clipboard.on('success', function (event) {\n      showCopySuccess(event, false);\n    });\n  }\n\n  function showCopySuccess(event, bool) {\n    var target = $(event.trigger);\n\n    if (target.hasClass('js-copy-code--split')) {\n      // user clicked the tooltip of split btn\n      var popover = target.parents('.js-popover'),\n          codeType = target.attr('data-type'),\n          popoverControl = $('[aria-controls=\"' + popover.attr('id') + '\"]');\n      target = popoverControl.prev();\n      updateSplitCopy(target, codeType, popoverControl);\n    }\n\n    target.addClass('btn--state-b');\n    setTimeout(function () {\n      target.removeClass('btn--state-b');\n    }, 3000); //bind the google analytics event as well\n\n    var componentName = bool ? target.parents('.js-modal-code').eq(0).attr('data-component') : target.parents('.js-code-action-wrapper').eq(0).attr('data-demo');\n    ga('send', 'event', 'View Code', 'copyCode', componentName);\n  }\n\n  ;\n\n  function updateSplitCopy(target, codeType, popoverControl) {\n    target.find('.js-btn-split__label').text(codeType.toUpperCase());\n    target.attr('data-type', codeType);\n    popoverControl.trigger('click');\n    localStorage.setItem('cd-copy-css', codeType);\n  }\n\n  ;\n\n  function showDependenciesModal(trigger) {\n    var modal = $('.js-modal--dependencies');\n    modal.trigger('openModal', [trigger]);\n  }\n\n  ;\n\n  function showDependenciesModalViewCode(trigger, modal) {\n    if (trigger.attr('data-dep-titles') || trigger.attr('data-ext-dep') && trigger.attr('data-ext-dep') != '') {\n      // this is the component gallery - create list\n      resetDependenciesListViewCode(modal, trigger.attr('data-dep-url'), trigger.attr('data-dep-titles'), trigger.attr('data-ext-dep'));\n    }\n\n    modal.find('.js-app-info-banner').addClass('app-info-banner--is-visible');\n  }\n\n  ;\n  var copyCodeWrapper = $('.js-code-action-wrapper');\n\n  if (copyCodeWrapper.length > 0) {\n    if ($('.js-item-gallery').length > 0) {\n      $('.js-item-gallery').on('click', '.js-view-code', function (event) {\n        showViewCodeModal(event, $(event.currentTarget).parents('.js-code-action-wrapper').eq(0));\n      });\n    } else {\n      // detect click on view code\n      copyCodeWrapper.on('click', '.js-view-code', function (event) {\n        showViewCodeModal(event, $(event.delegateTarget));\n      });\n    }\n  }\n\n  function showViewCodeModal(event, parent) {\n    // var code = [];\n    var modal = $('.js-modal[data-modal-trigger=\"' + $(event.currentTarget).attr('data-modal') + '\"]'); //hide menu popup\n\n    $('.js-menu-popup.menu-popup--is-visible').removeClass('menu-popup--is-visible'); //modal is shown automatically using the proper object\n\n    if ($(event.currentTarget).hasClass('js-view-code--global')) {\n      //get code global -- need to modify i first\n      getGlobalCode(parent, '', function (data) {\n        // populate the modal now\n        modal.trigger('showGlobalCode', [data]);\n      });\n    } else {\n      getComponentCode(parent, '', function (data) {\n        if ($(event.currentTarget).hasClass('js-view-code--dependencies')) {\n          showDependenciesModalViewCode($(event.currentTarget), modal);\n        } else {\n          // need to hide the dependencies banner in the modal\n          modal.find('.js-app-info-banner').removeClass('app-info-banner--is-visible');\n        } // populate the modal now\n\n\n        modal.trigger('showCode');\n      });\n    } //bind the google analytics event as well\n\n\n    ga('send', 'event', 'View Code', 'showCode', parent.attr('data-demo'));\n  }\n\n  ;\n\n  function getComponentCode(container, type, callback) {\n    var array = [];\n\n    if (!container.attr('data-html') && !container.attr('data-scss') && !container.attr('data-js')) {\n      // this should be dynamic\n      if (type && type == 'globals') {\n        var componentName = container.attr('data-title').toLowerCase();\n      } else {\n        var componentName = container.attr('data-demo');\n      }\n\n      readFileContent(componentName, type, function (data) {\n        var code = JSON.parse(data);\n        container.attr('data-html', code.response.html);\n        container.attr('data-scss', code.response.scss);\n        container.attr('data-css', code.response.css);\n        container.attr('data-js', code.response.js);\n        callback(array);\n      });\n    } else {\n      array[0] = container.attr('data-html');\n      array[1] = container.attr('data-scss');\n      array[2] = container.attr('data-js');\n      array[3] = container.attr('data-css');\n      callback(array);\n    }\n  }\n\n  function getGlobalCode(container, type, callback) {\n    scss_code = modifyGlobalCode(container.attr('data-scss'), container.attr('data-demo'), container);\n    callback(scss_code);\n  }\n\n  function readFileContent(component, type, callback) {\n    if (type && type == 'globals') {\n      var url = 'post/getGlobalCode';\n    } else {\n      var url = 'post/getComponentCode';\n    }\n\n    $.ajax({\n      url: url,\n      data: 'component=' + component,\n      type: 'POST',\n      cache: 'false',\n      beforeSend: function beforeSend() {//show loader or similar\n      },\n      success: function success(data) {\n        callback(data);\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        callback('');\n      }\n    });\n  }\n\n  function modifyGlobalCode(code, global) {\n    //check the globals that needs to be modified\n    console.log(global);\n\n    switch (global.toLowerCase()) {\n      case 'colors':\n        code = modifyColorsCode(code);\n        break;\n\n      case 'buttons':\n        code = modifyButtonsCode(code);\n        break;\n\n      case 'forms':\n        code = modifyFormsCode(code);\n        break;\n\n      case 'spacing':\n        code = modifySpacingCode(code);\n        break;\n\n      case 'typography':\n        code = modifyTypographyCode(code);\n        break;\n\n      case 'shared styles':\n        code = modifySharedStylesCode(code);\n        break;\n\n      default:\n        code = code;\n        break;\n    }\n\n    return code;\n  }\n\n  ;\n\n  function modifyColorsCode(code) {\n    if (colorObject && colorObject.length > 0) {\n      code = colorObject[0].updateCopyCode(code);\n    }\n\n    return code;\n  }\n\n  ; // component dependencies -> close banner in view code\n\n  var closeBanner = $('.js-app-info-banner__close');\n\n  if (closeBanner.length > 0) {\n    closeBanner.on('click', function (event) {\n      event.preventDefault();\n      closeBanner.parents('.js-app-info-banner').removeClass('app-info-banner--is-visible');\n    });\n  } //save globals function\n\n\n  var saveGlobal = $('.js-globals-save-code');\n\n  if (saveGlobal.length > 0) {\n    saveGlobal.on('click', function () {\n      if (IS_LOGGED == 0) {\n        // trigger logIn modal\n        logInModalStart(event.currentTarget);\n      } else {\n        //save project\n        saveGlobal.addClass('btn--state-b');\n        saveGlobalProject(saveGlobal.attr('data-global').toLowerCase(), function () {\n          SaveAlert.no();\n          saveGlobal.removeClass('btn--state-b').addClass('btn--state-c');\n          setTimeout(function () {\n            saveGlobal.removeClass('btn--state-c');\n          }, 2000);\n        });\n      }\n    }); //log in using modal was successfull\n\n    saveGlobal.on('logInSuccess', function () {\n      //reset appearance\n      resetLoggedInAppearance();\n      logInModalClose();\n    });\n  }\n\n  ;\n\n  function convArrToObj(array) {\n    var thisEleObj = new Object();\n\n    if (_typeof(array) == \"object\") {\n      for (var i in array) {\n        var thisEle = convArrToObj(array[i]);\n        thisEleObj[i] = thisEle;\n      }\n    } else {\n      thisEleObj = array;\n    }\n\n    return thisEleObj;\n  }\n\n  ; //reset globals function\n\n  var resetGlobal = document.getElementsByClassName('js-reset-global');\n\n  if (resetGlobal.length > 0) {\n    resetGlobal[0].addEventListener('click', function (event) {\n      var globalType = resetGlobal[0].getAttribute('data-global');\n      event.preventDefault();\n\n      if (window.confirm(\"Are you sure you want to reset the global \" + globalType + \"? All your custom changes will be removed.\")) {\n        resetGlobalFn(globalType.toLowerCase(), function () {\n          location.reload();\n        });\n      }\n    });\n  }\n\n  function saveGlobalProject(global, callback) {\n    //check the globals that needs to be modified\n    switch (global.toLowerCase()) {\n      case 'colors':\n        saveColorsCode(callback);\n        break;\n\n      case 'buttons':\n        saveButtonsCode(callback, 'buttons');\n        break;\n\n      case 'forms':\n        saveButtonsCode(callback, 'forms');\n        break;\n\n      case 'spacing':\n        saveSpacingCode(callback);\n        break;\n\n      case 'typography':\n        saveTypographyCode(callback);\n        break;\n\n      case 'shared styles':\n        saveSharedStylesCode(callback);\n        break;\n    }\n  }\n\n  ;\n\n  function saveColorsCode(callback) {\n    //need to define a string for colors\n    if (!colorObject || colorObject.length == 0) callback();\n    var colorsAll = colorObject[0].getArrayToSave();\n    var colorString = JSON.stringify(convArrToObj(colorsAll));\n    updateGlobalsProject('project_id=' + PROJECT.id + '&colors=' + colorString, callback);\n  }\n\n  ;\n\n  function saveTypographyCode(callback) {\n    if (!typographyObject || typographyObject.length == 0) callback();\n    var typographyAll = typographyObject[0].getArrayToSave();\n    var typographyString = encodeURIComponent(JSON.stringify(convArrToObj(typographyAll)));\n    updateGlobalsProject('project_id=' + PROJECT.id + '&typography=' + typographyString, callback);\n  }\n\n  ;\n\n  function saveSpacingCode(callback) {\n    if (!spacingObject || spacingObject.length == 0) callback();\n    var spacingAll = spacingObject[0].getArrayToSave();\n    var spacingString = encodeURIComponent(JSON.stringify(convArrToObj(spacingAll)));\n    updateGlobalsProject('project_id=' + PROJECT.id + '&spacing=' + spacingString, callback);\n  }\n\n  ;\n\n  function saveButtonsCode(callback, type) {\n    if (!buttonObjs || buttonObjs.length == 0) callback();\n\n    if (type == 'buttons') {\n      var buttonsString = encodeURIComponent(JSON.stringify(convArrToObj(buttonObjs[0].getButtonsArrayToSave())));\n      saveString = '&buttons=' + buttonsString;\n    } else {\n      var buttonsString = encodeURIComponent(JSON.stringify(convArrToObj(buttonObjs[0].getFormsArrayToSave())));\n      saveString = '&form=' + buttonsString;\n    }\n\n    updateGlobalsProject('project_id=' + PROJECT.id + saveString, callback);\n  }\n\n  ;\n\n  function saveSharedStylesCode(callback) {\n    if (!sharedStylesObjs || sharedStylesObjs.length == 0) callback();\n    var sharedStyleAll = sharedStylesObjs[0].getArrayToSave();\n    var sharedStyleString = encodeURIComponent(JSON.stringify(convArrToObj(sharedStyleAll)));\n    updateGlobalsProject('project_id=' + PROJECT.id + '&shared_styles=' + sharedStyleString, callback);\n  }\n\n  ;\n\n  function updateGlobalsProject(options, callback) {\n    $.ajax({\n      url: 'post/updateGlobalsProject',\n      data: options,\n      type: 'POST',\n      dataType: 'json',\n      cache: 'false'\n    }).done(function (data) {\n      if (data.status == 1) {\n        $('.js-flash-message--project-update').trigger('showFlashMessage');\n        saveGlobal.removeClass('btn--state-b');\n      } else {\n        callback();\n      }\n    }).fail(function (data) {\n      $('.js-flash-message--project-update').trigger('showFlashMessage');\n      saveGlobal.removeClass('btn--state-b');\n    }).always(function (data) {});\n  }\n\n  ; // Save Alert\n\n  var SaveAlert = {\n    yes: function yes() {\n      window.onbeforeunload = function () {\n        return true;\n      };\n    },\n    no: function no() {\n      window.onbeforeunload = null;\n    }\n  };\n\n  function showIframe() {\n    $('.js-app-canvas').find('iframe').addClass('app-canvas__iframe--content-is-loaded').end().find('.js-app-canvas__loader').remove();\n  }\n})();\n/**********************\n iOS banner\n ***********************/\n\n\n(function () {\n  var iosBanner = $('.js-ios-pivot');\n\n  if (iosBanner.length > 0) {\n    if (!!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform)) iosBanner.removeClass('ios-pivot--is-hidden');\n  }\n})(); //here define the functions that need to be used inside the app frame\n\n\nfunction checkPercentage(val) {\n  val = Number(val);\n  if (val < 0) val = 0;\n  if (val > 1) val = 1;\n  return Number(val.toFixed(2));\n}\n\n;\n\nfunction checkHue(hue) {\n  if (isNaN(hue)) hue = 0;\n  return Math.round(parseFloat(hue));\n}\n\n;\n\nfunction getHslFromHex(hex) {\n  if (hex.indexOf('hsl(') > -1) {\n    //format is already hsl(, , )\n    return getHslFromHslString(hex);\n  }\n\n  var color = chroma(hex).hsl();\n  if (isNaN(color[0])) color[0] = 0;\n  color[0] = Math.round(color[0]);\n  color[1] = Number(Math.round(color[1] * 100) / 100);\n  color[2] = Number(Math.round(color[2] * 100) / 100);\n  return color;\n}\n\n;\n\nfunction getHslFromHslString(hex) {\n  var color = hex.replace('hsl(', '').replace(')', '').split(',');\n  color[0] = Number(color[0].trim());\n  color[1] = parseFloat((Number(color[1].trim().replace('%', '')) / 100).toFixed(2));\n  color[2] = parseFloat((Number(color[2].trim().replace('%', '')) / 100).toFixed(2));\n  return color;\n}\n\n;\n\nfunction getHexFromHsl(hsl) {\n  return chroma.hsl(hsl[0], hsl[1], hsl[2]).hex();\n}\n\n;\n\nfunction convertStringToHsl(string) {\n  string = Number(string.replace('%', ''));\n  return Number((string / 100).toFixed(2));\n}\n\n;\n\nfunction selectSidebarSection(target) {\n  $('.js-app-content__group').trigger('selectSection', [target]);\n}\n\n;\n\nfunction closeActivePopups() {\n  var colorSelection = $('.js-app-menu--color'),\n      appMenu = $('.js-app-header-menu-toggle');\n  if (colorSelection.length > 0) colorSelection.trigger('close-color-selection');\n  if (appMenu.length > 0) appMenu.trigger('close-app-menu-popup');\n}\n\n;\n\nfunction getRGBfromHSL(hsl) {\n  return chroma.hsl(hsl).rgb();\n}\n\n;\n\nfunction toggleColorLink(colorSection, bool) {\n  $('.js-app-sidebar-editor--colors').trigger('updateColorLink', [colorSection, bool]);\n}\n\n;\nvar colorPrimary = [],\n    colorAccent = [],\n    colorDownload = [],\n    colorBlack = '',\n    colorWhite = '',\n    colorSuccess = [],\n    colorError = [],\n    colorInfo = [],\n    colorWarning = [],\n    colorContrasts = [],\n    newColorCustom = [],\n    newGradientCustom = [],\n    colorCustoms = [],\n    gradientCustoms = [],\n    colorOpacities = [],\n    customColorLabels = [],\n    gradientColorIds = [],\n    gradientColorValues = [];\n\nfunction updateIframeColors(primary, accent, download, black, white, success, error, info, warning, contrasts, customs, customLabels, grLabels, grIds, grValues, label) {\n  colorPrimary = primary.slice();\n  colorAccent = accent.slice();\n  colorDownload = download.slice();\n  colorBlack = black.slice();\n  colorWhite = white.slice();\n  colorSuccess = success.slice();\n  colorError = error.slice();\n  colorInfo = info.slice();\n  colorWarning = warning.slice();\n  colorContrasts = contrasts.slice();\n  colorCustoms = customs.slice();\n  customColorLabels = customLabels;\n  gradientColorIds = grIds.slice();\n  gradientCustoms = grLabels.slice();\n  gradientColorValues = grValues.slice();\n  $('.js-cd-demo-container--colors').trigger('updateColors', [label]);\n}\n\n;\n\nfunction updateIframeColorsNewColor(array, title, customLabel) {\n  if (title.indexOf('gradient') > -1) {\n    newGradientCustom[customLabel] = array.slice();\n    $('.js-cd-demo-container--colors').trigger('createGradient', [title, customLabel]);\n  } else {\n    newColorCustom[customLabel] = array.slice();\n    $('.js-cd-demo-container--colors').trigger('createColor', [title, customLabel]);\n  }\n}\n\n;\n\nfunction updateIframeColorsRemoveColor(customLabel) {\n  if (customLabel.indexOf('gr') > -1) {\n    $('.js-cd-demo-container--colors').trigger('removeGradient', [customLabel]);\n  } else {\n    $('.js-cd-demo-container--colors').trigger('removeColor', [customLabel]);\n  }\n}\n\n;\n\nfunction updateIframeColorsEditColor(section, title) {\n  if (section.indexOf('gradient') > -1) {\n    $('.js-cd-demo-container--colors').trigger('updateGradient', [section, title]);\n  } else {\n    $('.js-cd-demo-container--colors').trigger('updateColor', [section, title]);\n  }\n}\n\n;\n\n(function () {\n  var colorsDemo = $('.js-cd-demo-container--colors');\n  var iframeParent = window.parent;\n  var accessibleContrastHeadings = document.getElementsByClassName('js-accessible-headings-contrast'),\n      accessibleContrastBody = document.getElementsByClassName('js-accessible-body-contrast');\n\n  if (!iframeParent) {\n    iframeParent = parent;\n  }\n\n  var styleTag = $('#font-rendering');\n\n  if (colorsDemo.length > 0) {\n    var blackWrapper = colorsDemo.find('.js-cd-demo-color__list--black'),\n        whiteWrapper = colorsDemo.find('.js-cd-demo-color__list--white');\n    var demoSwitcher = $('.js-demo-switcher');\n    colorsDemo.on('click', '.js-cd-demo-color__list', function (event) {\n      colorsDemo.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected cd-demo-item--selected');\n      $(event.currentTarget).addClass('cd-demo-color__list--selected');\n      selectSidebarSection($(event.currentTarget).attr('data-section'));\n    });\n    colorsDemo.on('updateColors', function (event, label) {\n      updateColorVariables(label);\n    });\n    demoSwitcher.on('click', 'button', function (event) {\n      if ($(event.target).hasClass('is-selected')) return;\n      demoSwitcher.children('.is-selected').removeClass('is-selected').siblings().addClass('is-selected');\n      $('.cd-demo-container--is-hidden').removeClass('cd-demo-container--is-hidden').siblings('[data-display]').addClass('cd-demo-container--is-hidden');\n    });\n    colorsDemo.on('createColor', function (event, title, customLabel) {\n      createCustomColor(title, customLabel);\n    });\n    colorsDemo.on('createGradient', function (event, title, customLabel) {\n      createCustomGradient(title, customLabel);\n    });\n    colorsDemo.on('removeColor', function (event, customLabel) {\n      colorsDemo.find('[data-section=\"#color-' + customLabel + '\"]').parent().remove();\n    });\n    colorsDemo.on('removeGradient', function (event, customLabel) {\n      colorsDemo.find('[data-section=\"#gradient-' + customLabel.replace('gr-', '') + '\"]').parent().remove();\n    });\n    colorsDemo.on('updateColor', function (event, section, title) {\n      updateCustomColor(section, title);\n    });\n    colorsDemo.on('updateGradient', function (event, section, title) {\n      updateCustomGradient(section, title);\n    });\n    colorsDemo.on('click', '.js-cd-demo-color__link-btn', function (event) {\n      event.preventDefault();\n      $(event.currentTarget).toggleClass('cd-demo-color__link-btn--is-active');\n      iframeParent.toggleColorLink($(event.currentTarget).parent().next().attr('data-section'), $(event.currentTarget).hasClass('cd-demo-color__link-btn--is-active'));\n    });\n  }\n\n  function updateColorVariables(label) {\n    if (!label || label == 'primary') updateMainColor(colorPrimary, 'primary');\n    if (!label || label == 'accent') updateMainColor(colorAccent, 'accent');\n    if (!label || label == 'download') updateMainColor(colorDownload, 'download');\n    if (!label || label == 'success') updateMainColor(colorSuccess, 'success');\n    if (!label || label == 'error') updateMainColor(colorError, 'error');\n    if (!label || label == 'info') updateMainColor(colorInfo, 'info');\n    if (!label || label == 'warning') updateMainColor(colorWarning, 'warning'); // if (!label || label == 'black') updateBlackWhite(colorBlack, blackWrapper, 'black');\n    // if (!label || label == 'white') updateBlackWhite(colorWhite, whiteWrapper, 'white');\n\n    if (!label || label == 'contrast') updateContratColor();\n    if (!label || label.indexOf('custom') > -1 && label.indexOf('gr-custom') < 0) updateCustoms();\n    if (!label || label.indexOf('gr-custom') > -1) updateGradientCustoms();\n  }\n\n  ;\n\n  function setCompleteColorVariable(label, color) {\n    setCssVariable(label, getHSL(color));\n    setColorPartVariables(label, color);\n  }\n\n  ;\n\n  function updateContratColor() {\n    setCompleteColorVariable('--color-bg', colorContrasts[0]);\n    setCompleteColorVariable('--color-contrast-lower', colorContrasts[1]);\n    setCompleteColorVariable('--color-contrast-low', colorContrasts[2]);\n    setCompleteColorVariable('--color-contrast-medium', colorContrasts[3]);\n    setCompleteColorVariable('--color-contrast-high', colorContrasts[4]);\n    setCompleteColorVariable('--color-contrast-higher', colorContrasts[5]);\n    var colorSection = colorsDemo.find('[data-section=\"#color-contrast\"]'),\n        colorLabels = colorSection.find('.js-demo-color__value');\n\n    for (var i = 0; i < colorContrasts.length; i++) {\n      colorLabels.eq(i).text(getHSL(colorContrasts[i]));\n    }\n\n    updateAccessibleContrast();\n  }\n\n  ;\n\n  function updateMainColor(array, type) {\n    setCompleteColorVariable('--color-' + type + '-lighter', array[0]);\n    setCompleteColorVariable('--color-' + type + '-light', array[1]);\n    setCompleteColorVariable('--color-' + type, array[2]);\n    setCompleteColorVariable('--color-' + type + '-dark', array[3]);\n    setCompleteColorVariable('--color-' + type + '-darker', array[4]);\n    var colorSection = colorsDemo.find('[data-section=\"#color-' + type + '\"]'),\n        colorLabels = colorSection.find('.js-demo-color__value');\n\n    for (var i = 0; i < 5; i++) {\n      colorLabels.eq(i).text(getHSL(array[i]));\n    }\n  }\n\n  ;\n\n  function updateCSSCustomColor(array, type) {\n    setCompleteColorVariable('--color-' + type + '-lighter', array[0]);\n    setCompleteColorVariable('--color-' + type + '-light', array[1]);\n    setCompleteColorVariable('--color-' + type, array[2]);\n    setCompleteColorVariable('--color-' + type + '-dark', array[3]);\n    setCompleteColorVariable('--color-' + type + '-darker', array[4]);\n  }\n\n  ;\n\n  function updateBlackWhite(array, parent, type) {\n    var children = parent.children();\n\n    if (children.length > array.length) {\n      children.eq(array.length - 1).nextAll().remove();\n    } else if (children.length < array.length) {\n      var cloneCode = children.eq(0).clone()[0].outerHTML,\n          itemsString = '';\n\n      for (var i = children.length; i < array.length; i++) {\n        itemsString = itemsString + cloneCode;\n      }\n\n      parent.append(itemsString);\n    }\n\n    children = parent.children();\n\n    for (var i = 0; i < array.length; i++) {\n      updateSingleColor(array[i], children.eq(i), getBWLabel(type, i), i);\n    }\n  }\n\n  ;\n\n  function updateSingleColor(color, item, label, index) {\n    var colorText = getHSL(color);\n    setCompleteColorVariable('--' + label, color);\n    item.find('.js-demo-color__value').text(colorText).end().find('.js-css-variable-label').text('--' + label);\n    if (index != 0) item.children().eq(0).css('background-color', colorText);\n  }\n\n  ;\n\n  function updateCustoms() {\n    for (var i = 0; i < colorCustoms.length; i++) {\n      var customSection = $('[data-section=\"#color-' + colorCustoms[i][0] + '\"]');\n\n      if (customSection.length == 0) {\n        createCustomColorSection(customColorLabels[i], colorCustoms[i][0], false);\n      }\n\n      var colorSectionItems = $('[data-section=\"#color-' + colorCustoms[i][0] + '\"]').children(),\n          colorValues = [];\n\n      for (var j = 0; j < colorSectionItems.length; j++) {\n        var newColor = getHSL(colorCustoms[i][1][j]);\n        colorSectionItems.eq(j).find('.js-cd-demo-color__preview').attr('style', 'background-color: ' + newColor + ';').end().find('.js-demo-color__value').text(newColor);\n        colorValues.push(newColor);\n      }\n\n      updateCSSCustomColor(colorCustoms[i][1], customColorLabels[i].replace('--color-', ''));\n    }\n  }\n\n  ;\n\n  function updateGradientCustoms() {\n    for (var i = 0; i < gradientCustoms.length; i++) {\n      var customSection = $('[data-section=\"#gradient-' + gradientColorIds[i] + '\"]');\n\n      if (customSection.length == 0) {\n        createCustomGradientSection(gradientCustoms[i], gradientColorIds[i], gradientColorValues[i], false);\n      }\n\n      var customSection = $('[data-section=\"#gradient-' + gradientColorIds[i] + '\"]');\n      var preview = customSection.find('.js-cd-demo-color__preview'),\n          values = customSection.find('.js-demo-color__value');\n      preview.attr('style', 'background-image: linear-gradient(90deg, ' + getHSL(gradientColorValues[i][0]) + ', ' + getHSL(gradientColorValues[i][1]) + ');');\n      values.eq(0).text(getHSL(gradientColorValues[i][0]));\n      values.eq(1).text(getHSL(gradientColorValues[i][1]));\n      setCompleteColorVariable('--gradient-' + gradientCustoms[i] + '-stop-1', gradientColorValues[i][0]);\n      setCompleteColorVariable('--gradient-' + gradientCustoms[i] + '-stop-2', gradientColorValues[i][1]);\n    }\n  }\n\n  ;\n\n  function getBWLabel(type, index) {\n    if (type == 'black') {\n      switch (index) {\n        case 1:\n          return 'color-black-light';\n          break;\n\n        case 2:\n          return 'color-black-lighter';\n          break;\n\n        default:\n          return 'color-black';\n      }\n    } else {\n      switch (index) {\n        case 1:\n          return 'color-white-dark';\n          break;\n\n        case 2:\n          return 'color-white-darker';\n          break;\n\n        default:\n          return 'color-white';\n      }\n    }\n  }\n\n  ;\n\n  function createCustomColor(title, customLabel) {\n    createCustomColorSection(title, customLabel, true);\n    selectIframeSection('#color-' + customLabel);\n  }\n\n  ;\n\n  function createCustomColorSection(title, customLabel, customize) {\n    var newColor = colorsDemo.children('.js-cd-demo-color').eq(0).clone(),\n        colorChildren = newColor.find('.js-cd-demo-color__preview');\n    newColor.addClass('js-cd-demo-color--custom').find('.js-cd-demo-title').text(getCustomTitleColor(title));\n    newColor.find('[data-section]').attr('data-section', '#color-' + customLabel);\n    newColor.find('.cd-demo-color__link-btn').removeClass('cd-demo-color__link-btn--is-active');\n\n    if (!customize) {\n      newColor.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n    }\n\n    if (customize) {\n      for (var i = 0; i < colorChildren.length; i++) {\n        colorChildren.eq(i).attr('style', 'background-color: ' + getHSL(newColorCustom[customLabel][i]) + ';');\n        var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n        var cssVaraiableName = getVariableName(title);\n        labelItem.text(labelItem.text().replace('--color-primary', cssVaraiableName));\n      }\n    } else {\n      for (var i = 0; i < colorChildren.length; i++) {\n        var cssVaraiableName = getVariableName(title);\n        var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n        labelItem.text(labelItem.text().replace('--color-primary', cssVaraiableName));\n      }\n    }\n\n    if (customLabel.indexOf('custom-fdb') > -1) {\n      colorsDemo.find('.js-cd-demo-gradient').before(newColor);\n    } else {\n      colorsDemo.find('.js-cd-demo-color--black').before(newColor);\n    }\n  }\n\n  ;\n\n  function updateCustomColor(section, title) {\n    var customColorBlock = colorsDemo.find('[data-section=\"' + section + '\"]').parents('.js-cd-demo-color--custom').eq(0),\n        colorChildren = customColorBlock.find('.js-cd-demo-color__preview'),\n        oldLabel = colorChildren.eq(2).siblings('.js-css-variable-label').text();\n    customColorBlock.find('.js-cd-demo-title').text(getCustomTitleColor(title));\n\n    for (var i = 0; i < colorChildren.length; i++) {\n      var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n      var cssVaraiableName = getVariableName(title);\n      labelItem.text(labelItem.text().replace(oldLabel, cssVaraiableName));\n    }\n  }\n\n  ;\n\n  function createCustomGradient(title, customLabel) {\n    createCustomGradientSection(title, customLabel, newGradientCustom[customLabel], true);\n    selectIframeSection('#gradient-' + customLabel);\n  }\n\n  ;\n\n  function createCustomGradientSection(title, customLabel, customValue, customize) {\n    var newColor = colorsDemo.children('.js-cd-demo-gradient').eq(0).clone().removeClass('is-hidden'),\n        titleEl = newColor.find('.js-cd-demo-title'),\n        preview = newColor.find('.js-cd-demo-color__preview'),\n        values = newColor.find('.js-demo-color__value'),\n        labels = newColor.find('.js-css-variable-label');\n    titleEl.text(getCustomTitleGradient(title));\n    values.eq(0).text(getHSL(customValue[0]));\n    values.eq(1).text(getHSL(customValue[1]));\n    labels.eq(0).text(getGradientVariable(title) + '-stop-1');\n    labels.eq(1).text(getGradientVariable(title) + '-stop-2');\n    newColor.find('.js-cd-demo-gradient__list').attr('data-section', '#gradient-' + customLabel);\n\n    if (!customize) {\n      newColor.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n    }\n\n    if (customize) {\n      preview.attr('style', 'background-image: linear-gradient(90deg, ' + getHSL(customValue[0]) + ', ' + getHSL(customValue[1]) + ');');\n    }\n\n    colorsDemo.find('.js-cd-demo-color--contrast').before(newColor);\n  }\n\n  ;\n\n  function updateCustomGradient(section, title) {\n    var customGradientBlock = colorsDemo.find('[data-section=\"' + section + '\"]').parents('.js-cd-demo-gradient').eq(0),\n        titleEl = customGradientBlock.find('.js-cd-demo-title'),\n        labels = customGradientBlock.find('.js-css-variable-label');\n    titleEl.text(getCustomTitleGradient(title));\n    labels.eq(0).text(getGradientVariable(title) + '-stop-1');\n    labels.eq(1).text(getGradientVariable(title) + '-stop-2');\n  }\n\n  ;\n\n  function getCustomTitleColor(title) {\n    title = title.replace('--color-', '').replace(/-/, ' ');\n    return 'Color ' + title.charAt(0).toUpperCase() + title.slice(1);\n  }\n\n  ;\n\n  function getCustomTitleGradient(title) {\n    title = title.replace('--gradient-', '').replace(/-/, ' ');\n    return 'Gradient ' + title.charAt(0).toUpperCase() + title.slice(1);\n  }\n\n  ;\n\n  function getGradientVariable(title) {\n    if (title.indexOf('--gradient') > -1) return title;\n    return '--gradient-' + title;\n  }\n\n  ;\n\n  function getVariableName(title) {\n    title = title.replace(/ /, '-');\n    if (title.indexOf('--') != 0) title = '--' + title;\n    return title;\n  }\n\n  ;\n\n  function updateAccessibleContrast() {\n    var bgLuminance = getLuminance(colorContrasts[0], iframeParent),\n        headingsLuminance = getLuminance(colorContrasts[5], iframeParent),\n        bodyLuminance = getLuminance(colorContrasts[4], iframeParent),\n        headingsContrast = bgLuminance > headingsLuminance ? (bgLuminance + 0.05) / (headingsLuminance + 0.05) : (headingsLuminance + 0.05) / (bgLuminance + 0.05),\n        bodyContrast = bgLuminance > bodyLuminance ? (bgLuminance + 0.05) / (bodyLuminance + 0.05) : (bodyLuminance + 0.05) / (bgLuminance + 0.05);\n    headingsContrast = parseFloat(headingsContrast).toFixed(2);\n    bodyContrast = parseFloat(bodyContrast).toFixed(2);\n    var headingsNote = getAccessibleContrastNote(headingsContrast),\n        bodyNote = getAccessibleContrastNote(bodyContrast);\n    if (accessibleContrastHeadings.length > 0) accessibleContrastHeadings[0].textContent = headingsNote;\n    if (accessibleContrastBody.length > 0) accessibleContrastBody[0].textContent = bodyNote;\n  }\n\n  ;\n\n  function getAccessibleContrastNote(value) {\n    var note = value >= 7 ? ' (AAA)' : ' (AA)';\n    if (value < 4.5) note = ' (low)';\n    return value + note;\n  }\n\n  ;\n})(); //buttons/forms default values\n\n\nvar spacingArray = ['', '0', 'var(--space-xxxxs)', 'var(--space-xxxs)', 'var(--space-xxs)', 'var(--space-xs)', 'var(--space-sm)', 'var(--space-md)', 'var(--space-lg)', 'var(--space-xl)', 'var(--space-xxl)', 'var(--space-xxxl)', 'var(--space-xxxxl)'],\n    textArray = ['', 'var(--text-xs)', 'var(--text-sm)', 'var(--text-md)', 'var(--text-lg)', 'var(--text-xl)', 'var(--text-xxl)', 'var(--text-xxxl)', 'var(--text-xxxxl)', 'inherit'],\n    textArrayValues = ['', 'var(--text-xs)', 'var(--text-sm)', 'var(--text-md)', 'var(--text-lg)', 'var(--text-xl)', 'var(--text-xxl)', 'var(--text-xxxl)', 'inherit', '', 'var(--text-xxxxl)'];\nfontArray = ['', '--font-primary'], btnFontIds = [0, 1], btnColorCustomNiceLabels = [], btnGradientsCustomNiceLabels = [], btnColorLabels = [\"primary\", \"accent\", \"download\", \"warning\", \"success\", \"error\", \"info\"], shadowVariables = ['', '', 'var(--shadow-xs)', 'var(--shadow-sm)', 'var(--shadow-md)', 'var(--shadow-lg)', 'var(--shadow-xl)'], borderRadiusValues = ['', 'var(--radius-sm)', 'var(--radius-md)', 'var(--radius-lg)'];\n\nfunction setBtnColorCustomNiceLabels(colors, customNice) {\n  if (colors) {\n    btnColorLabels = colors;\n  }\n\n  if (customNice) {\n    btnColorCustomNiceLabels = customNice;\n  }\n}\n\n;\n\nfunction setBtnGradientNiceLabels(gradients) {\n  if (gradients && gradients.length > 0) {\n    btnGradientsCustomNiceLabels = gradients;\n  }\n}\n\n;\n\nfunction decodeSafeURIComponent(string) {\n  return decodeURIComponent(string.replace(/%\"/g, '%25\"'));\n}\n\n;\n\nfunction getHSL(color) {\n  if (isNaN(color[0])) color[0] = 0;\n  return 'hsl(' + Math.round(color[0]) + ', ' + Math.round(color[1] * 100) + '%, ' + Math.round(color[2] * 100) + '%)';\n}\n\n;\n\nfunction setCssVariable(variable, value, priority) {\n  var root = document.documentElement;\n\n  if (priority) {\n    root.style.setProperty(variable, value, priority);\n  } else {\n    root.style.setProperty(variable, value);\n  }\n}\n\n;\n\nfunction windowScrollTo(val) {\n  window.scrollTo(0, val);\n}\n\n;\n\nfunction selectIframeSection(val) {\n  var section = $('[data-section=\"' + val + '\"]');\n  $('.cd-demo-item--selected').removeClass('cd-demo-item--selected');\n\n  if (section.length > 0) {\n    section.addClass('cd-demo-item--selected');\n\n    if ($('.cd-demo-color__list--selected').length > 0) {\n      $('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n      section.addClass('cd-demo-color__list--selected');\n    }\n\n    windowScrollTo(section.parent().offset().top - 20);\n  }\n}\n\n;\n\nfunction getMq() {\n  var windowWidth = $(window).outerWidth(),\n      mq = 0,\n      string = ''; // check if you can get external document width\n\n  if (window.parent && window.parent.document && window.parent.document.body && window.parent.document.body.clientWidth) {\n    windowWidth = window.parent.document.body.clientWidth;\n  }\n\n  switch (true) {\n    case windowWidth >= 1440:\n      mq = 5;\n      string = 'Visible mq: > 1440px';\n      break;\n\n    case windowWidth >= 1280:\n      mq = 4;\n      string = 'Visible mq: > 1280px';\n      break;\n\n    case windowWidth >= 1024:\n      mq = 3;\n      string = 'Visible mq: > 1024px';\n      break;\n\n    case windowWidth >= 600:\n      mq = 2;\n      string = 'Visible mq: > 600px';\n      break;\n\n    case windowWidth >= 480:\n      mq = 1;\n      string = 'Visible mq: > 480px';\n      break;\n\n    default:\n      mq = 0;\n      string = 'None';\n  }\n\n  $('.js-width').text(string);\n  return mq;\n}\n\n;\nvar projectLoaded = '';\nvar MQ = getMq();\n\nfunction loadGlobalsStyle(project) {\n  //for components -> load project style\n  if (project) {\n    $('.js-cd-demo').trigger('globalsUpdating');\n    projectLoaded = project;\n  }\n\n  setTimeout(function () {\n    axios({\n      url: '/admin/themes/dofus-default/config',\n      method: 'GET',\n      dataType: 'json'\n    }).then(function (response) {\n      getCOnfig = JSON.parse(response.data.split('<!DOCTYPE html>')[0]);\n      console.log(getCOnfig.color_themes_data);\n\n      if (getCOnfig.color_themes_data && getCOnfig.color_themes_data !== '') {\n        //colors were saved and need to be modified\n        loadColorStyle(JSON.parse(getCOnfig.color_themes_data));\n        console.log('toto');\n      } else {\n        loadColorDefaultStyle();\n        console.log('tata');\n      }\n    })[\"catch\"](function (error) {\n      console.log(error);\n    })[\"finally\"](function () {});\n  }, 200); //if you need to update style on resize\n\n  if (project) {\n    $('.js-cd-demo').trigger('globalsUpdate');\n  }\n\n  $('.js-cd-demo').trigger('showComponent');\n}\n\n;\n\nfunction loadColorStyle(colors) {\n  //no need to do this for custom opacities as only default one are used in components\n  var variations = ['-lighter', '-light', '', '-dark', '-darker'];\n  btnColorLabels = Object.values(colors['mainColorLabels']);\n  btnColorCustomNiceLabels = colors['customColorLabels'] ? Object.values(colors['customColorLabels']) : [];\n  btnGradientsCustomNiceLabels = colors['gradientColorLabels'] ? Object.values(colors['gradientColorLabels']) : []; //set main colors - including custom colors as well\n\n  for (var i = 0; i < btnColorLabels.length; i++) {\n    var cssVarLab = i > 4 ? btnColorCustomNiceLabels[i - 5] : '--color-' + btnColorLabels[i];\n\n    for (var j = 0; j < variations.length; j++) {\n      setCssVariable(cssVarLab + variations[j], getHSL(Object.values(colors[btnColorLabels[i]][0][j])));\n      setColorPartVariables(cssVarLab + variations[j], Object.values(colors[btnColorLabels[i]][0][j]));\n    }\n  } //set black & white\n\n\n  var bVariations = ['', '-light', '-lighter'],\n      blackArray = getBWArray(colors['blackColors'][0]),\n      whiteArray = getBWArray(colors['whiteColors'][0]);\n\n  for (var i = 0; i < blackArray.length; i++) {\n    setCssVariable('--color-black' + bVariations[i], getHSL(blackArray[i]));\n    setColorPartVariables('--color-black' + bVariations[i], blackArray[i]);\n  }\n\n  var wVariations = ['', '-dark', '-darker'];\n\n  for (var i = 0; i < whiteArray.length; i++) {\n    setCssVariable('--color-white' + wVariations[i], getHSL(whiteArray[i]));\n    setColorPartVariables('--color-white' + wVariations[i], whiteArray[i]);\n  } //set contrasts\n\n\n  var contrastLabels = ['-bg', '-contrast-lower', '-contrast-low', '-contrast-medium', '-contrast-high', '-contrast-higher'];\n\n  for (var i = 0; i < contrastLabels.length; i++) {\n    setCssVariable('--color' + contrastLabels[i], getHSL(Object.values(colors['contrastColors'][0][i])));\n    setColorPartVariables('--color' + contrastLabels[i], Object.values(colors['contrastColors'][0][i]));\n  } // set gradients\n\n\n  for (var i = 0; i < btnGradientsCustomNiceLabels.length; i++) {\n    var cssVarLab = '--gradient-' + btnGradientsCustomNiceLabels[i],\n        gradientId = colors['gradientColorIds'][i] + 'Gradients';\n    setCssVariable(cssVarLab + '-stop-1', getHSL(Object.values(colors[gradientId][0][0])));\n    setColorPartVariables(cssVarLab + '-stop-1', Object.values(colors[gradientId][0][0]));\n    setCssVariable(cssVarLab + '-stop-2', getHSL(Object.values(colors[gradientId][0][1])));\n    setColorPartVariables(cssVarLab + '-stop-2', Object.values(colors[gradientId][0][1]));\n  }\n}\n\n;\n\nfunction loadColorDefaultStyle() {\n  // colors array\n  var defaultColors = [['--color-primary-darker', [220, 0.9, 0.42]], ['--color-primary-dark', [220, 0.9, 0.49]], ['--color-primary', [220, 0.9, 0.56]], ['--color-primary-light', [220, 0.9, 0.63]], ['--color-primary-lighter', [220, 0.9, 0.70]], ['--color-accent-darker', [349, 0.75, 0.36]], ['--color-accent-dark', [349, 0.75, 0.44]], ['--color-accent', [349, 0.75, 0.51]], ['--color-accent-light', [349, 0.75, 0.59]], ['--color-accent-lighter', [349, 0.75, 0.67]], ['--color-download-darker', [349, 0.75, 0.36]], ['--color-download-dark', [349, 0.75, 0.44]], ['--color-download', [349, 0.75, 0.51]], ['--color-download-light', [349, 0.75, 0.59]], ['--color-download-lighter', [349, 0.75, 0.67]], ['--color-black', [240, 0.08, 0.12]], ['--color-white', [0, 0, 1]], ['--color-success-darker', [94, 0.48, 0.42]], ['--color-success-dark', [94, 0.48, 0.48]], ['--color-success', [94, 0.48, 0.56]], ['--color-success-light', [94, 0.48, 0.65]], ['--color-success-lighter', [94, 0.48, 0.74]], ['--color-error-darker', [349, 0.75, 0.36]], ['--color-error-dark', [349, 0.75, 0.44]], ['--color-error', [349, 0.75, 0.51]], ['--color-error-light', [349, 0.75, 0.59]], ['--color-error-lighter', [349, 0.75, 0.67]], ['--color-info-darker', [349, 0.75, 0.36]], ['--color-info-dark', [349, 0.75, 0.44]], ['--color-info', [349, 0.75, 0.51]], ['--color-info-light', [349, 0.75, 0.59]], ['--color-info-lighter', [349, 0.75, 0.67]], ['--color-warning-darker', [46, 1, 0.47]], ['--color-warning-dark', [46, 1, 0.50]], ['--color-warning', [46, 1, 0.61]], ['--color-warning-light', [46, 1, 0.71]], ['--color-warning-lighter', [46, 1, 0.80]], ['--color-bg', [0, 0, 1]], ['--color-contrast-lower', [0, 0, 0.95]], ['--color-contrast-low', [240, 0.01, 0.83]], ['--color-contrast-medium', [240, 0.01, 0.48]], ['--color-contrast-high', [240, 0.04, 0.2]], ['--color-contrast-higher', [240, 0.08, 0.12]]];\n\n  for (var i = 0; i < defaultColors.length; i++) {\n    setCssVariable(defaultColors[i][0], getHSL(defaultColors[i][1]));\n    setColorPartVariables(defaultColors[i][0], defaultColors[i][1]);\n  }\n}\n\n;\n\nfunction setColorPartVariables(label, colorArray) {\n  setCssVariable(label + '-h', Math.round(colorArray[0]));\n  setCssVariable(label + '-s', Math.round(colorArray[1] * 100) + '%');\n  setCssVariable(label + '-l', Math.round(colorArray[2] * 100) + '%');\n}\n\n;\n\nfunction getBWArray(obj) {\n  var array = [];\n\n  for (var property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      array.push(Object.values(obj[property]));\n    }\n  }\n\n  return array;\n}\n\n;\n\nfunction getLuminance(hsl, iframe) {\n  if (hsl[0] == 0 && hsl[1] == 0 && hsl[2] == 1) return 1; // white\n\n  if (hsl[0] == 0 && hsl[1] == 0 && hsl[2] == 0) return 0; // black\n\n  var rgbSr = getRGBsrValues(hsl, iframe);\n  return 0.2126 * rgbSr[0] + 0.7152 * rgbSr[1] + 0.0722 * rgbSr[2];\n}\n\n;\n\nfunction getRGBsrValues(value, iframe) {\n  var rgb = getRGBValues(value, iframe);\n  var rSr = rgb[0] <= 0.03928 ? rgb[0] / 12.92 : Math.pow((rgb[0] + 0.055) / 1.055, 2.4);\n  var gSr = rgb[1] <= 0.03928 ? rgb[1] / 12.92 : Math.pow((rgb[1] + 0.055) / 1.055, 2.4);\n  var bSr = rgb[2] <= 0.03928 ? rgb[2] / 12.92 : Math.pow((rgb[2] + 0.055) / 1.055, 2.4);\n  return [rSr, gSr, bSr];\n}\n\n;\n\nfunction getRGBValues(hsl, iframe) {\n  var rgb = getRGBfromHSL(hsl);\n  return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255];\n}\n\n; //select text of a contentEditable element\n\njQuery.fn.selectText = function () {\n  var doc = document;\n  var element = this[0];\n\n  if (doc.body.createTextRange) {\n    var range = document.body.createTextRange();\n    range.moveToElementText(element);\n    range.select();\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    var range = document.createRange();\n    range.selectNodeContents(element);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n};\n\n(function () {\n  var demoContainer = $('.js-cd-demo-container'),\n      demoViewport = $('.js-cd-demo-viewport-size'); //when double-clicking on variables -> select all text\n\n  demoContainer.on('dblclick', '.js-css-variable-label', function (event) {\n    $(event.currentTarget).selectText();\n  }); //detect click on iframe and send to main to close popups\n\n  var iframeParent = window.parent;\n\n  if (!iframeParent) {\n    iframeParent = parent;\n  }\n\n  if (iframeParent) {\n    $(window).on('click', function () {\n      if (iframeParent.closeActivePopups != null) iframeParent.closeActivePopups();\n    }); // detect shortcut for search modal\n\n    window.addEventListener('keydown', function (event) {\n      if (event.keyCode && event.keyCode == 69 || event.key && event.key.toLowerCase() == 'e') {\n        if (event.ctrlKey || event.metaKey) iframeParent.openSiteSearch();\n      }\n    });\n  } //detect resize of the page and reset iframe height\n\n\n  var resizing = false,\n      resizingID = false,\n      mqLabels = ['xs', 'sm', 'md', 'lg', 'xl'];\n\n  if (demoViewport.length > 0) {\n    window.addEventListener(\"resize\", function (event) {\n      if (!resizing) {\n        resizing = true;\n        window.requestAnimationFrame(updateLabelSizeWindow);\n      }\n    });\n  }\n\n  $('.js-cd-demo').on('globalsUpdate', function () {\n    updateComponentGlobals();\n  });\n  $('.js-cd-demo').on('showComponent', function () {\n    var compScript = $('#comp-script');\n\n    if (compScript) {\n      var newScript = compScript.clone();\n      newScript = compScript.attr('src', compScript.attr('data-src'));\n      newScript.removeAttr('data-src');\n      newScript.removeAttr('id');\n      newScript.insertBefore(compScript);\n    }\n\n    setTimeout(function () {\n      if (iframeParent) iframeParent.revealComponent();\n    }, 300);\n  });\n\n  function updateLabelSizeWindow() {\n    var mq = getMq(),\n        sizes = getScreenSize();\n\n    if (resizing) {\n      demoContainer.trigger('windowResizing');\n      var mqLabelText = mq > 0 ? ' (' + mqLabels[mq - 1] + ')' : '';\n      demoViewport.text(sizes[0] + 'px x ' + sizes[1] + 'px' + mqLabelText).show();\n      if (resizingID) clearInterval(resizingID);\n      resizingID = setTimeout(function () {\n        demoViewport.hide();\n      }, 1000);\n    }\n\n    resizing = false;\n  }\n\n  ;\n\n  function updateComponentGlobals() {\n    //components -> if there's a project set, we should listen for changes in the viewport width as well\n    //typography and spacing are the only responsive globals\n    if (projectLoaded && (projectLoaded.typography || projectLoaded.spacing)) {\n      window.addEventListener(\"resize\", function (event) {\n        if (!resizing) {\n          resizing = true;\n          window.requestAnimationFrame(updateGlobals);\n        }\n      });\n    }\n  }\n\n  ;\n\n  function updateGlobals() {\n    var mq = getMq();\n\n    if (mq == MQ) {\n      resizing = false;\n      return;\n    }\n\n    MQ = mq;\n\n    if (projectLoaded.typography && projectLoaded.typography !== '') {\n      //typography was saved and need to be modified\n      loadTypographyStyle(JSON.parse(decodeSafeURIComponent(projectLoaded.typography)), false, mq);\n    }\n\n    if (projectLoaded.spacing && projectLoaded.spacing !== '') {\n      //typography was saved and need to be modified\n      loadSpacingStyle(JSON.parse(decodeSafeURIComponent(projectLoaded.spacing)), mq);\n    }\n\n    resizing = false;\n  }\n\n  ;\n  loadedIframeCheck = true;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/change-color.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/change-color.js"]();
/******/ 	
/******/ })()
;