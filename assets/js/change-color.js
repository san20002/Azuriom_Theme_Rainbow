/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/change-color.js":
/*!****************************!*\
  !*** ./js/change-color.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var json = __webpack_require__(/*! ./color.json */ \"./js/color.json\");\n\nwindow.addEventListener(\"DOMContentLoaded\", function (event) {\n  \"use strict\";\n\n  console.log('DOM ADMIN CHARGER');\n  /**********************\n   Input Color component\n   ***********************/\n\n  console.log('toto');\n  console.log('toto');\n});\n/**********************\n Input Color component\n ***********************/\n\n(function () {\n  this.ColorInput = function (element) {\n    this.element = element;\n    this.inputColorHex = $(this.element).find('.js-app-color-picker__hex').find('input');\n    this.inputPreview = $(this.element).find('.js-app-color-picker__color');\n    this.inputColor = this.inputPreview.find('input');\n    this.inputColorSupported = inputColorSupported();\n    this.appColorSidebar = $(this.element).parents('.js-app-sidebar--globals');\n    this.hexValue = this.inputColorHex.val();\n    this.initColorInput();\n  };\n\n  ColorInput.prototype.initColorInput = function () {\n    var self = this; //hide/show element\n\n    this.inputColor.toggle(this.inputColorSupported); //listen to events\n    //color input - change\n\n    this.inputColor.on(\"input\", function (event) {\n      self.updateColor(event.target.value, true, true);\n    });\n    this.inputColor.on(\"change\", function (event) {\n      self.updateColor(event.target.value, true, true);\n    }); // text input - change -> hex\n\n    this.inputColorHex.on('focusout', function () {\n      if (self.hexValue == self.inputColorHex.val()) return;\n      self.updateColor($(this).val(), false, true);\n    });\n    this.inputColorHex.on('keyup', function (event) {\n      if (event.key === \"Enter\" && self.hexValue != self.inputColorHex.val()) {\n        self.updateColor($(this).val(), false, true);\n      }\n    });\n    $(this.element).on('update-picker', function (event, value) {\n      self.updateColor(chroma.hsl(value).hex(), false, false);\n    }); //this is triggered only by the contrast section in the colors global\n\n    $(this.element).on('update-contrast-picker', function (event, value1, value2) {\n      if ($(self.element).parents('.js-app-editor-section__bg-color-picker').length > 0) {\n        self.updateColor(chroma.hsl(value1).hex(), false, false);\n      } else if ($(self.element).parents('.js-app-editor-section__hc-color-picker').length > 0) {\n        self.updateColor(chroma.hsl(value2).hex(), false, false);\n      }\n    });\n  };\n\n  ColorInput.prototype.updateColor = function (color, bool, emitEvent) {\n    //first -> make sure no ; are inserted\n    color = color.replace(';', '');\n    var self = this;\n\n    if (color.indexOf('(') < 0 && color.indexOf('#') < 0) {\n      this.inputPreview.css('background-color', '#' + color);\n    } else {\n      this.inputPreview.css('background-color', color);\n    }\n\n    this.inputColorHex.val(color);\n    this.hexValue = color; //need to update the color preview next to the input element\n\n    if (!bool) {\n      this.inputColor.val(chroma(color).hex());\n    }\n\n    if (emitEvent && this.appColorSidebar.length > 0) {\n      this.appColorSidebar.trigger('color-picker-updated', [getHslFromHex(color), $(self.element)]);\n    }\n  };\n\n  function inputColorSupported() {\n    var colorInput = $('<input type=\"color\" value=\"!\" />')[0];\n    return colorInput.type === 'color' && colorInput.value !== '!';\n  }\n\n  ; //initialize the Modal objects\n\n  var colorInputs = document.getElementsByClassName('js-color-picker');\n\n  if (colorInputs.length > 0) {\n    for (var i = 0; i < colorInputs.length; i++) {\n      (function (i) {\n        new ColorInput(colorInputs[i]);\n      })(i);\n    }\n  }\n})();\n/**********************\n Input Slider component\n ***********************/\n\n\n(function () {\n  this.InputSlider = function (element) {\n    this.element = element;\n    this.rangeInput = this.element.children('input');\n    this.textInput = this.element.siblings('.js-slider-control__text');\n    this.initSlider();\n  };\n\n  InputSlider.prototype.initSlider = function () {\n    var self = this; //init slider\n\n    this.setSlider();\n    this.textInput.on('input reset-slider', function (event) {\n      self.setSlider();\n    });\n    this.rangeInput.on('input', function (event) {\n      self.textInput.val(self.rangeInput.val() + '%');\n      self.textInput.trigger('input');\n    });\n  };\n\n  InputSlider.prototype.setSlider = function () {\n    this.rangeInput.val(parseInt(this.textInput.val())); // update slider background\n\n    var fill = parseInt(this.rangeInput.val()),\n        empty = 100 - fill;\n    this.element.get(0).style.setProperty('--slider-fill-value', fill + '%');\n    this.element.get(0).style.setProperty('--slider-empty-value', empty + '%');\n  }; //initialize the Modal objects\n\n\n  var inputSlider = document.getElementsByClassName('js-slider-control__input');\n\n  if (inputSlider.length > 0) {\n    for (var i = 0; i < inputSlider.length; i++) {\n      (function (i) {\n        new InputSlider($(inputSlider[i]));\n      })(i);\n    }\n  }\n})();\n/**********************\n iOS banner\n ***********************/\n\n\n(function () {\n  var iosBanner = $('.js-ios-pivot');\n\n  if (iosBanner.length > 0) {\n    if (!!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform)) iosBanner.removeClass('ios-pivot--is-hidden');\n  }\n})(); //here define the functions that need to be used inside the app frame\n\n\nfunction checkPercentage(val) {\n  val = Number(val);\n  if (val < 0) val = 0;\n  if (val > 1) val = 1;\n  return Number(val.toFixed(2));\n}\n\n;\n\nfunction checkHue(hue) {\n  if (isNaN(hue)) hue = 0;\n  return Math.round(parseFloat(hue));\n}\n\n;\n\nfunction getHslFromHex(hex) {\n  if (hex.indexOf('hsl(') > -1) {\n    //format is already hsl(, , )\n    return getHslFromHslString(hex);\n  }\n\n  var color = chroma(hex).hsl();\n  if (isNaN(color[0])) color[0] = 0;\n  color[0] = Math.round(color[0]);\n  color[1] = Number(Math.round(color[1] * 100) / 100);\n  color[2] = Number(Math.round(color[2] * 100) / 100);\n  return color;\n}\n\n;\n\nfunction getHslFromHslString(hex) {\n  var color = hex.replace('hsl(', '').replace(')', '').split(',');\n  color[0] = Number(color[0].trim());\n  color[1] = parseFloat((Number(color[1].trim().replace('%', '')) / 100).toFixed(2));\n  color[2] = parseFloat((Number(color[2].trim().replace('%', '')) / 100).toFixed(2));\n  return color;\n}\n\n;\n\nfunction getHexFromHsl(hsl) {\n  return chroma.hsl(hsl[0], hsl[1], hsl[2]).hex();\n}\n\n;\n\nfunction convertStringToHsl(string) {\n  string = Number(string.replace('%', ''));\n  return Number((string / 100).toFixed(2));\n}\n\n;\n\nfunction selectSidebarSection(target) {\n  $('.js-app-content__group').trigger('selectSection', [target]);\n}\n\n;\n\nfunction triggerSectionSelection(target) {\n  window.frames[0].selectIframeSection(target);\n}\n\n;\n\nfunction triggerTabSelection(tab) {\n  window.frames[0].selectIframeTab(tab);\n}\n\n;\n\nfunction closeActivePopups() {\n  var colorSelection = $('.js-app-menu--color'),\n      appMenu = $('.js-app-header-menu-toggle');\n  if (colorSelection.length > 0) colorSelection.trigger('close-color-selection');\n  if (appMenu.length > 0) appMenu.trigger('close-app-menu-popup');\n}\n\n;\n\nfunction revealComponent() {\n  var appCanvas = $('.js-app-canvas');\n  appCanvas.find('iframe').addClass('app-canvas__iframe--content-is-loaded').end().find('.js-app-canvas__loader').remove();\n\n  if (appCanvas.hasClass('js-app-canvas--component')) {\n    console.log(\"%cHi there! 👋 This page is for demo purposes only. We have minified HTML, CSS and JavaScript and shortened class names. Make sure to access the component code using the \\\"View code\\\" button.\", \"font-size:14px\");\n    console.log(\"%cAny doubts, get in touch at help@codyhouse.co\", \"font-size:12px\");\n  }\n}\n\n;\n\nfunction getRGBfromHSL(hsl) {\n  return chroma.hsl(hsl).rgb();\n}\n\n;\n\nfunction toggleColorLink(colorSection, bool) {\n  $('.js-app-sidebar-editor--colors').trigger('updateColorLink', [colorSection, bool]);\n}\n\n;\n\n(function () {\n  /************************/\n\n  /* \tcolor selection popup */\n\n  /************************/\n  this.ColorSelection = function (element) {\n    this.element = element;\n    this.basicSwatches = $(this.element).find('.js-app-menu__color-swatches');\n    this.variationsSwatches = $(this.element).find('.js-app-menu__color-variations');\n    this.stateA = $(this.element).find('.js-app-menu__state-a');\n    this.stateB = $(this.element).find('.js-app-menu__state-b');\n    this.stateBCustomOpacity = this.stateB.find('.js-app-menu__color-custom-opacity');\n    this.customOpacityInput = this.stateBCustomOpacity.find('input');\n    this.primaryColors = []; //this is an array of 5 colors\n\n    this.accentColors = []; //this is an array of 5 colors\n\n    this.blackColors = []; //this is a color string\n\n    this.whiteColors = []; //this is a color string\n\n    this.contrastColors = []; //this is an array of 5 elements\n\n    this.warningColors = []; //this is an array of 5 elements\n\n    this.successColors = []; //this is an array of 5 elements\n\n    this.errorColors = []; //this is an array of 5 elements\n\n    this.opacities = [];\n    this.colorGroups = $('.js-app-editor-property__color-group'); //some default states\n\n    this.mainColorLabels = ['primary', 'accent', 'success', 'warning', 'error'];\n    this.mainColorVariationLabel = ['-lighter', '-light', '', '-dark', '-darker'];\n    this.customColorLabels = [];\n    this.contrastColorVariationLabel = ['-bg', '-contrast-lower', '-contrast-low', '-contrast-medium', '-contrast-high', '-contrast-higher'];\n    this.contrastVariations = getColorContrastPercentages();\n    this.gradientColorLabels = []; // this will have 'primary', 'secondary'\n\n    this.gradientColorIds = []; // this will have 'custom-0', 'custom-1'\n    // gradient sections\n\n    this.gradients = $(this.element).find('.js-app-menu__color-item--gradients');\n    this.gradientSwatches = this.gradients.find('.js-app-menu__color-swatch');\n    this.colorValues = []; //I'm going to pass this to the buttons object -> list of color values\n\n    this.loadPreset();\n    this.eventListener();\n  };\n\n  ColorSelection.prototype.loadPreset = function () {\n    //you should load this from the db\n    //for now just static\n    if (PROJECT && PROJECT.colors) {\n      this.initColorsFromProject();\n    } else {\n      this.initColors();\n    }\n\n    this.initColorValues();\n    this.initUiColors();\n  };\n\n  ColorSelection.prototype.initColors = function () {\n    this.primaryColors = getDefaultMainColorVariation('primary');\n    this.accentColors = getDefaultMainColorVariation('accent');\n    this.warningColors = getDefaultMainColorVariation('warning');\n    this.successColors = getDefaultMainColorVariation('success');\n    this.errorColors = getDefaultMainColorVariation('error');\n    this.blackColors = [getHslFromHex('#1c1c21')];\n    this.whiteColors = [getHslFromHex('#ffffff')];\n    this.contrastColors = getContrastVariation('#ffffff', '#1c1c21', this.contrastVariations);\n  };\n\n  ColorSelection.prototype.initColorsFromProject = function () {\n    var colors = JSON.parse(PROJECT.colors);\n    this.mainColorLabels = Object.values(colors['mainColorLabels']);\n    if (colors['customColorLabels']) this.customColorLabels = Object.values(colors['customColorLabels']);\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      var obj = colors[this.mainColorLabels[i]];\n      if (!this[this.mainColorLabels[i] + 'Colors']) this[this.mainColorLabels[i] + 'Colors'] = [];\n\n      for (var j = 0; j < 5; j++) {\n        this[this.mainColorLabels[i] + 'Colors'].push(Object.values(obj[0][j]));\n      }\n    }\n\n    for (var i = 0; i < 3; i++) {\n      if (colors['blackColors'][0][i]) this.blackColors.push(Object.values(colors['blackColors'][0][i]));\n      if (colors['whiteColors'][0][i]) this.whiteColors.push(Object.values(colors['whiteColors'][0][i]));\n    }\n\n    for (var i = 0; i < 6; i++) {\n      this.contrastColors.push(Object.values(colors['contrastColors'][0][i]));\n    } // init gradient colors\n\n\n    if (colors['gradientColorLabels']) this.gradientColorLabels = Object.values(colors['gradientColorLabels']);\n    if (colors['gradientColorIds']) this.gradientColorIds = Object.values(colors['gradientColorIds']);\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      var obj = colors[this.gradientColorIds[i] + 'Gradients'];\n      this[this.gradientColorIds[i] + 'Gradients'] = [];\n\n      for (var j = 0; j < 2; j++) {\n        this[this.gradientColorIds[i] + 'Gradients'].push(Object.values(obj[0][j]));\n      }\n    }\n  };\n\n  ColorSelection.prototype.initColorValues = function () {\n    this.colorValues['not-specified'] = '';\n    this.colorValues['transparent'] = 'transparent';\n    this.colorValues['inherit'] = 'inherit'; //main + custom colors\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      for (var j = 0; j < this.mainColorVariationLabel.length; j++) {\n        this.colorValues['--color-' + this.mainColorLabels[i] + this.mainColorVariationLabel[j]] = getHslaFromHsl(this[this.mainColorLabels[i] + 'Colors'][j], 1);\n      }\n    } //black\n\n\n    for (var i = 0; i < this.blackColors.length; i++) {\n      this.colorValues['--color-black' + this.mainColorVariationLabel[2 - i]] = getHslaFromHsl(this.blackColors[i], 1);\n    } //white\n\n\n    for (var i = 0; i < this.whiteColors.length; i++) {\n      this.colorValues['--color-white' + this.mainColorVariationLabel[2 + i]] = getHslaFromHsl(this.whiteColors[i], 1);\n    } //contrasts\n\n\n    for (var i = 0; i < this.contrastColorVariationLabel.length; i++) {\n      this.colorValues['--color' + this.contrastColorVariationLabel[i]] = getHslaFromHsl(this.contrastColors[i], 1);\n    } // gradients\n\n\n    for (var i = 0; i < this.gradientColorLabels.length; i++) {\n      this.colorValues['--gradient-' + this.gradientColorLabels[i] + '-stop-1'] = getHslaFromHsl(this[this.gradientColorIds[i] + 'Gradients'][0], 1);\n      this.colorValues['--gradient-' + this.gradientColorLabels[i] + '-stop-2'] = getHslaFromHsl(this[this.gradientColorIds[i] + 'Gradients'][1], 1);\n    }\n  };\n\n  ColorSelection.prototype.initUiColors = function () {\n    this.initMainSwatches();\n    this.initBWSwatches();\n    this.initContrastSwatches();\n    this.initGradientSwatches();\n  };\n\n  ColorSelection.prototype.initMainSwatches = function () {\n    var mainSwatch = this.basicSwatches.filter('[data-colors=\"main\"]'),\n        children = mainSwatch.children('li');\n\n    for (var i = 0; i < 2; i++) {\n      children.eq(i).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + this.mainColorLabels[i]] + ';').attr('data-item', '--color-' + this.mainColorLabels[i]);\n    }\n\n    var clonesText = this.initCustomColorSwatches(children.eq(0), false);\n    mainSwatch.append(clonesText);\n    var feedbackSwatch = this.basicSwatches.filter('[data-colors=\"feedback\"]'),\n        children = feedbackSwatch.children('li');\n\n    for (var i = 0; i < 3; i++) {\n      var j = 2;\n      if (this.mainColorLabels[i + 2] == 'success') j = 0;\n      if (this.mainColorLabels[i + 2] == 'warning') j = 1;\n      children.eq(j).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + this.mainColorLabels[i + 2]] + ';').attr('data-item', '--color-' + this.mainColorLabels[i + 2]);\n    }\n\n    var feedbackCloneText = this.initCustomColorSwatches(children.eq(0), true);\n    feedbackSwatch.append(feedbackCloneText);\n  };\n\n  ColorSelection.prototype.initCustomColorSwatches = function (item, isFeedback) {\n    var clonesText = '';\n\n    if (this.mainColorLabels.length > 5) {\n      var clone = item.clone().removeClass('app-menu__color-preview--selected');\n\n      for (var i = 5; i < this.mainColorLabels.length; i++) {\n        if (isFeedback && this.mainColorLabels[i].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[i].indexOf('custom-fdb') < 0) {\n          clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + this.mainColorLabels[i]] + ';').attr('data-item', '--color-' + this.mainColorLabels[i]);\n          clone.children('.js-app-menu__color-tooltip').text(this.customColorLabels[i - 5]);\n          clonesText = clonesText + clone[0].outerHTML;\n        }\n      }\n    }\n\n    return clonesText;\n  };\n\n  ColorSelection.prototype.initBWSwatches = function () {\n    var bwSwatch = this.basicSwatches.filter('[data-colors=\"b&w\"]'),\n        children = bwSwatch.children('li');\n    children.eq(0).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-black'] + ';').attr('data-item', '--color-black');\n    children.eq(1).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-white'] + ';').attr('data-item', '--color-white');\n  };\n\n  ColorSelection.prototype.initContrastSwatches = function () {\n    var contrastSwatch = this.basicSwatches.filter('[data-colors=\"contrast\"]'),\n        children = contrastSwatch.children('li');\n\n    for (var i = 0; i < this.contrastColorVariationLabel.length; i++) {\n      children.eq(i).children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color' + this.contrastColorVariationLabel[i]] + ';').attr('data-item', '--color' + this.contrastColorVariationLabel[i]);\n    }\n  };\n\n  ColorSelection.prototype.initGradientSwatches = function () {\n    var html = '';\n\n    for (var i = 0; i < this.gradientColorLabels.length; i++) {\n      for (var j = 0; j < 2; j++) {\n        var direction = j == 0 ? 'right' : 'bottom';\n        var swatch = this.gradientSwatches.eq(j).clone().removeClass('is-hidden');\n        swatch.find('.js-app-menu__color-tooltip').text('--gradient-' + this.gradientColorLabels[i] + ' (' + direction + ')');\n        swatch.find('.js-app-menu__color-preview').attr('style', getGradientsBgColor(this.gradientColorLabels[i], this.colorValues, j)).attr('data-item', '--gradient-' + this.gradientColorLabels[i] + '-' + direction);\n        html = html + swatch[0].outerHTML;\n      }\n    }\n\n    this.gradients.find('.js-app-menu__color-swatches').html(html);\n  };\n\n  ColorSelection.prototype.eventListener = function () {\n    var self = this; //listen to click on color-preview -> also need to show correct color selection\n\n    $(self.element).on('open-color-selector', function (event, target) {\n      // toggle gradients visibility\n      self.gradients.toggleClass('is-hidden', !(target.hasClass('js-app-editor-color-preview--bg') && self.gradientColorLabels.length > 0));\n\n      if (!$(self.element).hasClass('app-menu--is-hidden')) {// self.checkOpacity(false); //click on input when another one was open\n      }\n\n      var top = target.offset().top + 30;\n      if (top + 300 > $(window).height()) top = $(window).height() - 300;\n      $(self.element).removeClass('app-menu--is-hidden').css('top', top);\n      self.selectInitialColor(target.attr('style').replace('background-color', '').replace(';', '').replace(':', '').trim(), target);\n    }); //switch from state b to state a\n\n    self.stateB.on('click', '.js-app-menu', function (event) {\n      $(self.element).removeClass('app-menu--state-b');\n    }); //listen to selection of color in popup - state a\n\n    self.stateA.on('click', '.js-app-menu__color-preview', function (event) {\n      var isSelected = $(event.target).hasClass('app-menu__color-preview--selected');\n      self.clickOnColorSectionA($(event.target), isSelected, isSelected);\n    }); //listen to selection of color in popup - state b - variations\n\n    self.variationsSwatches.on('click', '.js-app-menu__color-preview', function (event) {\n      self.selectNewColor($(event.target), $(event.target).hasClass('app-menu__color-preview--selected'), true);\n    }); //listen to focusout -> close popup\n\n    $(self.element).on('close-color-selection', function (event) {\n      // \t//check if opacity need to be added\n      if ($(self.element).hasClass('app-menu--is-hidden')) return;\n      $(self.element).addClass('app-menu--is-hidden'); // \tself.checkOpacity(false);\n    }); //listen to new opacity included - keydown to update bg/enter to add dot\n\n    checkEndTyping(self.customOpacityInput, function () {\n      // var percentage = parseInt(self.customOpacityInput.val().replace('%', '')),\n      // \topacityLabel = getOpacitySuffix(percentage),\n      var opacityLabel = self.getOpInputForSelection(),\n          mainColorLabel = self.stateB.find('.app-menu__color-preview--selected').attr('data-item'),\n          mainColor = mainColorLabel + opacityLabel;\n      var cssVariable = mainColor;\n\n      if (mainColorLabel.indexOf('custom-') > -1) {\n        cssVariable = self.stateB.find('.app-menu__color-preview--selected').next('.js-app-menu__color-tooltip').text() + opacityLabel;\n      } // $('.js-app-sidebar-editor--buttons').trigger('new-opacity-created', [cssVariable, getNewOpacity(self.colorValues[mainColorLabel], percentage)]);\n\n\n      $('.js-app-sidebar-editor--buttons').trigger('new-color-selection', [mainColor, true]);\n    });\n    this.customOpacityInput.on('focusout', function () {\n      var opacityValue = self.customOpacityInput.val(),\n          resetOpacity = getPercentageFormat(opacityValue);\n      if (opacityValue != resetOpacity) self.customOpacityInput.val(resetOpacity);\n    });\n  }; //click on preview in stata a of popup, used when loading initial color as well\n\n\n  ColorSelection.prototype.clickOnColorSectionA = function (target, isSelected, isStateBSet) {\n    var section = target.parents('.js-app-menu__color-swatches').eq(0).attr('data-colors');\n    this.stateA.find('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');\n    target.addClass('app-menu__color-preview--selected');\n\n    if (!isSelected) {\n      // need to get opacity values as well\n      var opacity = this.getOpInputForSelection();\n      var color = target.attr('data-item');\n      if (color.indexOf('--gradient-') > -1) opacity = '';\n      this.sendColorSelection(color + opacity);\n    }\n\n    if (section == \"default\" || section == \"gradients\") {\n      $(this.element).removeClass('app-menu--state-b');\n      this.stateB.find('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');\n      return;\n    }\n\n    $(this.element).addClass('app-menu--state-b');\n    this.showStateB(target, section, isStateBSet);\n  };\n\n  ColorSelection.prototype.selectNewColor = function (target, isSelcted, sendColorSelection) {\n    if (isSelcted) return;\n    target.addClass('app-menu__color-preview--selected').parent().siblings().children('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');\n\n    if (sendColorSelection) {\n      var opacity = this.getOpInputForSelection();\n      var color = target.attr('data-item');\n      if (color.indexOf('--gradient-') > -1) opacity = '';\n      this.sendColorSelection(color + opacity);\n    }\n  };\n\n  ColorSelection.prototype.getOpInputForSelection = function () {\n    return getOpInputForSelection(this.customOpacityInput.val());\n  };\n\n  ColorSelection.prototype.selectInitialColor = function (color, target) {\n    var states = [false, false, false],\n        stateAColor,\n        stateBColor = false,\n        stateCColor = false;\n\n    if (color == 'undefined') {\n      stateAColor = this.stateA.find('.js-app-menu__color-preview').eq(0);\n    } else {\n      var colorName = target.attr('data-color-lb').split('-');\n      states = this.getAllStatesColor(colorName);\n      stateAColor = this.stateA.find('[data-item=\"' + states[0] + '\"]');\n    }\n\n    this.clickOnColorSectionA(stateAColor, true, false);\n    stateBColor = states[1] ? this.stateB.find('[data-item=\"' + states[1] + '\"]') : false; //trigger click on stateBcolor -> without sending update color\n\n    if (stateBColor) this.selectNewColor(stateBColor, false, false); //select opacity element\n\n    states[2] ? this.customOpacityInput.val(states[2].slice(-2) + '%') : this.customOpacityInput.val('100%');\n  };\n\n  ColorSelection.prototype.getAllStatesColor = function (color) {\n    var itemAName, itemBName, itemCName;\n\n    if (color[2] && color[2] == 'gradient') {\n      itemAName = '--gradient-' + color[3] + '-' + color[4];\n      return [itemAName, false, false];\n    }\n\n    if (color[3] && (color[3] == 'black' || color[3] == 'white')) {\n      itemAName = '--color-' + color[3];\n      nextItems = this.getStateBCColor(itemAName, color, 4);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && (color[3] == 'primary' || color[3] == 'accent' || color[3] == 'success' || color[3] == 'error' || color[3] == 'warning')) {\n      itemAName = '--color-' + color[3];\n      nextItems = this.getStateBCColor(itemAName, color, 4);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && color[3] == 'custom' && color[4] == 'fdb') {\n      itemAName = '--color-' + color[3] + '-' + color[4] + '-' + color[5];\n      nextItems = this.getStateBCColor(itemAName, color, 6);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && color[3] == 'custom') {\n      itemAName = '--color-' + color[3] + '-' + color[4];\n      nextItems = this.getStateBCColor(itemAName, color, 5);\n      itemBName = nextItems[0];\n      itemCName = nextItems[1];\n    } else if (color[3] && color[3] == 'bg') {\n      itemAName = '--color-bg';\n      itemBName = itemAName;\n      itemCName = color[4] ? itemBName + '-' + color[4] : false;\n    } else if (color[3] && color[3] == 'contrast') {\n      itemAName = '--color-' + color[3] + '-' + color[4];\n      itemBName = itemAName;\n      itemCName = color[5] ? itemBName + '-' + color[5] : false;\n    } else {\n      itemAName = color[0];\n    }\n\n    return [itemAName, itemBName, itemCName];\n  };\n\n  ColorSelection.prototype.getStateBCColor = function (itemAName, color, index) {\n    var itemBName, itemCName;\n\n    if (color[index] && (color[index] == 'light' || color[index] == 'lighter' || color[index] == 'dark' || color[index] == 'darker')) {\n      itemBName = itemAName + '-' + color[index];\n      itemCName = color[index + 1] ? itemBName + '-' + color[index + 1] : false;\n    } else {\n      itemBName = itemAName;\n      itemCName = color[index] ? itemBName + '-' + color[index] : false;\n    }\n\n    return [itemBName, itemCName];\n  };\n\n  ColorSelection.prototype.sendColorSelection = function (label) {\n    var sidebar = $('.js-app-sidebar-editor--buttons');\n\n    if (sidebar.length == 0) {\n      sidebar = $('.js-app-sidebar-editor--shared-styles');\n    }\n\n    sidebar.trigger('new-color-selection', [label, true]);\n  };\n\n  ColorSelection.prototype.showStateB = function (target, section, selected) {\n    var self = this;\n    if (selected) return;\n    var label = target.next().text();\n\n    switch (section) {\n      case 'main':\n        self.getVariationsMain(label, target.attr('data-item'));\n        break;\n\n      case 'b&w':\n        self.getVariationsBW(label);\n        break;\n\n      case 'contrast':\n        self.getVariationsContrast(label);\n        break;\n\n      default:\n        self.getVariationsMain(label, target.attr('data-item'));\n    }\n  };\n\n  ColorSelection.prototype.getVariationsMain = function (label, item) {\n    var value = item.replace('--color-', ''); //custom color\n\n    var clone = this.variationsSwatches.children('li').eq(0).clone(),\n        textClones = '';\n    clone.removeClass('app-menu__color-preview--selected').children('.js-app-menu__color-preview');\n\n    for (var i = 0; i < this.mainColorVariationLabel.length; i++) {\n      clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-' + value + this.mainColorVariationLabel[i]] + ';').attr('data-item', '--color-' + value + this.mainColorVariationLabel[i]).toggleClass('app-menu__color-preview--selected', i == 2);\n      clone.children('.js-app-menu__color-tooltip').text(label + this.mainColorVariationLabel[i]);\n      textClones = textClones + clone[0].outerHTML;\n    }\n\n    this.variationsSwatches.html(textClones);\n  };\n\n  ColorSelection.prototype.getVariationsBW = function (label) {\n    var clone = this.variationsSwatches.children('li').eq(0).clone(),\n        textClones = '';\n    clone.removeClass('app-menu__color-preview--selected').children('.js-app-menu__color-preview');\n\n    if (label == '--color-black') {\n      for (var i = 0; i < this.blackColors.length; i++) {\n        clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-black' + this.mainColorVariationLabel[2 - i]] + ';').attr('data-item', '--color-black' + this.mainColorVariationLabel[2 - i]).toggleClass('app-menu__color-preview--selected', i == 0);\n        clone.children('.js-app-menu__color-tooltip').text('--color-black' + this.mainColorVariationLabel[2 - i]);\n        textClones = textClones + clone[0].outerHTML;\n      }\n    } else {\n      for (var i = 0; i < this.whiteColors.length; i++) {\n        clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues['--color-white' + this.mainColorVariationLabel[2 + i]] + ';').attr('data-item', '--color-white' + this.mainColorVariationLabel[2 + i]).toggleClass('app-menu__color-preview--selected', i == 0);\n        clone.children('.js-app-menu__color-tooltip').text('--color-white' + this.mainColorVariationLabel[2 + i]);\n        textClones = textClones + clone[0].outerHTML;\n      }\n    }\n\n    this.variationsSwatches.html(textClones);\n  };\n\n  ColorSelection.prototype.getVariationsContrast = function (label) {\n    var clone = this.variationsSwatches.children('li').eq(0).clone();\n    clone.children('.js-app-menu__color-preview');\n    clone.children('.js-app-menu__color-preview').attr('style', 'background-color:' + this.colorValues[label] + ';').attr('data-item', label).addClass('app-menu__color-preview--selected');\n    clone.children('.js-app-menu__color-tooltip').text(label);\n    this.variationsSwatches.html(clone[0].outerHTML);\n  };\n\n  function getHslaFromHsl(hsl, opacity) {\n    return 'hsla(' + parseInt(hsl[0]) + ', ' + parseInt(hsl[1] * 100) + '%, ' + parseInt(hsl[2] * 100) + '%, ' + opacity + ')';\n  }\n\n  ;\n\n  function getNewOpacity(value, opacity) {\n    if (value) {\n      return value.replace('1)', (opacity / 100).toFixed(2) + ')');\n    }\n\n    return value;\n  }\n\n  ;\n\n  function sortNumber(a, b) {\n    return a - b;\n  }\n\n  ;\n\n  function checkEndTyping(input, cb) {\n    var typingTimer; //timer identifier\n\n    var doneTypingInterval = 400; //time in ms, 5 second for example\n    //on keyup, start the countdown\n\n    input.on('keyup', function () {\n      clearTimeout(typingTimer);\n      typingTimer = setTimeout(cb, doneTypingInterval);\n    }); //on keydown, clear the countdown\n\n    input.on('keydown', function () {\n      clearTimeout(typingTimer);\n    });\n  }\n\n  ;\n\n  function getOpInputForSelection(val) {\n    var opacity = '';\n    if (isNaN(parseInt(val))) return '';\n    if (parseInt(val) > 100) return '';\n    if (parseInt(val) != 100) opacity = '-a' + ('0' + val.replace('%', '')).slice(-2);\n    return opacity;\n  }\n\n  ;\n\n  function getGradientsBgColor(label, colorValues, direction) {\n    // label e.g. primary\n    // direction -> 0 right, 1 bottom\n    var angle = direction == 0 ? '90deg' : '180deg';\n    return 'background-image: linear-gradient(' + angle + ', ' + colorValues[\"--gradient-\" + label + \"-stop-1\"] + ', ' + colorValues[\"--gradient-\" + label + \"-stop-2\"] + ');';\n  }\n\n  ;\n  var colorSelection = document.getElementsByClassName('js-app-menu--color'),\n      colorSelectionObject;\n\n  if (colorSelection.length > 0) {\n    colorSelectionObject = new ColorSelection(colorSelection[0]);\n  }\n\n  function getPercentageFormat(value) {\n    var newVal = value;\n    if (isNaN(parseInt(newVal))) newVal = '100%';\n    if (parseInt(newVal) > 100) newVal = '100%';\n    if (newVal.indexOf('%') < 0) newVal = newVal + '%';\n    return newVal;\n  }\n\n  ;\n  /************************/\n\n  /* \tColors Interactions */\n\n  /************************/\n\n  this.Colors = function (element, bool) {\n    this.element = element; //set starting point\n\n    this.primaryColors = []; //this is an array of 5 colors\n\n    this.accentColors = []; //this is an array of 5 colors\n\n    this.blackColors = []; //this is a color string\n\n    this.whiteColors = []; //this is a color string\n\n    this.contrastColors = []; //this is an array of 5 elements\n\n    this.contrastPecentageColors = [];\n    this.warningColors = []; //this is an array of 5 elements\n\n    this.successColors = []; //this is an array of 5 elements\n\n    this.errorColors = []; //this is an array of 5 elements\n\n    this.themes = [];\n    this.fontRendering = [];\n    this.colorLinks = []; //some default states\n    //this should include the custom colors, if user has already created them\n\n    this.mainColorLabels = ['primary', 'accent', 'warning', 'success', 'error'];\n    this.customColorLabels = [];\n    this.gradientColorLabels = []; // this will have 'primary', 'secondary'\n\n    this.gradientColorIds = []; // this will have 'custom-0', 'custom-1'\n\n    this.selectedColor = 'primary'; //store what color the user is interacting with (e.g., main, accent ...)\n\n    this.selectedTheme = 0; //used to get the color variations of black and white\n\n    this.blackVariations = [[0, 0], [0, 0.1], [0, 0.2]];\n    this.whiteVariations = [[0, 0], [0, -0.1], [0, -0.2]]; //contrast variations\n\n    this.contrastVariations = getColorContrastPercentages(); //store items\n\n    this.colorPicker = $(this.element).find('.js-color-picker'); //main colors\n\n    this.mainColorsSection = $(this.element).find('.js-app-editor--main-colors');\n    this.mainColorVariationsInput = $(this.element).find('.js-main-color-variation');\n    this.mainColorVariationsSidebar = $(this.element).find('.js-app-editor--main-colors'); //black&white\n\n    this.blackWhiteSection = $(this.element).find('.js-app-editor--black-white'); //contrast\n\n    this.contrastSection = $(this.element).find('.js-app-editor--contrast');\n    this.contrastInputs = this.contrastSection.find('.js-app-editor-section__contrast-inputs');\n    this.fontRenderingSection = this.contrastSection.find('.js-app-editor-section__font-rendering');\n    this.basicColorPicker = $(this.element).find('.js-app-editor-section__color-picker');\n    this.bgColorPicker = $(this.element).find('.js-app-editor-section__bg-color-picker');\n    this.hcColorPicker = $(this.element).find('.js-app-editor-section__hc-color-picker');\n    this.grColorPicker = $(this.element).find('.js-app-editor-section__gr-color-picker'); // i'll store also the subelements\n\n    this.grColorPickerItems = this.grColorPicker.find('.js-color-picker'); //check if the ui has been updated for that specific color variable\n\n    this.mainColorShown = '';\n    this.blackWhiteShown = '';\n    this.contrastShown = '';\n    this.gradientShown = '';\n    this.colorOpacities = []; //iframe\n\n    this.iframe = window.frames[0];\n    this.colorsLoaded = false;\n    if (bool) return; //check for the frame to be loaded\n\n    this.initFrame();\n    this.loadPreset();\n    this.eventListener(); //custom colors\n    //this.mainColorLabels = ['primary', 'accent', 'warning', 'success', 'error', 'custom-0']\n    //this.customColorLables = ['--color-secondary', ...]\n    //to access custom color -> this['custom-0Colors'][themeIndex]\n    //opacities -> this.colorOpacities['--color-custom-0'] = ['20', '40']\n  };\n\n  Colors.prototype.initFrame = function () {\n    var self = this; //listen for the onload event of the frame\n\n    onIframeLoad(self.iframe, function () {\n      self.frameIsLoaded();\n    });\n  };\n\n  Colors.prototype.frameIsLoaded = function () {\n    var self = this;\n\n    if (self.colorsLoaded) {\n      loadProjectColorsForColors(this.iframe);\n      loadProjectTypographyForButtons(this.iframe);\n      loadProjectSpacingForButtons(this.iframe);\n      loadProjectButtonsForColors(this.iframe);\n      loadProjectFormsForColors(this.iframe);\n      self.updateColorsDemo(false);\n      self.updateColorLinks();\n      showIframe();\n    } else {\n      setTimeout(function () {\n        self.frameIsLoaded();\n      }, 100);\n    }\n  };\n\n  Colors.prototype.loadPreset = function () {\n    //this is the function that will retrieve saved data from the database\n    // if user has already created a color palette\n    // - load it - PROJECT.colors and PROJECT.color_opacities\n    // - update the Colors object\n    if (PROJECT && PROJECT.colors) {\n      this.initColorsFromProject(JSON.parse(PROJECT.colors));\n    } else {\n      //if not saved in the db\n      this.themes = ['Default'];\n      this.initColors(0);\n    }\n\n    this.setThemeColors();\n    this.colorsLoaded = true;\n  };\n\n  Colors.prototype.setThemeColors = function () {\n    var self = this; //this function should be used to update the sidebar inputs -> main colors/ contrast / black and white\n    //when a new team is selected (or even when the first team is loaded - if there are )\n    //reset the variables for ui update\n\n    this.mainColorShown = '';\n    this.blackWhiteShown = '';\n    this.contrastShown = '';\n    this.gradientShown = ''; //set colors now - should use one of the followings according to this.selectedColor\n\n    switch (self.selectedColor) {\n      case 'black':\n        self.setBlackWhite();\n        break;\n\n      case 'white':\n        self.setBlackWhite();\n        break;\n\n      case 'contrast':\n        self.setContrast();\n        break;\n\n      default:\n        if (self.selectedColor.indexOf('gr-custom') > -1) {\n          self.setGradient();\n        } else {\n          self.setMainColors();\n        }\n\n    }\n  };\n\n  Colors.prototype.initColors = function (index) {\n    //index -> theme index\n    //set main colors\n    // if you update this -> you'll need to update the same in the ColorSelection as well\n    this.primaryColors[index] = getDefaultMainColorVariation('primary');\n    this.accentColors[index] = getDefaultMainColorVariation('accent');\n    this.warningColors[index] = getDefaultMainColorVariation('warning');\n    this.successColors[index] = getDefaultMainColorVariation('success');\n    this.errorColors[index] = getDefaultMainColorVariation('error'); //set black and white\n\n    this.blackColors[index] = [getHslFromHex('#1c1c21')];\n    this.whiteColors[index] = [getHslFromHex('#ffffff')]; //set contrast\n\n    this.contrastPecentageColors[index] = this.contrastVariations.slice(0);\n    this.contrastColors[index] = getContrastVariation('#ffffff', '#1c1c21', this.contrastPecentageColors[this.selectedTheme]);\n    this.fontRendering[index] = false;\n  };\n\n  Colors.prototype.initColorsFromProject = function (colors) {\n    // var colors = JSON.parse(PROJECT.colors);\n    this.themes = [];\n    this.mainColorLabels = [];\n    this.customColorLabels = [];\n    this.fontRendering = [];\n    this.themes = Object.values(colors['themes']);\n    this.mainColorLabels = Object.values(colors['mainColorLabels']);\n    if (colors['customColorLabels']) this.customColorLabels = Object.values(colors['customColorLabels']);\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      var obj = colors[this.mainColorLabels[i]];\n      this[this.mainColorLabels[i] + 'Colors'] = this.convColorToArr(obj);\n    }\n\n    this.blackColors = this.convColorToArr(colors['blackColors']);\n    this.whiteColors = this.convColorToArr(colors['whiteColors']);\n    this.contrastColors = this.convColorToArr(colors['contrastColors']);\n    this.contrastPecentageColors = this.convPerceToArr(colors['contrastPecentageColors']); // font smoothing\n\n    if (colors['fontRendering']) {\n      this.fontRendering = Object.values(colors['fontRendering']);\n    } else {\n      // if it was not defined -> set it to false\n      for (var i = 0; i < this.themes.length; i++) {\n        this.fontRendering[i] = false;\n      }\n    } // color links among themes\n\n\n    if (colors['colorLinks']) {\n      for (var color in colors['colorLinks']) {\n        if (colors['colorLinks'].hasOwnProperty(color)) {\n          this.colorLinks[color] = colors['colorLinks'][color];\n        }\n      }\n    } // init gradient colors\n\n\n    if (colors['gradientColorLabels']) this.gradientColorLabels = Object.values(colors['gradientColorLabels']);\n    if (colors['gradientColorIds']) this.gradientColorIds = Object.values(colors['gradientColorIds']);\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      var obj = colors[this.gradientColorIds[i] + 'Gradients'];\n      this[this.gradientColorIds[i] + 'Gradients'] = this.convColorToArr(obj);\n    }\n  };\n\n  Colors.prototype.convColorToArr = function (obj) {\n    var array = [];\n\n    for (var property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        var subArray = [];\n        var subObj = obj[property];\n\n        for (var property2 in subObj) {\n          if (subObj.hasOwnProperty(property2)) {\n            subArray.push(Object.values(subObj[property2]));\n          }\n        }\n\n        array.push(subArray);\n      }\n    }\n\n    return array;\n  };\n\n  Colors.prototype.convPerceToArr = function (obj) {\n    var array = [];\n\n    for (var property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        array.push(Object.values(obj[property]));\n      }\n    }\n\n    return array;\n  };\n\n  Colors.prototype.initThemeColors = function (index) {\n    //set new theme equal to default color theme\n    this.primaryColors[index] = this.primaryColors[0].slice(0);\n    this.accentColors[index] = this.accentColors[0].slice(0);\n    this.warningColors[index] = this.warningColors[0].slice(0);\n    this.successColors[index] = this.successColors[0].slice(0);\n    this.errorColors[index] = this.errorColors[0].slice(0);\n    this.blackColors[index] = this.blackColors[0].slice(0);\n    this.whiteColors[index] = this.whiteColors[0].slice(0);\n    this.contrastPecentageColors[index] = this.contrastPecentageColors[0].slice(0);\n    this.contrastColors[index] = this.contrastColors[0].slice(0);\n    this.fontRendering[index] = false; //init custom colors if any\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      if (this.mainColorLabels[i].indexOf('custom-') > -1) {\n        this[this.mainColorLabels[i] + 'Colors'][index] = this[this.mainColorLabels[i] + 'Colors'][0].slice();\n      }\n    }\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      this[this.gradientColorIds[i] + 'Gradients'][index] = this[this.gradientColorIds[i] + 'Gradients'][0].slice();\n    }\n  };\n\n  Colors.prototype.setBtnColorCustomNiceLabels = function () {\n    this.iframe.setBtnColorCustomNiceLabels(this.mainColorLabels, this.customColorLabels);\n  };\n\n  Colors.prototype.setBtnGradientNiceLabels = function () {\n    this.iframe.setBtnGradientNiceLabels(this.gradientColorLabels);\n  };\n\n  Colors.prototype.eventListener = function () {\n    var self = this; //this event is triggered when one of the colors in the left sidebar is selected\n\n    $(this.element).on('content-selected', function (event, type, target, index) {\n      if (target.indexOf('gradient') > -1) {\n        self.selectNewColor(type, '--gradient-' + self.gradientColorIds[self.gradientColorLabels.indexOf(target.replace('--gradient-', ''))]);\n      } else {\n        self.selectNewColor(type, target);\n      }\n    }); //this is triggered when one of the inputs of the main color is updated\n\n    listenToParentInput($(this.mainColorVariationsSidebar), function (event) {\n      self.colorUpdated($(event.currentTarget), 'main');\n    }); //this is triggered when one of the inputs of the black/white color is updated\n\n    listenToParentInput(this.blackWhiteSection, function (event) {\n      self.colorUpdated($(event.currentTarget), 'bw');\n    }); //this is triggered when one of the inputs of the contrast color is updated\n\n    listenToParentInput(this.contrastInputs, function (event) {\n      self.contrastColorUpdated($(event.currentTarget));\n      self.updateColorsDemo(true, 'contrast');\n    }); // this is triggered when the font rendering option is changed\n\n    this.fontRenderingSection.on('change', function (event) {\n      self.updateFontRendering(event.target.value);\n      self.updateColorsDemo(true, 'fontRendering');\n    }); //this event is triggered when the color picker is updated\n\n    $(this.element).on('color-picker-updated', function (event, color, pickerElem) {\n      //new color has been selected\n      if (self.selectedColor.indexOf('gr-custom') > -1) {\n        self.setGradient(color, pickerElem);\n      } else if (self.mainColorLabels.indexOf(self.selectedColor) > -1) {\n        //check if we are changing a main color\n        self.setMainColors(color);\n      } else if (self.selectedColor == 'white' || self.selectedColor == 'black') {\n        self.setBlackWhite(color);\n      } else {\n        self.setContrast(color, pickerElem);\n      }\n\n      self.updateColorsDemo(true, self.selectedColor);\n    }); //this event is triggered when a new theme is added in the left sidebar\n\n    $(this.element).on('content-switch-added', function (event, type, title) {\n      if (type != 'colors') return;\n      self.themes.push(title);\n      self.selectedTheme = self.themes.length - 1;\n      self.initThemeColors(self.selectedTheme);\n      self.setThemeColors();\n      self.updateColorsDemo(true);\n    }); //this event is triggered when a new theme is selected in the left sidebar\n\n    $(this.element).on('content-switch-selected', function (event, type, index) {\n      if (type != 'colors') return;\n      self.selectedTheme = index; //if this is the first time (theme was already create and retrieved from the database)\n      // you should make sure the initial colors are already set\n\n      self.setThemeColors();\n      self.updateColorsDemo(false);\n    }); //this event is triggered when a theme is edited in the left sidebar\n\n    $(this.element).on('content-switch-edited', function (event, type, index, title) {\n      if (type != 'colors') return;\n      if (self.themes[index] != title && IS_LOGGED == '1') SaveAlert.yes();\n      self.themes[index] = title;\n    }); //this event is triggered when a theme is deleted in the left sidebar\n\n    $(this.element).on('content-switch-deleted', function (event, type, index, selected) {\n      if (type != 'colors') return;\n      self.removeTheme(type, index, selected);\n      self.updateColorsDemo(true);\n    }); //black&white events\n    //add a new black or white variation\n\n    this.blackWhiteSection.on('click', '.js-btn-create', function (event) {\n      self.createBlackWhiteVariation();\n      self.blackWhiteSection.children().eq(0).removeClass('app-editor-section__title--hide-body');\n      self.updateColorsDemo(true, self.selectedColor);\n    }); //remove a black or white variation\n\n    this.blackWhiteSection.on('click', '.js-btn-delete', function (event) {\n      self.deleteBlackWhiteVariation($(event.currentTarget).parents('.js-app-editor__color-bw').index());\n      self.updateColorsDemo(true, self.selectedColor);\n    }); //custom colors and gradients\n    //a new custom color has been created\n\n    $(this.element).on('custom-content-added', function (event, type, title, customLabel) {\n      if (type != 'colors') return;\n      var isGradient = customLabel.indexOf('gradient') > -1;\n\n      if (isGradient) {\n        var colorCustomLabel = customLabel.replace('#gradient-', ''); //create this new color for each theme\n\n        self[colorCustomLabel + 'Gradients'] = [];\n        var gradientValue = self.getInitialGradient();\n\n        for (var i = 0; i < self.themes.length; i++) {\n          self[colorCustomLabel + 'Gradients'][i] = gradientValue;\n        }\n\n        self.gradientColorLabels.push(title.replace('--gradient-', ''));\n        self.gradientColorIds.push(colorCustomLabel);\n        self.selectNewColor(type, '--gradient-' + colorCustomLabel);\n        self.updateColorsDemoNewCustom(self[colorCustomLabel + 'Gradients'][self.selectedTheme], title, colorCustomLabel);\n      } else {\n        var colorCustomLabel = customLabel.replace('#color-', ''); //create this new color for each theme\n\n        self[colorCustomLabel + 'Colors'] = [];\n\n        for (var i = 0; i < self.themes.length; i++) {\n          self[colorCustomLabel + 'Colors'][i] = self.primaryColors[0];\n        } //push the label to the main color labels\n\n\n        self.mainColorLabels.push(colorCustomLabel);\n        self.customColorLabels.push(title); //store labels somewhere\n\n        self.selectNewColor(type, '--color-' + colorCustomLabel);\n        self.updateColorsDemoNewCustom(self[colorCustomLabel + 'Colors'][self.selectedTheme], title, colorCustomLabel);\n      }\n    }); //a custom color name has been updated\n\n    $(this.element).on('custom-content-edited', function (event, type, index, title, section) {\n      if (type != 'colors') return;\n\n      if (section.indexOf('gradient') > -1) {\n        self.gradientColorLabels[self.gradientColorIds.indexOf(section.replace('#gradient-', ''))] = title.replace('--gradient-', '');\n      } else {\n        self.customColorLabels[self.mainColorLabels.indexOf(section.replace('#color-', '')) - 5] = title;\n      }\n\n      self.updateColorsDemoEditCustom(section, title);\n    }); //a custom color has been removed\n\n    $(this.element).on('custom-content-removed', function (event, type, index, labelId) {\n      if (type != 'colors') return;\n\n      if (labelId.indexOf('gradient') > -1) {\n        var label = labelId.replace('#gradient-', ''),\n            indexColor = self.gradientColorIds.indexOf(label);\n        self.gradientColorLabels.splice(indexColor, 1);\n        self.gradientColorIds.splice(indexColor, 1);\n        self[label + 'Gradients'] = [];\n        self.updateColorsDemoRemoveCustom('gr-' + label); // remove color from color link array\n\n        if (self.colorLinks['gr-' + label]) self.colorLinks['gr-' + label] = false;\n      } else {\n        var label = labelId.replace('#color-', ''),\n            indexColor = self.mainColorLabels.indexOf(label);\n        self.mainColorLabels.splice(indexColor, 1);\n        self.customColorLabels.splice(indexColor - 5, 1);\n        self[label + 'Colors'] = [];\n        self.updateColorsDemoRemoveCustom(label); // remove color from color link array\n\n        if (self.colorLinks[label]) self.colorLinks[label] = false;\n      }\n    }); // this event is triggered when the link button is clicked inside the color demo\n\n    $(this.element).on('updateColorLink', function (event, section, bool) {\n      if (section.indexOf('gradient') > -1) {\n        self.colorLinks[section.replace('#gradient-', 'gr-')] = bool; // e.g.self.colorLinks['gr-custom-0']\n      } else {\n        self.colorLinks[section.replace('#color-', '')] = bool;\n      }\n    });\n  };\n\n  Colors.prototype.getInitialGradient = function () {\n    var primary = this.primaryColors[0][2],\n        newHsl = primary[0] < 310 ? primary[0] + 50 : primary[0] - 50;\n    return [primary, [newHsl, primary[1], primary[2]]];\n  };\n\n  Colors.prototype.selectNewColor = function (type, target) {\n    if (type != 'colors') return;\n\n    if (target.indexOf('--color-black') > -1 || target.indexOf('--color-white') > -1) {\n      this.selectedColor = target.replace('--color-', '');\n      this.resetSidebarSections('black-white');\n      this.setBlackWhite();\n    } else if (target.indexOf('--color-') > -1) {\n      // this is a main color -> update it\n      this.selectedColor = target.replace('--color-', '');\n      this.resetSidebarSections('main');\n      this.setMainColors();\n    } else if (target.indexOf('--gradient-') > -1) {\n      this.selectedColor = target.replace('--gradient', 'gr'); // e.g., 'gr-custom-0'\n\n      this.resetSidebarSections('gradient');\n      this.setGradient();\n    } else {\n      // this is color contrast\n      this.selectedColor = 'contrast';\n      this.resetSidebarSections('contrast');\n      this.setContrast();\n    }\n  };\n\n  Colors.prototype.resetSidebarSections = function (section) {\n    this.mainColorsSection.add(this.blackWhiteSection).add(this.contrastSection).add(this.basicColorPicker).add(this.bgColorPicker).add(this.hcColorPicker).add(this.grColorPicker).addClass('app-editor-section--is-hidden');\n\n    switch (section) {\n      case 'black-white':\n        this.blackWhiteSection.add(this.basicColorPicker).removeClass('app-editor-section--is-hidden');\n        break;\n\n      case 'contrast':\n        this.contrastSection.add(this.bgColorPicker).add(this.hcColorPicker).removeClass('app-editor-section--is-hidden');\n        break;\n\n      case 'gradient':\n        this.grColorPicker.removeClass('app-editor-section--is-hidden');\n        break;\n\n      default:\n        this.mainColorsSection.add(this.basicColorPicker).removeClass('app-editor-section--is-hidden');\n    }\n  };\n\n  Colors.prototype.setMainColors = function (color) {\n    if (this.mainColorShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has not been set for this color yet\n      //or the color picker is being updated\n      this.mainColorShown = this.selectedColor;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        this.updateMultipleColorsInThemes(getMainColorVariation(color));\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; // this is used for main colors variation (primary/accent/secondary/warning/error/success)\n\n      for (var i = 0; i < 5; i++) {\n        this.setMainColor(colors[i], i);\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      this.colorPicker.trigger('update-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][2]]);\n    }\n  };\n\n  Colors.prototype.setBlackWhite = function (color) {\n    if (this.blackWhiteShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has ot been set for this color yet\n      this.blackWhiteShown = this.selectedColor;\n      var itemLength = this[this.selectedColor + 'Colors'][this.selectedTheme].length;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        this.updateMultipleColorsInThemes(this.getBlackWhiteVariation(color, itemLength)); // this[this.selectedColor+'Colors'][this.selectedTheme] = this.getBlackWhiteVariation(color, itemLength);\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; //first -> make sure there's the right number of inputs\n\n      this.checkBlackWhiteInputNumber(colors.length); // this is used for black/white colors variation\n\n      for (var i = 0; i < colors.length; i++) {\n        this.setBlackWhiteColor(colors[i], i);\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      //black and white -> main color is the first one\n      this.colorPicker.trigger('update-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][0]]);\n    }\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.updateMultipleColorsInThemes = function (value) {\n    if (this.colorLinks[this.selectedColor]) {\n      for (var i = 0; i < this.themes.length; i++) {\n        this[this.selectedColor + 'Colors'][i] = value;\n      }\n    } else {\n      this[this.selectedColor + 'Colors'][this.selectedTheme] = value;\n    }\n  };\n\n  Colors.prototype.setContrast = function (color, pickerElement) {\n    if (this.contrastShown.indexOf(this.selectedColor) < 0 || color) {\n      //the ui has not been set for this color yet\n      //or the color picker is being updated\n      this.contrastShown = this.selectedColor;\n\n      if (color) {\n        //this is the case where the color picker was updated\n        //first check if this is the bg or the hc color\n        var isBgColor = pickerElement.parents('.js-app-editor-section__bg-color-picker').length > 0;\n        var colorsScale = isBgColor ? [getHexFromHsl(color), getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][5])] : [getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][0]), getHexFromHsl(color)];\n        this[this.selectedColor + 'Colors'][this.selectedTheme] = getContrastVariation(colorsScale[0], colorsScale[1], this.contrastPecentageColors[this.selectedTheme]);\n      }\n\n      var colors = this[this.selectedColor + 'Colors'][this.selectedTheme]; // this is used for contrast colors variation\n\n      for (var i = 0; i < 6; i++) {\n        this.setContrastColor(colors[i], this.contrastPecentageColors[this.selectedTheme][i], i);\n      }\n\n      this.updateFontRendering(false);\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      this.colorPicker.trigger('update-contrast-picker', [this[this.selectedColor + 'Colors'][this.selectedTheme][0], this[this.selectedColor + 'Colors'][this.selectedTheme][5]]);\n    }\n  };\n\n  Colors.prototype.setGradient = function (color, pickerElement) {\n    var gradientId = this.selectedColor.replace('gr-', '');\n\n    if (this.gradientShown.indexOf(gradientId) < 0 || color) {\n      //the ui has not been set for this color yet\n      this.gradientShown = gradientId;\n\n      if (color) {\n        var index = pickerElement.parents('.js-app-editor-section__gr-color-picker--stop-1').length > 0 ? 0 : 1;\n\n        if (this.colorLinks['gr-' + gradientId]) {\n          for (var i = 0; i < this.themes.length; i++) {\n            this[gradientId + 'Gradients'][i][index] = color;\n          }\n        } else {\n          this[gradientId + 'Gradients'][this.selectedTheme][index] = color;\n        }\n      }\n    } //update color picker\n\n\n    if (color === undefined || color === null || !color) {\n      //black and white -> main color is the first one\n      this.grColorPickerItems.eq(0).trigger('update-picker', [this[gradientId + 'Gradients'][this.selectedTheme][0]]);\n      this.grColorPickerItems.eq(1).trigger('update-picker', [this[gradientId + 'Gradients'][this.selectedTheme][1]]);\n    }\n  };\n\n  Colors.prototype.updateFontRendering = function (value) {\n    if (value) {\n      this.fontRendering[this.selectedTheme] = value;\n    }\n\n    !this.fontRendering[this.selectedTheme] ? this.fontRenderingSection.find('select').val(0) : this.fontRenderingSection.find('select').val(this.fontRendering[this.selectedTheme]);\n  };\n\n  Colors.prototype.checkBlackWhiteInputNumber = function (length) {\n    var wrappers = this.blackWhiteSection.find('.js-app-editor__color-bw');\n    if (wrappers.length == length) return;\n\n    if (wrappers.length < length) {\n      this.createBlackWhiteInputs(Number(length - wrappers.length));\n    } else {\n      this.removeBlackWhiteInputs(Number(wrappers.length - length));\n    }\n  };\n\n  Colors.prototype.createBlackWhiteInputs = function (number) {\n    var input = this.blackWhiteSection.find('.js-app-editor__color-bw').eq(0),\n        append = '';\n\n    for (var i = 0; i < number; i++) {\n      var clone = input.clone();\n      clone.removeClass('app-editor__color-item--locked app-editor__color-item--labelled').addClass('app-editor__color-item--removable');\n      append = append + clone[0].outerHTML;\n    }\n\n    this.blackWhiteSection.children('.js-app-editor-section__body').append(append);\n    this.blackWhiteInputsResetLabelClass();\n  };\n\n  Colors.prototype.removeBlackWhiteInputs = function (number) {\n    var inputs = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        tot = inputs.length;\n\n    for (var i = 0; i < number; i++) {\n      var index = tot - i - 1;\n      inputs.eq(index).remove();\n    }\n\n    this.blackWhiteInputsResetLabelClass();\n  };\n\n  Colors.prototype.blackWhiteInputsResetLabelClass = function () {\n    var inputs = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        lastItem = inputs.length - 1;\n    inputs.removeClass('app-editor__color-item--labelled').eq(lastItem).addClass('app-editor__color-item--labelled');\n  };\n\n  Colors.prototype.colorUpdated = function (target, type) {\n    //get the index of the color\n    var colorWrapper = target.parents('.js-main-color-variation'),\n        index = Number(colorWrapper.attr('data-order')),\n        inputs = colorWrapper.find('.js-hsl-color-input');\n    if (type == 'bw') index = target.parents('.js-app-editor__color-bw').index(); //update the array of colors\n\n    if (this.colorLinks[this.selectedColor]) {\n      var colorItems = type == 'bw' ? target.parents('.js-app-editor--variations-wrapper').eq(0).find('.js-app-editor__color-bw') : target.parents('.js-app-editor--variations-wrapper').eq(0).find('.js-main-color-variation');\n      this.updateColorVariationsInThemes(colorItems);\n    } else {\n      this[this.selectedColor + 'Colors'][this.selectedTheme][index] = [Number(inputs.eq(0).val()), convertStringToHsl(inputs.eq(1).val()), convertStringToHsl(inputs.eq(2).val())];\n    } //update the color preview\n\n\n    if (type == 'bw') {\n      this.setBlackWhiteColor(this[this.selectedColor + 'Colors'][this.selectedTheme][index], index);\n      this.updateColorsDemo(true);\n    } else {\n      this.setMainColor(this[this.selectedColor + 'Colors'][this.selectedTheme][index], index);\n      this.updateColorsDemo(true);\n    }\n  };\n\n  Colors.prototype.updateColorVariationsInThemes = function (colors) {\n    for (var i = 0; i < colors.length; i++) {\n      var inputs = colors.eq(i).find('.js-hsl-color-input');\n      this.updateColorInThemes(inputs, i);\n    }\n  };\n\n  Colors.prototype.updateColorInThemes = function (inputs, index) {\n    var value = Number(inputs.eq(0).val()),\n        valueHSL1 = convertStringToHsl(inputs.eq(1).val()),\n        valueHSL2 = convertStringToHsl(inputs.eq(2).val());\n\n    for (var i = 0; i < this.themes.length; i++) {\n      this[this.selectedColor + 'Colors'][i][index] = [value, valueHSL1, valueHSL2];\n      this[this.selectedColor + 'Colors'][i][index] = [Number(value), Number(valueHSL1), Number(valueHSL2)];\n    }\n  };\n\n  Colors.prototype.contrastColorUpdated = function (target) {\n    var index = target.parents('.js-app-editor__contrast-item').index(),\n        value = parseInt(target.val().replace('%', ''));\n    value = value < 0 ? 0 : value;\n    value = value > 100 ? 100 : value;\n    this.newContrastColorScale(value, index);\n  };\n\n  Colors.prototype.getBlackWhiteVariation = function (hsl, length) {\n    var blackWhiteVariations = [];\n\n    for (var i = 0; i < length; i++) {\n      blackWhiteVariations.push([hsl[0], checkPercentage(hsl[1] + this[this.selectedColor + 'Variations'][i][0]), checkPercentage(hsl[2] + this[this.selectedColor + 'Variations'][i][1])]);\n    }\n\n    return blackWhiteVariations;\n  };\n\n  Colors.prototype.getBlackWhiteSingleVariation = function (hsl, index) {\n    return [hsl[0], checkPercentage(hsl[1] + this[this.selectedColor + 'Variations'][index][0]), checkPercentage(hsl[2] + this[this.selectedColor + 'Variations'][index][1])];\n  };\n\n  Colors.prototype.setMainColor = function (color, index) {\n    var hue = parseInt(color[0]),\n        sat = Math.round(color[1] * 100),\n        lig = Math.round(color[2] * 100);\n    var inputs = this.mainColorVariationsInput.eq(index).find('.js-hsl-color-input'),\n        preview = this.mainColorVariationsInput.eq(index).find('.js-color-preview');\n    inputs.eq(0).val(hue);\n    inputs.eq(1).val(sat);\n    inputs.eq(2).val(lig);\n    preview.css('background-color', 'hsl(' + hue + ', ' + sat + '%, ' + lig + '%)');\n  };\n\n  Colors.prototype.setBlackWhiteColor = function (color, index) {\n    //first need to check if input exists\n    var hue = parseInt(color[0]),\n        sat = Math.round(color[1] * 100),\n        lig = Math.round(color[2] * 100);\n    var inputWrapper = this.blackWhiteSection.find('.js-app-editor__color-bw').eq(index),\n        inputs = inputWrapper.find('input'),\n        preview = inputWrapper.find('.js-color-preview');\n    inputs.eq(0).val(checkHue(hue));\n    inputs.eq(1).val(sat);\n    inputs.eq(2).val(lig);\n    preview.css('background-color', 'hsl(' + hue + ', ' + sat + '%, ' + lig + '%)');\n  };\n\n  Colors.prototype.setContrastColor = function (color, percentage, index) {\n    var wrapper = this.contrastInputs.find('.js-app-editor__contrast-item').eq(index),\n        input = wrapper.find('input'),\n        preview = wrapper.find('.js-color-preview');\n    input.val(percentage);\n    preview.css('background-color', 'hsl(' + parseInt(color[0]) + ', ' + parseInt(color[1] * 100) + '%, ' + parseInt(color[2] * 100) + '%)');\n  };\n\n  Colors.prototype.createBlackWhiteVariation = function () {\n    //create new item and append it\n    var variations = this.blackWhiteSection.find('.js-app-editor__color-bw'),\n        tot = variations.length,\n        clone = variations.eq(0).clone();\n    clone.removeClass('app-editor__color-item--locked app-editor__color-item--labelled').addClass('app-editor__color-item--removable');\n    clone.find('input').removeAttr('disabled');\n    this.blackWhiteSection.children('.js-app-editor-section__body').append(clone); //get the color variarion\n\n    var color = this.getBlackWhiteSingleVariation(this[this.selectedColor + 'Colors'][this.selectedTheme][0], tot); //update the variable storing the variations\n\n    this[this.selectedColor + 'Colors'][this.selectedTheme].push(color); //update the color of the input and the preview\n\n    this.setBlackWhiteColor(color, tot); //reset the list with the proper label classes\n\n    this.blackWhiteInputsResetLabelClass(); //if two variation visible -> remove plus action\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.deleteBlackWhiteVariation = function (index) {\n    //remove item from dom\n    this.blackWhiteSection.find('.js-app-editor__color-bw').eq(index).remove(); //update object stored variables\n\n    this[this.selectedColor + 'Colors'][this.selectedTheme].splice(index, 1); //reset plus visibility\n\n    this.resetBWActionVisibility();\n  };\n\n  Colors.prototype.resetBWActionVisibility = function () {\n    var sectionTitle = this.blackWhiteSection.find('.app-editor-section__title');\n    this.blackWhiteSection.find('.js-app-editor__color-bw').length > 2 ? sectionTitle.removeClass('app-editor-section__title--create') : sectionTitle.addClass('app-editor-section__title--create');\n  };\n\n  Colors.prototype.newContrastColorScale = function (value, index) {\n    var wrapper = this.contrastInputs.find('.js-app-editor__contrast-item').eq(index),\n        input = wrapper.find('input'),\n        preview = wrapper.find('.js-color-preview');\n    var color0hex = getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][0]),\n        color5hex = getHexFromHsl(this[this.selectedColor + 'Colors'][this.selectedTheme][5]);\n    var scaleColors = chroma.bezier([color0hex, color5hex]).scale().colors(101);\n    this.contrastPecentageColors[this.selectedTheme][index] = value;\n    var color = scaleColors[value],\n        hsl = chroma(color).hsl(); //need to convert to hsl\n\n    this.contrastColors[this.selectedTheme][index] = [checkHue(hsl[0]), checkPercentage(hsl[1]), checkPercentage(hsl[2])];\n    input.val(value);\n    preview.css('background-color', color);\n  };\n\n  Colors.prototype.removeTheme = function (type, index, selected) {\n    //first -> remove theme from array of stored elements\n    this.themes.splice(index, 1);\n    this.primaryColors.splice(index, 1);\n    this.accentColors.splice(index, 1);\n    this.warningColors.splice(index, 1);\n    this.successColors.splice(index, 1);\n    this.errorColors.splice(index, 1);\n    this.blackColors.splice(index, 1);\n    this.whiteColors.splice(index, 1);\n    this.contrastColors.splice(index, 1); //remove custom color as well\n\n    if (this.mainColorLabels.length > 5) {\n      for (var i = 5; i < this.mainColorLabels.length; i++) {\n        this[this.mainColorLabels[i] + 'Colors'].splice(index, 1);\n      }\n    } // remove custom gradients\n\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      this[this.gradientColorIds[i] + 'Gradients'].splice(index, 1);\n    } //if theme was selected -> select new theme\n\n\n    if (selected) {\n      this.selectedTheme = 0;\n      this.setThemeColors();\n    }\n  };\n\n  Colors.prototype.updateColorsDemo = function (bool, label) {\n    var index = this.selectedTheme; //getArray of custom colors\n\n    var customArray = [];\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      if (this.mainColorLabels[i].indexOf('custom-') > -1) {\n        //custom color -> push in array\n        customArray.push([this.mainColorLabels[i], this[this.mainColorLabels[i] + 'Colors'][index]]);\n      }\n    }\n\n    var gradientValues = [];\n\n    for (var i = 0; i < this.gradientColorIds.length; i++) {\n      gradientValues.push(this[this.gradientColorIds[i] + 'Gradients'][index]);\n    }\n\n    this.iframe.updateIframeColors(this.primaryColors[index], this.accentColors[index], this.blackColors[index], this.whiteColors[index], this.successColors[index], this.errorColors[index], this.warningColors[index], this.contrastColors[index], this.fontRendering[index], customArray, this.customColorLabels, this.gradientColorLabels, this.gradientColorIds, gradientValues, label);\n    if (IS_LOGGED == '1' && bool) SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorLinks = function () {\n    this.iframe.updateIframeColorLinks(this.colorLinks);\n  };\n\n  Colors.prototype.updateColorsDemoNewCustom = function (array, title, customLabel) {\n    this.iframe.updateIframeColorsNewColor(array, title, customLabel);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorsDemoRemoveCustom = function (customLabel) {\n    this.iframe.updateIframeColorsRemoveColor(customLabel);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateColorsDemoEditCustom = function (section, title) {\n    this.iframe.updateIframeColorsEditColor(section, title);\n    if (IS_LOGGED == '1') SaveAlert.yes();\n  };\n\n  Colors.prototype.updateCopyCode = function (code) {\n    var completeCode = '',\n        spacing = '';\n\n    for (var i = 0; i < this.themes.length; i++) {\n      if (i > 0) spacing = '  '; //start from default theme\n\n      var codeMain = this.createBlockForMainColors(i, spacing),\n          codeCustom = this.createBlockForCustomColors(i, spacing, false),\n          codeBW = this.createBlockForBWColors(i, spacing),\n          codeFeedback = this.createBlockForFeedbackColors(i, spacing),\n          codeFeedbackCustom = this.createBlockForCustomColors(i, spacing, true),\n          codeContrast = this.createBlockForContrastColors(i, spacing),\n          codeGradient = this.createBlockForGradients(i, spacing);\n      var codeFontRendering = this.createBlockForFontRendering(i, spacing);\n      var themeCode = codeMain + codeCustom + codeBW + codeFeedback + codeFeedbackCustom + codeContrast + codeGradient;\n\n      if (i == 0) {\n        //default theme\n        themeCode = ':root, [data-theme=\"default\"] {\\n' + themeCode + '}';\n        if (codeFontRendering != '') themeCode = themeCode + '\\n\\nbody, [data-theme=\"default\"] {\\n' + codeFontRendering + '}';\n      } else {\n        if (codeFontRendering != '') codeFontRendering = '\\n' + codeFontRendering;\n        themeCode = '@supports(--css: variables) {\\n  [data-theme=\"' + this.themes[i].toLowerCase() + '\"] {\\n' + themeCode + codeFontRendering + '  }\\n}';\n      }\n\n      completeCode = completeCode + themeCode;\n      if (i < this.themes.length - 1) completeCode = completeCode + '\\n\\n'; // if( i == 0 ) {\n      // \tcompleteCode = completeCode + '[data-theme] {\\n  background-color: var(--color-bg);\\n  color: var(--color-contrast-high);\\n}\\n\\n';\n      // }\n    } // before returngin code -> check if need to add bg-color classes\n\n\n    completeCode = completeCode + this.getBgColorClasses();\n    return completeCode; // return code;\n  };\n\n  Colors.prototype.createBlockForMainColors = function (themeIndex, spacing) {\n    var code = spacing + '  // main\\n',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    for (var j = 0; j < 2; j++) {\n      for (var i = 0; i < 5; i++) {\n        var colorIndex = 4 - i;\n        var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n            hslCode = getHslCssFromHsl(hsl);\n        code = code + spacing + '  @include defineColorHSL(--color-' + this.mainColorLabels[j] + shades[i] + ', ' + hslCode + ');' + '\\n';\n      }\n\n      code = code + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForCustomColors = function (themeIndex, spacing, isFeedback) {\n    var code = '',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    if (this.mainColorLabels.length > 5) {\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        var label = this.customColorLabels[j];\n\n        if (isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') < 0) {\n          for (var i = 0; i < 5; i++) {\n            var colorIndex = 4 - i;\n            var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n                hslCode = getHslCssFromHsl(hsl);\n            code = code + spacing + '  @include defineColorHSL(' + this.customColorLabels[j - 5] + shades[i] + ', ' + hslCode + ');' + '\\n';\n          }\n\n          code = code + '\\n';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getCustomColorClasses = function (isFeedback) {\n    var code = '';\n\n    if (this.mainColorLabels.length > 5) {\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        var label = this.customColorLabels[j];\n\n        if (isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') > -1 || !isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') < 0) {\n          code = code + '.' + this.customColorLabels[j - 5].replace('--', '') + ' { color: var(' + this.customColorLabels[j - 5] + ');}';\n          code = code + '\\n';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getCustomGradientClasses = function () {\n    var code = '';\n\n    if (this.gradientColorLabels.length > 0) {\n      for (var j = 0; j < this.gradientColorLabels.length; j++) {\n        code = code + '.bg-gradient-' + this.gradientColorLabels[j].replace('--', '') + '-right { background-image: linear-gradient(90deg, var(--gradient-' + this.gradientColorLabels[j] + '-stop-1), var(--gradient-' + this.gradientColorLabels[j] + '-stop-2));}';\n        code = code + '\\n';\n      }\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForBWColors = function (themeIndex, spacing) {\n    var code = '',\n        shadesBlack = ['', '-light', '-lighter'],\n        shadesWhite = ['', '-dark', '-darker']; //black\n\n    for (var i = 0; i < this.blackColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.blackColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-black' + shadesBlack[i] + ', ' + hslCode + ');' + '\\n';\n    } //white\n\n\n    for (var i = 0; i < this.whiteColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.whiteColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-white' + shadesWhite[i] + ', ' + hslCode + ');' + '\\n';\n    } //need to add opacities as well\n\n\n    code = code + '\\n';\n    return code;\n  };\n\n  Colors.prototype.createBlockForFeedbackColors = function (themeIndex, spacing) {\n    var code = spacing + '  // feedback\\n',\n        shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    for (var j = 2; j < 5; j++) {\n      for (var i = 0; i < 5; i++) {\n        var colorIndex = 4 - i;\n        var hsl = this[this.mainColorLabels[j] + 'Colors'][themeIndex][colorIndex],\n            hslCode = getHslCssFromHsl(hsl);\n        code = code + spacing + '  @include defineColorHSL(--color-' + this.mainColorLabels[j] + shades[i] + ', ' + hslCode + ');' + '\\n';\n      } //need to add opacities as well\n\n\n      code = code + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForContrastColors = function (themeIndex, spacing) {\n    var code = spacing + '  // color contrasts\\n',\n        shades = ['bg', 'contrast-lower', 'contrast-low', 'contrast-medium', 'contrast-high', 'contrast-higher'];\n\n    for (var i = 0; i < this.contrastColors[themeIndex].length; i++) {\n      var hslCode = getHslCssFromHsl(this.contrastColors[themeIndex][i]);\n      code = code + spacing + '  @include defineColorHSL(--color-' + shades[i] + ', ' + hslCode + ');' + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForGradients = function (themeIndex, spacing) {\n    if (!this.gradientColorLabels || this.gradientColorLabels.length < 1) return '';\n    var code = '\\n' + spacing + '  // gradients\\n',\n        stops = ['-stop-1', '-stop-2'];\n\n    for (var i = 0; i < this.gradientColorLabels.length; i++) {\n      var stop1 = getHslCssFromHsl(this[this.gradientColorIds[i] + 'Gradients'][themeIndex][0]),\n          stop2 = getHslCssFromHsl(this[this.gradientColorIds[i] + 'Gradients'][themeIndex][1]);\n      code = code + spacing + '  @include defineColorHSL(--gradient-' + this.gradientColorLabels[i] + stops[0] + ', ' + stop1 + ');' + '\\n';\n      code = code + spacing + '  @include defineColorHSL(--gradient-' + this.gradientColorLabels[i] + stops[1] + ', ' + stop2 + ');' + '\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.createBlockForFontRendering = function (themeIndex, spacing) {\n    var code = '';\n\n    if (this.fontRendering[themeIndex] && Number(this.fontRendering[themeIndex]) == 1) {\n      code = spacing + '  // font rendering\\n' + spacing + '  -webkit-font-smoothing: antialiased;\\n' + spacing + '  -moz-osx-font-smoothing: grayscale;\\n';\n    } else if (this.fontRendering[themeIndex] && Number(this.fontRendering[themeIndex]) == 2) {\n      code = spacing + '  // font rendering\\n' + spacing + '  -webkit-font-smoothing: auto;\\n' + spacing + '  -moz-osx-font-smoothing: auto;\\n';\n    }\n\n    return code;\n  };\n\n  Colors.prototype.getArrayToSave = function () {\n    var colorsArray = [];\n\n    for (var i = 0; i < this.mainColorLabels.length; i++) {\n      //store main colors + feedback colors\n      colorsArray[this.mainColorLabels[i]] = this[this.mainColorLabels[i] + 'Colors'];\n    }\n\n    colorsArray['mainColorLabels'] = this.mainColorLabels;\n\n    if (this.customColorLabels.length > 0) {\n      colorsArray['customColorLabels'] = this.customColorLabels;\n    }\n\n    colorsArray['blackColors'] = this.blackColors;\n    colorsArray['whiteColors'] = this.whiteColors;\n    colorsArray['contrastPecentageColors'] = this.contrastPecentageColors;\n    colorsArray['contrastColors'] = this.contrastColors;\n\n    if (this.fontRendering && this.fontRendering.length == this.themes.length) {\n      colorsArray['fontRendering'] = this.fontRendering;\n    } else {\n      colorsArray['fontRendering'] = [];\n\n      for (var i = 0; i < this.themes.length; i++) {\n        if (this.fontRendering[i]) colorsArray['fontRendering'][i] = this.fontRendering[i];else colorsArray['fontRendering'][i] = false;\n      }\n    }\n\n    colorsArray['themes'] = this.themes;\n    colorsArray['colorLinks'] = this.colorLinks; // gradients\n\n    if (this.gradientColorLabels.length > 0) {\n      colorsArray['gradientColorLabels'] = this.gradientColorLabels;\n    }\n\n    if (this.gradientColorIds.length > 0) {\n      colorsArray['gradientColorIds'] = this.gradientColorIds;\n\n      for (var i = 0; i < this.gradientColorIds.length; i++) {\n        //store main colors + feedback colors\n        colorsArray[this.gradientColorIds[i] + 'Gradients'] = this[this.gradientColorIds[i] + 'Gradients'];\n      }\n    }\n\n    return colorsArray;\n  };\n\n  Colors.prototype.getOpacitiesArrayToSave = function () {\n    var opacitiesArray = [];\n    opacitiesArray = this.colorOpacities;\n    return opacitiesArray;\n  };\n\n  Colors.prototype.getBgColorClasses = function () {\n    var code = '';\n    var shades = ['-darker', '-dark', '', '-light', '-lighter'];\n\n    if (this.mainColorLabels.length > 5) {\n      // start from bg\n      code = '\\n\\n// background color\\n';\n\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        for (var i = 0; i < shades.length; i++) {\n          code = code + '.bg-' + this.customColorLabels[j - 5].replace('--color-', '') + shades[i] + ' { background-color: alpha(var(' + this.customColorLabels[j - 5] + shades[i] + '), var(--bg-o, 1)); }';\n          code = code + '\\n';\n        }\n      }\n    }\n\n    if (this.gradientColorLabels.length > 0) {\n      // background gradient\n      code = this.mainColorLabels.length > 5 ? code + '\\n' : code + '\\n\\n';\n      code = code + '// background gradient';\n\n      for (var i = 0; i < this.gradientColorLabels.length; i++) {\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + ' { background-image: radial-gradient(var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-top { background-image: linear-gradient(0deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-right { background-image: linear-gradient(90deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-bottom { background-image: linear-gradient(180deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n        code = code + '\\n.bg-gradient-' + this.gradientColorLabels[i] + '-left { background-image: linear-gradient(270deg, var(--gradient-' + this.gradientColorLabels[i] + '-stop-1), var(--gradient-' + this.gradientColorLabels[i] + '-stop-2)); }';\n      }\n\n      if (this.mainColorLabels.length > 5) code = code + '\\n';\n    }\n\n    if (this.mainColorLabels.length > 5) {\n      // add borders\n      code = code + '\\n// border color';\n\n      for (var j = 5; j < this.mainColorLabels.length; j++) {\n        for (var i = 0; i < shades.length; i++) {\n          code = code + '\\n.border-' + this.customColorLabels[j - 5].replace('--color-', '') + shades[i] + ' { border-color: alpha(var(' + this.customColorLabels[j - 5] + shades[i] + '), var(--bg-o, 1)); }';\n        }\n      }\n    }\n\n    return code;\n  };\n\n  function getOpacityLabel(opacity) {\n    if (Number(opacity) < 10) return '0' + opacity;\n    return opacity;\n  }\n\n  ;\n\n  function getColorContrastPercentages() {\n    return [0, 5, 17, 55, 89, 100];\n  }\n\n  ;\n\n  function getHslCssFromHsl(hsl) {\n    return Math.round(hsl[0]) + ', ' + Math.round(hsl[1] * 100) + '%, ' + Math.round(hsl[2] * 100) + '%';\n  }\n\n  ;\n\n  function getMainColorVariation(hsl) {\n    //used to get the main color variations starting from main color\n    var colorVariationsLogic = getMainColorVaraiationLogic(hsl);\n    var mainColorVariations = [];\n    hsl[0] = checkHue(hsl[0]);\n\n    for (var i = 0; i < 4; i++) {\n      mainColorVariations.push([hsl[0], checkPercentage(hsl[1] + colorVariationsLogic[i][0]), checkPercentage(hsl[2] + colorVariationsLogic[i][1])]);\n    }\n\n    mainColorVariations.splice(2, 0, hsl);\n    return mainColorVariations;\n  }\n\n  ;\n\n  function getMainColorVaraiationLogic(hsl) {\n    var lightVaraition = 0.1,\n        lightVaraitionS = 0.2;\n\n    if (hsl[2] > 0.8) {\n      lightVaraitionS = 1;\n      lightVaraition = parseFloat(((lightVaraitionS - hsl[2]) * 0.5).toFixed(2));\n    }\n\n    var darkVaraition = -0.1,\n        darkVaraitionS = -0.2;\n\n    if (hsl[2] < 0.2) {\n      darkVaraitionS = -hsl[2];\n      darkVaraition = parseFloat((-hsl[2] * 0.5).toFixed(2));\n    }\n\n    return [[0, lightVaraitionS], [0, lightVaraition], [0, darkVaraition], [0, darkVaraitionS]];\n  }\n\n  ;\n\n  function getContrastVariation(color1, color2, array) {\n    var contrastColorVariations = [];\n    var scaleColors = chroma.bezier([color1, color2]).scale().colors(101);\n\n    for (var i = 0; i < 6; i++) {\n      var index = array[i],\n          hsl = chroma(scaleColors[index]).hsl();\n      contrastColorVariations.push([checkHue(hsl[0]), checkPercentage(hsl[1]), checkPercentage(hsl[2])]);\n    }\n\n    return contrastColorVariations;\n  }\n\n  ;\n\n  function getDefaultMainColorVariation(type) {\n    var color = [];\n\n    switch (type) {\n      case 'accent':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      case 'success':\n        color = [[94, 0.48, 0.74], [94, 0.48, 0.65], [94, 0.48, 0.56], [94, 0.48, 0.48], [94, 0.48, 0.42]];\n        break;\n\n      case 'warning':\n        color = [[46, 1, 0.80], [46, 1, 0.71], [46, 1, 0.61], [46, 1, 0.50], [46, 1, 0.47]];\n        break;\n\n      case 'error':\n        color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];\n        break;\n\n      default:\n        // primary\n        color = [[220, 0.90, 0.70], [220, 0.90, 0.63], [220, 0.90, 0.56], [220, 0.90, 0.49], [220, 0.90, 0.42]];\n    }\n\n    return color;\n  }\n\n  ; //initialize the Colors objects\n\n  var colors = document.getElementsByClassName('js-app-sidebar-editor--colors'),\n      colorObject = [];\n\n  if (colors.length > 0) {\n    for (var i = 0; i < colors.length; i++) {\n      (function (i) {\n        colorObject.push(new Colors(colors[i]));\n      })(i);\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/change-color.js\n");

/***/ }),

/***/ "./js/color.json":
/*!***********************!*\
  !*** ./js/color.json ***!
  \***********************/
/*! exports provided: themes, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"themes\\\":{\\\"default\\\":{\\\"--color-primary\\\":[204,\\\"70%\\\",\\\"53%\\\"],\\\"--color-accent\\\":[282,\\\"44%\\\",\\\"47%\\\"],\\\"--color-download\\\":[145,\\\"63%\\\",\\\"42%\\\"],\\\"--color-black\\\":[240,\\\"8%\\\",\\\"12%\\\"],\\\"--color-white\\\":[0,\\\"0%\\\",\\\"100%\\\"],\\\"--color-warning\\\":[46,\\\"68%\\\",\\\"49%\\\"],\\\"--color-success\\\":[94,\\\"48%\\\",\\\"40%\\\"],\\\"--color-error\\\":[6,\\\"63%\\\",\\\"46%\\\"],\\\"--color-info\\\":[204,\\\"62%\\\",\\\"47%\\\"],\\\"--color-bg\\\":[220,\\\"5%\\\",\\\"22%\\\"]}}}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuL2pzL2NvbG9yLmpzb24uanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./js/color.json\n");

/***/ }),

/***/ 1:
/*!**********************************!*\
  !*** multi ./js/change-color.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\Environnement-dev\laragon\www\Azuriom_minecraft\resources\themes\dofus-default\resources\js\change-color.js */"./js/change-color.js");


/***/ })

/******/ });