/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./js/config-custom-azuriom/colors.js":
/*!********************************************!*\
  !*** ./js/config-custom-azuriom/colors.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"updateIframeColors\": () => (/* binding */ updateIframeColors),\n/* harmony export */   \"updateIframeColorLinks\": () => (/* binding */ updateIframeColorLinks),\n/* harmony export */   \"updateIframeColorsNewColor\": () => (/* binding */ updateIframeColorsNewColor),\n/* harmony export */   \"updateIframeColorsRemoveColor\": () => (/* binding */ updateIframeColorsRemoveColor),\n/* harmony export */   \"updateIframeColorsEditColor\": () => (/* binding */ updateIframeColorsEditColor),\n/* harmony export */   \"loadColorsForColors\": () => (/* binding */ loadColorsForColors),\n/* harmony export */   \"loadTypographyForButtons\": () => (/* binding */ loadTypographyForButtons),\n/* harmony export */   \"loadSpacingForButtons\": () => (/* binding */ loadSpacingForButtons),\n/* harmony export */   \"loadButtonsForColors\": () => (/* binding */ loadButtonsForColors),\n/* harmony export */   \"loadFormForColors\": () => (/* binding */ loadFormForColors)\n/* harmony export */ });\nvar Color = __webpack_require__(/*! ./colors */ \"./js/config-custom-azuriom/colors.js\");\n\nvar jsPage = __webpack_require__(/*! ./page */ \"./js/config-custom-azuriom/page.js\");\n\nvar colorPrimary = [],\n    colorAccent = [],\n    colorDownload = [],\n    colorBlack = '',\n    colorWhite = '',\n    colorSuccess = [],\n    colorError = [],\n    colorInfo = [],\n    colorWarning = [],\n    colorContrasts = [],\n    newColorCustom = [],\n    newGradientCustom = [],\n    colorCustoms = [],\n    gradientCustoms = [],\n    colorOpacities = [],\n    customColorLabels = [],\n    gradientColorIds = [],\n    gradientColorValues = [],\n    fontRenderingValue = '';\nfunction updateIframeColors(primary, accent, download, black, white, success, error, info, warning, contrasts, fontRendering, customs, customLabels, grLabels, grIds, grValues, label) {\n  colorPrimary = primary.slice();\n  colorAccent = accent.slice();\n  colorDownload = download.slice();\n  colorBlack = black.slice();\n  colorWhite = white.slice();\n  colorSuccess = success.slice();\n  colorError = error.slice();\n  colorInfo = info.slice();\n  colorWarning = warning.slice();\n  colorContrasts = contrasts.slice();\n  colorCustoms = customs.slice();\n  customColorLabels = customLabels;\n  gradientColorIds = grIds.slice();\n  gradientCustoms = grLabels.slice();\n  gradientColorValues = grValues.slice();\n  $('.js-cd-demo-container--colors').trigger('updateColors', [label]);\n}\n;\nfunction updateIframeColorLinks(links) {\n  $('.js-cd-demo-container--colors').trigger('updateColorLinks', [links]);\n}\n;\nfunction updateIframeColorsNewColor(array, title, customLabel) {\n  if (title.indexOf('gradient') > -1) {\n    newGradientCustom[customLabel] = array.slice();\n    $('.js-cd-demo-container--colors').trigger('createGradient', [title, customLabel]);\n  } else {\n    newColorCustom[customLabel] = array.slice();\n    $('.js-cd-demo-container--colors').trigger('createColor', [title, customLabel]);\n  }\n}\n;\nfunction updateIframeColorsRemoveColor(customLabel) {\n  if (customLabel.indexOf('gr') > -1) {\n    $('.js-cd-demo-container--colors').trigger('removeGradient', [customLabel]);\n  } else {\n    $('.js-cd-demo-container--colors').trigger('removeColor', [customLabel]);\n  }\n}\n;\nfunction updateIframeColorsEditColor(section, title) {\n  if (section.indexOf('gradient') > -1) {\n    $('.js-cd-demo-container--colors').trigger('updateGradient', [section, title]);\n  } else {\n    $('.js-cd-demo-container--colors').trigger('updateColor', [section, title]);\n  }\n}\n;\nvar projectTypography, projectSpacing, projectButtons, projectForms;\nfunction loadColorsForColors(colors) {// colors = JSON.stringify(colors)\n  // console.log(Object.values(colors['mainColorLabels']))\n  // jsPage.btnColorLabels = (colors['mainColorLabels']) ? Object.values(colors['mainColorLabels']) : [];\n  // jsPage.btnColorCustomNiceLabels = (colors['customColorLabels']) ? Object.values(colors['customColorLabels']) : [];\n  // jsPage.btnGradientsCustomNiceLabels = (colors['gradientColorLabels']) ? Object.values(colors['gradientColorLabels']) : [];\n}\n;\nfunction loadTypographyForButtons(typography) {\n  projectTypography = typography;\n  $('.js-cd-demo-container--colors').trigger('setTypographyStyle');\n}\n;\nfunction loadSpacingForButtons(spacing) {\n  projectSpacing = spacing;\n  $('.js-cd-demo-container--colors').trigger('setSpacingStyle');\n}\n;\nfunction loadButtonsForColors(buttons) {\n  projectButtons = buttons;\n  $('.js-cd-demo-container--colors').trigger('setButtonsStyle');\n}\n;\nfunction loadFormForColors(forms) {\n  projectForms = forms;\n  $('.js-cd-demo-container--colors').trigger('setFormStyle');\n}\n;\n\n(function () {\n  var colorsDemo = $('.js-cd-demo-container--colors');\n  var iframeParent = jsPage;\n  var accessibleContrastHeadings = document.getElementsByClassName('js-accessible-headings-contrast'),\n      accessibleContrastBody = document.getElementsByClassName('js-accessible-body-contrast');\n\n  if (!iframeParent) {\n    iframeParent = jsPage;\n  }\n\n  var styleTag = $('#font-rendering');\n\n  if (colorsDemo.length > 0) {\n    var resetSpaceTypo = function resetSpaceTypo(bool, mq) {\n      if (projectTypography) {\n        setTypographyStyle(bool, mq);\n      } else {\n        updateTypographyDefaultStyle(mq);\n      }\n\n      if (projectSpacing) {\n        setSpacingStyle(mq);\n      } else {\n        updateSpacingDefaultStyle(mq);\n      }\n    };\n\n    var setTypographyStyle = function setTypographyStyle(bool, mq) {\n      if (projectTypography) jsPage.loadTypographyStyle(projectTypography, bool, mq);else {\n        jsPage.loadTypographyDefaultStyle(bool, mq);\n        updateTypographyDefaultStyle(mq);\n      }\n    };\n\n    var updateTypographyDefaultStyle = function updateTypographyDefaultStyle(mq) {\n      var textBase = '1em',\n          textScale = '1.2';\n\n      if (mq >= 3) {\n        textBase = '1.25em';\n        textScale = '1.25';\n      }\n\n      jsPage.setCssVariable('--text-base-size', textBase);\n      jsPage.setCssVariable('--text-scale-ratio', textScale);\n    };\n\n    var setSpacingStyle = function setSpacingStyle(mq) {\n      if (projectSpacing) jsPage.loadSpacingStyle(projectSpacing, mq);else {\n        jsPage.loadSpacingDefaultStyle(mq);\n        updateSpacingDefaultStyle(mq);\n      }\n    };\n\n    var updateSpacingDefaultStyle = function updateSpacingDefaultStyle(mq) {\n      var spaceUnit = '1em';\n\n      if (mq >= 3) {\n        spaceUnit = '1.25em';\n      }\n\n      jsPage.setCssVariable('--space-unit', spaceUnit);\n    };\n\n    var setButtonsStyle = function setButtonsStyle(mq) {\n      if (projectButtons) jsPage.loadButtonsStyle(projectButtons, mq);else jsPage.loadButtonsDefaultStyle(mq);\n    };\n\n    var setFormsStyle = function setFormsStyle(mq) {\n      if (projectForms) jsPage.loadFormsStyle(projectForms, mq);else jsPage.loadFormsDefaultStyle(mq);\n    };\n\n    var blackWrapper = colorsDemo.find('.js-cd-demo-color__list--black'),\n        whiteWrapper = colorsDemo.find('.js-cd-demo-color__list--white');\n    var demoSwitcher = $('.js-demo-switcher');\n    colorsDemo.on('click', '.js-cd-demo-color__list', function (event) {\n      colorsDemo.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected cd-demo-item--selected');\n      $(event.currentTarget).addClass('cd-demo-color__list--selected');\n      iframeParent.selectSidebarSection($(event.currentTarget).attr('data-section'));\n    });\n    colorsDemo.on('updateColors', function (event, label) {\n      updateColorVariables(label);\n    });\n    colorsDemo.on('updateColorLinks', function (event, links) {\n      updateColorLinks(links);\n    });\n    demoSwitcher.on('click', 'button', function (event) {\n      if ($(event.target).hasClass('is-selected')) return;\n      demoSwitcher.children('.is-selected').removeClass('is-selected').siblings().addClass('is-selected');\n      $('.cd-demo-container--is-hidden').removeClass('cd-demo-container--is-hidden').siblings('[data-display]').addClass('cd-demo-container--is-hidden');\n    });\n    colorsDemo.on('createColor', function (event, title, customLabel) {\n      createCustomColor(title, customLabel);\n    });\n    colorsDemo.on('createGradient', function (event, title, customLabel) {\n      createCustomGradient(title, customLabel);\n    });\n    colorsDemo.on('removeColor', function (event, customLabel) {\n      colorsDemo.find('[data-section=\"#color-' + customLabel + '\"]').parent().remove();\n    });\n    colorsDemo.on('removeGradient', function (event, customLabel) {\n      colorsDemo.find('[data-section=\"#gradient-' + customLabel.replace('gr-', '') + '\"]').parent().remove();\n    });\n    colorsDemo.on('updateColor', function (event, section, title) {\n      updateCustomColor(section, title);\n    });\n    colorsDemo.on('updateGradient', function (event, section, title) {\n      updateCustomGradient(section, title);\n    });\n    colorsDemo.on('click', '.js-cd-demo-color__link-btn', function (event) {\n      event.preventDefault();\n      $(event.currentTarget).toggleClass('cd-demo-color__link-btn--is-active');\n      iframeParent.toggleColorLink($(event.currentTarget).parent().next().attr('data-section'), $(event.currentTarget).hasClass('cd-demo-color__link-btn--is-active'));\n    });\n    var MQRef = jsPage.getMq();\n    colorsDemo.one('setTypographyStyle', function () {\n      setTypographyStyle(true, MQRef);\n    });\n    colorsDemo.one('setSpacingStyle', function () {\n      setSpacingStyle(MQRef);\n    });\n    colorsDemo.one('setButtonsStyle', function () {\n      setButtonsStyle(MQRef);\n    });\n    colorsDemo.one('setFormStyle', function () {\n      setFormsStyle(MQRef);\n    });\n    colorsDemo.on('windowResizing', function () {\n      var mq = jsPage.getMq();\n\n      if (MQRef != mq) {\n        MQRef = mq;\n        resetSpaceTypo(false, MQRef);\n      }\n    });\n    ;\n    ;\n    ;\n    ;\n    ;\n    ;\n  }\n\n  function updateColorVariables(label) {\n    if (!label || label == 'primary') updateMainColor(colorPrimary, 'primary');\n    if (!label || label == 'accent') updateMainColor(colorAccent, 'accent');\n    if (!label || label == 'download') updateMainColor(colorDownload, 'download');\n    if (!label || label == 'success') updateMainColor(colorSuccess, 'success');\n    if (!label || label == 'error') updateMainColor(colorError, 'error');\n    if (!label || label == 'info') updateMainColor(colorInfo, 'info');\n    if (!label || label == 'warning') updateMainColor(colorWarning, 'warning');\n    if (!label || label == 'black') updateBlackWhite(colorBlack, blackWrapper, 'black');\n    if (!label || label == 'white') updateBlackWhite(colorWhite, whiteWrapper, 'white');\n    if (!label || label == 'contrast') updateContratColor();\n    if (!label || label.indexOf('custom') > -1 && label.indexOf('gr-custom') < 0) updateCustoms();\n    if (!label || label.indexOf('gr-custom') > -1) updateGradientCustoms();\n    if (!label || label == 'fontRendering') updateFontRendering();\n  }\n\n  ;\n\n  function setCompleteColorVariable(label, color) {\n    jsPage.setCssVariable(label, jsPage.getHSL(color));\n    jsPage.setColorPartVariables(label, color);\n  }\n\n  ;\n\n  function updateContratColor() {\n    setCompleteColorVariable('--color-bg', colorContrasts[0]);\n    setCompleteColorVariable('--color-contrast-lower', colorContrasts[1]);\n    setCompleteColorVariable('--color-contrast-low', colorContrasts[2]);\n    setCompleteColorVariable('--color-contrast-medium', colorContrasts[3]);\n    setCompleteColorVariable('--color-contrast-high', colorContrasts[4]);\n    setCompleteColorVariable('--color-contrast-higher', colorContrasts[5]);\n    var colorSection = colorsDemo.find('[data-section=\"#color-contrast\"]'),\n        colorLabels = colorSection.find('.js-demo-color__value');\n\n    for (var i = 0; i < colorContrasts.length; i++) {\n      colorLabels.eq(i).text(jsPage.getHSL(colorContrasts[i]));\n    }\n\n    updateAccessibleContrast();\n  }\n\n  ;\n\n  function updateFontRendering() {\n    var code = '';\n\n    if (fontRenderingValue && Number(fontRenderingValue == 1)) {\n      code = 'body{-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}';\n    } else if (fontRenderingValue && Number(fontRenderingValue == 2)) {\n      code = 'body{-webkit-font-smoothing: auto;-moz-osx-font-smoothing: auto;}';\n    }\n\n    styleTag.text(code);\n  }\n\n  ;\n\n  function updateMainColor(array, type) {\n    setCompleteColorVariable('--color-' + type + '-lighter', array[0]);\n    setCompleteColorVariable('--color-' + type + '-light', array[1]);\n    setCompleteColorVariable('--color-' + type, array[2]);\n    setCompleteColorVariable('--color-' + type + '-dark', array[3]);\n    setCompleteColorVariable('--color-' + type + '-darker', array[4]);\n    var colorSection = colorsDemo.find('[data-section=\"#color-' + type + '\"]'),\n        colorLabels = colorSection.find('.js-demo-color__value');\n\n    for (var i = 0; i < 5; i++) {\n      colorLabels.eq(i).text(jsPage.getHSL(array[i]));\n    }\n  }\n\n  ;\n\n  function updateCSSCustomColor(array, type) {\n    setCompleteColorVariable('--color-' + type + '-lighter', array[0]);\n    setCompleteColorVariable('--color-' + type + '-light', array[1]);\n    setCompleteColorVariable('--color-' + type, array[2]);\n    setCompleteColorVariable('--color-' + type + '-dark', array[3]);\n    setCompleteColorVariable('--color-' + type + '-darker', array[4]);\n  }\n\n  ;\n\n  function updateBlackWhite(array, parent, type) {\n    var children = parent.children();\n\n    if (children.length > array.length) {\n      children.eq(array.length - 1).nextAll().remove();\n    } else if (children.length < array.length) {\n      var cloneCode = children.eq(0).clone()[0].outerHTML,\n          itemsString = '';\n\n      for (var i = children.length; i < array.length; i++) {\n        itemsString = itemsString + cloneCode;\n      }\n\n      parent.append(itemsString);\n    }\n\n    children = parent.children();\n\n    for (var i = 0; i < array.length; i++) {\n      updateSingleColor(array[i], children.eq(i), getBWLabel(type, i), i);\n    }\n  }\n\n  ;\n\n  function updateSingleColor(color, item, label, index) {\n    var colorText = jsPage.getHSL(color);\n    setCompleteColorVariable('--' + label, color);\n    item.find('.js-demo-color__value').text(colorText).end().find('.js-css-variable-label').text('--' + label);\n    if (index != 0) item.children().eq(0).css('background-color', colorText);\n  }\n\n  ;\n\n  function updateCustoms() {\n    for (var i = 0; i < colorCustoms.length; i++) {\n      var customSection = $('[data-section=\"#color-' + colorCustoms[i][0] + '\"]');\n\n      if (customSection.length == 0) {\n        createCustomColorSection(customColorLabels[i], colorCustoms[i][0], false);\n      }\n\n      var colorSectionItems = $('[data-section=\"#color-' + colorCustoms[i][0] + '\"]').children(),\n          colorValues = [];\n\n      for (var j = 0; j < colorSectionItems.length; j++) {\n        var newColor = jsPage.getHSL(colorCustoms[i][1][j]);\n        colorSectionItems.eq(j).find('.js-cd-demo-color__preview').attr('style', 'background-color: ' + newColor + ';').end().find('.js-demo-color__value').text(newColor);\n        colorValues.push(newColor);\n      }\n\n      updateCSSCustomColor(colorCustoms[i][1], customColorLabels[i].replace('--color-', ''));\n    }\n  }\n\n  ;\n\n  function updateGradientCustoms() {\n    for (var i = 0; i < gradientCustoms.length; i++) {\n      var customSection = $('[data-section=\"#gradient-' + gradientColorIds[i] + '\"]');\n\n      if (customSection.length == 0) {\n        createCustomGradientSection(gradientCustoms[i], gradientColorIds[i], gradientColorValues[i], false);\n      }\n\n      var customSection = $('[data-section=\"#gradient-' + gradientColorIds[i] + '\"]');\n      var preview = customSection.find('.js-cd-demo-color__preview'),\n          values = customSection.find('.js-demo-color__value');\n      preview.attr('style', 'background-image: linear-gradient(90deg, ' + jsPage.getHSL(gradientColorValues[i][0]) + ', ' + jsPage.getHSL(gradientColorValues[i][1]) + ');');\n      values.eq(0).text(jsPage.getHSL(gradientColorValues[i][0]));\n      values.eq(1).text(jsPage.getHSL(gradientColorValues[i][1]));\n      setCompleteColorVariable('--gradient-' + gradientCustoms[i] + '-stop-1', gradientColorValues[i][0]);\n      setCompleteColorVariable('--gradient-' + gradientCustoms[i] + '-stop-2', gradientColorValues[i][1]);\n    }\n  }\n\n  ;\n\n  function getBWLabel(type, index) {\n    if (type == 'black') {\n      switch (index) {\n        case 1:\n          return 'color-black-light';\n          break;\n\n        case 2:\n          return 'color-black-lighter';\n          break;\n\n        default:\n          return 'color-black';\n      }\n    } else {\n      switch (index) {\n        case 1:\n          return 'color-white-dark';\n          break;\n\n        case 2:\n          return 'color-white-darker';\n          break;\n\n        default:\n          return 'color-white';\n      }\n    }\n  }\n\n  ;\n\n  function createCustomColor(title, customLabel) {\n    createCustomColorSection(title, customLabel, true);\n    selectIframeSection('#color-' + customLabel);\n  }\n\n  ;\n\n  function createCustomColorSection(title, customLabel, customize) {\n    var newColor = colorsDemo.children('.js-cd-demo-color').eq(0).clone(),\n        colorChildren = newColor.find('.js-cd-demo-color__preview');\n    newColor.addClass('js-cd-demo-color--custom').find('.js-cd-demo-title').text(getCustomTitleColor(title));\n    newColor.find('[data-section]').attr('data-section', '#color-' + customLabel);\n    newColor.find('.cd-demo-color__link-btn').removeClass('cd-demo-color__link-btn--is-active');\n\n    if (!customize) {\n      newColor.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n    }\n\n    if (customize) {\n      for (var i = 0; i < colorChildren.length; i++) {\n        colorChildren.eq(i).attr('style', 'background-color: ' + jsPage.getHSL(newColorCustom[customLabel][i]) + ';');\n        var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n        var cssVaraiableName = getVariableName(title);\n        labelItem.text(labelItem.text().replace('--color-primary', cssVaraiableName));\n      }\n    } else {\n      for (var i = 0; i < colorChildren.length; i++) {\n        var cssVaraiableName = getVariableName(title);\n        var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n        labelItem.text(labelItem.text().replace('--color-primary', cssVaraiableName));\n      }\n    }\n\n    if (customLabel.indexOf('custom-fdb') > -1) {\n      colorsDemo.find('.js-cd-demo-gradient').before(newColor);\n    } else {\n      colorsDemo.find('.js-cd-demo-color--black').before(newColor);\n    }\n  }\n\n  ;\n\n  function updateCustomColor(section, title) {\n    var customColorBlock = colorsDemo.find('[data-section=\"' + section + '\"]').parents('.js-cd-demo-color--custom').eq(0),\n        colorChildren = customColorBlock.find('.js-cd-demo-color__preview'),\n        oldLabel = colorChildren.eq(2).siblings('.js-css-variable-label').text();\n    customColorBlock.find('.js-cd-demo-title').text(getCustomTitleColor(title));\n\n    for (var i = 0; i < colorChildren.length; i++) {\n      var labelItem = colorChildren.eq(i).siblings('.js-css-variable-label');\n      var cssVaraiableName = getVariableName(title);\n      labelItem.text(labelItem.text().replace(oldLabel, cssVaraiableName));\n    }\n  }\n\n  ;\n\n  function createCustomGradient(title, customLabel) {\n    createCustomGradientSection(title, customLabel, newGradientCustom[customLabel], true);\n    selectIframeSection('#gradient-' + customLabel);\n  }\n\n  ;\n\n  function createCustomGradientSection(title, customLabel, customValue, customize) {\n    var newColor = colorsDemo.children('.js-cd-demo-gradient').eq(0).clone().removeClass('is-hidden'),\n        titleEl = newColor.find('.js-cd-demo-title'),\n        preview = newColor.find('.js-cd-demo-color__preview'),\n        values = newColor.find('.js-demo-color__value'),\n        labels = newColor.find('.js-css-variable-label');\n    titleEl.text(getCustomTitleGradient(title));\n    values.eq(0).text(jsPage.getHSL(customValue[0]));\n    values.eq(1).text(jsPage.getHSL(customValue[1]));\n    labels.eq(0).text(getGradientVariable(title) + '-stop-1');\n    labels.eq(1).text(getGradientVariable(title) + '-stop-2');\n    newColor.find('.js-cd-demo-gradient__list').attr('data-section', '#gradient-' + customLabel);\n\n    if (!customize) {\n      newColor.find('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n    }\n\n    if (customize) {\n      preview.attr('style', 'background-image: linear-gradient(90deg, ' + jsPage.getHSL(customValue[0]) + ', ' + jsPage.getHSL(customValue[1]) + ');');\n    }\n\n    colorsDemo.find('.js-cd-demo-color--contrast').before(newColor);\n  }\n\n  ;\n\n  function updateCustomGradient(section, title) {\n    var customGradientBlock = colorsDemo.find('[data-section=\"' + section + '\"]').parents('.js-cd-demo-gradient').eq(0),\n        titleEl = customGradientBlock.find('.js-cd-demo-title'),\n        labels = customGradientBlock.find('.js-css-variable-label');\n    titleEl.text(getCustomTitleGradient(title));\n    labels.eq(0).text(getGradientVariable(title) + '-stop-1');\n    labels.eq(1).text(getGradientVariable(title) + '-stop-2');\n  }\n\n  ;\n\n  function getCustomTitleColor(title) {\n    title = title.replace('--color-', '').replace(/-/, ' ');\n    return 'Color ' + title.charAt(0).toUpperCase() + title.slice(1);\n  }\n\n  ;\n\n  function getCustomTitleGradient(title) {\n    title = title.replace('--gradient-', '').replace(/-/, ' ');\n    return 'Gradient ' + title.charAt(0).toUpperCase() + title.slice(1);\n  }\n\n  ;\n\n  function getGradientVariable(title) {\n    if (title.indexOf('--gradient') > -1) return title;\n    return '--gradient-' + title;\n  }\n\n  ;\n\n  function getVariableName(title) {\n    title = title.replace(/ /, '-');\n    if (title.indexOf('--') != 0) title = '--' + title;\n    return title;\n  }\n\n  ;\n\n  function updateAccessibleContrast() {\n    var bgLuminance = jsPage.getLuminance(colorContrasts[0], iframeParent),\n        headingsLuminance = jsPage.getLuminance(colorContrasts[5], iframeParent),\n        bodyLuminance = jsPage.getLuminance(colorContrasts[4], iframeParent),\n        headingsContrast = bgLuminance > headingsLuminance ? (bgLuminance + 0.05) / (headingsLuminance + 0.05) : (headingsLuminance + 0.05) / (bgLuminance + 0.05),\n        bodyContrast = bgLuminance > bodyLuminance ? (bgLuminance + 0.05) / (bodyLuminance + 0.05) : (bodyLuminance + 0.05) / (bgLuminance + 0.05);\n    headingsContrast = parseFloat(headingsContrast).toFixed(2);\n    bodyContrast = parseFloat(bodyContrast).toFixed(2);\n    var headingsNote = getAccessibleContrastNote(headingsContrast),\n        bodyNote = getAccessibleContrastNote(bodyContrast);\n    if (accessibleContrastHeadings.length > 0) accessibleContrastHeadings[0].textContent = headingsNote;\n    if (accessibleContrastBody.length > 0) accessibleContrastBody[0].textContent = bodyNote;\n  }\n\n  ;\n\n  function getAccessibleContrastNote(value) {\n    var note = value >= 7 ? ' (AAA)' : ' (AA)';\n    if (value < 4.5) note = ' (low)';\n    return value + note;\n  }\n\n  ;\n\n  function updateColorLinks(links) {\n    for (var color in links) {\n      if (links.hasOwnProperty(color) && links[color]) {\n        if (color.indexOf('gr-') > -1) {\n          colorsDemo.find('[data-section=\"#gradient-' + color.replace('gr-', '') + '\"]').prev().find('.js-cd-demo-color__link-btn').addClass('cd-demo-color__link-btn--is-active');\n        } else {\n          colorsDemo.find('[data-section=\"#color-' + color + '\"]').prev().find('.js-cd-demo-color__link-btn').addClass('cd-demo-color__link-btn--is-active');\n        }\n      }\n    }\n  }\n\n  ;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/config-custom-azuriom/colors.js\n");

/***/ }),

/***/ "./js/config-custom-azuriom/page.js":
/*!******************************************!*\
  !*** ./js/config-custom-azuriom/page.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"spacingArray\": () => (/* binding */ spacingArray),\n/* harmony export */   \"textArray\": () => (/* binding */ textArray),\n/* harmony export */   \"textArrayValues\": () => (/* binding */ textArrayValues),\n/* harmony export */   \"fontArray\": () => (/* binding */ fontArray),\n/* harmony export */   \"btnFontIds\": () => (/* binding */ btnFontIds),\n/* harmony export */   \"btnColorCustomNiceLabels\": () => (/* binding */ btnColorCustomNiceLabels),\n/* harmony export */   \"btnGradientsCustomNiceLabels\": () => (/* binding */ btnGradientsCustomNiceLabels),\n/* harmony export */   \"btnColorLabels\": () => (/* binding */ btnColorLabels),\n/* harmony export */   \"shadowVariables\": () => (/* binding */ shadowVariables),\n/* harmony export */   \"borderRadiusValues\": () => (/* binding */ borderRadiusValues),\n/* harmony export */   \"setBtnColorCustomNiceLabels\": () => (/* binding */ setBtnColorCustomNiceLabels),\n/* harmony export */   \"setBtnGradientNiceLabels\": () => (/* binding */ setBtnGradientNiceLabels),\n/* harmony export */   \"decodeSafeURIComponent\": () => (/* binding */ decodeSafeURIComponent),\n/* harmony export */   \"getCursorValue\": () => (/* binding */ getCursorValue),\n/* harmony export */   \"getBorderType\": () => (/* binding */ getBorderType),\n/* harmony export */   \"getBorderStyle\": () => (/* binding */ getBorderStyle),\n/* harmony export */   \"getTextTransform\": () => (/* binding */ getTextTransform),\n/* harmony export */   \"getTextDecoration\": () => (/* binding */ getTextDecoration),\n/* harmony export */   \"getFontSmoothing\": () => (/* binding */ getFontSmoothing),\n/* harmony export */   \"getBoxShadowType\": () => (/* binding */ getBoxShadowType),\n/* harmony export */   \"getTransitionProperty\": () => (/* binding */ getTransitionProperty),\n/* harmony export */   \"getTransitionEase\": () => (/* binding */ getTransitionEase),\n/* harmony export */   \"getTransitionDelay\": () => (/* binding */ getTransitionDelay),\n/* harmony export */   \"getTransformProperty\": () => (/* binding */ getTransformProperty),\n/* harmony export */   \"getOutlineStyle\": () => (/* binding */ getOutlineStyle),\n/* harmony export */   \"getOutlineOffset\": () => (/* binding */ getOutlineOffset),\n/* harmony export */   \"getColorValue\": () => (/* binding */ getColorValue),\n/* harmony export */   \"getColorValueFromList\": () => (/* binding */ getColorValueFromList),\n/* harmony export */   \"getNiceLabelForCustom\": () => (/* binding */ getNiceLabelForCustom),\n/* harmony export */   \"removeOpacityFromLabel\": () => (/* binding */ removeOpacityFromLabel),\n/* harmony export */   \"getOpacityDecFromLabel\": () => (/* binding */ getOpacityDecFromLabel),\n/* harmony export */   \"checkColorIsOpacity\": () => (/* binding */ checkColorIsOpacity),\n/* harmony export */   \"getColorFbIos\": () => (/* binding */ getColorFbIos),\n/* harmony export */   \"getHSL\": () => (/* binding */ getHSL),\n/* harmony export */   \"getHSLA\": () => (/* binding */ getHSLA),\n/* harmony export */   \"setHSLAfromHSL\": () => (/* binding */ setHSLAfromHSL),\n/* harmony export */   \"getHSLFromString\": () => (/* binding */ getHSLFromString),\n/* harmony export */   \"setCssVariable\": () => (/* binding */ setCssVariable),\n/* harmony export */   \"getCssVariable\": () => (/* binding */ getCssVariable),\n/* harmony export */   \"setBodyCssVariable\": () => (/* binding */ setBodyCssVariable),\n/* harmony export */   \"setElementCssVariable\": () => (/* binding */ setElementCssVariable),\n/* harmony export */   \"windowScrollTo\": () => (/* binding */ windowScrollTo),\n/* harmony export */   \"selectIframeSection\": () => (/* binding */ selectIframeSection),\n/* harmony export */   \"selectIframeTab\": () => (/* binding */ selectIframeTab),\n/* harmony export */   \"getMq\": () => (/* binding */ getMq),\n/* harmony export */   \"getScreenSize\": () => (/* binding */ getScreenSize),\n/* harmony export */   \"getValidResponsiveValue\": () => (/* binding */ getValidResponsiveValue),\n/* harmony export */   \"getValueUnit\": () => (/* binding */ getValueUnit),\n/* harmony export */   \"getBodyNotFalse\": () => (/* binding */ getBodyNotFalse),\n/* harmony export */   \"loadGlobalsStyle\": () => (/* binding */ loadGlobalsStyle),\n/* harmony export */   \"loadColorStyle\": () => (/* binding */ loadColorStyle),\n/* harmony export */   \"loadColorDefaultStyle\": () => (/* binding */ loadColorDefaultStyle),\n/* harmony export */   \"setColorPartVariables\": () => (/* binding */ setColorPartVariables),\n/* harmony export */   \"getBWArray\": () => (/* binding */ getBWArray),\n/* harmony export */   \"loadTypographyStyle\": () => (/* binding */ loadTypographyStyle),\n/* harmony export */   \"loadTypographyDefaultStyle\": () => (/* binding */ loadTypographyDefaultStyle),\n/* harmony export */   \"loadTypographyStyleTag\": () => (/* binding */ loadTypographyStyleTag),\n/* harmony export */   \"loadTypographyCssVarStyleGuide\": () => (/* binding */ loadTypographyCssVarStyleGuide),\n/* harmony export */   \"loadTypographyStyleStyleGuide\": () => (/* binding */ loadTypographyStyleStyleGuide),\n/* harmony export */   \"getTypographyScaleVar\": () => (/* binding */ getTypographyScaleVar),\n/* harmony export */   \"getTextUnit\": () => (/* binding */ getTextUnit),\n/* harmony export */   \"getTypographyScaleVarRes\": () => (/* binding */ getTypographyScaleVarRes),\n/* harmony export */   \"loadSpacingStyle\": () => (/* binding */ loadSpacingStyle),\n/* harmony export */   \"loadSpacingDefaultStyle\": () => (/* binding */ loadSpacingDefaultStyle),\n/* harmony export */   \"loadSpacingStyleTag\": () => (/* binding */ loadSpacingStyleTag),\n/* harmony export */   \"setTypographyCssVariables\": () => (/* binding */ setTypographyCssVariables),\n/* harmony export */   \"getTypographyArray\": () => (/* binding */ getTypographyArray),\n/* harmony export */   \"getTypographyStyle\": () => (/* binding */ getTypographyStyle),\n/* harmony export */   \"updateSpacingCssVariables\": () => (/* binding */ updateSpacingCssVariables),\n/* harmony export */   \"getSpacingValues\": () => (/* binding */ getSpacingValues),\n/* harmony export */   \"getSpacingMultiplier\": () => (/* binding */ getSpacingMultiplier),\n/* harmony export */   \"getSpacingCustomScaleRatio\": () => (/* binding */ getSpacingCustomScaleRatio),\n/* harmony export */   \"getSpacingValidResponsiveValueCustomRatio\": () => (/* binding */ getSpacingValidResponsiveValueCustomRatio),\n/* harmony export */   \"getSpaceRatioCustom\": () => (/* binding */ getSpaceRatioCustom),\n/* harmony export */   \"loadButtonsStyle\": () => (/* binding */ loadButtonsStyle),\n/* harmony export */   \"loadButtonsStyleStyleGuide\": () => (/* binding */ loadButtonsStyleStyleGuide),\n/* harmony export */   \"loadSharedStyleStyleGuide\": () => (/* binding */ loadSharedStyleStyleGuide),\n/* harmony export */   \"escapeCSScharacters\": () => (/* binding */ escapeCSScharacters),\n/* harmony export */   \"loadButtonsDefaultStyle\": () => (/* binding */ loadButtonsDefaultStyle),\n/* harmony export */   \"buttonVariables\": () => (/* binding */ buttonVariables),\n/* harmony export */   \"loadButtonsStyleTag\": () => (/* binding */ loadButtonsStyleTag),\n/* harmony export */   \"loadFormsStyle\": () => (/* binding */ loadFormsStyle),\n/* harmony export */   \"loadFormsStyleStyleGuide\": () => (/* binding */ loadFormsStyleStyleGuide),\n/* harmony export */   \"formVariables\": () => (/* binding */ formVariables),\n/* harmony export */   \"loadFormsDefaultStyle\": () => (/* binding */ loadFormsDefaultStyle),\n/* harmony export */   \"loadFormsStyleTag\": () => (/* binding */ loadFormsStyleTag),\n/* harmony export */   \"boxShadowIsDefined\": () => (/* binding */ boxShadowIsDefined),\n/* harmony export */   \"getButtonsArrayStyle\": () => (/* binding */ getButtonsArrayStyle),\n/* harmony export */   \"buttonsCodeStyle\": () => (/* binding */ buttonsCodeStyle),\n/* harmony export */   \"setStatusList\": () => (/* binding */ setStatusList),\n/* harmony export */   \"buttonIconCodeStyle\": () => (/* binding */ buttonIconCodeStyle),\n/* harmony export */   \"buttonsHasTransformStyle\": () => (/* binding */ buttonsHasTransformStyle),\n/* harmony export */   \"getButtonCode\": () => (/* binding */ getButtonCode),\n/* harmony export */   \"getButtonsAppearanceStyle\": () => (/* binding */ getButtonsAppearanceStyle),\n/* harmony export */   \"getGradientBgStyle\": () => (/* binding */ getGradientBgStyle),\n/* harmony export */   \"getButtonsPaddingStyle\": () => (/* binding */ getButtonsPaddingStyle),\n/* harmony export */   \"getButtonsPaddingValue\": () => (/* binding */ getButtonsPaddingValue),\n/* harmony export */   \"getButtonsMarginStyle\": () => (/* binding */ getButtonsMarginStyle),\n/* harmony export */   \"getButtonsBorderStyle\": () => (/* binding */ getButtonsBorderStyle),\n/* harmony export */   \"getButtonsTypographyStyle\": () => (/* binding */ getButtonsTypographyStyle),\n/* harmony export */   \"getButtonsTextShadowStyle\": () => (/* binding */ getButtonsTextShadowStyle),\n/* harmony export */   \"getButtonsShadowStyle\": () => (/* binding */ getButtonsShadowStyle),\n/* harmony export */   \"getButtonsOutlineStyle\": () => (/* binding */ getButtonsOutlineStyle),\n/* harmony export */   \"getButtonsTransformStyle\": () => (/* binding */ getButtonsTransformStyle),\n/* harmony export */   \"getButtonsTransitionStyle\": () => (/* binding */ getButtonsTransitionStyle),\n/* harmony export */   \"getButtonsPlaceholderStyle\": () => (/* binding */ getButtonsPlaceholderStyle),\n/* harmony export */   \"getButtonsFontSizeValue\": () => (/* binding */ getButtonsFontSizeValue),\n/* harmony export */   \"resetFormsStyleComponents\": () => (/* binding */ resetFormsStyleComponents),\n/* harmony export */   \"getSuffixOpacity\": () => (/* binding */ getSuffixOpacity),\n/* harmony export */   \"getLuminance\": () => (/* binding */ getLuminance),\n/* harmony export */   \"getRGBsrValues\": () => (/* binding */ getRGBsrValues),\n/* harmony export */   \"getRGBValues\": () => (/* binding */ getRGBValues),\n/* harmony export */   \"getRGBfromHSL\": () => (/* binding */ getRGBfromHSL),\n/* harmony export */   \"loadedIframeCheck\": () => (/* binding */ loadedIframeCheck),\n/* harmony export */   \"initFontList\": () => (/* binding */ initFontList)\n/* harmony export */ });\n//buttons/forms default values\nvar spacingArray = ['', '0', 'var(--space-xxxxs)', 'var(--space-xxxs)', 'var(--space-xxs)', 'var(--space-xs)', 'var(--space-sm)', 'var(--space-md)', 'var(--space-lg)', 'var(--space-xl)', 'var(--space-xxl)', 'var(--space-xxxl)', 'var(--space-xxxxl)'],\n    textArray = ['', 'var(--text-xs)', 'var(--text-sm)', 'var(--text-md)', 'var(--text-lg)', 'var(--text-xl)', 'var(--text-xxl)', 'var(--text-xxxl)', 'var(--text-xxxxl)', 'inherit'],\n    textArrayValues = ['', 'var(--text-xs)', 'var(--text-sm)', 'var(--text-md)', 'var(--text-lg)', 'var(--text-xl)', 'var(--text-xxl)', 'var(--text-xxxl)', 'inherit', '', 'var(--text-xxxxl)'],\n    fontArray = ['', '--font-primary'],\n    btnFontIds = [0, 1],\n    btnColorCustomNiceLabels = [],\n    btnGradientsCustomNiceLabels = [],\n    btnColorLabels = [\"primary\", \"accent\", \"download\", \"warning\", \"success\", \"error\", \"info\"],\n    shadowVariables = ['', '', 'var(--shadow-xs)', 'var(--shadow-sm)', 'var(--shadow-md)', 'var(--shadow-lg)', 'var(--shadow-xl)'],\n    borderRadiusValues = ['', 'var(--radius-sm)', 'var(--radius-md)', 'var(--radius-lg)'];\nfunction setBtnColorCustomNiceLabels(colors, customNice) {\n  if (colors) {\n    btnColorLabels = colors;\n  }\n\n  if (customNice) {\n    btnColorCustomNiceLabels = customNice;\n  }\n}\n;\nfunction setBtnGradientNiceLabels(gradients) {\n  if (gradients && gradients.length > 0) {\n    btnGradientsCustomNiceLabels = gradients;\n  }\n}\n;\nfunction decodeSafeURIComponent(string) {\n  return decodeURIComponent(string.replace(/%\"/g, '%25\"'));\n}\n;\nfunction getCursorValue(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'auto';\n      break;\n\n    case 2:\n      return 'pointer';\n      break;\n\n    case 3:\n      return 'not-allowed';\n      break;\n\n    default:\n      return 'auto';\n  }\n}\n;\nfunction getBorderType(index) {\n  switch (index) {\n    case 0:\n      return 'border';\n      break;\n\n    case 1:\n      return 'border-top';\n      break;\n\n    case 2:\n      return 'border-right';\n      break;\n\n    case 3:\n      return 'border-bottom';\n      break;\n\n    case 4:\n      return 'border-left';\n      break;\n\n    default:\n      return 'border';\n  }\n}\n;\nfunction getBorderStyle(index) {\n  switch (index) {\n    case 0:\n      return 'none';\n      break;\n\n    case 1:\n      return 'solid';\n      break;\n\n    case 2:\n      return 'dashed';\n      break;\n\n    case 3:\n      return 'dotted';\n      break;\n\n    default:\n      return 'solid';\n  }\n}\n;\nfunction getTextTransform(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'capitalize';\n      break;\n\n    case 3:\n      return 'uppercase';\n      break;\n\n    case 4:\n      return 'lowercase';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getTextDecoration(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'underline';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getFontSmoothing() {\n  return '-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;';\n}\n;\nfunction getBoxShadowType(index) {\n  if (index == 0) return '';else return 'inset ';\n}\n;\nfunction getTransitionProperty(index) {\n  switch (index) {\n    case 0:\n      return 'all';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'background';\n      break;\n\n    case 3:\n      return 'opacity';\n      break;\n\n    case 4:\n      return 'border';\n      break;\n\n    case 5:\n      return 'box-shadow';\n      break;\n\n    case 6:\n      return 'outline';\n      break;\n\n    case 7:\n      return 'transform';\n      break;\n\n    case 8:\n      return 'color';\n      break;\n\n    default:\n      return 'all';\n  }\n}\n;\nfunction getTransitionEase(index) {\n  switch (index) {\n    case 0:\n      return 'ease';\n      break;\n\n    case 1:\n      return 'linear';\n      break;\n\n    case 2:\n      return 'ease-in';\n      break;\n\n    case 3:\n      return 'ease-out';\n      break;\n\n    case 4:\n      return 'var(--ease-in-out)';\n      break;\n\n    case 5:\n      return 'var(--ease-in)';\n      break;\n\n    case 6:\n      return 'var(--ease-out)';\n      break;\n\n    case 7:\n      return 'var(--ease-out-back)';\n      break;\n\n    default:\n      return 'ease';\n  }\n}\n;\nfunction getTransitionDelay(val) {\n  if (val == '') return '';\n  return ' ' + val + 's';\n}\n;\nfunction getTransformProperty(index) {\n  switch (index) {\n    case 0:\n      return 'none';\n      break;\n\n    case 1:\n      return 'translate';\n      break;\n\n    case 2:\n      return 'translateX';\n      break;\n\n    case 3:\n      return 'translateY';\n      break;\n\n    case 4:\n      return 'translateZ';\n      break;\n\n    case 5:\n      return 'scale';\n      break;\n\n    case 6:\n      return 'scaleX';\n      break;\n\n    case 7:\n      return 'scaleY';\n      break;\n\n    case 8:\n      return 'scaleZ';\n      break;\n\n    case 9:\n      return 'rotate';\n      break;\n\n    case 10:\n      return 'rotateX';\n      break;\n\n    case 11:\n      return 'rotateY';\n      break;\n\n    case 12:\n      return 'rotateZ';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getOutlineStyle(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'auto';\n      break;\n\n    case 2:\n      return 'dotted';\n      break;\n\n    case 3:\n      return 'dashed';\n      break;\n\n    case 4:\n      return 'solid';\n      break;\n\n    case 5:\n      return 'double';\n      break;\n\n    case 6:\n      return 'inset';\n      break;\n\n    case 7:\n      return 'outset';\n      break;\n\n    case 8:\n      return 'none';\n      break;\n\n    default:\n      return '';\n  }\n}\n;\nfunction getOutlineOffset(val) {\n  if (val == '') return '';\n  return 'outline-offset: ' + val + ';';\n}\n;\nfunction getColorValue(val, reset) {\n  if (!val || val == null) return ''; // check if inherit/transparent/default\n\n  if (val == 'transparent' || val.indexOf('transparent') == 0) return 'transparent';\n  if (val == 'inherit' || val.indexOf('inherit') == 0) return 'inherit';\n  if (val == '' || val.indexOf('-a') == 0) return ''; //check if custom color\n\n  return getColorValueFromList(val, reset);\n}\n;\nfunction getColorValueFromList(label, reset) {\n  var fallback = '';\n  if (!label || label == null) return '';\n  label = getNiceLabelForCustom(label);\n  if (!label) return ''; //check if this is an opacity value and provide fallback\n\n  if (checkColorIsOpacity(label)) {\n    if (reset && reset == true) {\n      //need to return css value\n      var basicLabel = removeOpacityFromLabel(label);\n      return 'hsla(var(' + basicLabel + '-h), var(' + basicLabel + '-s), var(' + basicLabel + '-l), ' + getOpacityDecFromLabel(label) + ')';\n    } else {\n      //return sass mixin\n      return 'alpha(var(' + removeOpacityFromLabel(label) + '), ' + getOpacityDecFromLabel(label) + ')';\n    }\n  } else {\n    return 'var(' + label + ')';\n  }\n}\n;\nfunction getNiceLabelForCustom(label) {\n  if (label.indexOf('custom-') > -1) {\n    var prefix = label.indexOf('custom-fdb-') > -1 ? 'custom-fdb-' : 'custom-';\n    var labelArray = label.split(prefix),\n        split = labelArray[1].split('-');\n\n    if (split.length > 1) {\n      var customLabel = prefix + split[0];\n      label = btnColorCustomNiceLabels[btnColorLabels.indexOf(customLabel) - 5] + labelArray[1].replace(split[0], '');\n    } else {\n      var customLabel = prefix + labelArray[1];\n      label = btnColorCustomNiceLabels[btnColorLabels.indexOf(customLabel) - 5];\n    }\n  }\n\n  return label;\n}\n;\nfunction removeOpacityFromLabel(label) {\n  return label.slice(0, -4);\n}\n;\nfunction getOpacityDecFromLabel(label) {\n  var opacity = parseInt(label.slice(-4).replace('-a', ''));\n  if (isNaN(opacity)) return 1;\n  return parseFloat((opacity / 100).toFixed(2));\n}\n;\nfunction checkColorIsOpacity(label) {\n  var array = label.split('-');\n\n  if (array.length > 0 && array[array.length - 1].indexOf('a') == 0 && array[array.length - 1].length == 3) {\n    return true;\n  }\n\n  return false;\n}\n;\nfunction getColorFbIos($color, $varLabel, $spacing, $reset) {\n  if (!$color || $color == null) return ['', ''];\n  if ($color == 'transparent' || $color == 'inherit' || $color == '') return ['', $color];\n  return ['', getColorValue($color, $reset)];\n}\n; //if you updates this -> you'll need to update the same in the app-global.js as well\n\nvar paddingVariables = ['--space-xxxxs', '--space-xxxs', '--space-xxs', '--space-xs', '--space-sm', '--space-md', '--space-lg', '--space-xl', '--space-xxl', '--space-xxxl', '--space-xxxxl'],\n    fibonacciSeq = [0.125, 0.25, 0.375, 0.5, 0.75, 1.25, 2, 3.25, 5.25, 8.5, 13.75],\n    prFourth = [0.237, 0.316, 0.422, 0.563, 0.75, 1, 1.333, 1.777, 2.369, 3.157, 4.21],\n    auFourth = [0.177, 0.25, 0.354, 0.5, 0.707, 1, 1.414, 1.999, 2.827, 3.998, 5.65],\n    prFifth = [0.133, 0.2, 0.296, 0.444, 0.667, 1, 1.5, 2.25, 3.375, 5.063, 7.59],\n    goldenRatio = [0.09, 0.146, 0.236, 0.382, 0.618, 1, 1.618, 2.618, 4.236, 6.854, 11.08],\n    spaceRatioUnit = [false, fibonacciSeq, prFourth, auFourth, prFifth, goldenRatio, ''];\nfunction getHSL(color) {\n  if (isNaN(color[0])) color[0] = 0;\n  return 'hsl(' + Math.round(color[0]) + ', ' + Math.round(color[1] * 100) + '%, ' + Math.round(color[2] * 100) + '%)';\n}\n;\nfunction getHSLA(color, opacity) {\n  if (isNaN(color[0])) color[0] = 0;\n  return 'hsla(' + Math.round(color[0]) + ', ' + Math.round(color[1] * 100) + '%, ' + Math.round(color[2] * 100) + '%, ' + parseFloat((Number(opacity) / 100).toFixed(2)) + ')';\n}\n;\nfunction setHSLAfromHSL(color, opacity) {\n  color = color.replace('hsl(', 'hsla(');\n  color = color.replace(')', ', ' + parseFloat((Number(opacity) / 100).toFixed(2)) + ')');\n  return color;\n}\n;\nfunction getHSLFromString(color) {\n  var array = color.replace('hsl(', '').replace(')', '').split(',');\n\n  if (array && array.length > 1) {\n    return [Number(array[0].trim()), parseFloat((array[1].trim().replace('%', '') / 100).toFixed(2)), parseFloat((array[2].trim().replace('%', '') / 100).toFixed(2))];\n  } else {\n    return '';\n  }\n}\n;\nfunction setCssVariable(variable, value, priority) {\n  var root = document.documentElement;\n\n  if (priority) {\n    root.style.setProperty(variable, value, priority);\n  } else {\n    root.style.setProperty(variable, value);\n  }\n}\n;\nfunction getCssVariable(variable) {\n  return getComputedStyle(document.documentElement).getPropertyValue(variable);\n}\n;\nfunction setBodyCssVariable(variable, value) {\n  var body = document.getElementsByTagName('body')[0];\n  body.style.setProperty(variable, value);\n}\n;\nfunction setElementCssVariable(className, variable, value) {\n  var element = document.getElementsByClassName(className);\n\n  if (element.length > 0) {\n    element[0].style.setProperty(variable, value);\n  }\n}\n;\nfunction windowScrollTo(val) {\n  window.scrollTo(0, val);\n}\n;\nfunction selectIframeSection(val) {\n  var section = $('[data-section=\"' + val + '\"]');\n  $('.cd-demo-item--selected').removeClass('cd-demo-item--selected');\n\n  if (section.length > 0) {\n    section.addClass('cd-demo-item--selected');\n\n    if ($('.cd-demo-color__list--selected').length > 0) {\n      $('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n      section.addClass('cd-demo-color__list--selected');\n    }\n\n    windowScrollTo(section.parent().offset().top - 20);\n  }\n}\n;\nfunction selectIframeTab(val) {\n  //remove the selection effect\n  $('.cd-demo-item--selected').removeClass('cd-demo-item--selected');\n  var section = $('[data-tab]');\n\n  if (section.length > 0) {\n    section.addClass('cd-demo-item--is-hidden');\n    section.filter('[data-tab=\"' + val + '\"]').removeClass('cd-demo-item--is-hidden');\n\n    if (val == 'tab-lh-crop') {\n      //lhcrop in typograpgy -> select --font-primary\n      selectIframeSection('--font-1');\n    }\n  }\n}\n;\nfunction getMq() {\n  var windowWidth = $(window).outerWidth(),\n      mq = 0,\n      string = ''; // check if you can get external document width\n\n  if (window.parent && window.parent.document && window.parent.document.body && window.parent.document.body.clientWidth) {\n    windowWidth = window.parent.document.body.clientWidth;\n  }\n\n  switch (true) {\n    case windowWidth >= 1440:\n      mq = 5;\n      string = 'Visible mq: > 1440px';\n      break;\n\n    case windowWidth >= 1280:\n      mq = 4;\n      string = 'Visible mq: > 1280px';\n      break;\n\n    case windowWidth >= 1024:\n      mq = 3;\n      string = 'Visible mq: > 1024px';\n      break;\n\n    case windowWidth >= 600:\n      mq = 2;\n      string = 'Visible mq: > 600px';\n      break;\n\n    case windowWidth >= 480:\n      mq = 1;\n      string = 'Visible mq: > 480px';\n      break;\n\n    default:\n      mq = 0;\n      string = 'None';\n  }\n\n  $('.js-width').text(string);\n  return mq;\n}\n;\nfunction getScreenSize() {\n  if (window.parent && window.parent.document && window.parent.document.body && window.parent.document.body.clientWidth) {\n    return [window.parent.document.body.clientWidth, $(window).outerHeight()];\n  } else {\n    return [$(window).outerWidth(), $(window).outerHeight()];\n  }\n}\n;\nfunction getValidResponsiveValue(spaceArray, index, subIndex) {\n  var item = subIndex !== false ? spaceArray[index][subIndex] : spaceArray[index];\n  if (index == 0) return item;\n\n  if (item !== false && item !== '') {\n    return item;\n  } else {\n    return getValidResponsiveValue(spaceArray, index - 1, subIndex);\n  }\n}\n;\nfunction getValueUnit(value) {\n  if (!value || value == '') return [false, false];\n  var number = parseFloat(value),\n      unit = value.replace(number, '');\n  return [number, unit];\n}\n;\nfunction getBodyNotFalse(array, mq) {\n  var newArray = [];\n\n  for (var i = 0; i < 3; i++) {\n    newArray[i] = getValidResponsiveValue(array, mq, i);\n  }\n\n  return newArray;\n}\n;\nvar projectLoaded = '';\nvar MQ = getMq();\nfunction loadGlobalsStyle(project) {\n  //for components -> load project style\n  if (project) {\n    $('.js-cd-demo').trigger('globalsUpdating');\n    projectLoaded = project;\n  }\n\n  if (project.colors && project.colors !== '' && Object.values) {\n    //colors were saved and need to be modified\n    loadColorStyle(JSON.parse(project.colors));\n  } else {\n    loadColorDefaultStyle();\n  }\n\n  if (project.typography && project.typography !== '' && Object.values) {\n    //typography was saved and need to be modified\n    loadTypographyStyle(JSON.parse(decodeSafeURIComponent(project.typography)), true, MQ);\n  } else {\n    loadTypographyDefaultStyle(true, MQ);\n  } //do the same for the other globals\n\n\n  if (project.spacing && project.spacing !== '' && Object.values) {\n    loadSpacingStyle(JSON.parse(decodeSafeURIComponent(project.spacing)), MQ);\n  } else {\n    loadSpacingDefaultStyle(MQ);\n  }\n\n  if (project.buttons && project.buttons !== '' && Object.values) {\n    loadButtonsStyle(JSON.parse(decodeSafeURIComponent(project.buttons)), MQ);\n  } else {\n    loadButtonsDefaultStyle(MQ);\n  }\n\n  if (project.form && project.form !== '' && Object.values) {\n    loadFormsStyle(JSON.parse(decodeSafeURIComponent(project.form)), MQ);\n  } else {\n    loadFormsDefaultStyle(MQ);\n  } //if you need to update style on resize\n\n\n  if (project) {\n    $('.js-cd-demo').trigger('globalsUpdate');\n  }\n\n  $('.js-cd-demo').trigger('showComponent');\n}\n;\nfunction loadColorStyle(colors) {\n  //no need to do this for custom opacities as only default one are used in components\n  var variations = ['-lighter', '-light', '', '-dark', '-darker'];\n  btnColorLabels = Object.values(colors['mainColorLabels']);\n  btnColorCustomNiceLabels = colors['customColorLabels'] ? Object.values(colors['customColorLabels']) : [];\n  btnGradientsCustomNiceLabels = colors['gradientColorLabels'] ? Object.values(colors['gradientColorLabels']) : []; //set main colors - including custom colors as well\n\n  for (var i = 0; i < btnColorLabels.length; i++) {\n    var cssVarLab = i > 4 ? btnColorCustomNiceLabels[i - 5] : '--color-' + btnColorLabels[i];\n\n    for (var j = 0; j < variations.length; j++) {\n      setCssVariable(cssVarLab + variations[j], getHSL(Object.values(colors[btnColorLabels[i]][0][j])));\n      setColorPartVariables(cssVarLab + variations[j], Object.values(colors[btnColorLabels[i]][0][j]));\n    }\n  } //set black & white\n\n\n  var bVariations = ['', '-light', '-lighter'],\n      blackArray = getBWArray(colors['blackColors'][0]),\n      whiteArray = getBWArray(colors['whiteColors'][0]);\n\n  for (var i = 0; i < blackArray.length; i++) {\n    setCssVariable('--color-black' + bVariations[i], getHSL(blackArray[i]));\n    setColorPartVariables('--color-black' + bVariations[i], blackArray[i]);\n  }\n\n  var wVariations = ['', '-dark', '-darker'];\n\n  for (var i = 0; i < whiteArray.length; i++) {\n    setCssVariable('--color-white' + wVariations[i], getHSL(whiteArray[i]));\n    setColorPartVariables('--color-white' + wVariations[i], whiteArray[i]);\n  } //set contrasts\n\n\n  var contrastLabels = ['-bg', '-contrast-lower', '-contrast-low', '-contrast-medium', '-contrast-high', '-contrast-higher'];\n\n  for (var i = 0; i < contrastLabels.length; i++) {\n    setCssVariable('--color' + contrastLabels[i], getHSL(Object.values(colors['contrastColors'][0][i])));\n    setColorPartVariables('--color' + contrastLabels[i], Object.values(colors['contrastColors'][0][i]));\n  } // set gradients\n\n\n  for (var i = 0; i < btnGradientsCustomNiceLabels.length; i++) {\n    var cssVarLab = '--gradient-' + btnGradientsCustomNiceLabels[i],\n        gradientId = colors['gradientColorIds'][i] + 'Gradients';\n    setCssVariable(cssVarLab + '-stop-1', getHSL(Object.values(colors[gradientId][0][0])));\n    setColorPartVariables(cssVarLab + '-stop-1', Object.values(colors[gradientId][0][0]));\n    setCssVariable(cssVarLab + '-stop-2', getHSL(Object.values(colors[gradientId][0][1])));\n    setColorPartVariables(cssVarLab + '-stop-2', Object.values(colors[gradientId][0][1]));\n  } //font rendering\n\n\n  var fontRenderingCode = '';\n\n  if (colors['fontRendering'] && colors['fontRendering'][0]) {\n    if (Number(colors['fontRendering'][0]) == 1) fontRenderingCode = 'body{-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}';else if (Number(colors['fontRendering'][0]) == 2) fontRenderingCode = 'body{-webkit-font-smoothing: auto;-moz-osx-font-smoothing: auto;}';\n  }\n\n  var style = '<style id=\"font-rendering-style\">' + fontRenderingCode + '</style>';\n  $('#font-rendering-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\n;\nfunction loadColorDefaultStyle() {\n  // colors array\n  var defaultColors = [['--color-primary-darker', [220, 0.9, 0.42]], ['--color-primary-dark', [220, 0.9, 0.49]], ['--color-primary', [220, 0.9, 0.56]], ['--color-primary-light', [220, 0.9, 0.63]], ['--color-primary-lighter', [220, 0.9, 0.70]], ['--color-accent-darker', [349, 0.75, 0.36]], ['--color-accent-dark', [349, 0.75, 0.44]], ['--color-accent', [349, 0.75, 0.51]], ['--color-accent-light', [349, 0.75, 0.59]], ['--color-accent-lighter', [349, 0.75, 0.67]], ['--color-download-darker', [349, 0.75, 0.36]], ['--color-download-dark', [349, 0.75, 0.44]], ['--color-download', [349, 0.75, 0.51]], ['--color-download-light', [349, 0.75, 0.59]], ['--color-download-lighter', [349, 0.75, 0.67]], ['--color-black', [240, 0.08, 0.12]], ['--color-white', [0, 0, 1]], ['--color-success-darker', [94, 0.48, 0.42]], ['--color-success-dark', [94, 0.48, 0.48]], ['--color-success', [94, 0.48, 0.56]], ['--color-success-light', [94, 0.48, 0.65]], ['--color-success-lighter', [94, 0.48, 0.74]], ['--color-error-darker', [349, 0.75, 0.36]], ['--color-error-dark', [349, 0.75, 0.44]], ['--color-error', [349, 0.75, 0.51]], ['--color-error-light', [349, 0.75, 0.59]], ['--color-error-lighter', [349, 0.75, 0.67]], ['--color-info-darker', [349, 0.75, 0.36]], ['--color-info-dark', [349, 0.75, 0.44]], ['--color-info', [349, 0.75, 0.51]], ['--color-info-light', [349, 0.75, 0.59]], ['--color-info-lighter', [349, 0.75, 0.67]], ['--color-warning-darker', [46, 1, 0.47]], ['--color-warning-dark', [46, 1, 0.50]], ['--color-warning', [46, 1, 0.61]], ['--color-warning-light', [46, 1, 0.71]], ['--color-warning-lighter', [46, 1, 0.80]], ['--color-bg', [0, 0, 1]], ['--color-contrast-lower', [0, 0, 0.95]], ['--color-contrast-low', [240, 0.01, 0.83]], ['--color-contrast-medium', [240, 0.01, 0.48]], ['--color-contrast-high', [240, 0.04, 0.2]], ['--color-contrast-higher', [240, 0.08, 0.12]]];\n\n  for (var i = 0; i < defaultColors.length; i++) {\n    setCssVariable(defaultColors[i][0], getHSL(defaultColors[i][1]));\n    setColorPartVariables(defaultColors[i][0], defaultColors[i][1]);\n  }\n}\n;\nfunction setColorPartVariables(label, colorArray) {\n  setCssVariable(label + '-h', Math.round(colorArray[0]));\n  setCssVariable(label + '-s', Math.round(colorArray[1] * 100) + '%');\n  setCssVariable(label + '-l', Math.round(colorArray[2] * 100) + '%');\n}\n;\nfunction getBWArray(obj) {\n  var array = [];\n\n  for (var property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      array.push(Object.values(obj[property]));\n    }\n  }\n\n  return array;\n}\n;\nfunction loadTypographyStyle(typography, bool, mq) {\n  if (bool) {\n    //not responsive things\n    if (typography['fontCode'] && typography != '') $(typography['fontCode']).appendTo($('head'));\n\n    for (var property in typography['fontFamilies']) {\n      if (typography['fontFamilies'].hasOwnProperty(property) && typography['fontFamilyLabels'].hasOwnProperty(property)) {\n        setBodyCssVariable(typography['fontFamilyLabels'][property], typography['fontFamilies'][property]);\n      }\n    }\n\n    if (typography['lhCropCapitalLetter']) {\n      var lhcropArray = Object.values(typography['lhCropCapitalLetter']);\n      if (lhcropArray.length > 0) setCssVariable('--font-primary-capital-letter', lhcropArray[0]);\n    }\n\n    fontArray = [''];\n    btnFontIds = [0];\n\n    for (var property in typography['fontFamilyLabels']) {\n      if (typography['fontFamilyLabels'].hasOwnProperty(property)) {\n        fontArray.push(typography['fontFamilyLabels'][property]);\n        btnFontIds.push(typography['fontFamilyIds'][property]);\n      }\n    }\n  } //body/heading style\n\n\n  var headingValues = getBodyNotFalse(getTypographyArray(typography['headingInfo']), mq),\n      bodyValues = getBodyNotFalse(getTypographyArray(typography['bodyInfo']), mq);\n  var textVariables = 'root, *{--text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));}';\n  loadTypographyStyleTag(textVariables + getTypographyStyle(headingValues, 'h1, h2, h3, h4', typography) + getTypographyStyle(bodyValues, 'body', typography));\n  setTypographyCssVariables(headingValues, bodyValues, typography, mq);\n}\n;\nfunction loadTypographyDefaultStyle(bool, mq) {\n  // set variables - get values for --text-base-size and --text-scale-ratio\n  var bodyStyle = '--font-primary: Inter, system-ui, sans-serif;--text-base-size: 1em;--text-scale-ratio: 1.2;--text-unit: 1em;--body-line-height: 1.4;--heading-line-height: 1.2;--font-primary-capital-letter: 1;',\n      allStyle = ' --text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));';\n  bodyStyle = ':root{' + bodyStyle + '}';\n  allStyle = ':root, *{' + allStyle + '}';\n  var bodyResStyle = '@media (min-width:64rem){:root{--text-base-size: 1.25em;--text-scale-ratio: 1.25;}}';\n  var headingStyle = 'h1, h2, h3, h4 {font-family: var(--font-primary);font-weight: 700;}';\n  loadTypographyStyleTag(bodyStyle + allStyle + headingStyle + bodyResStyle); // append font link\n\n  var fontLink = '<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">';\n  var typographyStyle = $('#typography-style');\n  $(fontLink).insertAfter(typographyStyle);\n}\n;\nfunction loadTypographyStyleTag(styleContent) {\n  var defaultStyle = 'mark {background-color: hsla(var(--color-accent-h), var(--color-accent-s), var(--color-accent-l), 0.2);color: inherit;}.text-component {--line-height-multiplier: 1;--text-vspace-multiplier: 1;}.text-component blockquote {padding-left: 1em;border-left: 4px solid var(--color-contrast-low);}.text-component hr {background: var(--color-contrast-low);height: 1px;}.text-component figcaption {font-size: var(--text-sm);color: var(--color-contrast-medium);}.article {--body-line-height: 1.58;--text-vspace-multiplier: 1.2;}';\n  var style = '<style id=\"typography-style\">' + styleContent + defaultStyle + '</style>';\n  $('#typography-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\nfunction loadTypographyCssVarStyleGuide(typography) {\n  var code = ':root {'; // font family definition\n\n  var fontFamilies = '',\n      fontFamilyClasses = '';\n  var scale = '';\n  var textVariables = '';\n  var scaleResponsive = '';\n\n  if (typography['fontFamilies'] && typography['fontFamilyLabels']) {\n    for (var i = 0; i < typography['fontFamilies'].length; i++) {\n      if (typography['fontFamilyLabels'][i]) {\n        fontFamilies = fontFamilies + typography['fontFamilyLabels'][i] + ': ' + typography['fontFamilies'][i] + ';';\n        fontFamilyClasses = fontFamilyClasses + typography['fontFamilyLabels'][i].replace('--', '.') + '{font-family: var(' + typography['fontFamilyLabels'][i] + ');}';\n      }\n    }\n  }\n\n  code = code + fontFamilies;\n\n  if (typography['baseSize'] && typography['scaleRatio'] && typography['bodyInfo'] && typography['headingInfo']) {\n    scale = getTypographyScaleVar(typography, 0);\n    scaleResponsive = getTypographyScaleVarRes(typography);\n    textVariables = 'root, * {--text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));}';\n  }\n\n  code = code + scale + '}' + textVariables + scaleResponsive + fontFamilyClasses;\n  return code;\n}\n;\nfunction loadTypographyStyleStyleGuide(typography) {\n  var mq = ['', '32rem', '48rem', '64rem', '80rem', '90rem'];\n  var code = '';\n\n  if (typography['bodyInfo'] && typography['headingInfo']) {\n    for (var i = 0; i < mq.length; i++) {\n      var style = '';\n\n      if (typography['bodyInfo'][i]) {\n        var bodyStyle = getTypographyStyle(typography['bodyInfo'][i], 'body', typography);\n        style = i > 0 ? style + '@media (min-width:' + mq[i] + ') {' + bodyStyle + '}' : style + bodyStyle;\n      }\n\n      if (typography['headingInfo'][i]) {\n        var headingStyle = getTypographyStyle(typography['headingInfo'][i], 'h1, h2, h3, h4', typography);\n        style = i > 0 ? style + '@media (min-width:' + mq[i] + ') {' + headingStyle + '}' : style + headingStyle;\n      }\n\n      code = code + style;\n    }\n  }\n\n  return code;\n}\n;\nfunction getTypographyScaleVar(typography, index) {\n  var code = '';\n  if (typography['baseSize'][index]) code = code + '--text-base-size: ' + typography['baseSize'][index] + ';';\n  if (typography['scaleRatio'][index]) code = code + '--text-scale-ratio: ' + typography['scaleRatio'][index] + ';';\n  if (typography['bodyInfo'][index] && typography['bodyInfo'][index][2]) code = code + '--body-line-height: ' + typography['bodyInfo'][index][2] + ';';\n  if (typography['headingInfo'][index] && typography['headingInfo'][index][2]) code = code + '--heading-line-height: ' + typography['headingInfo'][index][2] + ';';\n  if (index == 0) code = code + '--text-unit: ' + getTextUnit(typography);\n  return code;\n}\nfunction getTextUnit(typography) {\n  var textUnit = '1em';\n  if (typography['baseSize'][0] && (typography['baseSize'][0].indexOf('px') > -1 || typography['baseSize'][0].indexOf('rem') > -1)) textUnit = 'var(--text-base-size)';\n  return textUnit;\n}\n;\nfunction getTypographyScaleVarRes(typography) {\n  var mq = ['', '32rem', '48rem', '64rem', '80rem', '90rem'];\n  var code = '';\n\n  for (var i = 1; i < mq.length; i++) {\n    code = code + '@media (min-width:' + mq[i] + ') {:root{' + getTypographyScaleVar(typography, i) + '}}';\n  }\n\n  return code;\n}\nfunction loadSpacingStyle(spacing, mq) {\n  var spaceUnit = getValidResponsiveValue(Object.values(spacing['spaceUnit']), mq, false),\n      spaceRatioCustom = getSpaceRatioCustom(spacing['customSpaceRatio']); // var srList = getSpacingValues(Object.values(spacing['spaceRatio']), spaceUnit, mq, spaceRatioCustom),\n  // this will return only the list of the multiplier (not including the --space-unit)\n\n  var srList = getSpacingMultiplier(Object.values(spacing['spaceRatio']), mq, spaceRatioCustom),\n      paddingVariable = srList[getValidResponsiveValue(Object.values(spacing['padding']), mq, false) - 1];\n  updateSpacingCssVariables(srList, paddingVariable, spaceUnit);\n}\n;\nfunction loadSpacingDefaultStyle(mq) {\n  var responsiveSpacing = '@media (min-width:64rem){:root{--space-unit:  1.25em;}}'; // var style = '<style id=\"spacing-style\">'+responsiveSpacing+'</style>';\n  // $('#spacing-style').remove();\n  // var baseStyle = $('#cd-base-part-1');\n  // $(style).insertAfter(baseStyle);\n  // load after component style -> this will need to overwrite the default spacing style\n  // $('head').append(style);\n\n  loadSpacingStyleTag(responsiveSpacing);\n}\n;\nfunction loadSpacingStyleTag(style) {\n  var style = '<style id=\"spacing-style\">' + style + '</style>';\n  $('#spacing-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\n;\nfunction setTypographyCssVariables(headingValues, bodyValues, typography, mq) {\n  //css variables\n  if (headingValues[2] && headingValues[2] != '') {\n    setCssVariable('--heading-line-height', headingValues[2]); // setElementCssVariable('text-component', '--heading-line-height', headingValues[2]);\n  }\n\n  if (bodyValues[2] && bodyValues[2] != '') {\n    setCssVariable('--body-line-height', bodyValues[2]); // setElementCssVariable('text-component', '--body-line-height', bodyValues[2]);\n  }\n\n  setCssVariable('--text-base-size', getValidResponsiveValue(Object.values(typography['baseSize']), mq, false));\n  setCssVariable('--text-scale-ratio', getValidResponsiveValue(Object.values(typography['scaleRatio']), mq, false));\n  setCssVariable('--text-unit', getTextUnit(typography));\n}\n;\nfunction getTypographyArray(obj) {\n  var arr = [];\n\n  for (var i = 0; i < 6; i++) {\n    arr.push(Object.values(obj[i]));\n  }\n\n  return arr;\n}\n;\nfunction getTypographyStyle(array, selector, typography) {\n  var style = '';\n\n  if (parseInt(array[0]) && parseInt(array[0]) != 0) {\n    var fontIds = Object.values(typography['fontFamilyIds']); // importantCss = selector == 'body' ? '!important' : '';\n\n    style = style + 'font-family: ' + typography['fontFamilies'][fontIds.indexOf(parseInt(array[0]))] + ';';\n  }\n\n  if (array[1] && array[1] != '') style = style + 'font-weight: ' + array[1] + ';';\n  return selector + '{' + style + '}';\n}\n; // export function updateSpacingCssVariables(list, padding, spaceUnit) {\n// \tsetCssVariable('--space-unit', spaceUnit);\n// \tsetCssVariable('--component-padding', padding);\n// \tfor(var i = 0; i < list.length; i++) {\n// \t\tsetCssVariable(paddingVariables[i], list[i]);\n// \t}\n// };\n\nfunction updateSpacingCssVariables(list, padding, spaceUnit) {\n  setCssVariable('--space-unit', spaceUnit);\n  var spacingVariables = '--component-padding:' + 'calc(' + padding + ' * var(--space-unit));';\n\n  for (var i = 0; i < list.length; i++) {\n    spacingVariables = spacingVariables + paddingVariables[i] + ': calc(' + list[i] + ' * var(--space-unit));';\n  }\n\n  spacingVariables = 'root, *{' + spacingVariables + '}';\n  loadSpacingStyleTag(spacingVariables);\n}\n;\nfunction getSpacingValues(spaceRatio, su, mq, spaceRatioCustom) {\n  var list = spaceRatioUnit[getValidResponsiveValue(spaceRatio, mq, false)];\n\n  if (list == '') {\n    //custom scale\n    list = getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio);\n  }\n\n  var spaceList = [];\n  var suArray = getValueUnit(su);\n\n  if (suArray[0] === false) {\n    suArray[0] = 1;\n    suArray[1] = 'em';\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    var updated = Math.round(list[i] * suArray[0] * 1000) / 1000;\n    spaceList.push(updated + suArray[1]);\n  }\n\n  return spaceList;\n}\n;\nfunction getSpacingMultiplier(spaceRatio, mq, spaceRatioCustom) {\n  var list = spaceRatioUnit[getValidResponsiveValue(spaceRatio, mq, false)];\n\n  if (list == '') {\n    //custom scale\n    list = getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio);\n  }\n\n  return list;\n}\n;\nfunction getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio) {\n  var array = [];\n\n  for (var i = 0; i < spaceRatioUnit[1].length; i++) {\n    array[i] = getSpacingValidResponsiveValueCustomRatio(spaceRatioCustom[i], mq, spaceRatio);\n  }\n\n  return array;\n}\n;\nfunction getSpacingValidResponsiveValueCustomRatio(spaceArray, index, spaceRatio) {\n  if (index == 0) return spaceArray[0];\n  var item = spaceArray[index];\n\n  if (item !== false && item !== '' && spaceRatio[index] == 6) {\n    //item defined and space ratio set to custom\n    return item;\n  } else {\n    return getSpacingValidResponsiveValueCustomRatio(spaceArray, index - 1, spaceRatio);\n  }\n}\n;\nfunction getSpaceRatioCustom(obj) {\n  var arr = [];\n\n  for (var i = 0; i < 11; i++) {\n    arr.push(Object.values(obj[i]));\n  }\n\n  return arr;\n}\n;\nfunction loadButtonsStyle(buttons) {\n  //convert obj to array;\n  var buttonsArray = getButtonsArrayStyle(buttons['style']);\n  var btnsList = ['btn', 'btn--primary', 'btn--subtle', 'btn--accent', 'btn--disabled', 'btn--sm', 'btn--md', 'btn--lg'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      code = '';\n\n  for (var i = 0; i < btnsList.length; i++) {\n    code = code + buttonsCodeStyle(buttonsArray[btnsList[i]], btnsList[i], statusList, statusPriorityList, false, true);\n  } // get code for btn--icon\n\n\n  var btnIconCode = buttonIconCodeStyle(buttonsArray['btn']); // get code for button variables\n\n  var btnVariables = buttonVariables(buttonsArray);\n  loadButtonsStyleTag(btnVariables + code + btnIconCode);\n}\n;\nfunction loadButtonsStyleStyleGuide(buttons) {\n  // buttonsArray = buttons['btnStyle']\n  if (!buttons['btnStyle']) return '';\n  var buttonsArray = buttons['btnStyle']; // button-icon class\n\n  var btnIconCode = '';\n\n  if (buttonsArray['btn']) {\n    btnIconCode = buttonIconCodeStyle(buttonsArray['btn']);\n  } // button CSS variables\n\n\n  var btnVariables = buttonVariables(buttonsArray); // buttons style\n\n  var btnsList = ['btn', 'btn--primary', 'btn--subtle', 'btn--accent', 'btn--disabled', 'btn--sm', 'btn--md', 'btn--lg'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      btnStyle = ''; // default btns style\n\n  for (var i = 0; i < btnsList.length; i++) {\n    btnStyle = btnStyle + buttonsCodeStyle(buttonsArray[btnsList[i]], btnsList[i], statusList, statusPriorityList, false, true);\n  } // custom btns code\n\n\n  if (buttons['customBtns'] && buttons['customBtns'].length > 0) {\n    for (var i = 0; i < buttons['customBtns'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(buttonsArray[buttons['customBtns'][i][1]], buttons['customBtns'][i][0], statusList, statusPriorityList, false, true);\n    }\n  }\n\n  return btnVariables + btnStyle + btnIconCode;\n}\n;\nfunction loadSharedStyleStyleGuide(shared_style) {\n  var statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      btnStyle = '';\n\n  if (shared_style['customStyles'] && shared_style['customStyles'].length > 0) {\n    for (var i = 0; i < shared_style['customStyles'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(shared_style.customStyleArray[shared_style['customStyles'][i][1]], escapeCSScharacters(shared_style['customStyles'][i][0]), statusList, statusPriorityList, false);\n    }\n  }\n\n  if (shared_style['customTextStyles'] && shared_style['customTextStyles'].length > 0) {\n    for (var i = 0; i < shared_style['customTextStyles'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(shared_style.customTextStyleArray[shared_style['customTextStyles'][i][1]], escapeCSScharacters(shared_style['customTextStyles'][i][0]), statusList, statusPriorityList, false);\n    }\n  }\n\n  return btnStyle;\n}\n;\nfunction escapeCSScharacters(label) {\n  label = label.replace(/\\:/g, '\\\\:');\n  label = label.replace(/\\%/g, '\\\\%');\n  label = label.replace(/\\//g, '\\\\/');\n  return label;\n}\n;\nfunction loadButtonsDefaultStyle(mq) {\n  var btnsStyle = ':root {--btn-font-size: 1em;--btn-padding-x: var(--space-sm); --btn-padding-y: var(--space-xxs); -btn-radius: 0.25em;}.btn {line-height: 1.2;box-shadow: var(--shadow-xs);-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;transition: .2s; will-change: transform;}.btn:hover {cursor: pointer;box-shadow: var(--shadow-sm);}.btn:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-contrast-higher-h), var(--color-contrast-higher-s), var(--color-contrast-higher-l), 0.15);outline: none;}.btn:active {transform: translateY(2px);}.btn--primary {background-color: var(--color-primary);color: var(--color-white)}.btn--primary:hover {background-color: var(--color-primary-dark);}.btn--primary:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-primary-h), var(--color-primary-s), var(--color-primary-l), 0.2);}.btn--subtle {background-color: var(--color-contrast-lower);color: var(--color-contrast-higher);}.btn--accent {background-color: var(--color-accent);color: var(--color-white);}.btn--accent:hover {background-color: var(--color-accent-dark);}.btn--accent:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-accent-h), var(--color-accent-s), var(--color-accent-l), 0.2);}.btn--disabled, .btn[disabled], .btn[readonly] {opacity: 0.6;cursor: not-allowed;}.btn--sm{font-size: 0.8em;}.btn--md{font-size: 1.2em;}.btn--lg{font-size: 1.4em;}';\n  loadButtonsStyleTag(btnsStyle);\n}\n;\nfunction buttonVariables(btnStyle) {\n  var sizes = [['btn', ''], ['btn--sm', '-sm'], ['btn--md', '-md'], ['btn--lg', '-lg']];\n  var string = '';\n\n  for (var i = 0; i < sizes.length; i++) {\n    if (btnStyle[sizes[i][0]] && btnStyle[sizes[i][0]]['none'] && btnStyle[sizes[i][0]]['none']['typography']) {\n      var fontBase = getButtonsFontSizeValue(btnStyle[sizes[i][0]]['none']['typography']);\n      if (fontBase != '') string = string + '--btn-font-size' + sizes[i][1] + ':' + fontBase + ';';\n    }\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['padding'] && btnStyle['btn']['none']['padding'][1]) {\n    string = string + '--btn-padding-x:' + getButtonsPaddingValue(btnStyle['btn']['none']['padding'][1]) + ';';\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['padding'] && btnStyle['btn']['none']['padding'][0]) {\n    string = string + '--btn-padding-y:' + getButtonsPaddingValue(btnStyle['btn']['none']['padding'][0]) + ';';\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['appearance']) {\n    if (btnStyle['btn']['none']['appearance'][2]) {\n      string = string + '--btn-radius:' + btnStyle['btn']['none']['appearance'][2] + ';';\n    } else {\n      string = string + '--btn-radius: 0em;';\n    }\n  }\n\n  return ':root{' + string + '}';\n}\n;\nfunction loadButtonsStyleTag(style) {\n  var styleEl = '<style id=\"buttons-style\">' + style + '</style>';\n  var baseStyle = $('#cd-base-part-1');\n  $(styleEl).insertAfter(baseStyle); // $('head').append(styleEl);\n}\n;\nfunction loadFormsStyle(forms) {\n  var formsArray = getButtonsArrayStyle(forms['style']);\n  var formsList = ['form-control', '[disabled]', '[aria-invalid]', 'legend', 'form-label'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      code = '';\n  code = resetFormsStyleComponents();\n\n  for (var i = 0; i < formsList.length; i++) {\n    code = code + buttonsCodeStyle(formsArray[formsList[i]], formsList[i], statusList, statusPriorityList, true);\n  } // get code for form variables\n\n\n  var btnVariables = formVariables(formsArray['form-control']);\n  loadFormsStyleTag(btnVariables + code);\n}\n;\nfunction loadFormsStyleStyleGuide(form) {\n  // form elements style\n  if (!form['btnStyle']) return '';\n  var formsArray = form['btnStyle'];\n  var formsList = ['form-control', '[disabled]', '[aria-invalid]', 'legend', 'form-label'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      formStyle = '';\n\n  for (var i = 0; i < formsList.length; i++) {\n    formStyle = formStyle + buttonsCodeStyle(formsArray[formsList[i]], formsList[i], statusList, statusPriorityList, true);\n  } // get code for form variables\n\n\n  var formCSSVariables = formVariables(formsArray['form-control']);\n  return formStyle + formCSSVariables;\n}\n;\nfunction formVariables(formStyle) {\n  var string = '';\n\n  if (formStyle && formStyle['none'] && formStyle['none']['padding'] && formStyle['none']['padding'][1]) {\n    string = string + '--form-control-padding-x:' + getButtonsPaddingValue(formStyle['none']['padding'][1]) + ';';\n  }\n\n  if (formStyle && formStyle['none'] && formStyle['none']['padding'] && formStyle['none']['padding'][0]) {\n    string = string + '--form-control-padding-y:' + getButtonsPaddingValue(formStyle['none']['padding'][0]) + ';';\n  }\n\n  if (formStyle && formStyle['none'] && formStyle['none']['appearance']) {\n    if (formStyle['none']['appearance'][2]) {\n      string = string + '--form-control-radius:' + formStyle['none']['appearance'][2] + ';';\n    } else {\n      string = string + '--form-control-radius: 0em;';\n    }\n  }\n\n  return ':root{' + string + '}';\n}\n;\nfunction loadFormsDefaultStyle(mq) {\n  var formStyle = ':root {--form-control-padding-x: var(--space-xs);--form-control-padding-y: var(--space-xxs);--form-control-radius: 0.25em;}.form-control {line-height: 1.2;background-color: var(--color-bg);border: 2px solid var(--color-contrast-low);transition: 0.2s;}.form-control:focus {border-color: var(--color-primary);box-shadow: 0px 0px 0px 2px hsla(var(--color-primary-h), var(--color-primary-s),var(--color-primary-l), 0.2);outline: none;}.form-control[aria-invalid=\"true\"], .form-control--error {border-color: var(--color-error);}.form-control[aria-invalid=\"true\"]:focus, .form-control--error:focus {border-color: var(--color-error);box-shadow: 0px 0px 0px 2px hsla(var(--color-error-h), var(--color-error-s),var(--color-error-l), 0.2);}.form-control--disabled, .form-control[disabled], .form-control[readonly] {cursor: not-allowed;}.form-label {font-size: var(--text-sm);}.form-legend{font-size: var(--text-md);}';\n  formStyle = formStyle + '.form-control::placeholder{opacity: 1;color: var(--color-contrast-medium);}';\n  loadFormsStyleTag(formStyle);\n}\n;\nfunction loadFormsStyleTag(style) {\n  var defaultStyle = '.form-error-msg {background-color: hsla(var(--color-error-h),var(--color-error-s), var(--color-error-l), 0.2);color: inherit;border-radius: var(--radius-md);padding: var(--space-xs);}';\n  var styleEl = '<style id=\"forms-style\">' + style + defaultStyle + '</style>';\n  var baseStyle = $('#cd-base-part-1');\n  $(styleEl).insertAfter(baseStyle); // $('head').append(styleEl);\n}\n;\nfunction boxShadowIsDefined(array) {\n  return array && array[0] && array[0][1] && array[0][1] != '';\n}\n;\nfunction getButtonsArrayStyle(obj) {\n  var array = [];\n\n  for (var property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      array[property] = [];\n\n      for (var subproperty in obj[property]) {\n        if (obj[property].hasOwnProperty(subproperty)) {\n          array[property][subproperty] = [];\n\n          for (var val in obj[property][subproperty]) {\n            if (obj[property][subproperty].hasOwnProperty(val)) {\n              if (val == 'border' || val == 'textShadow' || val == 'shadow' || val == 'transform' || val == 'transition') {\n                array[property][subproperty][val] = [];\n\n                for (var subVal in obj[property][subproperty][val]) {\n                  if (obj[property][subproperty][val].hasOwnProperty(subVal)) {\n                    array[property][subproperty][val][subVal] = Object.values(obj[property][subproperty][val][subVal]);\n                  }\n                }\n              } else {\n                array[property][subproperty][val] = Object.values(obj[property][subproperty][val]);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return array;\n}\n;\nfunction buttonsCodeStyle(style, btnLabel, statusList, statusPriorityList, isDemoReset, isButton) {\n  var string = '';\n  if (!style) return string;\n  var btnLabelmodified = btnLabel;\n\n  if (btnLabel == '[disabled]') {\n    btnLabelmodified = 'form-control--disabled, .form-control[disabled], .form-control[readonly]';\n  } else if (btnLabel == '[aria-invalid]') {\n    btnLabelmodified = 'form-control[aria-invalid=\"true\"], .form-control--error';\n  } else if (btnLabel == 'legend') {\n    btnLabelmodified = 'form-legend';\n  } else if (btnLabel == 'btn--disabled') {\n    btnLabelmodified = 'btn--disabled, .btn[disabled], .btn[readonly]';\n  }\n\n  var btnHasTransform = isButton && buttonsHasTransformStyle(style, statusPriorityList);\n\n  for (var i = 0; i < statusPriorityList.length; i++) {\n    var styleLabel = i == 0 ? '.' + btnLabelmodified : setStatusList('.' + btnLabelmodified, statusPriorityList[i]);\n    var newCode = getButtonCode(style[statusPriorityList[i]], '', true, btnLabel, statusPriorityList[i], isDemoReset, btnHasTransform && i == 0);\n    newCode = newCode.trim();\n\n    if (newCode.slice(-1) == '}') {\n      string = string + styleLabel + '{' + newCode;\n    } else {\n      string = string + styleLabel + '{' + newCode + '}';\n    }\n  }\n\n  string = string.replace(/\\n/g, '');\n  return string;\n}\n;\nfunction setStatusList(label, status) {\n  // e.g., if label = '.form-control[aria-invalid=\"true\"], .form-control--error' and status = ':focus', return '.form-control[aria-invalid=\"true\"]:focus, .form-control--error:focus'\n  var labelArray = label.split(',');\n\n  if (labelArray.length == 1) {\n    return label + status;\n  } else {\n    var newLabel = '';\n\n    for (var i = 0; i < labelArray.length; i++) {\n      if (i > 0) newLabel = newLabel + ',';\n      newLabel = newLabel + labelArray[i] + status;\n    }\n\n    return newLabel;\n  }\n}\n;\nfunction buttonIconCodeStyle(btnStyle) {\n  var code = '';\n\n  if (btnStyle && btnStyle['none'] && btnStyle['none']['padding'] && btnStyle['none']['padding'][0] && btnStyle['none']['padding'][0] != 0) {\n    code = '.btn--icon {padding: ' + spacingArray[btnStyle['none']['padding'][0]] + ';}';\n  }\n\n  return code;\n}\n;\nfunction buttonsHasTransformStyle(style, priorityList) {\n  var hasTransform = false;\n\n  for (var i = 1; i < priorityList.length; i++) {\n    if (!style[priorityList[i]]) return;\n    var transform = style[priorityList[i]]['transform'];\n\n    if (transform.length > 1 || transform.length > 0 && transform[0][0] != 0) {\n      hasTransform = true;\n      break;\n    }\n  }\n\n  return hasTransform;\n}\n;\nfunction getButtonCode(array, spacing, reset, btnLabel, btnStatus, isDemoReset, btnHasTransform) {\n  var string = '';\n\n  for (var property in array) {\n    switch (property) {\n      case 'appearance':\n        string = string + getButtonsAppearanceStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'padding':\n        string = string + getButtonsPaddingStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'margin':\n        string = string + getButtonsMarginStyle(array[property], spacing, reset);\n        break;\n\n      case 'border':\n        string = string + getButtonsBorderStyle(array[property], spacing, reset);\n        break;\n\n      case 'typography':\n        string = string + getButtonsTypographyStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'textShadow':\n        string = string + getButtonsTextShadowStyle(array[property], spacing, reset);\n        break;\n\n      case 'shadow':\n        string = string + getButtonsShadowStyle(array[property], spacing, reset, isDemoReset);\n        break;\n\n      case 'outline':\n        string = string + getButtonsOutlineStyle(array[property], spacing, reset);\n        break;\n\n      case 'transform':\n        string = string + getButtonsTransformStyle(array[property], spacing, reset);\n        break;\n\n      case 'transition':\n        string = string + getButtonsTransitionStyle(array[property], spacing, reset);\n        break;\n\n      case 'placeholder':\n        string = string + getButtonsPlaceholderStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n    }\n  }\n\n  if (btnHasTransform) string = string + '\\n' + spacing + 'will-change: transform;';\n  return string;\n}\n;\nfunction getButtonsAppearanceStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n\n  if (array[0]) {\n    if (array[0].indexOf('--gradient-') > -1) {\n      string = string + '\\n' + spacing + getGradientBgStyle(array[0]);\n    } else {\n      string = string + '\\n' + spacing + 'background: ' + getColorValue(array[0], reset) + ';';\n    }\n  }\n\n  if (array[1]) string = string + '\\n' + spacing + 'color: ' + getColorValue(array[1], reset) + ';';\n\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {// for copy code -> no need to add border-radius in code -> css variables already set\n  } else {\n    if (array[7] && array[7] > 0) {\n      string = string + '\\n' + spacing + 'border-radius: ' + borderRadiusValues[array[7]] + ';';\n    } else if (array[2] && array[2] != '') {\n      string = string + '\\n' + spacing + 'border-radius: ' + array[2] + ';';\n    }\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'opacity: ' + array[3] + ';';\n  if (array[4] && array[4] != 0) string = string + '\\n' + spacing + 'cursor: ' + getCursorValue(array[4]) + ';';\n  return string;\n}\n;\nfunction getGradientBgStyle(label) {\n  var angle = label.indexOf('-right') > -1 ? '90deg' : '180deg',\n      niceLabel = label.replace('-right', '').replace('-bottom', '');\n  return 'background: linear-gradient(' + angle + ', var(' + niceLabel + '-stop-1), var(' + niceLabel + '-stop-2));';\n}\n;\nfunction getButtonsPaddingStyle(array, spacing, reset, btnLabel, btnStatus) {\n  //Y - X\n  // for copy code -> no need to add padding in code -> css variables already set\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) return '';\n  var string = '';\n  if (array.length < 1) return string;\n\n  if (array[0] != 0 && array[1] != 0) {\n    string = string + '\\n' + spacing + 'padding: ' + spacingArray[array[0]] + ' ' + spacingArray[array[1]] + ';';\n  } else {\n    if (array[0] != 0) string = string + '\\n' + spacing + 'padding-top: ' + spacingArray[array[0]] + ';\\n' + spacing + 'padding-bottom: ' + spacingArray[array[0]] + ';';\n    if (array[1] != 0) string = string + '\\n' + spacing + 'padding-left: ' + spacingArray[array[1]] + ';\\n' + spacing + 'padding-right: ' + spacingArray[array[1]] + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsPaddingValue(value) {\n  // setting css variables for copy code only\n  var padding = '';\n  if (value != 0) padding = spacingArray[value];\n  return padding;\n}\n;\nfunction getButtonsMarginStyle(array, spacing, reset) {\n  //top left right bottom\n  var string = '';\n  if (array.length < 1) return string;\n\n  if (array[0] != 0 && array[1] != 0 && array[2] != 0 && array[3] != 0) {\n    string = string + '\\n' + spacing + 'margin: ' + spacingArray[array[0]] + ' ' + spacingArray[array[2]] + ' ' + spacingArray[array[3]] + ' ' + spacingArray[array[1]] + ';';\n  } else {\n    if (array[0] != 0) string = string + '\\n' + spacing + 'margin-top: ' + spacingArray[array[0]] + ';';\n    if (array[1] != 0) string = string + '\\n' + spacing + 'margin-left: ' + spacingArray[array[1]] + ';';\n    if (array[2] != 0) string = string + '\\n' + spacing + 'margin-right: ' + spacingArray[array[2]] + ';';\n    if (array[3] != 0) string = string + '\\n' + spacing + 'margin-bottom: ' + spacingArray[array[3]] + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsBorderStyle(array, spacing, reset) {\n  var string = '',\n      colorVariables = '';\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][3] == 0) string = string + '\\n' + spacing + getBorderType(array[i][1]) + ': none;';else if (array[i][2] == '') {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][0], '--color-border' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      string = string + '\\n' + spacing + getBorderType(array[i][1]) + '-color: ' + variable[1] + ';';\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][0], '--color-border' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      string = string + '\\n' + spacing + getBorderType(array[i][1]) + ': ' + array[i][2] + ' ' + getBorderStyle(array[i][3]) + ' ' + variable[1] + ';'; // string = string + '\\n'+spacing+getBorderType(array[i][1])+': '+array[i][2]+' '+getBorderStyle(array[i][3])+' '+getColorValue(array[i][0], reset)+';';\n    }\n  }\n\n  return colorVariables + string;\n}\n;\nfunction getButtonsTypographyStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n  if (array[0]) string = string + '\\n' + spacing + 'font-family: var(' + fontArray[btnFontIds.indexOf(array[0])] + ');';\n\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {// for copy code -> no need to add font-size in code -> css variables already set\n  } else {\n    if (array[1] && array[1] != 0) {\n      var fontSize = array[1] == 9 ? array[2] : textArrayValues[array[1]];\n\n      if (btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {\n        if (btnLabel == 'btn') string = string + '\\n' + spacing + '--btn-font-size: ' + fontSize + ';';else string = string + '\\n' + spacing + '--form-control-font-size: ' + fontSize + ';';\n      } else {\n        string = string + '\\n' + spacing + 'font-size: ' + fontSize + ';';\n      }\n    }\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'font-weight: ' + array[3] + ';';\n  if (array[4] && array[4] != 0) string = string + '\\n' + spacing + 'text-transform: ' + getTextTransform(array[4]) + ';';\n  if (array[5] && array[5] != 0) string = string + '\\n' + spacing + 'text-decoration: ' + getTextDecoration(array[5]) + ';';\n  if (btnLabel == 'btn' && btnStatus == 'none' && (!array[5] || array[5] == 0)) string = string + '\\n' + spacing + 'text-decoration: none;';\n  if (array[6] && array[6] != '') string = string + '\\n' + spacing + 'line-height: ' + array[6] + ';';\n  if (array[7] && array[7] != '') string = string + '\\n' + spacing + 'letter-spacing: ' + array[7] + ';';\n\n  if (array[8] && array[8] != 0) {\n    if (reset && reset === true) {\n      string = string + '\\n' + spacing + getFontSmoothing();\n    } else {\n      string = string + '\\n' + spacing + '@include fontSmooth;';\n    }\n  }\n\n  return string;\n}\n;\nfunction getButtonsTextShadowStyle(array, spacing, reset) {\n  var string = '',\n      colorVariables = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'text-shadow: none;';\n      set = false;\n      break;\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][1], '--color-text-shadow' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      if (i > 0) string = string + ', ';\n      string = string + array[i][2] + ' ' + variable[1];\n      set = true;\n    }\n  }\n\n  if (set) string = colorVariables + '\\n' + spacing + 'text-shadow: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsShadowStyle(array, spacing, reset, isDemoReset) {\n  var string = '',\n      colorVariables = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'box-shadow: none;';\n      if (isDemoReset) string = '\\n' + spacing + 'box-shadow: none !important;';\n      set = false;\n      break;\n    } else if (array[i][3] > 1) {\n      // custom shadow with framework variables\n      if (i > 0) string = string + ', ';\n      string = string + shadowVariables[array[i][3]];\n      set = true;\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][1], '--color-shadow' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      if (i > 0) string = string + ', ';\n      string = string + getBoxShadowType(array[i][3]) + array[i][2] + ' ' + variable[1];\n      set = true;\n    }\n  }\n\n  if (set) {\n    // isDemoReset -> when loading forms for components, make sure to add important to box shadow to make sure the custom shadow is showed\n    if (isDemoReset) string = string + ' !important';\n    string = colorVariables + '\\n' + spacing + 'box-shadow: ' + string + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsOutlineStyle(array, spacing, reset) {\n  var string = '';\n\n  if (array[1] && array[1] != 0) {\n    if (array[1] == 8) string = string + '\\n' + spacing + 'outline: none;';else string = string + '\\n' + spacing + 'outline: ' + array[2] + ' ' + getOutlineStyle(array[1]) + ' ' + getColorValue(array[0], reset) + ';';\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'outline-offset: ' + array[3] + ';';\n  return string;\n}\n;\nfunction getButtonsTransformStyle(array, spacing, reset) {\n  var string = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 0) {\n      string = '\\n' + spacing + 'transform: none;';\n      break;\n    } else {\n      if (i > 0) string = string + ' ';\n      string = string + getTransformProperty(array[i][0]) + '(' + array[i][1] + ')';\n      set = true;\n    }\n  }\n\n  if (set) string = '\\n' + spacing + 'transform: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsTransitionStyle(array, spacing, reset) {\n  var string = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'transition: none;';\n      break;\n    } else {\n      if (i > 0) string = string + ', ';\n      string = string + getTransitionProperty(array[i][0]) + ' ' + array[i][1] + 's ' + getTransitionEase(array[i][2]);\n      if (array[i][3] != '') string = string + ' ' + array[i][3] + 's';\n      set = true;\n    }\n  }\n\n  if (set) string = '\\n' + spacing + 'transition: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsPlaceholderStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n  if (array.length < 1 || !array[0] || array[0] == '') return '';\n  var style = '\\n' + spacing + '  color: ' + getColorValue(array[0], reset) + ';';\n\n  if (reset && reset === true) {\n    string = string + '}';\n    var selector = '.' + btnLabel;\n    if (btnStatus != 'none') selector = selector + btnStatus;\n    string = string + selector + '::placeholder {\\n' + spacing + '  opacity: 1;' + spacing + style + '\\n' + spacing + '}';\n  } else {\n    string = string + '\\n\\n' + spacing + '&::placeholder {\\n' + spacing + '  opacity: 1;' + spacing + style + '\\n' + spacing + '}';\n  }\n\n  return string;\n}\n;\nfunction getButtonsFontSizeValue(array) {\n  var fontSize = '';\n\n  if (array[1] && array[1] != 0) {\n    fontSize = array[1] == 9 ? array[2] : textArrayValues[array[1]];\n  }\n\n  return fontSize;\n}\n;\nfunction resetFormsStyleComponents() {\n  var style = '';\n  style = style + '.form-legend {color: inherit;line-height: normal;}';\n  return style;\n}\n;\nfunction getSuffixOpacity(value) {\n  if (value == 0) return '-a00';\n  if (value < 10) return '-a0' + value;\n  return '-a' + value;\n}\n;\nfunction getLuminance(hsl, iframe) {\n  if (hsl[0] == 0 && hsl[1] == 0 && hsl[2] == 1) return 1; // white\n\n  if (hsl[0] == 0 && hsl[1] == 0 && hsl[2] == 0) return 0; // black\n\n  var rgbSr = getRGBsrValues(hsl, iframe);\n  return 0.2126 * rgbSr[0] + 0.7152 * rgbSr[1] + 0.0722 * rgbSr[2];\n}\n;\nfunction getRGBsrValues(value, iframe) {\n  var rgb = getRGBValues(value, iframe);\n  var rSr = rgb[0] <= 0.03928 ? rgb[0] / 12.92 : Math.pow((rgb[0] + 0.055) / 1.055, 2.4);\n  var gSr = rgb[1] <= 0.03928 ? rgb[1] / 12.92 : Math.pow((rgb[1] + 0.055) / 1.055, 2.4);\n  var bSr = rgb[2] <= 0.03928 ? rgb[2] / 12.92 : Math.pow((rgb[2] + 0.055) / 1.055, 2.4);\n  return [rSr, gSr, bSr];\n}\n;\nfunction getRGBValues(hsl, iframe) {\n  var rgb = getRGBfromHSL(hsl);\n  return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255];\n}\n;\nfunction getRGBfromHSL(hsl) {\n  return chroma.hsl(hsl).rgb();\n}\n;\nvar loadedIframeCheck = false; //select text of a contentEditable element\n\njQuery.fn.selectText = function () {\n  var doc = document;\n  var element = this[0];\n\n  if (doc.body.createTextRange) {\n    var range = document.body.createTextRange();\n    range.moveToElementText(element);\n    range.select();\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    var range = document.createRange();\n    range.selectNodeContents(element);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n};\n\nfunction initFontList(typography) {\n  fontArray = [''];\n  btnFontIds = [0];\n\n  for (var property in typography['fontFamilyLabels']) {\n    if (typography['fontFamilyLabels'].hasOwnProperty(property)) {\n      fontArray.push(typography['fontFamilyLabels'][property]);\n      btnFontIds.push(typography['fontFamilyIds'][property]);\n    }\n  }\n}\n;\n\n(function () {\n  var demoContainer = $('.js-cd-demo-container'),\n      demoViewport = $('.js-cd-demo-viewport-size'); //when double-clicking on variables -> select all text\n\n  demoContainer.on('dblclick', '.js-css-variable-label', function (event) {\n    $(event.currentTarget).selectText();\n  }); //detect click on iframe and send to main to close popups\n\n  var iframeParent = window.parent;\n\n  if (!iframeParent) {\n    iframeParent = parent;\n  }\n\n  if (iframeParent) {\n    $(window).on('click', function () {\n      if (iframeParent.closeActivePopups != null) iframeParent.closeActivePopups();\n    }); // detect shortcut for search modal\n\n    window.addEventListener('keydown', function (event) {\n      if (event.keyCode && event.keyCode == 69 || event.key && event.key.toLowerCase() == 'e') {\n        if (event.ctrlKey || event.metaKey) iframeParent.openSiteSearch();\n      }\n    });\n  } //detect resize of the page and reset iframe height\n\n\n  var resizing = false,\n      resizingID = false,\n      mqLabels = ['xs', 'sm', 'md', 'lg', 'xl'];\n\n  if (demoViewport.length > 0) {\n    window.addEventListener(\"resize\", function (event) {\n      if (!resizing) {\n        resizing = true;\n        window.requestAnimationFrame(updateLabelSizeWindow);\n      }\n    });\n  }\n\n  $('.js-cd-demo').on('globalsUpdate', function () {\n    updateComponentGlobals();\n  });\n  $('.js-cd-demo').on('showComponent', function () {\n    var compScript = $('#comp-script');\n\n    if (compScript) {\n      var newScript = compScript.clone();\n      newScript = compScript.attr('src', compScript.attr('data-src'));\n      newScript.removeAttr('data-src');\n      newScript.removeAttr('id');\n      newScript.insertBefore(compScript);\n    }\n\n    setTimeout(function () {\n      if (iframeParent) iframeParent.revealComponent();\n    }, 300);\n  });\n\n  function updateLabelSizeWindow() {\n    var mq = getMq(),\n        sizes = getScreenSize();\n\n    if (resizing) {\n      demoContainer.trigger('windowResizing');\n      var mqLabelText = mq > 0 ? ' (' + mqLabels[mq - 1] + ')' : '';\n      demoViewport.text(sizes[0] + 'px x ' + sizes[1] + 'px' + mqLabelText).show();\n      if (resizingID) clearInterval(resizingID);\n      resizingID = setTimeout(function () {\n        demoViewport.hide();\n      }, 1000);\n    }\n\n    resizing = false;\n  }\n\n  ;\n\n  function updateComponentGlobals() {\n    //components -> if there's a project set, we should listen for changes in the viewport width as well\n    //typography and spacing are the only responsive globals\n    if (projectLoaded && (projectLoaded.typography || projectLoaded.spacing)) {\n      window.addEventListener(\"resize\", function (event) {\n        if (!resizing) {\n          resizing = true;\n          window.requestAnimationFrame(updateGlobals);\n        }\n      });\n    }\n  }\n\n  ;\n\n  function updateGlobals() {\n    var mq = getMq();\n\n    if (mq == MQ) {\n      resizing = false;\n      return;\n    }\n\n    MQ = mq;\n\n    if (projectLoaded.typography && projectLoaded.typography !== '') {\n      //typography was saved and need to be modified\n      loadTypographyStyle(JSON.parse(decodeSafeURIComponent(projectLoaded.typography)), false, mq);\n    }\n\n    if (projectLoaded.spacing && projectLoaded.spacing !== '') {\n      //typography was saved and need to be modified\n      loadSpacingStyle(JSON.parse(decodeSafeURIComponent(projectLoaded.spacing)), mq);\n    }\n\n    resizing = false;\n  }\n\n  ;\n  loadedIframeCheck = true;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9jb25maWctY3VzdG9tLWF6dXJpb20vcGFnZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDTyxJQUFJQSxZQUFZLEdBQUcsQ0FBQyxFQUFELEVBQUssR0FBTCxFQUFVLG9CQUFWLEVBQWdDLG1CQUFoQyxFQUFxRCxrQkFBckQsRUFBeUUsaUJBQXpFLEVBQTRGLGlCQUE1RixFQUErRyxpQkFBL0csRUFBa0ksaUJBQWxJLEVBQXFKLGlCQUFySixFQUF3SyxrQkFBeEssRUFBNEwsbUJBQTVMLEVBQWlOLG9CQUFqTixDQUFuQjtBQUFBLElBQ0hDLFNBQVMsR0FBRyxDQUFDLEVBQUQsRUFBSyxnQkFBTCxFQUF1QixnQkFBdkIsRUFBeUMsZ0JBQXpDLEVBQTJELGdCQUEzRCxFQUE2RSxnQkFBN0UsRUFBK0YsaUJBQS9GLEVBQWtILGtCQUFsSCxFQUFzSSxtQkFBdEksRUFBMkosU0FBM0osQ0FEVDtBQUFBLElBRUhDLGVBQWUsR0FBRyxDQUFDLEVBQUQsRUFBSyxnQkFBTCxFQUF1QixnQkFBdkIsRUFBeUMsZ0JBQXpDLEVBQTJELGdCQUEzRCxFQUE2RSxnQkFBN0UsRUFBK0YsaUJBQS9GLEVBQWtILGtCQUFsSCxFQUFzSSxTQUF0SSxFQUFpSixFQUFqSixFQUFxSixtQkFBckosQ0FGZjtBQUFBLElBR0hDLFNBQVMsR0FBRyxDQUFDLEVBQUQsRUFBSyxnQkFBTCxDQUhUO0FBQUEsSUFJSEMsVUFBVSxHQUFHLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FKVjtBQUFBLElBS0hDLHdCQUF3QixHQUFHLEVBTHhCO0FBQUEsSUFNSEMsNEJBQTRCLEdBQUcsRUFONUI7QUFBQSxJQU9IQyxjQUFjLEdBQUcsQ0FBQyxTQUFELEVBQVksUUFBWixFQUFzQixVQUF0QixF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ZSxhQUFhLENBQUNXLFVBQWQsSUFBNEJYLGFBQWEsQ0FBQ1csVUFBZCxLQUE2QixFQUE3RCxFQUFpRTtBQUM3RDtBQUNBQyxNQUFBQSxtQkFBbUIsQ0FBQ0osSUFBSSxDQUFDQyxLQUFMLENBQVd6SCxzQkFBc0IsQ0FBQ2dILGFBQWEsQ0FBQ1csVUFBZixDQUFqQyxDQUFELEVBQStELEtBQS9ELEVBQXNFMUIsRUFBdEUsQ0FBbkI7QUFDSDs7QUFFRCxRQUFJZSxhQUFhLENBQUNjLE9BQWQsSUFBeUJkLGFBQWEsQ0FBQ2MsT0FBZCxLQUEwQixFQUF2RCxFQUEyRDtBQUN2RDtBQUNBQyxNQUFBQSxnQkFBZ0IsQ0FBQ1AsSUFBSSxDQUFDQyxLQUFMLENBQVd6SCxzQkFBc0IsQ0FBQ2dILGFBQWEsQ0FBQ2MsT0FBZixDQUFqQyxDQUFELEVBQTREN0IsRUFBNUQsQ0FBaEI7QUFDSDs7QUFDRGlPLElBQUFBLFFBQVEsR0FBRyxLQUFYO0FBQ0g7O0FBQ0Q7QUFFQTlCLEVBQUFBLGlCQUFpQixHQUFHLElBQXBCO0FBQ0gsQ0FqSEEsR0FBRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbXBsYXRlLWRlZmF1bHQvLi9qcy9jb25maWctY3VzdG9tLWF6dXJpb20vcGFnZS5qcz8zY2ExIl0sInNvdXJjZXNDb250ZW50IjpbIi8vYnV0dG9ucy9mb3JtcyBkZWZhdWx0IHZhbHVlc1xuZXhwb3J0IGxldCBzcGFjaW5nQXJyYXkgPSBbJycsICcwJywgJ3ZhcigtLXNwYWNlLXh4eHhzKScsICd2YXIoLS1zcGFjZS14eHhzKScsICd2YXIoLS1zcGFjZS14eHMpJywgJ3ZhcigtLXNwYWNlLXhzKScsICd2YXIoLS1zcGFjZS1zbSknLCAndmFyKC0tc3BhY2UtbWQpJywgJ3ZhcigtLXNwYWNlLWxnKScsICd2YXIoLS1zcGFjZS14bCknLCAndmFyKC0tc3BhY2UteHhsKScsICd2YXIoLS1zcGFjZS14eHhsKScsICd2YXIoLS1zcGFjZS14eHh4bCknXSxcbiAgICB0ZXh0QXJyYXkgPSBbJycsICd2YXIoLS10ZXh0LXhzKScsICd2YXIoLS10ZXh0LXNtKScsICd2YXIoLS10ZXh0LW1kKScsICd2YXIoLS10ZXh0LWxnKScsICd2YXIoLS10ZXh0LXhsKScsICd2YXIoLS10ZXh0LXh4bCknLCAndmFyKC0tdGV4dC14eHhsKScsICd2YXIoLS10ZXh0LXh4eHhsKScsICdpbmhlcml0J10sXG4gICAgdGV4dEFycmF5VmFsdWVzID0gWycnLCAndmFyKC0tdGV4dC14cyknLCAndmFyKC0tdGV4dC1zbSknLCAndmFyKC0tdGV4dC1tZCknLCAndmFyKC0tdGV4dC1sZyknLCAndmFyKC0tdGV4dC14bCknLCAndmFyKC0tdGV4dC14eGwpJywgJ3ZhcigtLXRleHQteHh4bCknLCAnaW5oZXJpdCcsICcnLCAndmFyKC0tdGV4dC14eHh4bCknXSxcbiAgICBmb250QXJyYXkgPSBbJycsICctLWZvbnQtcHJpbWFyeSddLFxuICAgIGJ0bkZvbnRJZHMgPSBbMCwgMV0sXG4gICAgYnRuQ29sb3JDdXN0b21OaWNlTGFiZWxzID0gW10sXG4gICAgYnRuR3JhZGllbnRzQ3VzdG9tTmljZUxhYmVscyA9IFtdLFxuICAgIGJ0bkNvbG9yTGFiZWxzID0gW1wicHJpbWFyeVwiLCBcImFjY2VudFwiLCBcImRvd25sb2FkXCIsIFwid2FybmluZ1wiLCBcInN1Y2Nlc3NcIiwgXCJlcnJvclwiLCBcImluZm9cIl0sXG4gICAgc2hhZG93VmFyaWFibGVzID0gWycnLCAnJywgJ3ZhcigtLXNoYWRvdy14cyknLCAndmFyKC0tc2hhZG93LXNtKScsICd2YXIoLS1zaGFkb3ctbWQpJywgJ3ZhcigtLXNoYWRvdy1sZyknLCAndmFyKC0tc2hhZG93LXhsKSddLFxuICAgIGJvcmRlclJhZGl1c1ZhbHVlcyA9IFsnJywgJ3ZhcigtLXJhZGl1cy1zbSknLCAndmFyKC0tcmFkaXVzLW1kKScsICd2YXIoLS1yYWRpdXMtbGcpJ11cbiAgICA7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRCdG5Db2xvckN1c3RvbU5pY2VMYWJlbHMoY29sb3JzLCBjdXN0b21OaWNlKSB7XG4gICAgaWYgKGNvbG9ycykge1xuICAgICAgICBidG5Db2xvckxhYmVscyA9IGNvbG9ycztcbiAgICB9XG4gICAgaWYgKGN1c3RvbU5pY2UpIHtcbiAgICAgICAgYnRuQ29sb3JDdXN0b21OaWNlTGFiZWxzID0gY3VzdG9tTmljZTtcbiAgICB9XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRCdG5HcmFkaWVudE5pY2VMYWJlbHMoZ3JhZGllbnRzKSB7XG4gICAgaWYgKGdyYWRpZW50cyAmJiBncmFkaWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBidG5HcmFkaWVudHNDdXN0b21OaWNlTGFiZWxzID0gZ3JhZGllbnRzO1xuICAgIH1cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVNhZmVVUklDb21wb25lbnQoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHJpbmcucmVwbGFjZSgvJVwiL2csICclMjVcIicpKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnNvclZhbHVlKGluZGV4KSB7XG4gICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuICdhdXRvJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gJ3BvaW50ZXInO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiAnbm90LWFsbG93ZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJ2F1dG8nO1xuICAgIH1cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJvcmRlclR5cGUoaW5kZXgpIHtcbiAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiAnYm9yZGVyJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gJ2JvcmRlci10b3AnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiAnYm9yZGVyLXJpZ2h0JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gJ2JvcmRlci1ib3R0b20nO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHJldHVybiAnYm9yZGVyLWxlZnQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJ2JvcmRlcic7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm9yZGVyU3R5bGUoaW5kZXgpIHtcbiAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiAnbm9uZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuICdzb2xpZCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuICdkYXNoZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiAnZG90dGVkJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICdzb2xpZCc7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGV4dFRyYW5zZm9ybShpbmRleCkge1xuICAgIHN3aXRjaCAoaW5kZXgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiAnbm9uZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuICdjYXBpdGFsaXplJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gJ3VwcGVyY2FzZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcmV0dXJuICdsb3dlcmNhc2UnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJ25vbmUnO1xuICAgIH1cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRleHREZWNvcmF0aW9uKGluZGV4KSB7XG4gICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuICdub25lJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gJ3VuZGVybGluZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnbm9uZSc7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9udFNtb290aGluZygpIHtcbiAgICByZXR1cm4gJy13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7Jztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJveFNoYWRvd1R5cGUoaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT0gMClcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuICdpbnNldCAnO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblByb3BlcnR5KGluZGV4KSB7XG4gICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gJ2FsbCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuICdub25lJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gJ2JhY2tncm91bmQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiAnb3BhY2l0eSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcmV0dXJuICdib3JkZXInO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIHJldHVybiAnYm94LXNoYWRvdyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgcmV0dXJuICdvdXRsaW5lJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICByZXR1cm4gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmV0dXJuICdjb2xvcic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnYWxsJztcbiAgICB9XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uRWFzZShpbmRleCkge1xuICAgIHN3aXRjaCAoaW5kZXgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcmV0dXJuICdlYXNlJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gJ2xpbmVhcic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuICdlYXNlLWluJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gJ2Vhc2Utb3V0JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICByZXR1cm4gJ3ZhcigtLWVhc2UtaW4tb3V0KSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgcmV0dXJuICd2YXIoLS1lYXNlLWluKSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgcmV0dXJuICd2YXIoLS1lYXNlLW91dCknO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIHJldHVybiAndmFyKC0tZWFzZS1vdXQtYmFjayknO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJ2Vhc2UnO1xuICAgIH1cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25EZWxheSh2YWwpIHtcbiAgICBpZiAodmFsID09ICcnKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgcmV0dXJuICcgJyArIHZhbCArICdzJztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zZm9ybVByb3BlcnR5KGluZGV4KSB7XG4gICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gJ25vbmUnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZVgnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiAndHJhbnNsYXRlWSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGVaJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICByZXR1cm4gJ3NjYWxlJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICByZXR1cm4gJ3NjYWxlWCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgcmV0dXJuICdzY2FsZVknO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIHJldHVybiAnc2NhbGVaJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICByZXR1cm4gJ3JvdGF0ZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIHJldHVybiAncm90YXRlWCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgIHJldHVybiAncm90YXRlWSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgIHJldHVybiAncm90YXRlWic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnbm9uZSc7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3V0bGluZVN0eWxlKGluZGV4KSB7XG4gICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuICdhdXRvJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gJ2RvdHRlZCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuICdkYXNoZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHJldHVybiAnc29saWQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIHJldHVybiAnZG91YmxlJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICByZXR1cm4gJ2luc2V0JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICByZXR1cm4gJ291dHNldCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmV0dXJuICdub25lJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE91dGxpbmVPZmZzZXQodmFsKSB7XG4gICAgaWYgKHZhbCA9PSAnJylcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIHJldHVybiAnb3V0bGluZS1vZmZzZXQ6ICcgKyB2YWwgKyAnOyc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xvclZhbHVlKHZhbCwgcmVzZXQpIHtcbiAgICBpZiAoIXZhbCB8fCB2YWwgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIC8vIGNoZWNrIGlmIGluaGVyaXQvdHJhbnNwYXJlbnQvZGVmYXVsdFxuICAgIGlmICh2YWwgPT0gJ3RyYW5zcGFyZW50JyB8fCB2YWwuaW5kZXhPZigndHJhbnNwYXJlbnQnKSA9PSAwKVxuICAgICAgICByZXR1cm4gJ3RyYW5zcGFyZW50JztcbiAgICBpZiAodmFsID09ICdpbmhlcml0JyB8fCB2YWwuaW5kZXhPZignaW5oZXJpdCcpID09IDApXG4gICAgICAgIHJldHVybiAnaW5oZXJpdCc7XG4gICAgaWYgKHZhbCA9PSAnJyB8fCB2YWwuaW5kZXhPZignLWEnKSA9PSAwKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgLy9jaGVjayBpZiBjdXN0b20gY29sb3JcbiAgICByZXR1cm4gZ2V0Q29sb3JWYWx1ZUZyb21MaXN0KHZhbCwgcmVzZXQpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sb3JWYWx1ZUZyb21MaXN0KGxhYmVsLCByZXNldCkge1xuICAgIHZhciBmYWxsYmFjayA9ICcnO1xuICAgIGlmICghbGFiZWwgfHwgbGFiZWwgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGxhYmVsID0gZ2V0TmljZUxhYmVsRm9yQ3VzdG9tKGxhYmVsKTtcbiAgICBpZiAoIWxhYmVsKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgLy9jaGVjayBpZiB0aGlzIGlzIGFuIG9wYWNpdHkgdmFsdWUgYW5kIHByb3ZpZGUgZmFsbGJhY2tcbiAgICBpZiAoY2hlY2tDb2xvcklzT3BhY2l0eShsYWJlbCkpIHtcbiAgICAgICAgaWYgKHJlc2V0ICYmIHJlc2V0ID09IHRydWUpIHtcbiAgICAgICAgICAgIC8vbmVlZCB0byByZXR1cm4gY3NzIHZhbHVlXG4gICAgICAgICAgICB2YXIgYmFzaWNMYWJlbCA9IHJlbW92ZU9wYWNpdHlGcm9tTGFiZWwobGFiZWwpO1xuICAgICAgICAgICAgcmV0dXJuICdoc2xhKHZhcignICsgYmFzaWNMYWJlbCArICctaCksIHZhcignICsgYmFzaWNMYWJlbCArICctcyksIHZhcignICsgYmFzaWNMYWJlbCArICctbCksICcgKyBnZXRPcGFjaXR5RGVjRnJvbUxhYmVsKGxhYmVsKSArICcpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vcmV0dXJuIHNhc3MgbWl4aW5cbiAgICAgICAgICAgIHJldHVybiAnYWxwaGEodmFyKCcgKyByZW1vdmVPcGFjaXR5RnJvbUxhYmVsKGxhYmVsKSArICcpLCAnICsgZ2V0T3BhY2l0eURlY0Zyb21MYWJlbChsYWJlbCkgKyAnKSc7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ3ZhcignICsgbGFiZWwgKyAnKSc7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmljZUxhYmVsRm9yQ3VzdG9tKGxhYmVsKSB7XG4gICAgaWYgKGxhYmVsLmluZGV4T2YoJ2N1c3RvbS0nKSA+IC0xKSB7XG4gICAgICAgIHZhciBwcmVmaXggPSAobGFiZWwuaW5kZXhPZignY3VzdG9tLWZkYi0nKSA+IC0xKSA/ICdjdXN0b20tZmRiLScgOiAnY3VzdG9tLSc7XG4gICAgICAgIHZhciBsYWJlbEFycmF5ID0gbGFiZWwuc3BsaXQocHJlZml4KVxuICAgICAgICAgICAgLCBzcGxpdCA9IGxhYmVsQXJyYXlbMV0uc3BsaXQoJy0nKTtcbiAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHZhciBjdXN0b21MYWJlbCA9IHByZWZpeCArIHNwbGl0WzBdO1xuICAgICAgICAgICAgbGFiZWwgPSBidG5Db2xvckN1c3RvbU5pY2VMYWJlbHNbYnRuQ29sb3JMYWJlbHMuaW5kZXhPZihjdXN0b21MYWJlbCkgLSA1XSArIGxhYmVsQXJyYXlbMV0ucmVwbGFjZShzcGxpdFswXSwgJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGN1c3RvbUxhYmVsID0gcHJlZml4ICsgbGFiZWxBcnJheVsxXTtcbiAgICAgICAgICAgIGxhYmVsID0gYnRuQ29sb3JDdXN0b21OaWNlTGFiZWxzW2J0bkNvbG9yTGFiZWxzLmluZGV4T2YoY3VzdG9tTGFiZWwpIC0gNV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxhYmVsO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlT3BhY2l0eUZyb21MYWJlbChsYWJlbCkge1xuICAgIHJldHVybiBsYWJlbC5zbGljZSgwLCAtNCk7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGFjaXR5RGVjRnJvbUxhYmVsKGxhYmVsKSB7XG4gICAgdmFyIG9wYWNpdHkgPSBwYXJzZUludChsYWJlbC5zbGljZSgtNCkucmVwbGFjZSgnLWEnLCAnJykpO1xuICAgIGlmIChpc05hTihvcGFjaXR5KSlcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQoKG9wYWNpdHkgLyAxMDApLnRvRml4ZWQoMikpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tDb2xvcklzT3BhY2l0eShsYWJlbCkge1xuICAgIHZhciBhcnJheSA9IGxhYmVsLnNwbGl0KCctJyk7XG4gICAgaWYgKGFycmF5Lmxlbmd0aCA+IDAgJiYgYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV0uaW5kZXhPZignYScpID09IDAgJiYgYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV0ubGVuZ3RoID09IDMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbG9yRmJJb3MoJGNvbG9yLCAkdmFyTGFiZWwsICRzcGFjaW5nLCAkcmVzZXQpIHtcbiAgICBpZiAoISRjb2xvciB8fCAkY29sb3IgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIFsnJywgJyddO1xuICAgIGlmICgkY29sb3IgPT0gJ3RyYW5zcGFyZW50JyB8fCAkY29sb3IgPT0gJ2luaGVyaXQnIHx8ICRjb2xvciA9PSAnJylcbiAgICAgICAgcmV0dXJuIFsnJywgJGNvbG9yXTtcbiAgICByZXR1cm4gWycnLCBnZXRDb2xvclZhbHVlKCRjb2xvciwgJHJlc2V0KV07XG59XG47Ly9pZiB5b3UgdXBkYXRlcyB0aGlzIC0+IHlvdSdsbCBuZWVkIHRvIHVwZGF0ZSB0aGUgc2FtZSBpbiB0aGUgYXBwLWdsb2JhbC5qcyBhcyB3ZWxsXG5sZXQgcGFkZGluZ1ZhcmlhYmxlcyA9IFsnLS1zcGFjZS14eHh4cycsICctLXNwYWNlLXh4eHMnLCAnLS1zcGFjZS14eHMnLCAnLS1zcGFjZS14cycsICctLXNwYWNlLXNtJywgJy0tc3BhY2UtbWQnLCAnLS1zcGFjZS1sZycsICctLXNwYWNlLXhsJywgJy0tc3BhY2UteHhsJywgJy0tc3BhY2UteHh4bCcsICctLXNwYWNlLXh4eHhsJ11cbiAgICAsIGZpYm9uYWNjaVNlcSA9IFswLjEyNSwgMC4yNSwgMC4zNzUsIDAuNSwgMC43NSwgMS4yNSwgMiwgMy4yNSwgNS4yNSwgOC41LCAxMy43NV1cbiAgICAsIHByRm91cnRoID0gWzAuMjM3LCAwLjMxNiwgMC40MjIsIDAuNTYzLCAwLjc1LCAxLCAxLjMzMywgMS43NzcsIDIuMzY5LCAzLjE1NywgNC4yMV1cbiAgICAsIGF1Rm91cnRoID0gWzAuMTc3LCAwLjI1LCAwLjM1NCwgMC41LCAwLjcwNywgMSwgMS40MTQsIDEuOTk5LCAyLjgyNywgMy45OTgsIDUuNjVdXG4gICAgLCBwckZpZnRoID0gWzAuMTMzLCAwLjIsIDAuMjk2LCAwLjQ0NCwgMC42NjcsIDEsIDEuNSwgMi4yNSwgMy4zNzUsIDUuMDYzLCA3LjU5XVxuICAgICwgZ29sZGVuUmF0aW8gPSBbMC4wOSwgMC4xNDYsIDAuMjM2LCAwLjM4MiwgMC42MTgsIDEsIDEuNjE4LCAyLjYxOCwgNC4yMzYsIDYuODU0LCAxMS4wOF1cbiAgICAsIHNwYWNlUmF0aW9Vbml0ID0gW2ZhbHNlLCBmaWJvbmFjY2lTZXEsIHByRm91cnRoLCBhdUZvdXJ0aCwgcHJGaWZ0aCwgZ29sZGVuUmF0aW8sICcnXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhTTChjb2xvcikge1xuICAgIGlmIChpc05hTihjb2xvclswXSkpXG4gICAgICAgIGNvbG9yWzBdID0gMDtcbiAgICByZXR1cm4gJ2hzbCgnICsgTWF0aC5yb3VuZChjb2xvclswXSkgKyAnLCAnICsgTWF0aC5yb3VuZChjb2xvclsxXSAqIDEwMCkgKyAnJSwgJyArIE1hdGgucm91bmQoY29sb3JbMl0gKiAxMDApICsgJyUpJztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhTTEEoY29sb3IsIG9wYWNpdHkpIHtcbiAgICBpZiAoaXNOYU4oY29sb3JbMF0pKVxuICAgICAgICBjb2xvclswXSA9IDA7XG4gICAgcmV0dXJuICdoc2xhKCcgKyBNYXRoLnJvdW5kKGNvbG9yWzBdKSArICcsICcgKyBNYXRoLnJvdW5kKGNvbG9yWzFdICogMTAwKSArICclLCAnICsgTWF0aC5yb3VuZChjb2xvclsyXSAqIDEwMCkgKyAnJSwgJyArIHBhcnNlRmxvYXQoKE51bWJlcihvcGFjaXR5KSAvIDEwMCkudG9GaXhlZCgyKSkgKyAnKSc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRIU0xBZnJvbUhTTChjb2xvciwgb3BhY2l0eSkge1xuICAgIGNvbG9yID0gY29sb3IucmVwbGFjZSgnaHNsKCcsICdoc2xhKCcpO1xuICAgIGNvbG9yID0gY29sb3IucmVwbGFjZSgnKScsICcsICcgKyBwYXJzZUZsb2F0KChOdW1iZXIob3BhY2l0eSkgLyAxMDApLnRvRml4ZWQoMikpICsgJyknKTtcbiAgICByZXR1cm4gY29sb3I7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRIU0xGcm9tU3RyaW5nKGNvbG9yKSB7XG4gICAgdmFyIGFycmF5ID0gY29sb3IucmVwbGFjZSgnaHNsKCcsICcnKS5yZXBsYWNlKCcpJywgJycpLnNwbGl0KCcsJyk7XG4gICAgaWYgKGFycmF5ICYmIGFycmF5Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIFtOdW1iZXIoYXJyYXlbMF0udHJpbSgpKSwgcGFyc2VGbG9hdCgoKGFycmF5WzFdLnRyaW0oKS5yZXBsYWNlKCclJywgJycpKSAvIDEwMCkudG9GaXhlZCgyKSksIHBhcnNlRmxvYXQoKChhcnJheVsyXS50cmltKCkucmVwbGFjZSgnJScsICcnKSkgLyAxMDApLnRvRml4ZWQoMikpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRDc3NWYXJpYWJsZSh2YXJpYWJsZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gICAgdmFyIHJvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgaWYgKHByaW9yaXR5KSB7XG4gICAgICAgIHJvb3Quc3R5bGUuc2V0UHJvcGVydHkodmFyaWFibGUsIHZhbHVlLCBwcmlvcml0eSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5zdHlsZS5zZXRQcm9wZXJ0eSh2YXJpYWJsZSwgdmFsdWUpO1xuICAgIH1cblxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3NzVmFyaWFibGUodmFyaWFibGUpIHtcbiAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmdldFByb3BlcnR5VmFsdWUodmFyaWFibGUpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0Qm9keUNzc1ZhcmlhYmxlKHZhcmlhYmxlLCB2YWx1ZSkge1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcbiAgICBib2R5LnN0eWxlLnNldFByb3BlcnR5KHZhcmlhYmxlLCB2YWx1ZSk7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRFbGVtZW50Q3NzVmFyaWFibGUoY2xhc3NOYW1lLCB2YXJpYWJsZSwgdmFsdWUpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY2xhc3NOYW1lKTtcbiAgICBpZiAoZWxlbWVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGVsZW1lbnRbMF0uc3R5bGUuc2V0UHJvcGVydHkodmFyaWFibGUsIHZhbHVlKTtcbiAgICB9XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiB3aW5kb3dTY3JvbGxUbyh2YWwpIHtcbiAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgdmFsKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdElmcmFtZVNlY3Rpb24odmFsKSB7XG4gICAgdmFyIHNlY3Rpb24gPSAkKCdbZGF0YS1zZWN0aW9uPVwiJyArIHZhbCArICdcIl0nKTtcbiAgICAkKCcuY2QtZGVtby1pdGVtLS1zZWxlY3RlZCcpLnJlbW92ZUNsYXNzKCdjZC1kZW1vLWl0ZW0tLXNlbGVjdGVkJyk7XG4gICAgaWYgKHNlY3Rpb24ubGVuZ3RoID4gMCkge1xuICAgICAgICBzZWN0aW9uLmFkZENsYXNzKCdjZC1kZW1vLWl0ZW0tLXNlbGVjdGVkJyk7XG4gICAgICAgIGlmICgkKCcuY2QtZGVtby1jb2xvcl9fbGlzdC0tc2VsZWN0ZWQnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAkKCcuY2QtZGVtby1jb2xvcl9fbGlzdC0tc2VsZWN0ZWQnKS5yZW1vdmVDbGFzcygnY2QtZGVtby1jb2xvcl9fbGlzdC0tc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIHNlY3Rpb24uYWRkQ2xhc3MoJ2NkLWRlbW8tY29sb3JfX2xpc3QtLXNlbGVjdGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgd2luZG93U2Nyb2xsVG8oc2VjdGlvbi5wYXJlbnQoKS5vZmZzZXQoKS50b3AgLSAyMCk7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0SWZyYW1lVGFiKHZhbCkge1xuICAgIC8vcmVtb3ZlIHRoZSBzZWxlY3Rpb24gZWZmZWN0XG4gICAgJCgnLmNkLWRlbW8taXRlbS0tc2VsZWN0ZWQnKS5yZW1vdmVDbGFzcygnY2QtZGVtby1pdGVtLS1zZWxlY3RlZCcpO1xuICAgIHZhciBzZWN0aW9uID0gJCgnW2RhdGEtdGFiXScpO1xuICAgIGlmIChzZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2VjdGlvbi5hZGRDbGFzcygnY2QtZGVtby1pdGVtLS1pcy1oaWRkZW4nKTtcbiAgICAgICAgc2VjdGlvbi5maWx0ZXIoJ1tkYXRhLXRhYj1cIicgKyB2YWwgKyAnXCJdJykucmVtb3ZlQ2xhc3MoJ2NkLWRlbW8taXRlbS0taXMtaGlkZGVuJyk7XG5cbiAgICAgICAgaWYgKHZhbCA9PSAndGFiLWxoLWNyb3AnKSB7XG4gICAgICAgICAgICAvL2xoY3JvcCBpbiB0eXBvZ3JhcGd5IC0+IHNlbGVjdCAtLWZvbnQtcHJpbWFyeVxuICAgICAgICAgICAgc2VsZWN0SWZyYW1lU2VjdGlvbignLS1mb250LTEnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1xKCkge1xuICAgIHZhciB3aW5kb3dXaWR0aCA9ICQod2luZG93KS5vdXRlcldpZHRoKClcbiAgICAgICAgLCBtcSA9IDBcbiAgICAgICAgLCBzdHJpbmcgPSAnJztcbiAgICAvLyBjaGVjayBpZiB5b3UgY2FuIGdldCBleHRlcm5hbCBkb2N1bWVudCB3aWR0aFxuICAgIGlmICh3aW5kb3cucGFyZW50ICYmIHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQgJiYgd2luZG93LnBhcmVudC5kb2N1bWVudC5ib2R5ICYmIHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCkge1xuICAgICAgICB3aW5kb3dXaWR0aCA9IHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aDtcbiAgICB9XG4gICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgIGNhc2Ugd2luZG93V2lkdGggPj0gMTQ0MDpcbiAgICAgICAgICAgIG1xID0gNTtcbiAgICAgICAgICAgIHN0cmluZyA9ICdWaXNpYmxlIG1xOiA+IDE0NDBweCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB3aW5kb3dXaWR0aCA+PSAxMjgwOlxuICAgICAgICAgICAgbXEgPSA0O1xuICAgICAgICAgICAgc3RyaW5nID0gJ1Zpc2libGUgbXE6ID4gMTI4MHB4JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHdpbmRvd1dpZHRoID49IDEwMjQ6XG4gICAgICAgICAgICBtcSA9IDM7XG4gICAgICAgICAgICBzdHJpbmcgPSAnVmlzaWJsZSBtcTogPiAxMDI0cHgnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2Ugd2luZG93V2lkdGggPj0gNjAwOlxuICAgICAgICAgICAgbXEgPSAyO1xuICAgICAgICAgICAgc3RyaW5nID0gJ1Zpc2libGUgbXE6ID4gNjAwcHgnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2Ugd2luZG93V2lkdGggPj0gNDgwOlxuICAgICAgICAgICAgbXEgPSAxO1xuICAgICAgICAgICAgc3RyaW5nID0gJ1Zpc2libGUgbXE6ID4gNDgwcHgnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBtcSA9IDA7XG4gICAgICAgICAgICBzdHJpbmcgPSAnTm9uZSc7XG4gICAgfVxuICAgICQoJy5qcy13aWR0aCcpLnRleHQoc3RyaW5nKTtcbiAgICByZXR1cm4gbXE7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JlZW5TaXplKCkge1xuICAgIGlmICh3aW5kb3cucGFyZW50ICYmIHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQgJiYgd2luZG93LnBhcmVudC5kb2N1bWVudC5ib2R5ICYmIHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCkge1xuICAgICAgICByZXR1cm4gW3dpbmRvdy5wYXJlbnQuZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCwgJCh3aW5kb3cpLm91dGVySGVpZ2h0KCldO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbJCh3aW5kb3cpLm91dGVyV2lkdGgoKSwgJCh3aW5kb3cpLm91dGVySGVpZ2h0KCldO1xuICAgIH1cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbGlkUmVzcG9uc2l2ZVZhbHVlKHNwYWNlQXJyYXksIGluZGV4LCBzdWJJbmRleCkge1xuICAgIHZhciBpdGVtID0gKHN1YkluZGV4ICE9PSBmYWxzZSkgPyBzcGFjZUFycmF5W2luZGV4XVtzdWJJbmRleF0gOiBzcGFjZUFycmF5W2luZGV4XTtcbiAgICBpZiAoaW5kZXggPT0gMClcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgaWYgKGl0ZW0gIT09IGZhbHNlICYmIGl0ZW0gIT09ICcnKSB7XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBnZXRWYWxpZFJlc3BvbnNpdmVWYWx1ZShzcGFjZUFycmF5LCBpbmRleCAtIDEsIHN1YkluZGV4KTtcbiAgICB9XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZVVuaXQodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlID09ICcnKVxuICAgICAgICByZXR1cm4gW2ZhbHNlLCBmYWxzZV07XG4gICAgdmFyIG51bWJlciA9IHBhcnNlRmxvYXQodmFsdWUpXG4gICAgICAgICwgdW5pdCA9IHZhbHVlLnJlcGxhY2UobnVtYmVyLCAnJyk7XG4gICAgcmV0dXJuIFtudW1iZXIsIHVuaXRdO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm9keU5vdEZhbHNlKGFycmF5LCBtcSkge1xuICAgIHZhciBuZXdBcnJheSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIG5ld0FycmF5W2ldID0gZ2V0VmFsaWRSZXNwb25zaXZlVmFsdWUoYXJyYXksIG1xLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0FycmF5O1xufVxuO1xudmFyIHByb2plY3RMb2FkZWQgPSAnJztcbnZhciBNUSA9IGdldE1xKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkR2xvYmFsc1N0eWxlKHByb2plY3QpIHtcbiAgICAvL2ZvciBjb21wb25lbnRzIC0+IGxvYWQgcHJvamVjdCBzdHlsZVxuICAgIGlmIChwcm9qZWN0KSB7XG4gICAgICAgICQoJy5qcy1jZC1kZW1vJykudHJpZ2dlcignZ2xvYmFsc1VwZGF0aW5nJyk7XG4gICAgICAgIHByb2plY3RMb2FkZWQgPSBwcm9qZWN0O1xuICAgIH1cblxuICAgIGlmKHByb2plY3QuY29sb3JzICYmIHByb2plY3QuY29sb3JzICE9PSAnJyAmJiBPYmplY3QudmFsdWVzKSB7XG4gICAgICAgIC8vY29sb3JzIHdlcmUgc2F2ZWQgYW5kIG5lZWQgdG8gYmUgbW9kaWZpZWRcbiAgICAgICAgbG9hZENvbG9yU3R5bGUoSlNPTi5wYXJzZShwcm9qZWN0LmNvbG9ycykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRDb2xvckRlZmF1bHRTdHlsZSgpO1xuICAgIH1cblxuICAgIGlmIChwcm9qZWN0LnR5cG9ncmFwaHkgJiYgcHJvamVjdC50eXBvZ3JhcGh5ICE9PSAnJyAmJiBPYmplY3QudmFsdWVzKSB7XG4gICAgICAgIC8vdHlwb2dyYXBoeSB3YXMgc2F2ZWQgYW5kIG5lZWQgdG8gYmUgbW9kaWZpZWRcbiAgICAgICAgbG9hZFR5cG9ncmFwaHlTdHlsZShKU09OLnBhcnNlKGRlY29kZVNhZmVVUklDb21wb25lbnQocHJvamVjdC50eXBvZ3JhcGh5KSksIHRydWUsIE1RKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkVHlwb2dyYXBoeURlZmF1bHRTdHlsZSh0cnVlLCBNUSk7XG4gICAgfVxuICAgIC8vZG8gdGhlIHNhbWUgZm9yIHRoZSBvdGhlciBnbG9iYWxzXG4gICAgaWYgKHByb2plY3Quc3BhY2luZyAmJiBwcm9qZWN0LnNwYWNpbmcgIT09ICcnICYmIE9iamVjdC52YWx1ZXMpIHtcbiAgICAgICAgbG9hZFNwYWNpbmdTdHlsZShKU09OLnBhcnNlKGRlY29kZVNhZmVVUklDb21wb25lbnQocHJvamVjdC5zcGFjaW5nKSksIE1RKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkU3BhY2luZ0RlZmF1bHRTdHlsZShNUSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2plY3QuYnV0dG9ucyAmJiBwcm9qZWN0LmJ1dHRvbnMgIT09ICcnICYmIE9iamVjdC52YWx1ZXMpIHtcbiAgICAgICAgbG9hZEJ1dHRvbnNTdHlsZShKU09OLnBhcnNlKGRlY29kZVNhZmVVUklDb21wb25lbnQocHJvamVjdC5idXR0b25zKSksIE1RKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkQnV0dG9uc0RlZmF1bHRTdHlsZShNUSk7XG4gICAgfVxuICAgIGlmIChwcm9qZWN0LmZvcm0gJiYgcHJvamVjdC5mb3JtICE9PSAnJyAmJiBPYmplY3QudmFsdWVzKSB7XG4gICAgICAgIGxvYWRGb3Jtc1N0eWxlKEpTT04ucGFyc2UoZGVjb2RlU2FmZVVSSUNvbXBvbmVudChwcm9qZWN0LmZvcm0pKSwgTVEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRGb3Jtc0RlZmF1bHRTdHlsZShNUSk7XG4gICAgfVxuICAgIC8vaWYgeW91IG5lZWQgdG8gdXBkYXRlIHN0eWxlIG9uIHJlc2l6ZVxuICAgIGlmIChwcm9qZWN0KSB7XG4gICAgICAgICQoJy5qcy1jZC1kZW1vJykudHJpZ2dlcignZ2xvYmFsc1VwZGF0ZScpO1xuICAgIH1cbiAgICAkKCcuanMtY2QtZGVtbycpLnRyaWdnZXIoJ3Nob3dDb21wb25lbnQnKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRDb2xvclN0eWxlKGNvbG9ycykge1xuICAgIC8vbm8gbmVlZCB0byBkbyB0aGlzIGZvciBjdXN0b20gb3BhY2l0aWVzIGFzIG9ubHkgZGVmYXVsdCBvbmUgYXJlIHVzZWQgaW4gY29tcG9uZW50c1xuICAgIHZhciB2YXJpYXRpb25zID0gWyctbGlnaHRlcicsICctbGlnaHQnLCAnJywgJy1kYXJrJywgJy1kYXJrZXInXTtcblxuICAgIGJ0bkNvbG9yTGFiZWxzID0gT2JqZWN0LnZhbHVlcyhjb2xvcnNbJ21haW5Db2xvckxhYmVscyddKTtcbiAgICBidG5Db2xvckN1c3RvbU5pY2VMYWJlbHMgPSAoY29sb3JzWydjdXN0b21Db2xvckxhYmVscyddKSA/IE9iamVjdC52YWx1ZXMoY29sb3JzWydjdXN0b21Db2xvckxhYmVscyddKSA6IFtdO1xuICAgIGJ0bkdyYWRpZW50c0N1c3RvbU5pY2VMYWJlbHMgPSAoY29sb3JzWydncmFkaWVudENvbG9yTGFiZWxzJ10pID8gT2JqZWN0LnZhbHVlcyhjb2xvcnNbJ2dyYWRpZW50Q29sb3JMYWJlbHMnXSkgOiBbXTtcbiAgICAvL3NldCBtYWluIGNvbG9ycyAtIGluY2x1ZGluZyBjdXN0b20gY29sb3JzIGFzIHdlbGxcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ0bkNvbG9yTGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjc3NWYXJMYWIgPSAoaSA+IDQpID8gYnRuQ29sb3JDdXN0b21OaWNlTGFiZWxzW2kgLSA1XSA6ICctLWNvbG9yLScgKyBidG5Db2xvckxhYmVsc1tpXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YXJpYXRpb25zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBzZXRDc3NWYXJpYWJsZShjc3NWYXJMYWIgKyB2YXJpYXRpb25zW2pdLCBnZXRIU0woT2JqZWN0LnZhbHVlcyhjb2xvcnNbYnRuQ29sb3JMYWJlbHNbaV1dWzBdW2pdKSkpO1xuICAgICAgICAgICAgc2V0Q29sb3JQYXJ0VmFyaWFibGVzKGNzc1ZhckxhYiArIHZhcmlhdGlvbnNbal0sIE9iamVjdC52YWx1ZXMoY29sb3JzW2J0bkNvbG9yTGFiZWxzW2ldXVswXVtqXSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9zZXQgYmxhY2sgJiB3aGl0ZVxuICAgIHZhciBiVmFyaWF0aW9ucyA9IFsnJywgJy1saWdodCcsICctbGlnaHRlciddXG4gICAgICAgICwgYmxhY2tBcnJheSA9IGdldEJXQXJyYXkoY29sb3JzWydibGFja0NvbG9ycyddWzBdKVxuICAgICAgICAsIHdoaXRlQXJyYXkgPSBnZXRCV0FycmF5KGNvbG9yc1snd2hpdGVDb2xvcnMnXVswXSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsYWNrQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2V0Q3NzVmFyaWFibGUoJy0tY29sb3ItYmxhY2snICsgYlZhcmlhdGlvbnNbaV0sIGdldEhTTChibGFja0FycmF5W2ldKSk7XG4gICAgICAgIHNldENvbG9yUGFydFZhcmlhYmxlcygnLS1jb2xvci1ibGFjaycgKyBiVmFyaWF0aW9uc1tpXSwgYmxhY2tBcnJheVtpXSk7XG4gICAgfVxuICAgIHZhciB3VmFyaWF0aW9ucyA9IFsnJywgJy1kYXJrJywgJy1kYXJrZXInXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdoaXRlQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2V0Q3NzVmFyaWFibGUoJy0tY29sb3Itd2hpdGUnICsgd1ZhcmlhdGlvbnNbaV0sIGdldEhTTCh3aGl0ZUFycmF5W2ldKSk7XG4gICAgICAgIHNldENvbG9yUGFydFZhcmlhYmxlcygnLS1jb2xvci13aGl0ZScgKyB3VmFyaWF0aW9uc1tpXSwgd2hpdGVBcnJheVtpXSk7XG4gICAgfVxuXG4gICAgLy9zZXQgY29udHJhc3RzXG4gICAgdmFyIGNvbnRyYXN0TGFiZWxzID0gWyctYmcnLCAnLWNvbnRyYXN0LWxvd2VyJywgJy1jb250cmFzdC1sb3cnLCAnLWNvbnRyYXN0LW1lZGl1bScsICctY29udHJhc3QtaGlnaCcsICctY29udHJhc3QtaGlnaGVyJ107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250cmFzdExhYmVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZXRDc3NWYXJpYWJsZSgnLS1jb2xvcicgKyBjb250cmFzdExhYmVsc1tpXSwgZ2V0SFNMKE9iamVjdC52YWx1ZXMoY29sb3JzWydjb250cmFzdENvbG9ycyddWzBdW2ldKSkpO1xuICAgICAgICBzZXRDb2xvclBhcnRWYXJpYWJsZXMoJy0tY29sb3InICsgY29udHJhc3RMYWJlbHNbaV0sIE9iamVjdC52YWx1ZXMoY29sb3JzWydjb250cmFzdENvbG9ycyddWzBdW2ldKSk7XG4gICAgfVxuXG4gICAgLy8gc2V0IGdyYWRpZW50c1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnRuR3JhZGllbnRzQ3VzdG9tTmljZUxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY3NzVmFyTGFiID0gJy0tZ3JhZGllbnQtJyArIGJ0bkdyYWRpZW50c0N1c3RvbU5pY2VMYWJlbHNbaV1cbiAgICAgICAgICAgICwgZ3JhZGllbnRJZCA9IGNvbG9yc1snZ3JhZGllbnRDb2xvcklkcyddW2ldICsgJ0dyYWRpZW50cyc7XG4gICAgICAgIHNldENzc1ZhcmlhYmxlKGNzc1ZhckxhYiArICctc3RvcC0xJywgZ2V0SFNMKE9iamVjdC52YWx1ZXMoY29sb3JzW2dyYWRpZW50SWRdWzBdWzBdKSkpO1xuICAgICAgICBzZXRDb2xvclBhcnRWYXJpYWJsZXMoY3NzVmFyTGFiICsgJy1zdG9wLTEnLCBPYmplY3QudmFsdWVzKGNvbG9yc1tncmFkaWVudElkXVswXVswXSkpO1xuICAgICAgICBzZXRDc3NWYXJpYWJsZShjc3NWYXJMYWIgKyAnLXN0b3AtMicsIGdldEhTTChPYmplY3QudmFsdWVzKGNvbG9yc1tncmFkaWVudElkXVswXVsxXSkpKTtcbiAgICAgICAgc2V0Q29sb3JQYXJ0VmFyaWFibGVzKGNzc1ZhckxhYiArICctc3RvcC0yJywgT2JqZWN0LnZhbHVlcyhjb2xvcnNbZ3JhZGllbnRJZF1bMF1bMV0pKTtcbiAgICB9XG5cbiAgICAvL2ZvbnQgcmVuZGVyaW5nXG4gICAgdmFyIGZvbnRSZW5kZXJpbmdDb2RlID0gJyc7XG4gICAgaWYgKGNvbG9yc1snZm9udFJlbmRlcmluZyddICYmIGNvbG9yc1snZm9udFJlbmRlcmluZyddWzBdKSB7XG4gICAgICAgIGlmIChOdW1iZXIoY29sb3JzWydmb250UmVuZGVyaW5nJ11bMF0pID09IDEpXG4gICAgICAgICAgICBmb250UmVuZGVyaW5nQ29kZSA9ICdib2R5ey13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7fSc7XG4gICAgICAgIGVsc2UgaWYgKE51bWJlcihjb2xvcnNbJ2ZvbnRSZW5kZXJpbmcnXVswXSkgPT0gMilcbiAgICAgICAgICAgIGZvbnRSZW5kZXJpbmdDb2RlID0gJ2JvZHl7LXdlYmtpdC1mb250LXNtb290aGluZzogYXV0bzstbW96LW9zeC1mb250LXNtb290aGluZzogYXV0bzt9JztcbiAgICB9XG4gICAgdmFyIHN0eWxlID0gJzxzdHlsZSBpZD1cImZvbnQtcmVuZGVyaW5nLXN0eWxlXCI+JyArIGZvbnRSZW5kZXJpbmdDb2RlICsgJzwvc3R5bGU+JztcbiAgICAkKCcjZm9udC1yZW5kZXJpbmctc3R5bGUnKS5yZW1vdmUoKTtcbiAgICB2YXIgYmFzZVN0eWxlID0gJCgnI2NkLWJhc2UtcGFydC0xJyk7XG4gICAgJChzdHlsZSkuaW5zZXJ0QWZ0ZXIoYmFzZVN0eWxlKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRDb2xvckRlZmF1bHRTdHlsZSgpIHtcbiAgICAvLyBjb2xvcnMgYXJyYXlcbiAgICB2YXIgZGVmYXVsdENvbG9ycyA9IFtcbiAgICAgICAgWyctLWNvbG9yLXByaW1hcnktZGFya2VyJywgWzIyMCwgMC45LCAwLjQyXV0sXG4gICAgICAgIFsnLS1jb2xvci1wcmltYXJ5LWRhcmsnLCBbMjIwLCAwLjksIDAuNDldXSxcbiAgICAgICAgWyctLWNvbG9yLXByaW1hcnknLCBbMjIwLCAwLjksIDAuNTZdXSxcbiAgICAgICAgWyctLWNvbG9yLXByaW1hcnktbGlnaHQnLCBbMjIwLCAwLjksIDAuNjNdXSxcbiAgICAgICAgWyctLWNvbG9yLXByaW1hcnktbGlnaHRlcicsIFsyMjAsIDAuOSwgMC43MF1dLFxuICAgICAgICBbJy0tY29sb3ItYWNjZW50LWRhcmtlcicsIFszNDksIDAuNzUsIDAuMzZdXSxcbiAgICAgICAgWyctLWNvbG9yLWFjY2VudC1kYXJrJywgWzM0OSwgMC43NSwgMC40NF1dLFxuICAgICAgICBbJy0tY29sb3ItYWNjZW50JywgWzM0OSwgMC43NSwgMC41MV1dLFxuICAgICAgICBbJy0tY29sb3ItYWNjZW50LWxpZ2h0JywgWzM0OSwgMC43NSwgMC41OV1dLFxuICAgICAgICBbJy0tY29sb3ItYWNjZW50LWxpZ2h0ZXInLCBbMzQ5LCAwLjc1LCAwLjY3XV0sXG4gICAgICAgIFsnLS1jb2xvci1kb3dubG9hZC1kYXJrZXInLCBbMzQ5LCAwLjc1LCAwLjM2XV0sXG4gICAgICAgIFsnLS1jb2xvci1kb3dubG9hZC1kYXJrJywgWzM0OSwgMC43NSwgMC40NF1dLFxuICAgICAgICBbJy0tY29sb3ItZG93bmxvYWQnLCBbMzQ5LCAwLjc1LCAwLjUxXV0sXG4gICAgICAgIFsnLS1jb2xvci1kb3dubG9hZC1saWdodCcsIFszNDksIDAuNzUsIDAuNTldXSxcbiAgICAgICAgWyctLWNvbG9yLWRvd25sb2FkLWxpZ2h0ZXInLCBbMzQ5LCAwLjc1LCAwLjY3XV0sXG4gICAgICAgIFsnLS1jb2xvci1ibGFjaycsIFsyNDAsIDAuMDgsIDAuMTJdXSxcbiAgICAgICAgWyctLWNvbG9yLXdoaXRlJywgWzAsIDAsIDFdXSxcbiAgICAgICAgWyctLWNvbG9yLXN1Y2Nlc3MtZGFya2VyJywgWzk0LCAwLjQ4LCAwLjQyXV0sXG4gICAgICAgIFsnLS1jb2xvci1zdWNjZXNzLWRhcmsnLCBbOTQsIDAuNDgsIDAuNDhdXSxcbiAgICAgICAgWyctLWNvbG9yLXN1Y2Nlc3MnLCBbOTQsIDAuNDgsIDAuNTZdXSxcbiAgICAgICAgWyctLWNvbG9yLXN1Y2Nlc3MtbGlnaHQnLCBbOTQsIDAuNDgsIDAuNjVdXSxcbiAgICAgICAgWyctLWNvbG9yLXN1Y2Nlc3MtbGlnaHRlcicsIFs5NCwgMC40OCwgMC43NF1dLFxuICAgICAgICBbJy0tY29sb3ItZXJyb3ItZGFya2VyJywgWzM0OSwgMC43NSwgMC4zNl1dLFxuICAgICAgICBbJy0tY29sb3ItZXJyb3ItZGFyaycsIFszNDksIDAuNzUsIDAuNDRdXSxcbiAgICAgICAgWyctLWNvbG9yLWVycm9yJywgWzM0OSwgMC43NSwgMC41MV1dLFxuICAgICAgICBbJy0tY29sb3ItZXJyb3ItbGlnaHQnLCBbMzQ5LCAwLjc1LCAwLjU5XV0sXG4gICAgICAgIFsnLS1jb2xvci1lcnJvci1saWdodGVyJywgWzM0OSwgMC43NSwgMC42N11dLFxuICAgICAgICBbJy0tY29sb3ItaW5mby1kYXJrZXInLCBbMzQ5LCAwLjc1LCAwLjM2XV0sXG4gICAgICAgIFsnLS1jb2xvci1pbmZvLWRhcmsnLCBbMzQ5LCAwLjc1LCAwLjQ0XV0sXG4gICAgICAgIFsnLS1jb2xvci1pbmZvJywgWzM0OSwgMC43NSwgMC41MV1dLFxuICAgICAgICBbJy0tY29sb3ItaW5mby1saWdodCcsIFszNDksIDAuNzUsIDAuNTldXSxcbiAgICAgICAgWyctLWNvbG9yLWluZm8tbGlnaHRlcicsIFszNDksIDAuNzUsIDAuNjddXSxcbiAgICAgICAgWyctLWNvbG9yLXdhcm5pbmctZGFya2VyJywgWzQ2LCAxLCAwLjQ3XV0sXG4gICAgICAgIFsnLS1jb2xvci13YXJuaW5nLWRhcmsnLCBbNDYsIDEsIDAuNTBdXSxcbiAgICAgICAgWyctLWNvbG9yLXdhcm5pbmcnLCBbNDYsIDEsIDAuNjFdXSxcbiAgICAgICAgWyctLWNvbG9yLXdhcm5pbmctbGlnaHQnLCBbNDYsIDEsIDAuNzFdXSxcbiAgICAgICAgWyctLWNvbG9yLXdhcm5pbmctbGlnaHRlcicsIFs0NiwgMSwgMC44MF1dLFxuICAgICAgICBbJy0tY29sb3ItYmcnLCBbMCwgMCwgMV1dLFxuICAgICAgICBbJy0tY29sb3ItY29udHJhc3QtbG93ZXInLCBbMCwgMCwgMC45NV1dLFxuICAgICAgICBbJy0tY29sb3ItY29udHJhc3QtbG93JywgWzI0MCwgMC4wMSwgMC44M11dLFxuICAgICAgICBbJy0tY29sb3ItY29udHJhc3QtbWVkaXVtJywgWzI0MCwgMC4wMSwgMC40OF1dLFxuICAgICAgICBbJy0tY29sb3ItY29udHJhc3QtaGlnaCcsIFsyNDAsIDAuMDQsIDAuMl1dLFxuICAgICAgICBbJy0tY29sb3ItY29udHJhc3QtaGlnaGVyJywgWzI0MCwgMC4wOCwgMC4xMl1dXG4gICAgXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlZmF1bHRDb2xvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2V0Q3NzVmFyaWFibGUoZGVmYXVsdENvbG9yc1tpXVswXSwgZ2V0SFNMKGRlZmF1bHRDb2xvcnNbaV1bMV0pKTtcbiAgICAgICAgc2V0Q29sb3JQYXJ0VmFyaWFibGVzKGRlZmF1bHRDb2xvcnNbaV1bMF0sIGRlZmF1bHRDb2xvcnNbaV1bMV0pO1xuICAgIH1cbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbG9yUGFydFZhcmlhYmxlcyhsYWJlbCwgY29sb3JBcnJheSkge1xuICAgIHNldENzc1ZhcmlhYmxlKGxhYmVsICsgJy1oJywgTWF0aC5yb3VuZChjb2xvckFycmF5WzBdKSk7XG4gICAgc2V0Q3NzVmFyaWFibGUobGFiZWwgKyAnLXMnLCBNYXRoLnJvdW5kKGNvbG9yQXJyYXlbMV0gKiAxMDApICsgJyUnKTtcbiAgICBzZXRDc3NWYXJpYWJsZShsYWJlbCArICctbCcsIE1hdGgucm91bmQoY29sb3JBcnJheVsyXSAqIDEwMCkgKyAnJScpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QldBcnJheShvYmopIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2goT2JqZWN0LnZhbHVlcyhvYmpbcHJvcGVydHldKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFR5cG9ncmFwaHlTdHlsZSh0eXBvZ3JhcGh5LCBib29sLCBtcSkge1xuICAgIGlmIChib29sKSB7XG4gICAgICAgIC8vbm90IHJlc3BvbnNpdmUgdGhpbmdzXG4gICAgICAgIGlmICh0eXBvZ3JhcGh5Wydmb250Q29kZSddICYmIHR5cG9ncmFwaHkgIT0gJycpXG4gICAgICAgICAgICAkKHR5cG9ncmFwaHlbJ2ZvbnRDb2RlJ10pLmFwcGVuZFRvKCQoJ2hlYWQnKSk7XG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHR5cG9ncmFwaHlbJ2ZvbnRGYW1pbGllcyddKSB7XG4gICAgICAgICAgICBpZiAodHlwb2dyYXBoeVsnZm9udEZhbWlsaWVzJ10uaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIHR5cG9ncmFwaHlbJ2ZvbnRGYW1pbHlMYWJlbHMnXS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBzZXRCb2R5Q3NzVmFyaWFibGUodHlwb2dyYXBoeVsnZm9udEZhbWlseUxhYmVscyddW3Byb3BlcnR5XSwgdHlwb2dyYXBoeVsnZm9udEZhbWlsaWVzJ11bcHJvcGVydHldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwb2dyYXBoeVsnbGhDcm9wQ2FwaXRhbExldHRlciddKSB7XG4gICAgICAgICAgICB2YXIgbGhjcm9wQXJyYXkgPSBPYmplY3QudmFsdWVzKHR5cG9ncmFwaHlbJ2xoQ3JvcENhcGl0YWxMZXR0ZXInXSk7XG4gICAgICAgICAgICBpZiAobGhjcm9wQXJyYXkubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICBzZXRDc3NWYXJpYWJsZSgnLS1mb250LXByaW1hcnktY2FwaXRhbC1sZXR0ZXInLCBsaGNyb3BBcnJheVswXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb250QXJyYXkgPSBbJyddO1xuICAgICAgICBidG5Gb250SWRzID0gWzBdO1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0eXBvZ3JhcGh5Wydmb250RmFtaWx5TGFiZWxzJ10pIHtcbiAgICAgICAgICAgIGlmICh0eXBvZ3JhcGh5Wydmb250RmFtaWx5TGFiZWxzJ10uaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgZm9udEFycmF5LnB1c2godHlwb2dyYXBoeVsnZm9udEZhbWlseUxhYmVscyddW3Byb3BlcnR5XSk7XG4gICAgICAgICAgICAgICAgYnRuRm9udElkcy5wdXNoKHR5cG9ncmFwaHlbJ2ZvbnRGYW1pbHlJZHMnXVtwcm9wZXJ0eV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9ib2R5L2hlYWRpbmcgc3R5bGVcbiAgICB2YXIgaGVhZGluZ1ZhbHVlcyA9IGdldEJvZHlOb3RGYWxzZShnZXRUeXBvZ3JhcGh5QXJyYXkodHlwb2dyYXBoeVsnaGVhZGluZ0luZm8nXSksIG1xKVxuICAgICAgICAsIGJvZHlWYWx1ZXMgPSBnZXRCb2R5Tm90RmFsc2UoZ2V0VHlwb2dyYXBoeUFycmF5KHR5cG9ncmFwaHlbJ2JvZHlJbmZvJ10pLCBtcSk7XG5cbiAgICB2YXIgdGV4dFZhcmlhYmxlcyA9ICdyb290LCAqey0tdGV4dC14czogY2FsYygodmFyKC0tdGV4dC11bml0KSAvIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKSAvIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQtc206IGNhbGModmFyKC0tdGV4dC14cykgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LW1kOiBjYWxjKHZhcigtLXRleHQtc20pICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LWxnOiBjYWxjKHZhcigtLXRleHQtbWQpICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykpOy0tdGV4dC14bDogY2FsYyh2YXIoLS10ZXh0LWxnKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQteHhsOiBjYWxjKHZhcigtLXRleHQteGwpICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykpOy0tdGV4dC14eHhsOiBjYWxjKHZhcigtLXRleHQteHhsKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQteHh4eGw6IGNhbGModmFyKC0tdGV4dC14eHhsKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTt9JztcblxuICAgIGxvYWRUeXBvZ3JhcGh5U3R5bGVUYWcodGV4dFZhcmlhYmxlcyArIGdldFR5cG9ncmFwaHlTdHlsZShoZWFkaW5nVmFsdWVzLCAnaDEsIGgyLCBoMywgaDQnLCB0eXBvZ3JhcGh5KSArIGdldFR5cG9ncmFwaHlTdHlsZShib2R5VmFsdWVzLCAnYm9keScsIHR5cG9ncmFwaHkpKTtcblxuICAgIHNldFR5cG9ncmFwaHlDc3NWYXJpYWJsZXMoaGVhZGluZ1ZhbHVlcywgYm9keVZhbHVlcywgdHlwb2dyYXBoeSwgbXEpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFR5cG9ncmFwaHlEZWZhdWx0U3R5bGUoYm9vbCwgbXEpIHtcbiAgICAvLyBzZXQgdmFyaWFibGVzIC0gZ2V0IHZhbHVlcyBmb3IgLS10ZXh0LWJhc2Utc2l6ZSBhbmQgLS10ZXh0LXNjYWxlLXJhdGlvXG4gICAgdmFyIGJvZHlTdHlsZSA9ICctLWZvbnQtcHJpbWFyeTogSW50ZXIsIHN5c3RlbS11aSwgc2Fucy1zZXJpZjstLXRleHQtYmFzZS1zaXplOiAxZW07LS10ZXh0LXNjYWxlLXJhdGlvOiAxLjI7LS10ZXh0LXVuaXQ6IDFlbTstLWJvZHktbGluZS1oZWlnaHQ6IDEuNDstLWhlYWRpbmctbGluZS1oZWlnaHQ6IDEuMjstLWZvbnQtcHJpbWFyeS1jYXBpdGFsLWxldHRlcjogMTsnXG4gICAgICAgICxcbiAgICAgICAgYWxsU3R5bGUgPSAnIC0tdGV4dC14czogY2FsYygodmFyKC0tdGV4dC11bml0KSAvIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKSAvIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQtc206IGNhbGModmFyKC0tdGV4dC14cykgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LW1kOiBjYWxjKHZhcigtLXRleHQtc20pICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LWxnOiBjYWxjKHZhcigtLXRleHQtbWQpICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykpOy0tdGV4dC14bDogY2FsYyh2YXIoLS10ZXh0LWxnKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQteHhsOiBjYWxjKHZhcigtLXRleHQteGwpICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykpOy0tdGV4dC14eHhsOiBjYWxjKHZhcigtLXRleHQteHhsKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQteHh4eGw6IGNhbGModmFyKC0tdGV4dC14eHhsKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTsnO1xuXG4gICAgYm9keVN0eWxlID0gJzpyb290eycgKyBib2R5U3R5bGUgKyAnfSc7XG4gICAgYWxsU3R5bGUgPSAnOnJvb3QsICp7JyArIGFsbFN0eWxlICsgJ30nO1xuXG4gICAgdmFyIGJvZHlSZXNTdHlsZSA9ICdAbWVkaWEgKG1pbi13aWR0aDo2NHJlbSl7OnJvb3R7LS10ZXh0LWJhc2Utc2l6ZTogMS4yNWVtOy0tdGV4dC1zY2FsZS1yYXRpbzogMS4yNTt9fSc7XG5cbiAgICB2YXIgaGVhZGluZ1N0eWxlID0gJ2gxLCBoMiwgaDMsIGg0IHtmb250LWZhbWlseTogdmFyKC0tZm9udC1wcmltYXJ5KTtmb250LXdlaWdodDogNzAwO30nO1xuXG4gICAgbG9hZFR5cG9ncmFwaHlTdHlsZVRhZyhib2R5U3R5bGUgKyBhbGxTdHlsZSArIGhlYWRpbmdTdHlsZSArIGJvZHlSZXNTdHlsZSk7XG5cbiAgICAvLyBhcHBlbmQgZm9udCBsaW5rXG4gICAgdmFyIGZvbnRMaW5rID0gJzxsaW5rIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUludGVyOndnaHRAMzAwOzQwMDs1MDA7NjAwOzcwMCZkaXNwbGF5PXN3YXBcIiByZWw9XCJzdHlsZXNoZWV0XCI+JztcbiAgICB2YXIgdHlwb2dyYXBoeVN0eWxlID0gJCgnI3R5cG9ncmFwaHktc3R5bGUnKTtcbiAgICAkKGZvbnRMaW5rKS5pbnNlcnRBZnRlcih0eXBvZ3JhcGh5U3R5bGUpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFR5cG9ncmFwaHlTdHlsZVRhZyhzdHlsZUNvbnRlbnQpIHtcbiAgICB2YXIgZGVmYXVsdFN0eWxlID0gJ21hcmsge2JhY2tncm91bmQtY29sb3I6IGhzbGEodmFyKC0tY29sb3ItYWNjZW50LWgpLCB2YXIoLS1jb2xvci1hY2NlbnQtcyksIHZhcigtLWNvbG9yLWFjY2VudC1sKSwgMC4yKTtjb2xvcjogaW5oZXJpdDt9LnRleHQtY29tcG9uZW50IHstLWxpbmUtaGVpZ2h0LW11bHRpcGxpZXI6IDE7LS10ZXh0LXZzcGFjZS1tdWx0aXBsaWVyOiAxO30udGV4dC1jb21wb25lbnQgYmxvY2txdW90ZSB7cGFkZGluZy1sZWZ0OiAxZW07Ym9yZGVyLWxlZnQ6IDRweCBzb2xpZCB2YXIoLS1jb2xvci1jb250cmFzdC1sb3cpO30udGV4dC1jb21wb25lbnQgaHIge2JhY2tncm91bmQ6IHZhcigtLWNvbG9yLWNvbnRyYXN0LWxvdyk7aGVpZ2h0OiAxcHg7fS50ZXh0LWNvbXBvbmVudCBmaWdjYXB0aW9uIHtmb250LXNpemU6IHZhcigtLXRleHQtc20pO2NvbG9yOiB2YXIoLS1jb2xvci1jb250cmFzdC1tZWRpdW0pO30uYXJ0aWNsZSB7LS1ib2R5LWxpbmUtaGVpZ2h0OiAxLjU4Oy0tdGV4dC12c3BhY2UtbXVsdGlwbGllcjogMS4yO30nO1xuICAgIHZhciBzdHlsZSA9ICc8c3R5bGUgaWQ9XCJ0eXBvZ3JhcGh5LXN0eWxlXCI+JyArIHN0eWxlQ29udGVudCArIGRlZmF1bHRTdHlsZSArICc8L3N0eWxlPic7XG4gICAgJCgnI3R5cG9ncmFwaHktc3R5bGUnKS5yZW1vdmUoKTtcblxuICAgIHZhciBiYXNlU3R5bGUgPSAkKCcjY2QtYmFzZS1wYXJ0LTEnKTtcbiAgICAkKHN0eWxlKS5pbnNlcnRBZnRlcihiYXNlU3R5bGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFR5cG9ncmFwaHlDc3NWYXJTdHlsZUd1aWRlKHR5cG9ncmFwaHkpIHtcbiAgICB2YXIgY29kZSA9ICc6cm9vdCB7JztcbiAgICAvLyBmb250IGZhbWlseSBkZWZpbml0aW9uXG4gICAgdmFyIGZvbnRGYW1pbGllcyA9ICcnXG4gICAgICAgICwgZm9udEZhbWlseUNsYXNzZXMgPSAnJztcbiAgICB2YXIgc2NhbGUgPSAnJztcbiAgICB2YXIgdGV4dFZhcmlhYmxlcyA9ICcnO1xuICAgIHZhciBzY2FsZVJlc3BvbnNpdmUgPSAnJztcbiAgICBpZiAodHlwb2dyYXBoeVsnZm9udEZhbWlsaWVzJ10gJiYgdHlwb2dyYXBoeVsnZm9udEZhbWlseUxhYmVscyddKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwb2dyYXBoeVsnZm9udEZhbWlsaWVzJ10ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBvZ3JhcGh5Wydmb250RmFtaWx5TGFiZWxzJ11baV0pIHtcbiAgICAgICAgICAgICAgICBmb250RmFtaWxpZXMgPSBmb250RmFtaWxpZXMgKyB0eXBvZ3JhcGh5Wydmb250RmFtaWx5TGFiZWxzJ11baV0gKyAnOiAnICsgdHlwb2dyYXBoeVsnZm9udEZhbWlsaWVzJ11baV0gKyAnOyc7XG4gICAgICAgICAgICAgICAgZm9udEZhbWlseUNsYXNzZXMgPSBmb250RmFtaWx5Q2xhc3NlcyArIHR5cG9ncmFwaHlbJ2ZvbnRGYW1pbHlMYWJlbHMnXVtpXS5yZXBsYWNlKCctLScsICcuJykgKyAne2ZvbnQtZmFtaWx5OiB2YXIoJyArIHR5cG9ncmFwaHlbJ2ZvbnRGYW1pbHlMYWJlbHMnXVtpXSArICcpO30nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvZGUgPSBjb2RlICsgZm9udEZhbWlsaWVzO1xuICAgIGlmICh0eXBvZ3JhcGh5WydiYXNlU2l6ZSddICYmIHR5cG9ncmFwaHlbJ3NjYWxlUmF0aW8nXSAmJiB0eXBvZ3JhcGh5Wydib2R5SW5mbyddICYmIHR5cG9ncmFwaHlbJ2hlYWRpbmdJbmZvJ10pIHtcbiAgICAgICAgc2NhbGUgPSBnZXRUeXBvZ3JhcGh5U2NhbGVWYXIodHlwb2dyYXBoeSwgMCk7XG4gICAgICAgIHNjYWxlUmVzcG9uc2l2ZSA9IGdldFR5cG9ncmFwaHlTY2FsZVZhclJlcyh0eXBvZ3JhcGh5KTtcbiAgICAgICAgdGV4dFZhcmlhYmxlcyA9ICdyb290LCAqIHstLXRleHQteHM6IGNhbGMoKHZhcigtLXRleHQtdW5pdCkgLyB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSkgLyB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LXNtOiBjYWxjKHZhcigtLXRleHQteHMpICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykpOy0tdGV4dC1tZDogY2FsYyh2YXIoLS10ZXh0LXNtKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pICogdmFyKC0tdGV4dC1zY2FsZS1yYXRpbykpOy0tdGV4dC1sZzogY2FsYyh2YXIoLS10ZXh0LW1kKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQteGw6IGNhbGModmFyKC0tdGV4dC1sZykgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LXh4bDogY2FsYyh2YXIoLS10ZXh0LXhsKSAqIHZhcigtLXRleHQtc2NhbGUtcmF0aW8pKTstLXRleHQteHh4bDogY2FsYyh2YXIoLS10ZXh0LXh4bCkgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7LS10ZXh0LXh4eHhsOiBjYWxjKHZhcigtLXRleHQteHh4bCkgKiB2YXIoLS10ZXh0LXNjYWxlLXJhdGlvKSk7fSdcbiAgICB9XG5cbiAgICBjb2RlID0gY29kZSArIHNjYWxlICsgJ30nICsgdGV4dFZhcmlhYmxlcyArIHNjYWxlUmVzcG9uc2l2ZSArIGZvbnRGYW1pbHlDbGFzc2VzO1xuICAgIHJldHVybiBjb2RlO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFR5cG9ncmFwaHlTdHlsZVN0eWxlR3VpZGUodHlwb2dyYXBoeSkge1xuICAgIHZhciBtcSA9IFsnJywgJzMycmVtJywgJzQ4cmVtJywgJzY0cmVtJywgJzgwcmVtJywgJzkwcmVtJ107XG4gICAgdmFyIGNvZGUgPSAnJztcbiAgICBpZiAodHlwb2dyYXBoeVsnYm9keUluZm8nXSAmJiB0eXBvZ3JhcGh5WydoZWFkaW5nSW5mbyddKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9ICcnO1xuICAgICAgICAgICAgaWYgKHR5cG9ncmFwaHlbJ2JvZHlJbmZvJ11baV0pIHtcbiAgICAgICAgICAgICAgICB2YXIgYm9keVN0eWxlID0gZ2V0VHlwb2dyYXBoeVN0eWxlKHR5cG9ncmFwaHlbJ2JvZHlJbmZvJ11baV0sICdib2R5JywgdHlwb2dyYXBoeSk7XG4gICAgICAgICAgICAgICAgc3R5bGUgPSAoaSA+IDApID8gc3R5bGUgKyAnQG1lZGlhIChtaW4td2lkdGg6JyArIG1xW2ldICsgJykgeycgKyBib2R5U3R5bGUgKyAnfScgOiBzdHlsZSArIGJvZHlTdHlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBvZ3JhcGh5WydoZWFkaW5nSW5mbyddW2ldKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlYWRpbmdTdHlsZSA9IGdldFR5cG9ncmFwaHlTdHlsZSh0eXBvZ3JhcGh5WydoZWFkaW5nSW5mbyddW2ldLCAnaDEsIGgyLCBoMywgaDQnLCB0eXBvZ3JhcGh5KTtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IChpID4gMCkgPyBzdHlsZSArICdAbWVkaWEgKG1pbi13aWR0aDonICsgbXFbaV0gKyAnKSB7JyArIGhlYWRpbmdTdHlsZSArICd9JyA6IHN0eWxlICsgaGVhZGluZ1N0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29kZSA9IGNvZGUgKyBzdHlsZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb2RlO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwb2dyYXBoeVNjYWxlVmFyKHR5cG9ncmFwaHksIGluZGV4KSB7XG4gICAgdmFyIGNvZGUgPSAnJztcbiAgICBpZiAodHlwb2dyYXBoeVsnYmFzZVNpemUnXVtpbmRleF0pXG4gICAgICAgIGNvZGUgPSBjb2RlICsgJy0tdGV4dC1iYXNlLXNpemU6ICcgKyB0eXBvZ3JhcGh5WydiYXNlU2l6ZSddW2luZGV4XSArICc7JztcbiAgICBpZiAodHlwb2dyYXBoeVsnc2NhbGVSYXRpbyddW2luZGV4XSlcbiAgICAgICAgY29kZSA9IGNvZGUgKyAnLS10ZXh0LXNjYWxlLXJhdGlvOiAnICsgdHlwb2dyYXBoeVsnc2NhbGVSYXRpbyddW2luZGV4XSArICc7JztcbiAgICBpZiAodHlwb2dyYXBoeVsnYm9keUluZm8nXVtpbmRleF0gJiYgdHlwb2dyYXBoeVsnYm9keUluZm8nXVtpbmRleF1bMl0pXG4gICAgICAgIGNvZGUgPSBjb2RlICsgJy0tYm9keS1saW5lLWhlaWdodDogJyArIHR5cG9ncmFwaHlbJ2JvZHlJbmZvJ11baW5kZXhdWzJdICsgJzsnO1xuICAgIGlmICh0eXBvZ3JhcGh5WydoZWFkaW5nSW5mbyddW2luZGV4XSAmJiB0eXBvZ3JhcGh5WydoZWFkaW5nSW5mbyddW2luZGV4XVsyXSlcbiAgICAgICAgY29kZSA9IGNvZGUgKyAnLS1oZWFkaW5nLWxpbmUtaGVpZ2h0OiAnICsgdHlwb2dyYXBoeVsnaGVhZGluZ0luZm8nXVtpbmRleF1bMl0gKyAnOyc7XG4gICAgaWYgKGluZGV4ID09IDApXG4gICAgICAgIGNvZGUgPSBjb2RlICsgJy0tdGV4dC11bml0OiAnICsgZ2V0VGV4dFVuaXQodHlwb2dyYXBoeSk7XG4gICAgcmV0dXJuIGNvZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXh0VW5pdCh0eXBvZ3JhcGh5KSB7XG4gICAgdmFyIHRleHRVbml0ID0gJzFlbSc7XG4gICAgaWYgKHR5cG9ncmFwaHlbJ2Jhc2VTaXplJ11bMF0gJiYgKHR5cG9ncmFwaHlbJ2Jhc2VTaXplJ11bMF0uaW5kZXhPZigncHgnKSA+IC0xIHx8IHR5cG9ncmFwaHlbJ2Jhc2VTaXplJ11bMF0uaW5kZXhPZigncmVtJykgPiAtMSkpXG4gICAgICAgIHRleHRVbml0ID0gJ3ZhcigtLXRleHQtYmFzZS1zaXplKSc7XG4gICAgcmV0dXJuIHRleHRVbml0O1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwb2dyYXBoeVNjYWxlVmFyUmVzKHR5cG9ncmFwaHkpIHtcbiAgICB2YXIgbXEgPSBbJycsICczMnJlbScsICc0OHJlbScsICc2NHJlbScsICc4MHJlbScsICc5MHJlbSddO1xuICAgIHZhciBjb2RlID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBtcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb2RlID0gY29kZSArICdAbWVkaWEgKG1pbi13aWR0aDonICsgbXFbaV0gKyAnKSB7OnJvb3R7JyArIGdldFR5cG9ncmFwaHlTY2FsZVZhcih0eXBvZ3JhcGh5LCBpKSArICd9fSdcbiAgICB9XG4gICAgcmV0dXJuIGNvZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkU3BhY2luZ1N0eWxlKHNwYWNpbmcsIG1xKSB7XG4gICAgdmFyIHNwYWNlVW5pdCA9IGdldFZhbGlkUmVzcG9uc2l2ZVZhbHVlKE9iamVjdC52YWx1ZXMoc3BhY2luZ1snc3BhY2VVbml0J10pLCBtcSwgZmFsc2UpXG4gICAgICAgICwgc3BhY2VSYXRpb0N1c3RvbSA9IGdldFNwYWNlUmF0aW9DdXN0b20oc3BhY2luZ1snY3VzdG9tU3BhY2VSYXRpbyddKTtcbiAgICAvLyB2YXIgc3JMaXN0ID0gZ2V0U3BhY2luZ1ZhbHVlcyhPYmplY3QudmFsdWVzKHNwYWNpbmdbJ3NwYWNlUmF0aW8nXSksIHNwYWNlVW5pdCwgbXEsIHNwYWNlUmF0aW9DdXN0b20pLFxuXG4gICAgLy8gdGhpcyB3aWxsIHJldHVybiBvbmx5IHRoZSBsaXN0IG9mIHRoZSBtdWx0aXBsaWVyIChub3QgaW5jbHVkaW5nIHRoZSAtLXNwYWNlLXVuaXQpXG4gICAgdmFyIHNyTGlzdCA9IGdldFNwYWNpbmdNdWx0aXBsaWVyKE9iamVjdC52YWx1ZXMoc3BhY2luZ1snc3BhY2VSYXRpbyddKSwgbXEsIHNwYWNlUmF0aW9DdXN0b20pXG4gICAgICAgICwgcGFkZGluZ1ZhcmlhYmxlID0gc3JMaXN0W2dldFZhbGlkUmVzcG9uc2l2ZVZhbHVlKE9iamVjdC52YWx1ZXMoc3BhY2luZ1sncGFkZGluZyddKSwgbXEsIGZhbHNlKSAtIDFdO1xuICAgIHVwZGF0ZVNwYWNpbmdDc3NWYXJpYWJsZXMoc3JMaXN0LCBwYWRkaW5nVmFyaWFibGUsIHNwYWNlVW5pdCk7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkU3BhY2luZ0RlZmF1bHRTdHlsZShtcSkge1xuICAgIHZhciByZXNwb25zaXZlU3BhY2luZyA9ICdAbWVkaWEgKG1pbi13aWR0aDo2NHJlbSl7OnJvb3R7LS1zcGFjZS11bml0OiAgMS4yNWVtO319JztcbiAgICAvLyB2YXIgc3R5bGUgPSAnPHN0eWxlIGlkPVwic3BhY2luZy1zdHlsZVwiPicrcmVzcG9uc2l2ZVNwYWNpbmcrJzwvc3R5bGU+JztcbiAgICAvLyAkKCcjc3BhY2luZy1zdHlsZScpLnJlbW92ZSgpO1xuXG4gICAgLy8gdmFyIGJhc2VTdHlsZSA9ICQoJyNjZC1iYXNlLXBhcnQtMScpO1xuICAgIC8vICQoc3R5bGUpLmluc2VydEFmdGVyKGJhc2VTdHlsZSk7XG4gICAgLy8gbG9hZCBhZnRlciBjb21wb25lbnQgc3R5bGUgLT4gdGhpcyB3aWxsIG5lZWQgdG8gb3ZlcndyaXRlIHRoZSBkZWZhdWx0IHNwYWNpbmcgc3R5bGVcbiAgICAvLyAkKCdoZWFkJykuYXBwZW5kKHN0eWxlKTtcbiAgICBsb2FkU3BhY2luZ1N0eWxlVGFnKHJlc3BvbnNpdmVTcGFjaW5nKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTcGFjaW5nU3R5bGVUYWcoc3R5bGUpIHtcbiAgICB2YXIgc3R5bGUgPSAnPHN0eWxlIGlkPVwic3BhY2luZy1zdHlsZVwiPicgKyBzdHlsZSArICc8L3N0eWxlPic7XG4gICAgJCgnI3NwYWNpbmctc3R5bGUnKS5yZW1vdmUoKTtcbiAgICB2YXIgYmFzZVN0eWxlID0gJCgnI2NkLWJhc2UtcGFydC0xJyk7XG4gICAgJChzdHlsZSkuaW5zZXJ0QWZ0ZXIoYmFzZVN0eWxlKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFR5cG9ncmFwaHlDc3NWYXJpYWJsZXMoaGVhZGluZ1ZhbHVlcywgYm9keVZhbHVlcywgdHlwb2dyYXBoeSwgbXEpIHtcbiAgICAvL2NzcyB2YXJpYWJsZXNcbiAgICBpZiAoaGVhZGluZ1ZhbHVlc1syXSAmJiBoZWFkaW5nVmFsdWVzWzJdICE9ICcnKSB7XG4gICAgICAgIHNldENzc1ZhcmlhYmxlKCctLWhlYWRpbmctbGluZS1oZWlnaHQnLCBoZWFkaW5nVmFsdWVzWzJdKTtcbiAgICAgICAgLy8gc2V0RWxlbWVudENzc1ZhcmlhYmxlKCd0ZXh0LWNvbXBvbmVudCcsICctLWhlYWRpbmctbGluZS1oZWlnaHQnLCBoZWFkaW5nVmFsdWVzWzJdKTtcbiAgICB9XG4gICAgaWYgKGJvZHlWYWx1ZXNbMl0gJiYgYm9keVZhbHVlc1syXSAhPSAnJykge1xuICAgICAgICBzZXRDc3NWYXJpYWJsZSgnLS1ib2R5LWxpbmUtaGVpZ2h0JywgYm9keVZhbHVlc1syXSk7XG4gICAgICAgIC8vIHNldEVsZW1lbnRDc3NWYXJpYWJsZSgndGV4dC1jb21wb25lbnQnLCAnLS1ib2R5LWxpbmUtaGVpZ2h0JywgYm9keVZhbHVlc1syXSk7XG4gICAgfVxuXG4gICAgc2V0Q3NzVmFyaWFibGUoJy0tdGV4dC1iYXNlLXNpemUnLCBnZXRWYWxpZFJlc3BvbnNpdmVWYWx1ZShPYmplY3QudmFsdWVzKHR5cG9ncmFwaHlbJ2Jhc2VTaXplJ10pLCBtcSwgZmFsc2UpKTtcbiAgICBzZXRDc3NWYXJpYWJsZSgnLS10ZXh0LXNjYWxlLXJhdGlvJywgZ2V0VmFsaWRSZXNwb25zaXZlVmFsdWUoT2JqZWN0LnZhbHVlcyh0eXBvZ3JhcGh5WydzY2FsZVJhdGlvJ10pLCBtcSwgZmFsc2UpKTtcbiAgICBzZXRDc3NWYXJpYWJsZSgnLS10ZXh0LXVuaXQnLCBnZXRUZXh0VW5pdCh0eXBvZ3JhcGh5KSk7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBvZ3JhcGh5QXJyYXkob2JqKSB7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgIGFyci5wdXNoKE9iamVjdC52YWx1ZXMob2JqW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBvZ3JhcGh5U3R5bGUoYXJyYXksIHNlbGVjdG9yLCB0eXBvZ3JhcGh5KSB7XG4gICAgdmFyIHN0eWxlID0gJyc7XG4gICAgaWYgKHBhcnNlSW50KGFycmF5WzBdKSAmJiBwYXJzZUludChhcnJheVswXSkgIT0gMCkge1xuICAgICAgICB2YXIgZm9udElkcyA9IE9iamVjdC52YWx1ZXModHlwb2dyYXBoeVsnZm9udEZhbWlseUlkcyddKTtcbiAgICAgICAgLy8gaW1wb3J0YW50Q3NzID0gc2VsZWN0b3IgPT0gJ2JvZHknID8gJyFpbXBvcnRhbnQnIDogJyc7XG4gICAgICAgIHN0eWxlID0gc3R5bGUgKyAnZm9udC1mYW1pbHk6ICcgKyB0eXBvZ3JhcGh5Wydmb250RmFtaWxpZXMnXVtmb250SWRzLmluZGV4T2YocGFyc2VJbnQoYXJyYXlbMF0pKV0gKyAnOyc7XG4gICAgfVxuICAgIGlmIChhcnJheVsxXSAmJiBhcnJheVsxXSAhPSAnJylcbiAgICAgICAgc3R5bGUgPSBzdHlsZSArICdmb250LXdlaWdodDogJyArIGFycmF5WzFdICsgJzsnO1xuICAgIHJldHVybiBzZWxlY3RvciArICd7JyArIHN0eWxlICsgJ30nO1xufVxuO1xuLy8gZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVNwYWNpbmdDc3NWYXJpYWJsZXMobGlzdCwgcGFkZGluZywgc3BhY2VVbml0KSB7XG4vLyBcdHNldENzc1ZhcmlhYmxlKCctLXNwYWNlLXVuaXQnLCBzcGFjZVVuaXQpO1xuLy8gXHRzZXRDc3NWYXJpYWJsZSgnLS1jb21wb25lbnQtcGFkZGluZycsIHBhZGRpbmcpO1xuLy8gXHRmb3IodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuLy8gXHRcdHNldENzc1ZhcmlhYmxlKHBhZGRpbmdWYXJpYWJsZXNbaV0sIGxpc3RbaV0pO1xuLy8gXHR9XG4vLyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlU3BhY2luZ0Nzc1ZhcmlhYmxlcyhsaXN0LCBwYWRkaW5nLCBzcGFjZVVuaXQpIHtcbiAgICBzZXRDc3NWYXJpYWJsZSgnLS1zcGFjZS11bml0Jywgc3BhY2VVbml0KTtcbiAgICB2YXIgc3BhY2luZ1ZhcmlhYmxlcyA9ICctLWNvbXBvbmVudC1wYWRkaW5nOicgKyAnY2FsYygnICsgcGFkZGluZyArICcgKiB2YXIoLS1zcGFjZS11bml0KSk7JztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3BhY2luZ1ZhcmlhYmxlcyA9IHNwYWNpbmdWYXJpYWJsZXMgKyBwYWRkaW5nVmFyaWFibGVzW2ldICsgJzogY2FsYygnICsgbGlzdFtpXSArICcgKiB2YXIoLS1zcGFjZS11bml0KSk7JztcbiAgICB9XG4gICAgc3BhY2luZ1ZhcmlhYmxlcyA9ICdyb290LCAqeycgKyBzcGFjaW5nVmFyaWFibGVzICsgJ30nO1xuICAgIGxvYWRTcGFjaW5nU3R5bGVUYWcoc3BhY2luZ1ZhcmlhYmxlcyk7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTcGFjaW5nVmFsdWVzKHNwYWNlUmF0aW8sIHN1LCBtcSwgc3BhY2VSYXRpb0N1c3RvbSkge1xuICAgIHZhciBsaXN0ID0gc3BhY2VSYXRpb1VuaXRbZ2V0VmFsaWRSZXNwb25zaXZlVmFsdWUoc3BhY2VSYXRpbywgbXEsIGZhbHNlKV07XG4gICAgaWYgKGxpc3QgPT0gJycpIHtcbiAgICAgICAgLy9jdXN0b20gc2NhbGVcbiAgICAgICAgbGlzdCA9IGdldFNwYWNpbmdDdXN0b21TY2FsZVJhdGlvKG1xLCBzcGFjZVJhdGlvQ3VzdG9tLCBzcGFjZVJhdGlvKTtcbiAgICB9XG5cbiAgICB2YXIgc3BhY2VMaXN0ID0gW107XG4gICAgdmFyIHN1QXJyYXkgPSBnZXRWYWx1ZVVuaXQoc3UpO1xuICAgIGlmIChzdUFycmF5WzBdID09PSBmYWxzZSkge1xuICAgICAgICBzdUFycmF5WzBdID0gMTtcbiAgICAgICAgc3VBcnJheVsxXSA9ICdlbSc7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdXBkYXRlZCA9IE1hdGgucm91bmQobGlzdFtpXSAqIHN1QXJyYXlbMF0gKiAxMDAwKSAvIDEwMDA7XG4gICAgICAgIHNwYWNlTGlzdC5wdXNoKHVwZGF0ZWQgKyBzdUFycmF5WzFdKTtcbiAgICB9XG4gICAgcmV0dXJuIHNwYWNlTGlzdDtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNwYWNpbmdNdWx0aXBsaWVyKHNwYWNlUmF0aW8sIG1xLCBzcGFjZVJhdGlvQ3VzdG9tKSB7XG4gICAgdmFyIGxpc3QgPSBzcGFjZVJhdGlvVW5pdFtnZXRWYWxpZFJlc3BvbnNpdmVWYWx1ZShzcGFjZVJhdGlvLCBtcSwgZmFsc2UpXTtcbiAgICBpZiAobGlzdCA9PSAnJykge1xuICAgICAgICAvL2N1c3RvbSBzY2FsZVxuICAgICAgICBsaXN0ID0gZ2V0U3BhY2luZ0N1c3RvbVNjYWxlUmF0aW8obXEsIHNwYWNlUmF0aW9DdXN0b20sIHNwYWNlUmF0aW8pO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdDtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNwYWNpbmdDdXN0b21TY2FsZVJhdGlvKG1xLCBzcGFjZVJhdGlvQ3VzdG9tLCBzcGFjZVJhdGlvKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGFjZVJhdGlvVW5pdFsxXS5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcnJheVtpXSA9IGdldFNwYWNpbmdWYWxpZFJlc3BvbnNpdmVWYWx1ZUN1c3RvbVJhdGlvKHNwYWNlUmF0aW9DdXN0b21baV0sIG1xLCBzcGFjZVJhdGlvKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3BhY2luZ1ZhbGlkUmVzcG9uc2l2ZVZhbHVlQ3VzdG9tUmF0aW8oc3BhY2VBcnJheSwgaW5kZXgsIHNwYWNlUmF0aW8pIHtcbiAgICBpZiAoaW5kZXggPT0gMClcbiAgICAgICAgcmV0dXJuIHNwYWNlQXJyYXlbMF07XG4gICAgdmFyIGl0ZW0gPSBzcGFjZUFycmF5W2luZGV4XTtcbiAgICBpZiAoaXRlbSAhPT0gZmFsc2UgJiYgaXRlbSAhPT0gJycgJiYgc3BhY2VSYXRpb1tpbmRleF0gPT0gNikge1xuICAgICAgICAvL2l0ZW0gZGVmaW5lZCBhbmQgc3BhY2UgcmF0aW8gc2V0IHRvIGN1c3RvbVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ2V0U3BhY2luZ1ZhbGlkUmVzcG9uc2l2ZVZhbHVlQ3VzdG9tUmF0aW8oc3BhY2VBcnJheSwgaW5kZXggLSAxLCBzcGFjZVJhdGlvKTtcbiAgICB9XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTcGFjZVJhdGlvQ3VzdG9tKG9iaikge1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDExOyBpKyspIHtcbiAgICAgICAgYXJyLnB1c2goT2JqZWN0LnZhbHVlcyhvYmpbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRCdXR0b25zU3R5bGUoYnV0dG9ucykge1xuICAgIC8vY29udmVydCBvYmogdG8gYXJyYXk7XG4gICAgdmFyIGJ1dHRvbnNBcnJheSA9IGdldEJ1dHRvbnNBcnJheVN0eWxlKGJ1dHRvbnNbJ3N0eWxlJ10pO1xuICAgIHZhciBidG5zTGlzdCA9IFsnYnRuJywgJ2J0bi0tcHJpbWFyeScsICdidG4tLXN1YnRsZScsICdidG4tLWFjY2VudCcsICdidG4tLWRpc2FibGVkJywgJ2J0bi0tc20nLCAnYnRuLS1tZCcsICdidG4tLWxnJ11cbiAgICAgICAgLCBzdGF0dXNMaXN0ID0gWydub25lJywgJzphY3RpdmUnLCAnOmhvdmVyJywgJzpmb2N1cyddXG4gICAgICAgICwgc3RhdHVzUHJpb3JpdHlMaXN0ID0gWydub25lJywgJzpob3ZlcicsICc6Zm9jdXMnLCAnOmFjdGl2ZSddXG4gICAgICAgICwgY29kZSA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidG5zTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb2RlID0gY29kZSArIGJ1dHRvbnNDb2RlU3R5bGUoYnV0dG9uc0FycmF5W2J0bnNMaXN0W2ldXSwgYnRuc0xpc3RbaV0sIHN0YXR1c0xpc3QsIHN0YXR1c1ByaW9yaXR5TGlzdCwgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgICAvLyBnZXQgY29kZSBmb3IgYnRuLS1pY29uXG4gICAgdmFyIGJ0bkljb25Db2RlID0gYnV0dG9uSWNvbkNvZGVTdHlsZShidXR0b25zQXJyYXlbJ2J0biddKTtcbiAgICAvLyBnZXQgY29kZSBmb3IgYnV0dG9uIHZhcmlhYmxlc1xuICAgIHZhciBidG5WYXJpYWJsZXMgPSBidXR0b25WYXJpYWJsZXMoYnV0dG9uc0FycmF5KTtcbiAgICBsb2FkQnV0dG9uc1N0eWxlVGFnKGJ0blZhcmlhYmxlcyArIGNvZGUgKyBidG5JY29uQ29kZSk7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkQnV0dG9uc1N0eWxlU3R5bGVHdWlkZShidXR0b25zKSB7XG4gICAgLy8gYnV0dG9uc0FycmF5ID0gYnV0dG9uc1snYnRuU3R5bGUnXVxuICAgIGlmICghYnV0dG9uc1snYnRuU3R5bGUnXSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIHZhciBidXR0b25zQXJyYXkgPSBidXR0b25zWydidG5TdHlsZSddO1xuICAgIC8vIGJ1dHRvbi1pY29uIGNsYXNzXG4gICAgdmFyIGJ0bkljb25Db2RlID0gJyc7XG4gICAgaWYgKGJ1dHRvbnNBcnJheVsnYnRuJ10pIHtcbiAgICAgICAgYnRuSWNvbkNvZGUgPSBidXR0b25JY29uQ29kZVN0eWxlKGJ1dHRvbnNBcnJheVsnYnRuJ10pO1xuICAgIH1cbiAgICAvLyBidXR0b24gQ1NTIHZhcmlhYmxlc1xuICAgIHZhciBidG5WYXJpYWJsZXMgPSBidXR0b25WYXJpYWJsZXMoYnV0dG9uc0FycmF5KTtcbiAgICAvLyBidXR0b25zIHN0eWxlXG4gICAgdmFyIGJ0bnNMaXN0ID0gWydidG4nLCAnYnRuLS1wcmltYXJ5JywgJ2J0bi0tc3VidGxlJywgJ2J0bi0tYWNjZW50JywgJ2J0bi0tZGlzYWJsZWQnLCAnYnRuLS1zbScsICdidG4tLW1kJywgJ2J0bi0tbGcnXVxuICAgICAgICAsIHN0YXR1c0xpc3QgPSBbJ25vbmUnLCAnOmFjdGl2ZScsICc6aG92ZXInLCAnOmZvY3VzJ11cbiAgICAgICAgLCBzdGF0dXNQcmlvcml0eUxpc3QgPSBbJ25vbmUnLCAnOmhvdmVyJywgJzpmb2N1cycsICc6YWN0aXZlJ11cbiAgICAgICAgLCBidG5TdHlsZSA9ICcnO1xuICAgIC8vIGRlZmF1bHQgYnRucyBzdHlsZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnRuc0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYnRuU3R5bGUgPSBidG5TdHlsZSArIGJ1dHRvbnNDb2RlU3R5bGUoYnV0dG9uc0FycmF5W2J0bnNMaXN0W2ldXSwgYnRuc0xpc3RbaV0sIHN0YXR1c0xpc3QsIHN0YXR1c1ByaW9yaXR5TGlzdCwgZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgICAvLyBjdXN0b20gYnRucyBjb2RlXG4gICAgaWYgKGJ1dHRvbnNbJ2N1c3RvbUJ0bnMnXSAmJiBidXR0b25zWydjdXN0b21CdG5zJ10ubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1dHRvbnNbJ2N1c3RvbUJ0bnMnXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYnRuU3R5bGUgPSBidG5TdHlsZSArIGJ1dHRvbnNDb2RlU3R5bGUoYnV0dG9uc0FycmF5W2J1dHRvbnNbJ2N1c3RvbUJ0bnMnXVtpXVsxXV0sIGJ1dHRvbnNbJ2N1c3RvbUJ0bnMnXVtpXVswXSwgc3RhdHVzTGlzdCwgc3RhdHVzUHJpb3JpdHlMaXN0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYnRuVmFyaWFibGVzICsgYnRuU3R5bGUgKyBidG5JY29uQ29kZTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTaGFyZWRTdHlsZVN0eWxlR3VpZGUoc2hhcmVkX3N0eWxlKSB7XG4gICAgdmFyIHN0YXR1c0xpc3QgPSBbJ25vbmUnLCAnOmFjdGl2ZScsICc6aG92ZXInLCAnOmZvY3VzJ11cbiAgICAgICAgLCBzdGF0dXNQcmlvcml0eUxpc3QgPSBbJ25vbmUnLCAnOmhvdmVyJywgJzpmb2N1cycsICc6YWN0aXZlJ11cbiAgICAgICAgLCBidG5TdHlsZSA9ICcnO1xuICAgIGlmIChzaGFyZWRfc3R5bGVbJ2N1c3RvbVN0eWxlcyddICYmIHNoYXJlZF9zdHlsZVsnY3VzdG9tU3R5bGVzJ10ubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNoYXJlZF9zdHlsZVsnY3VzdG9tU3R5bGVzJ10ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJ0blN0eWxlID0gYnRuU3R5bGUgKyBidXR0b25zQ29kZVN0eWxlKHNoYXJlZF9zdHlsZS5jdXN0b21TdHlsZUFycmF5W3NoYXJlZF9zdHlsZVsnY3VzdG9tU3R5bGVzJ11baV1bMV1dLCBlc2NhcGVDU1NjaGFyYWN0ZXJzKHNoYXJlZF9zdHlsZVsnY3VzdG9tU3R5bGVzJ11baV1bMF0pLCBzdGF0dXNMaXN0LCBzdGF0dXNQcmlvcml0eUxpc3QsIGZhbHNlKTtcblxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzaGFyZWRfc3R5bGVbJ2N1c3RvbVRleHRTdHlsZXMnXSAmJiBzaGFyZWRfc3R5bGVbJ2N1c3RvbVRleHRTdHlsZXMnXS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2hhcmVkX3N0eWxlWydjdXN0b21UZXh0U3R5bGVzJ10ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJ0blN0eWxlID0gYnRuU3R5bGUgKyBidXR0b25zQ29kZVN0eWxlKHNoYXJlZF9zdHlsZS5jdXN0b21UZXh0U3R5bGVBcnJheVtzaGFyZWRfc3R5bGVbJ2N1c3RvbVRleHRTdHlsZXMnXVtpXVsxXV0sIGVzY2FwZUNTU2NoYXJhY3RlcnMoc2hhcmVkX3N0eWxlWydjdXN0b21UZXh0U3R5bGVzJ11baV1bMF0pLCBzdGF0dXNMaXN0LCBzdGF0dXNQcmlvcml0eUxpc3QsIGZhbHNlKTtcblxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBidG5TdHlsZTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUNTU2NoYXJhY3RlcnMobGFiZWwpIHtcbiAgICBsYWJlbCA9IGxhYmVsLnJlcGxhY2UoL1xcOi9nLCAnXFxcXDonKTtcbiAgICBsYWJlbCA9IGxhYmVsLnJlcGxhY2UoL1xcJS9nLCAnXFxcXCUnKTtcbiAgICBsYWJlbCA9IGxhYmVsLnJlcGxhY2UoL1xcLy9nLCAnXFxcXC8nKTtcbiAgICByZXR1cm4gbGFiZWxcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRCdXR0b25zRGVmYXVsdFN0eWxlKG1xKSB7XG4gICAgdmFyIGJ0bnNTdHlsZSA9ICc6cm9vdCB7LS1idG4tZm9udC1zaXplOiAxZW07LS1idG4tcGFkZGluZy14OiB2YXIoLS1zcGFjZS1zbSk7IC0tYnRuLXBhZGRpbmcteTogdmFyKC0tc3BhY2UteHhzKTsgLWJ0bi1yYWRpdXM6IDAuMjVlbTt9LmJ0biB7bGluZS1oZWlnaHQ6IDEuMjtib3gtc2hhZG93OiB2YXIoLS1zaGFkb3cteHMpOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7dHJhbnNpdGlvbjogLjJzOyB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO30uYnRuOmhvdmVyIHtjdXJzb3I6IHBvaW50ZXI7Ym94LXNoYWRvdzogdmFyKC0tc2hhZG93LXNtKTt9LmJ0bjpmb2N1cyB7Ym94LXNoYWRvdzogMHB4IDBweCAwcHggMnB4IGhzbGEodmFyKC0tY29sb3ItY29udHJhc3QtaGlnaGVyLWgpLCB2YXIoLS1jb2xvci1jb250cmFzdC1oaWdoZXItcyksIHZhcigtLWNvbG9yLWNvbnRyYXN0LWhpZ2hlci1sKSwgMC4xNSk7b3V0bGluZTogbm9uZTt9LmJ0bjphY3RpdmUge3RyYW5zZm9ybTogdHJhbnNsYXRlWSgycHgpO30uYnRuLS1wcmltYXJ5IHtiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1wcmltYXJ5KTtjb2xvcjogdmFyKC0tY29sb3Itd2hpdGUpfS5idG4tLXByaW1hcnk6aG92ZXIge2JhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLXByaW1hcnktZGFyayk7fS5idG4tLXByaW1hcnk6Zm9jdXMge2JveC1zaGFkb3c6IDBweCAwcHggMHB4IDJweCBoc2xhKHZhcigtLWNvbG9yLXByaW1hcnktaCksIHZhcigtLWNvbG9yLXByaW1hcnktcyksIHZhcigtLWNvbG9yLXByaW1hcnktbCksIDAuMik7fS5idG4tLXN1YnRsZSB7YmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItY29udHJhc3QtbG93ZXIpO2NvbG9yOiB2YXIoLS1jb2xvci1jb250cmFzdC1oaWdoZXIpO30uYnRuLS1hY2NlbnQge2JhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLWFjY2VudCk7Y29sb3I6IHZhcigtLWNvbG9yLXdoaXRlKTt9LmJ0bi0tYWNjZW50OmhvdmVyIHtiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1hY2NlbnQtZGFyayk7fS5idG4tLWFjY2VudDpmb2N1cyB7Ym94LXNoYWRvdzogMHB4IDBweCAwcHggMnB4IGhzbGEodmFyKC0tY29sb3ItYWNjZW50LWgpLCB2YXIoLS1jb2xvci1hY2NlbnQtcyksIHZhcigtLWNvbG9yLWFjY2VudC1sKSwgMC4yKTt9LmJ0bi0tZGlzYWJsZWQsIC5idG5bZGlzYWJsZWRdLCAuYnRuW3JlYWRvbmx5XSB7b3BhY2l0eTogMC42O2N1cnNvcjogbm90LWFsbG93ZWQ7fS5idG4tLXNte2ZvbnQtc2l6ZTogMC44ZW07fS5idG4tLW1ke2ZvbnQtc2l6ZTogMS4yZW07fS5idG4tLWxne2ZvbnQtc2l6ZTogMS40ZW07fSc7XG4gICAgbG9hZEJ1dHRvbnNTdHlsZVRhZyhidG5zU3R5bGUpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gYnV0dG9uVmFyaWFibGVzKGJ0blN0eWxlKSB7XG4gICAgdmFyIHNpemVzID0gW1snYnRuJywgJyddLCBbJ2J0bi0tc20nLCAnLXNtJ10sIFsnYnRuLS1tZCcsICctbWQnXSwgWydidG4tLWxnJywgJy1sZyddXTtcbiAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYnRuU3R5bGVbc2l6ZXNbaV1bMF1dICYmIGJ0blN0eWxlW3NpemVzW2ldWzBdXVsnbm9uZSddICYmIGJ0blN0eWxlW3NpemVzW2ldWzBdXVsnbm9uZSddWyd0eXBvZ3JhcGh5J10pIHtcbiAgICAgICAgICAgIHZhciBmb250QmFzZSA9IGdldEJ1dHRvbnNGb250U2l6ZVZhbHVlKGJ0blN0eWxlW3NpemVzW2ldWzBdXVsnbm9uZSddWyd0eXBvZ3JhcGh5J10pO1xuICAgICAgICAgICAgaWYgKGZvbnRCYXNlICE9ICcnKVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWJ0bi1mb250LXNpemUnICsgc2l6ZXNbaV1bMV0gKyAnOicgKyBmb250QmFzZSArICc7J1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChidG5TdHlsZVsnYnRuJ10gJiYgYnRuU3R5bGVbJ2J0biddWydub25lJ10gJiYgYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ3BhZGRpbmcnXSAmJiBidG5TdHlsZVsnYnRuJ11bJ25vbmUnXVsncGFkZGluZyddWzFdKSB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWJ0bi1wYWRkaW5nLXg6JyArIGdldEJ1dHRvbnNQYWRkaW5nVmFsdWUoYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ3BhZGRpbmcnXVsxXSkgKyAnOyc7XG4gICAgfVxuICAgIGlmIChidG5TdHlsZVsnYnRuJ10gJiYgYnRuU3R5bGVbJ2J0biddWydub25lJ10gJiYgYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ3BhZGRpbmcnXSAmJiBidG5TdHlsZVsnYnRuJ11bJ25vbmUnXVsncGFkZGluZyddWzBdKSB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWJ0bi1wYWRkaW5nLXk6JyArIGdldEJ1dHRvbnNQYWRkaW5nVmFsdWUoYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ3BhZGRpbmcnXVswXSkgKyAnOyc7XG4gICAgfVxuICAgIGlmIChidG5TdHlsZVsnYnRuJ10gJiYgYnRuU3R5bGVbJ2J0biddWydub25lJ10gJiYgYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ2FwcGVhcmFuY2UnXSkge1xuICAgICAgICBpZiAoYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ2FwcGVhcmFuY2UnXVsyXSkge1xuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJy0tYnRuLXJhZGl1czonICsgYnRuU3R5bGVbJ2J0biddWydub25lJ11bJ2FwcGVhcmFuY2UnXVsyXSArICc7JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWJ0bi1yYWRpdXM6IDBlbTsnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICc6cm9vdHsnICsgc3RyaW5nICsgJ30nO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEJ1dHRvbnNTdHlsZVRhZyhzdHlsZSkge1xuICAgIHZhciBzdHlsZUVsID0gJzxzdHlsZSBpZD1cImJ1dHRvbnMtc3R5bGVcIj4nICsgc3R5bGUgKyAnPC9zdHlsZT4nO1xuICAgIHZhciBiYXNlU3R5bGUgPSAkKCcjY2QtYmFzZS1wYXJ0LTEnKTtcbiAgICAkKHN0eWxlRWwpLmluc2VydEFmdGVyKGJhc2VTdHlsZSk7XG4gICAgLy8gJCgnaGVhZCcpLmFwcGVuZChzdHlsZUVsKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRGb3Jtc1N0eWxlKGZvcm1zKSB7XG4gICAgdmFyIGZvcm1zQXJyYXkgPSBnZXRCdXR0b25zQXJyYXlTdHlsZShmb3Jtc1snc3R5bGUnXSk7XG4gICAgdmFyIGZvcm1zTGlzdCA9IFsnZm9ybS1jb250cm9sJywgJ1tkaXNhYmxlZF0nLCAnW2FyaWEtaW52YWxpZF0nLCAnbGVnZW5kJywgJ2Zvcm0tbGFiZWwnXVxuICAgICAgICAsIHN0YXR1c0xpc3QgPSBbJ25vbmUnLCAnOmFjdGl2ZScsICc6aG92ZXInLCAnOmZvY3VzJ11cbiAgICAgICAgLCBzdGF0dXNQcmlvcml0eUxpc3QgPSBbJ25vbmUnLCAnOmhvdmVyJywgJzpmb2N1cycsICc6YWN0aXZlJ11cbiAgICAgICAgLCBjb2RlID0gJyc7XG4gICAgY29kZSA9IHJlc2V0Rm9ybXNTdHlsZUNvbXBvbmVudHMoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybXNMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBjb2RlICsgYnV0dG9uc0NvZGVTdHlsZShmb3Jtc0FycmF5W2Zvcm1zTGlzdFtpXV0sIGZvcm1zTGlzdFtpXSwgc3RhdHVzTGlzdCwgc3RhdHVzUHJpb3JpdHlMaXN0LCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZ2V0IGNvZGUgZm9yIGZvcm0gdmFyaWFibGVzXG4gICAgdmFyIGJ0blZhcmlhYmxlcyA9IGZvcm1WYXJpYWJsZXMoZm9ybXNBcnJheVsnZm9ybS1jb250cm9sJ10pO1xuICAgIGxvYWRGb3Jtc1N0eWxlVGFnKGJ0blZhcmlhYmxlcyArIGNvZGUpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEZvcm1zU3R5bGVTdHlsZUd1aWRlKGZvcm0pIHtcbiAgICAvLyBmb3JtIGVsZW1lbnRzIHN0eWxlXG4gICAgaWYgKCFmb3JtWydidG5TdHlsZSddKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgdmFyIGZvcm1zQXJyYXkgPSBmb3JtWydidG5TdHlsZSddO1xuICAgIHZhciBmb3Jtc0xpc3QgPSBbJ2Zvcm0tY29udHJvbCcsICdbZGlzYWJsZWRdJywgJ1thcmlhLWludmFsaWRdJywgJ2xlZ2VuZCcsICdmb3JtLWxhYmVsJ11cbiAgICAgICAgLCBzdGF0dXNMaXN0ID0gWydub25lJywgJzphY3RpdmUnLCAnOmhvdmVyJywgJzpmb2N1cyddXG4gICAgICAgICwgc3RhdHVzUHJpb3JpdHlMaXN0ID0gWydub25lJywgJzpob3ZlcicsICc6Zm9jdXMnLCAnOmFjdGl2ZSddXG4gICAgICAgICwgZm9ybVN0eWxlID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3Jtc0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9ybVN0eWxlID0gZm9ybVN0eWxlICsgYnV0dG9uc0NvZGVTdHlsZShmb3Jtc0FycmF5W2Zvcm1zTGlzdFtpXV0sIGZvcm1zTGlzdFtpXSwgc3RhdHVzTGlzdCwgc3RhdHVzUHJpb3JpdHlMaXN0LCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZ2V0IGNvZGUgZm9yIGZvcm0gdmFyaWFibGVzXG4gICAgdmFyIGZvcm1DU1NWYXJpYWJsZXMgPSBmb3JtVmFyaWFibGVzKGZvcm1zQXJyYXlbJ2Zvcm0tY29udHJvbCddKTtcbiAgICByZXR1cm4gZm9ybVN0eWxlICsgZm9ybUNTU1ZhcmlhYmxlcztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1WYXJpYWJsZXMoZm9ybVN0eWxlKSB7XG4gICAgdmFyIHN0cmluZyA9ICcnO1xuICAgIGlmIChmb3JtU3R5bGUgJiYgZm9ybVN0eWxlWydub25lJ10gJiYgZm9ybVN0eWxlWydub25lJ11bJ3BhZGRpbmcnXSAmJiBmb3JtU3R5bGVbJ25vbmUnXVsncGFkZGluZyddWzFdKSB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWZvcm0tY29udHJvbC1wYWRkaW5nLXg6JyArIGdldEJ1dHRvbnNQYWRkaW5nVmFsdWUoZm9ybVN0eWxlWydub25lJ11bJ3BhZGRpbmcnXVsxXSkgKyAnOyc7XG4gICAgfVxuICAgIGlmIChmb3JtU3R5bGUgJiYgZm9ybVN0eWxlWydub25lJ10gJiYgZm9ybVN0eWxlWydub25lJ11bJ3BhZGRpbmcnXSAmJiBmb3JtU3R5bGVbJ25vbmUnXVsncGFkZGluZyddWzBdKSB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWZvcm0tY29udHJvbC1wYWRkaW5nLXk6JyArIGdldEJ1dHRvbnNQYWRkaW5nVmFsdWUoZm9ybVN0eWxlWydub25lJ11bJ3BhZGRpbmcnXVswXSkgKyAnOyc7XG4gICAgfVxuICAgIGlmIChmb3JtU3R5bGUgJiYgZm9ybVN0eWxlWydub25lJ10gJiYgZm9ybVN0eWxlWydub25lJ11bJ2FwcGVhcmFuY2UnXSkge1xuICAgICAgICBpZiAoZm9ybVN0eWxlWydub25lJ11bJ2FwcGVhcmFuY2UnXVsyXSkge1xuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJy0tZm9ybS1jb250cm9sLXJhZGl1czonICsgZm9ybVN0eWxlWydub25lJ11bJ2FwcGVhcmFuY2UnXVsyXSArICc7JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICctLWZvcm0tY29udHJvbC1yYWRpdXM6IDBlbTsnO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgcmV0dXJuICc6cm9vdHsnICsgc3RyaW5nICsgJ30nO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEZvcm1zRGVmYXVsdFN0eWxlKG1xKSB7XG4gICAgdmFyIGZvcm1TdHlsZSA9ICc6cm9vdCB7LS1mb3JtLWNvbnRyb2wtcGFkZGluZy14OiB2YXIoLS1zcGFjZS14cyk7LS1mb3JtLWNvbnRyb2wtcGFkZGluZy15OiB2YXIoLS1zcGFjZS14eHMpOy0tZm9ybS1jb250cm9sLXJhZGl1czogMC4yNWVtO30uZm9ybS1jb250cm9sIHtsaW5lLWhlaWdodDogMS4yO2JhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLWJnKTtib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1jb2xvci1jb250cmFzdC1sb3cpO3RyYW5zaXRpb246IDAuMnM7fS5mb3JtLWNvbnRyb2w6Zm9jdXMge2JvcmRlci1jb2xvcjogdmFyKC0tY29sb3ItcHJpbWFyeSk7Ym94LXNoYWRvdzogMHB4IDBweCAwcHggMnB4IGhzbGEodmFyKC0tY29sb3ItcHJpbWFyeS1oKSwgdmFyKC0tY29sb3ItcHJpbWFyeS1zKSx2YXIoLS1jb2xvci1wcmltYXJ5LWwpLCAwLjIpO291dGxpbmU6IG5vbmU7fS5mb3JtLWNvbnRyb2xbYXJpYS1pbnZhbGlkPVwidHJ1ZVwiXSwgLmZvcm0tY29udHJvbC0tZXJyb3Ige2JvcmRlci1jb2xvcjogdmFyKC0tY29sb3ItZXJyb3IpO30uZm9ybS1jb250cm9sW2FyaWEtaW52YWxpZD1cInRydWVcIl06Zm9jdXMsIC5mb3JtLWNvbnRyb2wtLWVycm9yOmZvY3VzIHtib3JkZXItY29sb3I6IHZhcigtLWNvbG9yLWVycm9yKTtib3gtc2hhZG93OiAwcHggMHB4IDBweCAycHggaHNsYSh2YXIoLS1jb2xvci1lcnJvci1oKSwgdmFyKC0tY29sb3ItZXJyb3ItcyksdmFyKC0tY29sb3ItZXJyb3ItbCksIDAuMik7fS5mb3JtLWNvbnRyb2wtLWRpc2FibGVkLCAuZm9ybS1jb250cm9sW2Rpc2FibGVkXSwgLmZvcm0tY29udHJvbFtyZWFkb25seV0ge2N1cnNvcjogbm90LWFsbG93ZWQ7fS5mb3JtLWxhYmVsIHtmb250LXNpemU6IHZhcigtLXRleHQtc20pO30uZm9ybS1sZWdlbmR7Zm9udC1zaXplOiB2YXIoLS10ZXh0LW1kKTt9JztcbiAgICBmb3JtU3R5bGUgPSBmb3JtU3R5bGUgKyAnLmZvcm0tY29udHJvbDo6cGxhY2Vob2xkZXJ7b3BhY2l0eTogMTtjb2xvcjogdmFyKC0tY29sb3ItY29udHJhc3QtbWVkaXVtKTt9JztcbiAgICBsb2FkRm9ybXNTdHlsZVRhZyhmb3JtU3R5bGUpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEZvcm1zU3R5bGVUYWcoc3R5bGUpIHtcbiAgICB2YXIgZGVmYXVsdFN0eWxlID0gJy5mb3JtLWVycm9yLW1zZyB7YmFja2dyb3VuZC1jb2xvcjogaHNsYSh2YXIoLS1jb2xvci1lcnJvci1oKSx2YXIoLS1jb2xvci1lcnJvci1zKSwgdmFyKC0tY29sb3ItZXJyb3ItbCksIDAuMik7Y29sb3I6IGluaGVyaXQ7Ym9yZGVyLXJhZGl1czogdmFyKC0tcmFkaXVzLW1kKTtwYWRkaW5nOiB2YXIoLS1zcGFjZS14cyk7fSc7XG4gICAgdmFyIHN0eWxlRWwgPSAnPHN0eWxlIGlkPVwiZm9ybXMtc3R5bGVcIj4nICsgc3R5bGUgKyBkZWZhdWx0U3R5bGUgKyAnPC9zdHlsZT4nO1xuICAgIHZhciBiYXNlU3R5bGUgPSAkKCcjY2QtYmFzZS1wYXJ0LTEnKTtcbiAgICAkKHN0eWxlRWwpLmluc2VydEFmdGVyKGJhc2VTdHlsZSk7XG4gICAgLy8gJCgnaGVhZCcpLmFwcGVuZChzdHlsZUVsKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGJveFNoYWRvd0lzRGVmaW5lZChhcnJheSkge1xuICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXlbMF0gJiYgYXJyYXlbMF1bMV0gJiYgYXJyYXlbMF1bMV0gIT0gJycpO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uc0FycmF5U3R5bGUob2JqKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICBhcnJheVtwcm9wZXJ0eV0gPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIHN1YnByb3BlcnR5IGluIG9ialtwcm9wZXJ0eV0pIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqW3Byb3BlcnR5XS5oYXNPd25Qcm9wZXJ0eShzdWJwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbcHJvcGVydHldW3N1YnByb3BlcnR5XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB2YWwgaW4gb2JqW3Byb3BlcnR5XVtzdWJwcm9wZXJ0eV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmpbcHJvcGVydHldW3N1YnByb3BlcnR5XS5oYXNPd25Qcm9wZXJ0eSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCA9PSAnYm9yZGVyJyB8fCB2YWwgPT0gJ3RleHRTaGFkb3cnIHx8IHZhbCA9PSAnc2hhZG93JyB8fCB2YWwgPT0gJ3RyYW5zZm9ybScgfHwgdmFsID09ICd0cmFuc2l0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtwcm9wZXJ0eV1bc3VicHJvcGVydHldW3ZhbF0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc3ViVmFsIGluIG9ialtwcm9wZXJ0eV1bc3VicHJvcGVydHldW3ZhbF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmpbcHJvcGVydHldW3N1YnByb3BlcnR5XVt2YWxdLmhhc093blByb3BlcnR5KHN1YlZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVtwcm9wZXJ0eV1bc3VicHJvcGVydHldW3ZhbF1bc3ViVmFsXSA9IE9iamVjdC52YWx1ZXMob2JqW3Byb3BlcnR5XVtzdWJwcm9wZXJ0eV1bdmFsXVtzdWJWYWxdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5W3Byb3BlcnR5XVtzdWJwcm9wZXJ0eV1bdmFsXSA9IE9iamVjdC52YWx1ZXMob2JqW3Byb3BlcnR5XVtzdWJwcm9wZXJ0eV1bdmFsXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGJ1dHRvbnNDb2RlU3R5bGUoc3R5bGUsIGJ0bkxhYmVsLCBzdGF0dXNMaXN0LCBzdGF0dXNQcmlvcml0eUxpc3QsIGlzRGVtb1Jlc2V0LCBpc0J1dHRvbikge1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICBpZiAoIXN0eWxlKVxuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgIHZhciBidG5MYWJlbG1vZGlmaWVkID0gYnRuTGFiZWw7XG4gICAgaWYgKGJ0bkxhYmVsID09ICdbZGlzYWJsZWRdJykge1xuICAgICAgICBidG5MYWJlbG1vZGlmaWVkID0gJ2Zvcm0tY29udHJvbC0tZGlzYWJsZWQsIC5mb3JtLWNvbnRyb2xbZGlzYWJsZWRdLCAuZm9ybS1jb250cm9sW3JlYWRvbmx5XSc7XG4gICAgfSBlbHNlIGlmIChidG5MYWJlbCA9PSAnW2FyaWEtaW52YWxpZF0nKSB7XG4gICAgICAgIGJ0bkxhYmVsbW9kaWZpZWQgPSAnZm9ybS1jb250cm9sW2FyaWEtaW52YWxpZD1cInRydWVcIl0sIC5mb3JtLWNvbnRyb2wtLWVycm9yJztcbiAgICB9IGVsc2UgaWYgKGJ0bkxhYmVsID09ICdsZWdlbmQnKSB7XG4gICAgICAgIGJ0bkxhYmVsbW9kaWZpZWQgPSAnZm9ybS1sZWdlbmQnO1xuICAgIH0gZWxzZSBpZiAoYnRuTGFiZWwgPT0gJ2J0bi0tZGlzYWJsZWQnKSB7XG4gICAgICAgIGJ0bkxhYmVsbW9kaWZpZWQgPSAnYnRuLS1kaXNhYmxlZCwgLmJ0bltkaXNhYmxlZF0sIC5idG5bcmVhZG9ubHldJztcbiAgICB9XG4gICAgdmFyIGJ0bkhhc1RyYW5zZm9ybSA9IGlzQnV0dG9uICYmIGJ1dHRvbnNIYXNUcmFuc2Zvcm1TdHlsZShzdHlsZSwgc3RhdHVzUHJpb3JpdHlMaXN0KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXR1c1ByaW9yaXR5TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc3R5bGVMYWJlbCA9IChpID09IDApID8gJy4nICsgYnRuTGFiZWxtb2RpZmllZCA6IHNldFN0YXR1c0xpc3QoJy4nICsgYnRuTGFiZWxtb2RpZmllZCwgc3RhdHVzUHJpb3JpdHlMaXN0W2ldKTtcbiAgICAgICAgdmFyIG5ld0NvZGUgPSBnZXRCdXR0b25Db2RlKHN0eWxlW3N0YXR1c1ByaW9yaXR5TGlzdFtpXV0sICcnLCB0cnVlLCBidG5MYWJlbCwgc3RhdHVzUHJpb3JpdHlMaXN0W2ldLCBpc0RlbW9SZXNldCwgKGJ0bkhhc1RyYW5zZm9ybSAmJiBpID09IDApKTtcbiAgICAgICAgbmV3Q29kZSA9IG5ld0NvZGUudHJpbSgpO1xuICAgICAgICBpZiAobmV3Q29kZS5zbGljZSgtMSkgPT0gJ30nKSB7XG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBzdHlsZUxhYmVsICsgJ3snICsgbmV3Q29kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIHN0eWxlTGFiZWwgKyAneycgKyBuZXdDb2RlICsgJ30nO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9cXG4vZywgJycpO1xuICAgIHJldHVybiBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRTdGF0dXNMaXN0KGxhYmVsLCBzdGF0dXMpIHtcbiAgICAvLyBlLmcuLCBpZiBsYWJlbCA9ICcuZm9ybS1jb250cm9sW2FyaWEtaW52YWxpZD1cInRydWVcIl0sIC5mb3JtLWNvbnRyb2wtLWVycm9yJyBhbmQgc3RhdHVzID0gJzpmb2N1cycsIHJldHVybiAnLmZvcm0tY29udHJvbFthcmlhLWludmFsaWQ9XCJ0cnVlXCJdOmZvY3VzLCAuZm9ybS1jb250cm9sLS1lcnJvcjpmb2N1cydcbiAgICB2YXIgbGFiZWxBcnJheSA9IGxhYmVsLnNwbGl0KCcsJyk7XG4gICAgaWYgKGxhYmVsQXJyYXkubGVuZ3RoID09IDEpIHtcbiAgICAgICAgcmV0dXJuIGxhYmVsICsgc3RhdHVzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBuZXdMYWJlbCA9ICcnXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFiZWxBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPiAwKVxuICAgICAgICAgICAgICAgIG5ld0xhYmVsID0gbmV3TGFiZWwgKyAnLCc7XG4gICAgICAgICAgICBuZXdMYWJlbCA9IG5ld0xhYmVsICsgbGFiZWxBcnJheVtpXSArIHN0YXR1cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3TGFiZWw7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gYnV0dG9uSWNvbkNvZGVTdHlsZShidG5TdHlsZSkge1xuICAgIHZhciBjb2RlID0gJyc7XG4gICAgaWYgKGJ0blN0eWxlICYmIGJ0blN0eWxlWydub25lJ10gJiYgYnRuU3R5bGVbJ25vbmUnXVsncGFkZGluZyddICYmIGJ0blN0eWxlWydub25lJ11bJ3BhZGRpbmcnXVswXSAmJiBidG5TdHlsZVsnbm9uZSddWydwYWRkaW5nJ11bMF0gIT0gMCkge1xuICAgICAgICBjb2RlID0gJy5idG4tLWljb24ge3BhZGRpbmc6ICcgKyBzcGFjaW5nQXJyYXlbYnRuU3R5bGVbJ25vbmUnXVsncGFkZGluZyddWzBdXSArICc7fSc7XG4gICAgfVxuICAgIHJldHVybiBjb2RlO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gYnV0dG9uc0hhc1RyYW5zZm9ybVN0eWxlKHN0eWxlLCBwcmlvcml0eUxpc3QpIHtcbiAgICB2YXIgaGFzVHJhbnNmb3JtID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBwcmlvcml0eUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFzdHlsZVtwcmlvcml0eUxpc3RbaV1dKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgdHJhbnNmb3JtID0gc3R5bGVbcHJpb3JpdHlMaXN0W2ldXVsndHJhbnNmb3JtJ107XG4gICAgICAgIGlmICh0cmFuc2Zvcm0ubGVuZ3RoID4gMSB8fCAodHJhbnNmb3JtLmxlbmd0aCA+IDAgJiYgdHJhbnNmb3JtWzBdWzBdICE9IDApKSB7XG4gICAgICAgICAgICBoYXNUcmFuc2Zvcm0gPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhc1RyYW5zZm9ybTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1dHRvbkNvZGUoYXJyYXksIHNwYWNpbmcsIHJlc2V0LCBidG5MYWJlbCwgYnRuU3RhdHVzLCBpc0RlbW9SZXNldCwgYnRuSGFzVHJhbnNmb3JtKSB7XG4gICAgdmFyIHN0cmluZyA9ICcnO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGFycmF5KSB7XG4gICAgICAgIHN3aXRjaCAocHJvcGVydHkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FwcGVhcmFuY2UnOlxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIGdldEJ1dHRvbnNBcHBlYXJhbmNlU3R5bGUoYXJyYXlbcHJvcGVydHldLCBzcGFjaW5nLCByZXNldCwgYnRuTGFiZWwsIGJ0blN0YXR1cyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwYWRkaW5nJzpcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBnZXRCdXR0b25zUGFkZGluZ1N0eWxlKGFycmF5W3Byb3BlcnR5XSwgc3BhY2luZywgcmVzZXQsIGJ0bkxhYmVsLCBidG5TdGF0dXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWFyZ2luJzpcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBnZXRCdXR0b25zTWFyZ2luU3R5bGUoYXJyYXlbcHJvcGVydHldLCBzcGFjaW5nLCByZXNldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdib3JkZXInOlxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIGdldEJ1dHRvbnNCb3JkZXJTdHlsZShhcnJheVtwcm9wZXJ0eV0sIHNwYWNpbmcsIHJlc2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3R5cG9ncmFwaHknOlxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIGdldEJ1dHRvbnNUeXBvZ3JhcGh5U3R5bGUoYXJyYXlbcHJvcGVydHldLCBzcGFjaW5nLCByZXNldCwgYnRuTGFiZWwsIGJ0blN0YXR1cyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0ZXh0U2hhZG93JzpcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBnZXRCdXR0b25zVGV4dFNoYWRvd1N0eWxlKGFycmF5W3Byb3BlcnR5XSwgc3BhY2luZywgcmVzZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2hhZG93JzpcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBnZXRCdXR0b25zU2hhZG93U3R5bGUoYXJyYXlbcHJvcGVydHldLCBzcGFjaW5nLCByZXNldCwgaXNEZW1vUmVzZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnb3V0bGluZSc6XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgZ2V0QnV0dG9uc091dGxpbmVTdHlsZShhcnJheVtwcm9wZXJ0eV0sIHNwYWNpbmcsIHJlc2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RyYW5zZm9ybSc6XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgZ2V0QnV0dG9uc1RyYW5zZm9ybVN0eWxlKGFycmF5W3Byb3BlcnR5XSwgc3BhY2luZywgcmVzZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndHJhbnNpdGlvbic6XG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgZ2V0QnV0dG9uc1RyYW5zaXRpb25TdHlsZShhcnJheVtwcm9wZXJ0eV0sIHNwYWNpbmcsIHJlc2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3BsYWNlaG9sZGVyJzpcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBnZXRCdXR0b25zUGxhY2Vob2xkZXJTdHlsZShhcnJheVtwcm9wZXJ0eV0sIHNwYWNpbmcsIHJlc2V0LCBidG5MYWJlbCwgYnRuU3RhdHVzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYnRuSGFzVHJhbnNmb3JtKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTsnO1xuICAgIHJldHVybiBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25zQXBwZWFyYW5jZVN0eWxlKGFycmF5LCBzcGFjaW5nLCByZXNldCwgYnRuTGFiZWwsIGJ0blN0YXR1cykge1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICBpZiAoYXJyYXlbMF0pIHtcbiAgICAgICAgaWYgKGFycmF5WzBdLmluZGV4T2YoJy0tZ3JhZGllbnQtJykgPiAtMSkge1xuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJ1xcbicgKyBzcGFjaW5nICsgZ2V0R3JhZGllbnRCZ1N0eWxlKGFycmF5WzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdiYWNrZ3JvdW5kOiAnICsgZ2V0Q29sb3JWYWx1ZShhcnJheVswXSwgcmVzZXQpICsgJzsnO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChhcnJheVsxXSlcbiAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJ1xcbicgKyBzcGFjaW5nICsgJ2NvbG9yOiAnICsgZ2V0Q29sb3JWYWx1ZShhcnJheVsxXSwgcmVzZXQpICsgJzsnO1xuICAgIGlmIChyZXNldCAmJiByZXNldCAhPSB0cnVlICYmIGJ0blN0YXR1cyA9PSAnbm9uZScgJiYgKGJ0bkxhYmVsID09ICdidG4nIHx8IGJ0bkxhYmVsID09ICdmb3JtLWNvbnRyb2wnKSkgey8vIGZvciBjb3B5IGNvZGUgLT4gbm8gbmVlZCB0byBhZGQgYm9yZGVyLXJhZGl1cyBpbiBjb2RlIC0+IGNzcyB2YXJpYWJsZXMgYWxyZWFkeSBzZXRcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYXJyYXlbN10gJiYgYXJyYXlbN10gPiAwKSB7XG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnYm9yZGVyLXJhZGl1czogJyArIGJvcmRlclJhZGl1c1ZhbHVlc1thcnJheVs3XV0gKyAnOyc7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJyYXlbMl0gJiYgYXJyYXlbMl0gIT0gJycpIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdib3JkZXItcmFkaXVzOiAnICsgYXJyYXlbMl0gKyAnOyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFycmF5WzNdICYmIGFycmF5WzNdICE9ICcnKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnb3BhY2l0eTogJyArIGFycmF5WzNdICsgJzsnO1xuICAgIGlmIChhcnJheVs0XSAmJiBhcnJheVs0XSAhPSAwKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnY3Vyc29yOiAnICsgZ2V0Q3Vyc29yVmFsdWUoYXJyYXlbNF0pICsgJzsnO1xuICAgIHJldHVybiBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmFkaWVudEJnU3R5bGUobGFiZWwpIHtcbiAgICB2YXIgYW5nbGUgPSBsYWJlbC5pbmRleE9mKCctcmlnaHQnKSA+IC0xID8gJzkwZGVnJyA6ICcxODBkZWcnXG4gICAgICAgICwgbmljZUxhYmVsID0gbGFiZWwucmVwbGFjZSgnLXJpZ2h0JywgJycpLnJlcGxhY2UoJy1ib3R0b20nLCAnJyk7XG4gICAgcmV0dXJuICdiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoJyArIGFuZ2xlICsgJywgdmFyKCcgKyBuaWNlTGFiZWwgKyAnLXN0b3AtMSksIHZhcignICsgbmljZUxhYmVsICsgJy1zdG9wLTIpKTsnO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uc1BhZGRpbmdTdHlsZShhcnJheSwgc3BhY2luZywgcmVzZXQsIGJ0bkxhYmVsLCBidG5TdGF0dXMpIHtcbiAgICAvL1kgLSBYXG4gICAgLy8gZm9yIGNvcHkgY29kZSAtPiBubyBuZWVkIHRvIGFkZCBwYWRkaW5nIGluIGNvZGUgLT4gY3NzIHZhcmlhYmxlcyBhbHJlYWR5IHNldFxuICAgIGlmIChyZXNldCAmJiByZXNldCAhPSB0cnVlICYmIGJ0blN0YXR1cyA9PSAnbm9uZScgJiYgKGJ0bkxhYmVsID09ICdidG4nIHx8IGJ0bkxhYmVsID09ICdmb3JtLWNvbnRyb2wnKSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICBpZiAoYXJyYXkubGVuZ3RoIDwgMSlcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICBpZiAoYXJyYXlbMF0gIT0gMCAmJiBhcnJheVsxXSAhPSAwKSB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdwYWRkaW5nOiAnICsgc3BhY2luZ0FycmF5W2FycmF5WzBdXSArICcgJyArIHNwYWNpbmdBcnJheVthcnJheVsxXV0gKyAnOyc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFycmF5WzBdICE9IDApXG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAncGFkZGluZy10b3A6ICcgKyBzcGFjaW5nQXJyYXlbYXJyYXlbMF1dICsgJztcXG4nICsgc3BhY2luZyArICdwYWRkaW5nLWJvdHRvbTogJyArIHNwYWNpbmdBcnJheVthcnJheVswXV0gKyAnOyc7XG4gICAgICAgIGlmIChhcnJheVsxXSAhPSAwKVxuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJ1xcbicgKyBzcGFjaW5nICsgJ3BhZGRpbmctbGVmdDogJyArIHNwYWNpbmdBcnJheVthcnJheVsxXV0gKyAnO1xcbicgKyBzcGFjaW5nICsgJ3BhZGRpbmctcmlnaHQ6ICcgKyBzcGFjaW5nQXJyYXlbYXJyYXlbMV1dICsgJzsnO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uc1BhZGRpbmdWYWx1ZSh2YWx1ZSkge1xuICAgIC8vIHNldHRpbmcgY3NzIHZhcmlhYmxlcyBmb3IgY29weSBjb2RlIG9ubHlcbiAgICB2YXIgcGFkZGluZyA9ICcnO1xuICAgIGlmICh2YWx1ZSAhPSAwKVxuICAgICAgICBwYWRkaW5nID0gc3BhY2luZ0FycmF5W3ZhbHVlXTtcbiAgICByZXR1cm4gcGFkZGluZztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1dHRvbnNNYXJnaW5TdHlsZShhcnJheSwgc3BhY2luZywgcmVzZXQpIHtcbiAgICAvL3RvcCBsZWZ0IHJpZ2h0IGJvdHRvbVxuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICBpZiAoYXJyYXkubGVuZ3RoIDwgMSlcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICBpZiAoYXJyYXlbMF0gIT0gMCAmJiBhcnJheVsxXSAhPSAwICYmIGFycmF5WzJdICE9IDAgJiYgYXJyYXlbM10gIT0gMCkge1xuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnbWFyZ2luOiAnICsgc3BhY2luZ0FycmF5W2FycmF5WzBdXSArICcgJyArIHNwYWNpbmdBcnJheVthcnJheVsyXV0gKyAnICcgKyBzcGFjaW5nQXJyYXlbYXJyYXlbM11dICsgJyAnICsgc3BhY2luZ0FycmF5W2FycmF5WzFdXSArICc7JztcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYXJyYXlbMF0gIT0gMClcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdtYXJnaW4tdG9wOiAnICsgc3BhY2luZ0FycmF5W2FycmF5WzBdXSArICc7JztcbiAgICAgICAgaWYgKGFycmF5WzFdICE9IDApXG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnbWFyZ2luLWxlZnQ6ICcgKyBzcGFjaW5nQXJyYXlbYXJyYXlbMV1dICsgJzsnO1xuICAgICAgICBpZiAoYXJyYXlbMl0gIT0gMClcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdtYXJnaW4tcmlnaHQ6ICcgKyBzcGFjaW5nQXJyYXlbYXJyYXlbMl1dICsgJzsnO1xuICAgICAgICBpZiAoYXJyYXlbM10gIT0gMClcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdtYXJnaW4tYm90dG9tOiAnICsgc3BhY2luZ0FycmF5W2FycmF5WzNdXSArICc7JztcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1dHRvbnNCb3JkZXJTdHlsZShhcnJheSwgc3BhY2luZywgcmVzZXQpIHtcbiAgICB2YXIgc3RyaW5nID0gJydcbiAgICAgICAgLCBjb2xvclZhcmlhYmxlcyA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycmF5W2ldWzNdID09IDApXG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyBnZXRCb3JkZXJUeXBlKGFycmF5W2ldWzFdKSArICc6IG5vbmU7JztcbiAgICAgICAgZWxzZSBpZiAoYXJyYXlbaV1bMl0gPT0gJycpIHtcbiAgICAgICAgICAgIHZhciBhcHAgPSBhcnJheS5sZW5ndGggPiAxID8gJy0nICsgKGkgKyAxKSA6ICcnO1xuICAgICAgICAgICAgdmFyIHZhcmlhYmxlID0gZ2V0Q29sb3JGYklvcyhhcnJheVtpXVswXSwgJy0tY29sb3ItYm9yZGVyJyArIGFwcCwgc3BhY2luZywgcmVzZXQpO1xuICAgICAgICAgICAgY29sb3JWYXJpYWJsZXMgPSBjb2xvclZhcmlhYmxlcyArIHZhcmlhYmxlWzBdO1xuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJ1xcbicgKyBzcGFjaW5nICsgZ2V0Qm9yZGVyVHlwZShhcnJheVtpXVsxXSkgKyAnLWNvbG9yOiAnICsgdmFyaWFibGVbMV0gKyAnOyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYXBwID0gYXJyYXkubGVuZ3RoID4gMSA/ICctJyArIChpICsgMSkgOiAnJztcbiAgICAgICAgICAgIHZhciB2YXJpYWJsZSA9IGdldENvbG9yRmJJb3MoYXJyYXlbaV1bMF0sICctLWNvbG9yLWJvcmRlcicgKyBhcHAsIHNwYWNpbmcsIHJlc2V0KTtcbiAgICAgICAgICAgIGNvbG9yVmFyaWFibGVzID0gY29sb3JWYXJpYWJsZXMgKyB2YXJpYWJsZVswXTtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArIGdldEJvcmRlclR5cGUoYXJyYXlbaV1bMV0pICsgJzogJyArIGFycmF5W2ldWzJdICsgJyAnICsgZ2V0Qm9yZGVyU3R5bGUoYXJyYXlbaV1bM10pICsgJyAnICsgdmFyaWFibGVbMV0gKyAnOyc7XG4gICAgICAgICAgICAvLyBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJytzcGFjaW5nK2dldEJvcmRlclR5cGUoYXJyYXlbaV1bMV0pKyc6ICcrYXJyYXlbaV1bMl0rJyAnK2dldEJvcmRlclN0eWxlKGFycmF5W2ldWzNdKSsnICcrZ2V0Q29sb3JWYWx1ZShhcnJheVtpXVswXSwgcmVzZXQpKyc7JztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29sb3JWYXJpYWJsZXMgKyBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25zVHlwb2dyYXBoeVN0eWxlKGFycmF5LCBzcGFjaW5nLCByZXNldCwgYnRuTGFiZWwsIGJ0blN0YXR1cykge1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICBpZiAoYXJyYXlbMF0pXG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdmb250LWZhbWlseTogdmFyKCcgKyBmb250QXJyYXlbYnRuRm9udElkcy5pbmRleE9mKGFycmF5WzBdKV0gKyAnKTsnO1xuICAgIGlmIChyZXNldCAmJiByZXNldCAhPSB0cnVlICYmIGJ0blN0YXR1cyA9PSAnbm9uZScgJiYgKGJ0bkxhYmVsID09ICdidG4nIHx8IGJ0bkxhYmVsID09ICdmb3JtLWNvbnRyb2wnKSkgey8vIGZvciBjb3B5IGNvZGUgLT4gbm8gbmVlZCB0byBhZGQgZm9udC1zaXplIGluIGNvZGUgLT4gY3NzIHZhcmlhYmxlcyBhbHJlYWR5IHNldFxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChhcnJheVsxXSAmJiBhcnJheVsxXSAhPSAwKSB7XG4gICAgICAgICAgICB2YXIgZm9udFNpemUgPSAoYXJyYXlbMV0gPT0gOSkgPyBhcnJheVsyXSA6IHRleHRBcnJheVZhbHVlc1thcnJheVsxXV07XG4gICAgICAgICAgICBpZiAoYnRuU3RhdHVzID09ICdub25lJyAmJiAoYnRuTGFiZWwgPT0gJ2J0bicgfHwgYnRuTGFiZWwgPT0gJ2Zvcm0tY29udHJvbCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJ0bkxhYmVsID09ICdidG4nKVxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnLS1idG4tZm9udC1zaXplOiAnICsgZm9udFNpemUgKyAnOyc7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnLS1mb3JtLWNvbnRyb2wtZm9udC1zaXplOiAnICsgZm9udFNpemUgKyAnOyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdmb250LXNpemU6ICcgKyBmb250U2l6ZSArICc7JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXJyYXlbM10gJiYgYXJyYXlbM10gIT0gJycpXG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdmb250LXdlaWdodDogJyArIGFycmF5WzNdICsgJzsnO1xuICAgIGlmIChhcnJheVs0XSAmJiBhcnJheVs0XSAhPSAwKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAndGV4dC10cmFuc2Zvcm06ICcgKyBnZXRUZXh0VHJhbnNmb3JtKGFycmF5WzRdKSArICc7JztcbiAgICBpZiAoYXJyYXlbNV0gJiYgYXJyYXlbNV0gIT0gMClcbiAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJ1xcbicgKyBzcGFjaW5nICsgJ3RleHQtZGVjb3JhdGlvbjogJyArIGdldFRleHREZWNvcmF0aW9uKGFycmF5WzVdKSArICc7JztcbiAgICBpZiAoYnRuTGFiZWwgPT0gJ2J0bicgJiYgYnRuU3RhdHVzID09ICdub25lJyAmJiAoIWFycmF5WzVdIHx8IGFycmF5WzVdID09IDApKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAndGV4dC1kZWNvcmF0aW9uOiBub25lOyc7XG4gICAgaWYgKGFycmF5WzZdICYmIGFycmF5WzZdICE9ICcnKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnbGluZS1oZWlnaHQ6ICcgKyBhcnJheVs2XSArICc7J1xuICAgIGlmIChhcnJheVs3XSAmJiBhcnJheVs3XSAhPSAnJylcbiAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJ1xcbicgKyBzcGFjaW5nICsgJ2xldHRlci1zcGFjaW5nOiAnICsgYXJyYXlbN10gKyAnOydcbiAgICBpZiAoYXJyYXlbOF0gJiYgYXJyYXlbOF0gIT0gMCkge1xuICAgICAgICBpZiAocmVzZXQgJiYgcmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArIGdldEZvbnRTbW9vdGhpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG4nICsgc3BhY2luZyArICdAaW5jbHVkZSBmb250U21vb3RoOyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1dHRvbnNUZXh0U2hhZG93U3R5bGUoYXJyYXksIHNwYWNpbmcsIHJlc2V0KSB7XG4gICAgdmFyIHN0cmluZyA9ICcnXG4gICAgICAgICwgY29sb3JWYXJpYWJsZXMgPSAnJ1xuICAgICAgICAsIHNldCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycmF5W2ldWzBdID09IDEpIHtcbiAgICAgICAgICAgIHN0cmluZyA9ICdcXG4nICsgc3BhY2luZyArICd0ZXh0LXNoYWRvdzogbm9uZTsnO1xuICAgICAgICAgICAgc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhcHAgPSBhcnJheS5sZW5ndGggPiAxID8gJy0nICsgKGkgKyAxKSA6ICcnO1xuICAgICAgICAgICAgdmFyIHZhcmlhYmxlID0gZ2V0Q29sb3JGYklvcyhhcnJheVtpXVsxXSwgJy0tY29sb3ItdGV4dC1zaGFkb3cnICsgYXBwLCBzcGFjaW5nLCByZXNldCk7XG4gICAgICAgICAgICBjb2xvclZhcmlhYmxlcyA9IGNvbG9yVmFyaWFibGVzICsgdmFyaWFibGVbMF07XG4gICAgICAgICAgICBpZiAoaSA+IDApXG4gICAgICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJywgJztcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIGFycmF5W2ldWzJdICsgJyAnICsgdmFyaWFibGVbMV07XG4gICAgICAgICAgICBzZXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzZXQpXG4gICAgICAgIHN0cmluZyA9IGNvbG9yVmFyaWFibGVzICsgJ1xcbicgKyBzcGFjaW5nICsgJ3RleHQtc2hhZG93OiAnICsgc3RyaW5nICsgJzsnO1xuICAgIHJldHVybiBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25zU2hhZG93U3R5bGUoYXJyYXksIHNwYWNpbmcsIHJlc2V0LCBpc0RlbW9SZXNldCkge1xuICAgIHZhciBzdHJpbmcgPSAnJ1xuICAgICAgICAsIGNvbG9yVmFyaWFibGVzID0gJydcbiAgICAgICAgLCBzZXQgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhcnJheVtpXVswXSA9PSAxKSB7XG4gICAgICAgICAgICBzdHJpbmcgPSAnXFxuJyArIHNwYWNpbmcgKyAnYm94LXNoYWRvdzogbm9uZTsnO1xuICAgICAgICAgICAgaWYgKGlzRGVtb1Jlc2V0KVxuICAgICAgICAgICAgICAgIHN0cmluZyA9ICdcXG4nICsgc3BhY2luZyArICdib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7JztcbiAgICAgICAgICAgIHNldCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJyYXlbaV1bM10gPiAxKSB7XG4gICAgICAgICAgICAvLyBjdXN0b20gc2hhZG93IHdpdGggZnJhbWV3b3JrIHZhcmlhYmxlc1xuICAgICAgICAgICAgaWYgKGkgPiAwKVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICcsICc7XG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBzaGFkb3dWYXJpYWJsZXNbYXJyYXlbaV1bM11dO1xuICAgICAgICAgICAgc2V0ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhcHAgPSBhcnJheS5sZW5ndGggPiAxID8gJy0nICsgKGkgKyAxKSA6ICcnO1xuICAgICAgICAgICAgdmFyIHZhcmlhYmxlID0gZ2V0Q29sb3JGYklvcyhhcnJheVtpXVsxXSwgJy0tY29sb3Itc2hhZG93JyArIGFwcCwgc3BhY2luZywgcmVzZXQpO1xuICAgICAgICAgICAgY29sb3JWYXJpYWJsZXMgPSBjb2xvclZhcmlhYmxlcyArIHZhcmlhYmxlWzBdO1xuICAgICAgICAgICAgaWYgKGkgPiAwKVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICcsICc7XG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyBnZXRCb3hTaGFkb3dUeXBlKGFycmF5W2ldWzNdKSArIGFycmF5W2ldWzJdICsgJyAnICsgdmFyaWFibGVbMV07XG4gICAgICAgICAgICBzZXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzZXQpIHtcbiAgICAgICAgLy8gaXNEZW1vUmVzZXQgLT4gd2hlbiBsb2FkaW5nIGZvcm1zIGZvciBjb21wb25lbnRzLCBtYWtlIHN1cmUgdG8gYWRkIGltcG9ydGFudCB0byBib3ggc2hhZG93IHRvIG1ha2Ugc3VyZSB0aGUgY3VzdG9tIHNoYWRvdyBpcyBzaG93ZWRcbiAgICAgICAgaWYgKGlzRGVtb1Jlc2V0KVxuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgJyAhaW1wb3J0YW50JztcbiAgICAgICAgc3RyaW5nID0gY29sb3JWYXJpYWJsZXMgKyAnXFxuJyArIHNwYWNpbmcgKyAnYm94LXNoYWRvdzogJyArIHN0cmluZyArICc7JztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5nO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uc091dGxpbmVTdHlsZShhcnJheSwgc3BhY2luZywgcmVzZXQpIHtcbiAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgaWYgKGFycmF5WzFdICYmIGFycmF5WzFdICE9IDApIHtcbiAgICAgICAgaWYgKGFycmF5WzFdID09IDgpXG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnb3V0bGluZTogbm9uZTsnO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnb3V0bGluZTogJyArIGFycmF5WzJdICsgJyAnICsgZ2V0T3V0bGluZVN0eWxlKGFycmF5WzFdKSArICcgJyArIGdldENvbG9yVmFsdWUoYXJyYXlbMF0sIHJlc2V0KSArICc7JztcbiAgICB9XG4gICAgaWYgKGFycmF5WzNdICYmIGFycmF5WzNdICE9ICcnKVxuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnXFxuJyArIHNwYWNpbmcgKyAnb3V0bGluZS1vZmZzZXQ6ICcgKyBhcnJheVszXSArICc7JztcbiAgICByZXR1cm4gc3RyaW5nO1xufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uc1RyYW5zZm9ybVN0eWxlKGFycmF5LCBzcGFjaW5nLCByZXNldCkge1xuICAgIHZhciBzdHJpbmcgPSAnJ1xuICAgICAgICAsIHNldCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycmF5W2ldWzBdID09IDApIHtcbiAgICAgICAgICAgIHN0cmluZyA9ICdcXG4nICsgc3BhY2luZyArICd0cmFuc2Zvcm06IG5vbmU7JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGkgPiAwKVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArICcgJztcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIGdldFRyYW5zZm9ybVByb3BlcnR5KGFycmF5W2ldWzBdKSArICcoJyArIGFycmF5W2ldWzFdICsgJyknO1xuICAgICAgICAgICAgc2V0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2V0KVxuICAgICAgICBzdHJpbmcgPSAnXFxuJyArIHNwYWNpbmcgKyAndHJhbnNmb3JtOiAnICsgc3RyaW5nICsgJzsnO1xuICAgIHJldHVybiBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25zVHJhbnNpdGlvblN0eWxlKGFycmF5LCBzcGFjaW5nLCByZXNldCkge1xuICAgIHZhciBzdHJpbmcgPSAnJ1xuICAgICAgICAsIHNldCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFycmF5W2ldWzBdID09IDEpIHtcbiAgICAgICAgICAgIHN0cmluZyA9ICdcXG4nICsgc3BhY2luZyArICd0cmFuc2l0aW9uOiBub25lOyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpID4gMClcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnLCAnO1xuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nICsgZ2V0VHJhbnNpdGlvblByb3BlcnR5KGFycmF5W2ldWzBdKSArICcgJyArIGFycmF5W2ldWzFdICsgJ3MgJyArIGdldFRyYW5zaXRpb25FYXNlKGFycmF5W2ldWzJdKTtcbiAgICAgICAgICAgIGlmIChhcnJheVtpXVszXSAhPSAnJylcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnICcgKyBhcnJheVtpXVszXSArICdzJztcbiAgICAgICAgICAgIHNldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNldClcbiAgICAgICAgc3RyaW5nID0gJ1xcbicgKyBzcGFjaW5nICsgJ3RyYW5zaXRpb246ICcgKyBzdHJpbmcgKyAnOyc7XG4gICAgcmV0dXJuIHN0cmluZztcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1dHRvbnNQbGFjZWhvbGRlclN0eWxlKGFycmF5LCBzcGFjaW5nLCByZXNldCwgYnRuTGFiZWwsIGJ0blN0YXR1cykge1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICBpZiAoYXJyYXkubGVuZ3RoIDwgMSB8fCAhYXJyYXlbMF0gfHwgYXJyYXlbMF0gPT0gJycpXG4gICAgICAgIHJldHVybiAnJztcbiAgICB2YXIgc3R5bGUgPSAnXFxuJyArIHNwYWNpbmcgKyAnICBjb2xvcjogJyArIGdldENvbG9yVmFsdWUoYXJyYXlbMF0sIHJlc2V0KSArICc7JztcblxuICAgIGlmIChyZXNldCAmJiByZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAnfSc7XG4gICAgICAgIHZhciBzZWxlY3RvciA9ICcuJyArIGJ0bkxhYmVsO1xuICAgICAgICBpZiAoYnRuU3RhdHVzICE9ICdub25lJylcbiAgICAgICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgKyBidG5TdGF0dXM7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArIHNlbGVjdG9yICsgJzo6cGxhY2Vob2xkZXIge1xcbicgKyBzcGFjaW5nICsgJyAgb3BhY2l0eTogMTsnICsgc3BhY2luZyArIHN0eWxlICsgJ1xcbicgKyBzcGFjaW5nICsgJ30nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmluZyA9IHN0cmluZyArICdcXG5cXG4nICsgc3BhY2luZyArICcmOjpwbGFjZWhvbGRlciB7XFxuJyArIHNwYWNpbmcgKyAnICBvcGFjaXR5OiAxOycgKyBzcGFjaW5nICsgc3R5bGUgKyAnXFxuJyArIHNwYWNpbmcgKyAnfSc7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmc7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25zRm9udFNpemVWYWx1ZShhcnJheSkge1xuICAgIHZhciBmb250U2l6ZSA9ICcnO1xuICAgIGlmIChhcnJheVsxXSAmJiBhcnJheVsxXSAhPSAwKSB7XG4gICAgICAgIGZvbnRTaXplID0gKGFycmF5WzFdID09IDkpID8gYXJyYXlbMl0gOiB0ZXh0QXJyYXlWYWx1ZXNbYXJyYXlbMV1dO1xuICAgIH1cbiAgICByZXR1cm4gZm9udFNpemU7XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldEZvcm1zU3R5bGVDb21wb25lbnRzKCkge1xuICAgIHZhciBzdHlsZSA9ICcnO1xuICAgIHN0eWxlID0gc3R5bGUgKyAnLmZvcm0tbGVnZW5kIHtjb2xvcjogaW5oZXJpdDtsaW5lLWhlaWdodDogbm9ybWFsO30nO1xuICAgIHJldHVybiBzdHlsZTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN1ZmZpeE9wYWNpdHkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gMClcbiAgICAgICAgcmV0dXJuICctYTAwJztcbiAgICBpZiAodmFsdWUgPCAxMClcbiAgICAgICAgcmV0dXJuICctYTAnICsgdmFsdWU7XG4gICAgcmV0dXJuICctYScgKyB2YWx1ZTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEx1bWluYW5jZShoc2wsIGlmcmFtZSkge1xuICAgIGlmIChoc2xbMF0gPT0gMCAmJiBoc2xbMV0gPT0gMCAmJiBoc2xbMl0gPT0gMSlcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgLy8gd2hpdGVcbiAgICBpZiAoaHNsWzBdID09IDAgJiYgaHNsWzFdID09IDAgJiYgaHNsWzJdID09IDApXG4gICAgICAgIHJldHVybiAwO1xuICAgIC8vIGJsYWNrXG4gICAgdmFyIHJnYlNyID0gZ2V0UkdCc3JWYWx1ZXMoaHNsLCBpZnJhbWUpO1xuICAgIHJldHVybiAoMC4yMTI2ICogcmdiU3JbMF0gKyAwLjcxNTIgKiByZ2JTclsxXSArIDAuMDcyMiAqIHJnYlNyWzJdKTtcbn1cbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJHQnNyVmFsdWVzKHZhbHVlLCBpZnJhbWUpIHtcbiAgICB2YXIgcmdiID0gZ2V0UkdCVmFsdWVzKHZhbHVlLCBpZnJhbWUpO1xuICAgIHZhciByU3IgPSAocmdiWzBdIDw9IDAuMDM5MjgpID8gcmdiWzBdIC8gMTIuOTIgOiBNYXRoLnBvdygoKHJnYlswXSArIDAuMDU1KSAvIDEuMDU1KSwgMi40KTtcbiAgICB2YXIgZ1NyID0gKHJnYlsxXSA8PSAwLjAzOTI4KSA/IHJnYlsxXSAvIDEyLjkyIDogTWF0aC5wb3coKChyZ2JbMV0gKyAwLjA1NSkgLyAxLjA1NSksIDIuNCk7XG4gICAgdmFyIGJTciA9IChyZ2JbMl0gPD0gMC4wMzkyOCkgPyByZ2JbMl0gLyAxMi45MiA6IE1hdGgucG93KCgocmdiWzJdICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpO1xuICAgIHJldHVybiBbclNyLCBnU3IsIGJTcl07XG59XG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSR0JWYWx1ZXMoaHNsLCBpZnJhbWUpIHtcbiAgICB2YXIgcmdiID0gZ2V0UkdCZnJvbUhTTChoc2wpO1xuICAgIHJldHVybiBbcmdiWzBdIC8gMjU1LCByZ2JbMV0gLyAyNTUsIHJnYlsyXSAvIDI1NV07XG59XG47XG5leHBvcnQgZnVuY3Rpb24gZ2V0UkdCZnJvbUhTTChoc2wpIHtcbiAgICByZXR1cm4gY2hyb21hLmhzbChoc2wpLnJnYigpO1xufTtcbmV4cG9ydCBsZXQgbG9hZGVkSWZyYW1lQ2hlY2sgPSBmYWxzZTtcbi8vc2VsZWN0IHRleHQgb2YgYSBjb250ZW50RWRpdGFibGUgZWxlbWVudFxualF1ZXJ5LmZuLnNlbGVjdFRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRvYyA9IGRvY3VtZW50O1xuICAgIHZhciBlbGVtZW50ID0gdGhpc1swXTtcbiAgICBpZiAoZG9jLmJvZHkuY3JlYXRlVGV4dFJhbmdlKSB7XG4gICAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmJvZHkuY3JlYXRlVGV4dFJhbmdlKCk7XG4gICAgICAgIHJhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KGVsZW1lbnQpO1xuICAgICAgICByYW5nZS5zZWxlY3QoKTtcbiAgICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGVsZW1lbnQpO1xuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgfVxufVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEZvbnRMaXN0KHR5cG9ncmFwaHkpIHtcbiAgICBmb250QXJyYXkgPSBbJyddO1xuICAgIGJ0bkZvbnRJZHMgPSBbMF07XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdHlwb2dyYXBoeVsnZm9udEZhbWlseUxhYmVscyddKSB7XG4gICAgICAgIGlmICh0eXBvZ3JhcGh5Wydmb250RmFtaWx5TGFiZWxzJ10uaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICBmb250QXJyYXkucHVzaCh0eXBvZ3JhcGh5Wydmb250RmFtaWx5TGFiZWxzJ11bcHJvcGVydHldKTtcbiAgICAgICAgICAgIGJ0bkZvbnRJZHMucHVzaCh0eXBvZ3JhcGh5Wydmb250RmFtaWx5SWRzJ11bcHJvcGVydHldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGVtb0NvbnRhaW5lciA9ICQoJy5qcy1jZC1kZW1vLWNvbnRhaW5lcicpXG4gICAgICAgICwgZGVtb1ZpZXdwb3J0ID0gJCgnLmpzLWNkLWRlbW8tdmlld3BvcnQtc2l6ZScpO1xuICAgIC8vd2hlbiBkb3VibGUtY2xpY2tpbmcgb24gdmFyaWFibGVzIC0+IHNlbGVjdCBhbGwgdGV4dFxuICAgIGRlbW9Db250YWluZXIub24oJ2RibGNsaWNrJywgJy5qcy1jc3MtdmFyaWFibGUtbGFiZWwnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5zZWxlY3RUZXh0KCk7XG4gICAgfSk7XG5cbiAgICAvL2RldGVjdCBjbGljayBvbiBpZnJhbWUgYW5kIHNlbmQgdG8gbWFpbiB0byBjbG9zZSBwb3B1cHNcbiAgICB2YXIgaWZyYW1lUGFyZW50ID0gd2luZG93LnBhcmVudDtcbiAgICBpZiAoIWlmcmFtZVBhcmVudCkge1xuICAgICAgICBpZnJhbWVQYXJlbnQgPSBwYXJlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGlmcmFtZVBhcmVudCkge1xuICAgICAgICAkKHdpbmRvdykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlmcmFtZVBhcmVudC5jbG9zZUFjdGl2ZVBvcHVwcyAhPSBudWxsKVxuICAgICAgICAgICAgICAgIGlmcmFtZVBhcmVudC5jbG9zZUFjdGl2ZVBvcHVwcygpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gZGV0ZWN0IHNob3J0Y3V0IGZvciBzZWFyY2ggbW9kYWxcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlICYmIGV2ZW50LmtleUNvZGUgPT0gNjkgfHwgZXZlbnQua2V5ICYmIGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpID09ICdlJykge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkpXG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZVBhcmVudC5vcGVuU2l0ZVNlYXJjaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvL2RldGVjdCByZXNpemUgb2YgdGhlIHBhZ2UgYW5kIHJlc2V0IGlmcmFtZSBoZWlnaHRcbiAgICB2YXIgcmVzaXppbmcgPSBmYWxzZVxuICAgICAgICAsIHJlc2l6aW5nSUQgPSBmYWxzZVxuICAgICAgICAsIG1xTGFiZWxzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddO1xuICAgIGlmIChkZW1vVmlld3BvcnQubGVuZ3RoID4gMCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghcmVzaXppbmcpIHtcbiAgICAgICAgICAgICAgICByZXNpemluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGVMYWJlbFNpemVXaW5kb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAkKCcuanMtY2QtZGVtbycpLm9uKCdnbG9iYWxzVXBkYXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB1cGRhdGVDb21wb25lbnRHbG9iYWxzKCk7XG4gICAgfSk7XG5cbiAgICAkKCcuanMtY2QtZGVtbycpLm9uKCdzaG93Q29tcG9uZW50JywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29tcFNjcmlwdCA9ICQoJyNjb21wLXNjcmlwdCcpO1xuICAgICAgICBpZiAoY29tcFNjcmlwdCkge1xuICAgICAgICAgICAgdmFyIG5ld1NjcmlwdCA9IGNvbXBTY3JpcHQuY2xvbmUoKTtcbiAgICAgICAgICAgIG5ld1NjcmlwdCA9IGNvbXBTY3JpcHQuYXR0cignc3JjJywgY29tcFNjcmlwdC5hdHRyKCdkYXRhLXNyYycpKTtcbiAgICAgICAgICAgIG5ld1NjcmlwdC5yZW1vdmVBdHRyKCdkYXRhLXNyYycpO1xuICAgICAgICAgICAgbmV3U2NyaXB0LnJlbW92ZUF0dHIoJ2lkJyk7XG4gICAgICAgICAgICBuZXdTY3JpcHQuaW5zZXJ0QmVmb3JlKGNvbXBTY3JpcHQpO1xuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlmcmFtZVBhcmVudClcbiAgICAgICAgICAgICAgICBpZnJhbWVQYXJlbnQucmV2ZWFsQ29tcG9uZW50KCk7XG4gICAgICAgIH0sIDMwMCk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMYWJlbFNpemVXaW5kb3coKSB7XG4gICAgICAgIHZhciBtcSA9IGdldE1xKClcbiAgICAgICAgICAgICwgc2l6ZXMgPSBnZXRTY3JlZW5TaXplKCk7XG4gICAgICAgIGlmIChyZXNpemluZykge1xuICAgICAgICAgICAgZGVtb0NvbnRhaW5lci50cmlnZ2VyKCd3aW5kb3dSZXNpemluZycpO1xuICAgICAgICAgICAgdmFyIG1xTGFiZWxUZXh0ID0gKG1xID4gMCkgPyAnICgnICsgbXFMYWJlbHNbbXEgLSAxXSArICcpJyA6ICcnO1xuICAgICAgICAgICAgZGVtb1ZpZXdwb3J0LnRleHQoc2l6ZXNbMF0gKyAncHggeCAnICsgc2l6ZXNbMV0gKyAncHgnICsgbXFMYWJlbFRleHQpLnNob3coKTtcbiAgICAgICAgICAgIGlmIChyZXNpemluZ0lEKVxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocmVzaXppbmdJRCk7XG4gICAgICAgICAgICByZXNpemluZ0lEID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZGVtb1ZpZXdwb3J0LmhpZGUoKTtcbiAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9XG4gICAgICAgIHJlc2l6aW5nID0gZmFsc2U7XG4gICAgfVxuICAgIDtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudEdsb2JhbHMoKSB7XG4gICAgICAgIC8vY29tcG9uZW50cyAtPiBpZiB0aGVyZSdzIGEgcHJvamVjdCBzZXQsIHdlIHNob3VsZCBsaXN0ZW4gZm9yIGNoYW5nZXMgaW4gdGhlIHZpZXdwb3J0IHdpZHRoIGFzIHdlbGxcbiAgICAgICAgLy90eXBvZ3JhcGh5IGFuZCBzcGFjaW5nIGFyZSB0aGUgb25seSByZXNwb25zaXZlIGdsb2JhbHNcbiAgICAgICAgaWYgKHByb2plY3RMb2FkZWQgJiYgKHByb2plY3RMb2FkZWQudHlwb2dyYXBoeSB8fCBwcm9qZWN0TG9hZGVkLnNwYWNpbmcpKSB7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc2l6aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGVHbG9iYWxzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICA7XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVHbG9iYWxzKCkge1xuICAgICAgICB2YXIgbXEgPSBnZXRNcSgpO1xuICAgICAgICBpZiAobXEgPT0gTVEpIHtcbiAgICAgICAgICAgIHJlc2l6aW5nID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgTVEgPSBtcTtcblxuICAgICAgICBpZiAocHJvamVjdExvYWRlZC50eXBvZ3JhcGh5ICYmIHByb2plY3RMb2FkZWQudHlwb2dyYXBoeSAhPT0gJycpIHtcbiAgICAgICAgICAgIC8vdHlwb2dyYXBoeSB3YXMgc2F2ZWQgYW5kIG5lZWQgdG8gYmUgbW9kaWZpZWRcbiAgICAgICAgICAgIGxvYWRUeXBvZ3JhcGh5U3R5bGUoSlNPTi5wYXJzZShkZWNvZGVTYWZlVVJJQ29tcG9uZW50KHByb2plY3RMb2FkZWQudHlwb2dyYXBoeSkpLCBmYWxzZSwgbXEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb2plY3RMb2FkZWQuc3BhY2luZyAmJiBwcm9qZWN0TG9hZGVkLnNwYWNpbmcgIT09ICcnKSB7XG4gICAgICAgICAgICAvL3R5cG9ncmFwaHkgd2FzIHNhdmVkIGFuZCBuZWVkIHRvIGJlIG1vZGlmaWVkXG4gICAgICAgICAgICBsb2FkU3BhY2luZ1N0eWxlKEpTT04ucGFyc2UoZGVjb2RlU2FmZVVSSUNvbXBvbmVudChwcm9qZWN0TG9hZGVkLnNwYWNpbmcpKSwgbXEpO1xuICAgICAgICB9XG4gICAgICAgIHJlc2l6aW5nID0gZmFsc2U7XG4gICAgfVxuICAgIDtcblxuICAgIGxvYWRlZElmcmFtZUNoZWNrID0gdHJ1ZTtcbn0oKSk7XG4iXSwibmFtZXMiOlsic3BhY2luZ0FycmF5IiwidGV4dEFycmF5IiwidGV4dEFycmF5VmFsdWVzIiwiZm9udEFycmF5IiwiYnRuRm9udElkcyIsImJ0bkNvbG9yQ3VzdG9tTmljZUxhYmVscyIsImJ0bkdyYWRpZW50c0N1c3RvbU5pY2VMYWJlbHMiLCJidG5Db2xvckxhYmVscyIsInNoYWRvd1ZhcmlhYmxlcyIsImJvcmRlclJhZGl1c1ZhbHVlcyIsInNldEJ0bkNvbG9yQ3VzdG9tTmljZUxhYmVscyIsImNvbG9ycyIsImN1c3RvbU5pY2UiLCJzZXRCdG5HcmFkaWVudE5pY2VMYWJlbHMiLCJncmFkaWVudHMiLCJsZW5ndGgiLCJkZWNvZGVTYWZlVVJJQ29tcG9uZW50Iiwic3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZSIsImdldEN1cnNvclZhbHVlIiwiaW5kZXgiLCJnZXRCb3JkZXJUeXBlIiwiZ2V0Qm9yZGVyU3R5bGUiLCJnZXRUZXh0VHJhbnNmb3JtIiwiZ2V0VGV4dERlY29yYXRpb24iLCJnZXRGb250U21vb3RoaW5nIiwiZ2V0Qm94U2hhZG93VHlwZSIsImdldFRyYW5zaXRpb25Qcm9wZXJ0eSIsImdldFRyYW5zaXRpb25FYXNlIiwiZ2V0VHJhbnNpdGlvbkRlbGF5IiwidmFsIiwiZ2V0VHJhbnNmb3JtUHJvcGVydHkiLCJnZXRPdXRsaW5lU3R5bGUiLCJnZXRPdXRsaW5lT2Zmc2V0IiwiZ2V0Q29sb3JWYWx1ZSIsInJlc2V0IiwiaW5kZXhPZiIsImdldENvbG9yVmFsdWVGcm9tTGlzdCIsImxhYmVsIiwiZmFsbGJhY2siLCJnZXROaWNlTGFiZWxGb3JDdXN0b20iLCJjaGVja0NvbG9ySXNPcGFjaXR5IiwiYmFzaWNMYWJlbCIsInJlbW92ZU9wYWNpdHlGcm9tTGFiZWwiLCJnZXRPcGFjaXR5RGVjRnJvbUxhYmVsIiwicHJlZml4IiwibGFiZWxBcnJheSIsInNwbGl0IiwiY3VzdG9tTGFiZWwiLCJzbGljZSIsIm9wYWNpdHkiLCJwYXJzZUludCIsImlzTmFOIiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJhcnJheSIsImdldENvbG9yRmJJb3MiLCIkY29sb3IiLCIkdmFyTGFiZWwiLCIkc3BhY2luZyIsIiRyZXNldCIsInBhZGRpbmdWYXJpYWJsZXMiLCJmaWJvbmFjY2lTZXEiLCJwckZvdXJ0aCIsImF1Rm91cnRoIiwicHJGaWZ0aCIsImdvbGRlblJhdGlvIiwic3BhY2VSYXRpb1VuaXQiLCJnZXRIU0wiLCJjb2xvciIsIk1hdGgiLCJyb3VuZCIsImdldEhTTEEiLCJOdW1iZXIiLCJzZXRIU0xBZnJvbUhTTCIsImdldEhTTEZyb21TdHJpbmciLCJ0cmltIiwic2V0Q3NzVmFyaWFibGUiLCJ2YXJpYWJsZSIsInZhbHVlIiwicHJpb3JpdHkiLCJyb290IiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsInNldFByb3BlcnR5IiwiZ2V0Q3NzVmFyaWFibGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInNldEJvZHlDc3NWYXJpYWJsZSIsImJvZHkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNldEVsZW1lbnRDc3NWYXJpYWJsZSIsImNsYXNzTmFtZSIsImVsZW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwid2luZG93U2Nyb2xsVG8iLCJ3aW5kb3ciLCJzY3JvbGxUbyIsInNlbGVjdElmcmFtZVNlY3Rpb24iLCJzZWN0aW9uIiwiJCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJwYXJlbnQiLCJvZmZzZXQiLCJ0b3AiLCJzZWxlY3RJZnJhbWVUYWIiLCJmaWx0ZXIiLCJnZXRNcSIsIndpbmRvd1dpZHRoIiwib3V0ZXJXaWR0aCIsIm1xIiwiY2xpZW50V2lkdGgiLCJ0ZXh0IiwiZ2V0U2NyZWVuU2l6ZSIsIm91dGVySGVpZ2h0IiwiZ2V0VmFsaWRSZXNwb25zaXZlVmFsdWUiLCJzcGFjZUFycmF5Iiwic3ViSW5kZXgiLCJpdGVtIiwiZ2V0VmFsdWVVbml0IiwibnVtYmVyIiwidW5pdCIsImdldEJvZHlOb3RGYWxzZSIsIm5ld0FycmF5IiwiaSIsInByb2plY3RMb2FkZWQiLCJNUSIsImxvYWRHbG9iYWxzU3R5bGUiLCJwcm9qZWN0IiwidHJpZ2dlciIsIk9iamVjdCIsInZhbHVlcyIsImxvYWRDb2xvclN0eWxlIiwiSlNPTiIsInBhcnNlIiwibG9hZENvbG9yRGVmYXVsdFN0eWxlIiwidHlwb2dyYXBoeSIsImxvYWRUeXBvZ3JhcGh5U3R5bGUiLCJsb2FkVHlwb2dyYXBoeURlZmF1bHRTdHlsZSIsInNwYWNpbmciLCJsb2FkU3BhY2luZ1N0eWxlIiwibG9hZFNwYWNpbmdEZWZhdWx0U3R5bGUiLCJidXR0b25zIiwibG9hZEJ1dHRvbnNTdHlsZSIsImxvYWRCdXR0b25zRGVmYXVsdFN0eWxlIiwiZm9ybSIsImxvYWRGb3Jtc1N0eWxlIiwibG9hZEZvcm1zRGVmYXVsdFN0eWxlIiwidmFyaWF0aW9ucyIsImNzc1ZhckxhYiIsImoiLCJzZXRDb2xvclBhcnRWYXJpYWJsZXMiLCJiVmFyaWF0aW9ucyIsImJsYWNrQXJyYXkiLCJnZXRCV0FycmF5Iiwid2hpdGVBcnJheSIsIndWYXJpYXRpb25zIiwiY29udHJhc3RMYWJlbHMiLCJncmFkaWVudElkIiwiZm9udFJlbmRlcmluZ0NvZGUiLCJyZW1vdmUiLCJiYXNlU3R5bGUiLCJpbnNlcnRBZnRlciIsImRlZmF1bHRDb2xvcnMiLCJjb2xvckFycmF5Iiwib2JqIiwicHJvcGVydHkiLCJoYXNPd25Qcm9wZXJ0eSIsInB1c2giLCJib29sIiwiYXBwZW5kVG8iLCJsaGNyb3BBcnJheSIsImhlYWRpbmdWYWx1ZXMiLCJnZXRUeXBvZ3JhcGh5QXJyYXkiLCJib2R5VmFsdWVzIiwidGV4dFZhcmlhYmxlcyIsImxvYWRUeXBvZ3JhcGh5U3R5bGVUYWciLCJnZXRUeXBvZ3JhcGh5U3R5bGUiLCJzZXRUeXBvZ3JhcGh5Q3NzVmFyaWFibGVzIiwiYm9keVN0eWxlIiwiYWxsU3R5bGUiLCJib2R5UmVzU3R5bGUiLCJoZWFkaW5nU3R5bGUiLCJmb250TGluayIsInR5cG9ncmFwaHlTdHlsZSIsInN0eWxlQ29udGVudCIsImRlZmF1bHRTdHlsZSIsImxvYWRUeXBvZ3JhcGh5Q3NzVmFyU3R5bGVHdWlkZSIsImNvZGUiLCJmb250RmFtaWxpZXMiLCJmb250RmFtaWx5Q2xhc3NlcyIsInNjYWxlIiwic2NhbGVSZXNwb25zaXZlIiwiZ2V0VHlwb2dyYXBoeVNjYWxlVmFyIiwiZ2V0VHlwb2dyYXBoeVNjYWxlVmFyUmVzIiwibG9hZFR5cG9ncmFwaHlTdHlsZVN0eWxlR3VpZGUiLCJnZXRUZXh0VW5pdCIsInRleHRVbml0Iiwic3BhY2VVbml0Iiwic3BhY2VSYXRpb0N1c3RvbSIsImdldFNwYWNlUmF0aW9DdXN0b20iLCJzckxpc3QiLCJnZXRTcGFjaW5nTXVsdGlwbGllciIsInBhZGRpbmdWYXJpYWJsZSIsInVwZGF0ZVNwYWNpbmdDc3NWYXJpYWJsZXMiLCJyZXNwb25zaXZlU3BhY2luZyIsImxvYWRTcGFjaW5nU3R5bGVUYWciLCJhcnIiLCJzZWxlY3RvciIsImZvbnRJZHMiLCJsaXN0IiwicGFkZGluZyIsInNwYWNpbmdWYXJpYWJsZXMiLCJnZXRTcGFjaW5nVmFsdWVzIiwic3BhY2VSYXRpbyIsInN1IiwiZ2V0U3BhY2luZ0N1c3RvbVNjYWxlUmF0aW8iLCJzcGFjZUxpc3QiLCJzdUFycmF5IiwidXBkYXRlZCIsImdldFNwYWNpbmdWYWxpZFJlc3BvbnNpdmVWYWx1ZUN1c3RvbVJhdGlvIiwiYnV0dG9uc0FycmF5IiwiZ2V0QnV0dG9uc0FycmF5U3R5bGUiLCJidG5zTGlzdCIsInN0YXR1c0xpc3QiLCJzdGF0dXNQcmlvcml0eUxpc3QiLCJidXR0b25zQ29kZVN0eWxlIiwiYnRuSWNvbkNvZGUiLCJidXR0b25JY29uQ29kZVN0eWxlIiwiYnRuVmFyaWFibGVzIiwiYnV0dG9uVmFyaWFibGVzIiwibG9hZEJ1dHRvbnNTdHlsZVRhZyIsImxvYWRCdXR0b25zU3R5bGVTdHlsZUd1aWRlIiwiYnRuU3R5bGUiLCJsb2FkU2hhcmVkU3R5bGVTdHlsZUd1aWRlIiwic2hhcmVkX3N0eWxlIiwiY3VzdG9tU3R5bGVBcnJheSIsImVzY2FwZUNTU2NoYXJhY3RlcnMiLCJjdXN0b21UZXh0U3R5bGVBcnJheSIsImJ0bnNTdHlsZSIsInNpemVzIiwiZm9udEJhc2UiLCJnZXRCdXR0b25zRm9udFNpemVWYWx1ZSIsImdldEJ1dHRvbnNQYWRkaW5nVmFsdWUiLCJzdHlsZUVsIiwiZm9ybXMiLCJmb3Jtc0FycmF5IiwiZm9ybXNMaXN0IiwicmVzZXRGb3Jtc1N0eWxlQ29tcG9uZW50cyIsImZvcm1WYXJpYWJsZXMiLCJsb2FkRm9ybXNTdHlsZVRhZyIsImxvYWRGb3Jtc1N0eWxlU3R5bGVHdWlkZSIsImZvcm1TdHlsZSIsImZvcm1DU1NWYXJpYWJsZXMiLCJib3hTaGFkb3dJc0RlZmluZWQiLCJzdWJwcm9wZXJ0eSIsInN1YlZhbCIsImJ0bkxhYmVsIiwiaXNEZW1vUmVzZXQiLCJpc0J1dHRvbiIsImJ0bkxhYmVsbW9kaWZpZWQiLCJidG5IYXNUcmFuc2Zvcm0iLCJidXR0b25zSGFzVHJhbnNmb3JtU3R5bGUiLCJzdHlsZUxhYmVsIiwic2V0U3RhdHVzTGlzdCIsIm5ld0NvZGUiLCJnZXRCdXR0b25Db2RlIiwic3RhdHVzIiwibmV3TGFiZWwiLCJwcmlvcml0eUxpc3QiLCJoYXNUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJidG5TdGF0dXMiLCJnZXRCdXR0b25zQXBwZWFyYW5jZVN0eWxlIiwiZ2V0QnV0dG9uc1BhZGRpbmdTdHlsZSIsImdldEJ1dHRvbnNNYXJnaW5TdHlsZSIsImdldEJ1dHRvbnNCb3JkZXJTdHlsZSIsImdldEJ1dHRvbnNUeXBvZ3JhcGh5U3R5bGUiLCJnZXRCdXR0b25zVGV4dFNoYWRvd1N0eWxlIiwiZ2V0QnV0dG9uc1NoYWRvd1N0eWxlIiwiZ2V0QnV0dG9uc091dGxpbmVTdHlsZSIsImdldEJ1dHRvbnNUcmFuc2Zvcm1TdHlsZSIsImdldEJ1dHRvbnNUcmFuc2l0aW9uU3R5bGUiLCJnZXRCdXR0b25zUGxhY2Vob2xkZXJTdHlsZSIsImdldEdyYWRpZW50QmdTdHlsZSIsImFuZ2xlIiwibmljZUxhYmVsIiwiY29sb3JWYXJpYWJsZXMiLCJhcHAiLCJmb250U2l6ZSIsInNldCIsImdldFN1ZmZpeE9wYWNpdHkiLCJnZXRMdW1pbmFuY2UiLCJoc2wiLCJpZnJhbWUiLCJyZ2JTciIsImdldFJHQnNyVmFsdWVzIiwicmdiIiwiZ2V0UkdCVmFsdWVzIiwiclNyIiwicG93IiwiZ1NyIiwiYlNyIiwiZ2V0UkdCZnJvbUhTTCIsImNocm9tYSIsImxvYWRlZElmcmFtZUNoZWNrIiwialF1ZXJ5IiwiZm4iLCJzZWxlY3RUZXh0IiwiZG9jIiwiY3JlYXRlVGV4dFJhbmdlIiwicmFuZ2UiLCJtb3ZlVG9FbGVtZW50VGV4dCIsInNlbGVjdCIsImdldFNlbGVjdGlvbiIsInNlbGVjdGlvbiIsImNyZWF0ZVJhbmdlIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJpbml0Rm9udExpc3QiLCJkZW1vQ29udGFpbmVyIiwiZGVtb1ZpZXdwb3J0Iiwib24iLCJldmVudCIsImN1cnJlbnRUYXJnZXQiLCJpZnJhbWVQYXJlbnQiLCJjbG9zZUFjdGl2ZVBvcHVwcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJrZXlDb2RlIiwia2V5IiwidG9Mb3dlckNhc2UiLCJjdHJsS2V5IiwibWV0YUtleSIsIm9wZW5TaXRlU2VhcmNoIiwicmVzaXppbmciLCJyZXNpemluZ0lEIiwibXFMYWJlbHMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1cGRhdGVMYWJlbFNpemVXaW5kb3ciLCJ1cGRhdGVDb21wb25lbnRHbG9iYWxzIiwiY29tcFNjcmlwdCIsIm5ld1NjcmlwdCIsImNsb25lIiwiYXR0ciIsInJlbW92ZUF0dHIiLCJpbnNlcnRCZWZvcmUiLCJzZXRUaW1lb3V0IiwicmV2ZWFsQ29tcG9uZW50IiwibXFMYWJlbFRleHQiLCJzaG93IiwiY2xlYXJJbnRlcnZhbCIsImhpZGUiLCJ1cGRhdGVHbG9iYWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/config-custom-azuriom/page.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./js/config-custom-azuriom/colors.js");
/******/ 	
/******/ })()
;