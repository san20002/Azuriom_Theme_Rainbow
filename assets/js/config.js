/*! For license information please see config.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./js/config-panel/config.js":()=>{eval("(function () {\n  var options = {\n    column: 6,\n    minRow: 1,\n    // don't collapse when empty\n    cellHeight: 70,\n    disableOneColumnMode: true,\n    \"float\": false,\n    // dragIn: '.sidebar .grid-stack-item', // add draggable to class\n    // dragInOptions: { revert: 'invalid', scroll: false, appendTo: 'body', helper: 'clone' }, // clone\n    removable: '.trash',\n    // true or drag-out delete class\n    acceptWidgets: function acceptWidgets(el) {\n      return true;\n    } // function example, but can also be: true | false | '.someClass' value\n\n  };\n  var grids = GridStack.initAll(options);\n  grids[1][\"float\"](true); // new 4.x static method instead of setting up options on every grid (never been per grid really) but old options still works\n\n  GridStack.setupDragIn('.sidebar .grid-stack-item', {\n    revert: 'invalid',\n    scroll: false,\n    appendTo: 'body',\n    helper: myClone\n  });\n  GridStack.setupDragIn(); // second call will now work (cache last values)\n\n  var items = [{\n    x: 0,\n    y: 0,\n    w: 2,\n    h: 2\n  }, {\n    x: 3,\n    y: 1,\n    h: 2\n  }, {\n    x: 4,\n    y: 1\n  }, {\n    x: 2,\n    y: 3,\n    w: 3,\n    maxW: 3,\n    id: 'special',\n    content: 'has maxW=3'\n  }, {\n    x: 2,\n    y: 5\n  }];\n  grids.forEach(function (grid, i) {\n    addEvents(grid, i);\n    grid.load(items);\n  }); // decide what the dropped item will be - for now just a clone but can be anything\n\n  function myClone(event) {\n    return event.target.cloneNode(true);\n  }\n\n  function toggleFloat(button, i) {\n    grids[i][\"float\"](!grids[i].getFloat());\n    button.innerHTML = 'float: ' + grids[i].getFloat();\n  }\n\n  function compact(i) {\n    grids[i].compact();\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZW1wbGF0ZS1kZWZhdWx0Ly4vanMvY29uZmlnLXBhbmVsL2NvbmZpZy5qcz9lMmI2Il0sIm5hbWVzIjpbIm9wdGlvbnMiLCJjb2x1bW4iLCJtaW5Sb3ciLCJjZWxsSGVpZ2h0IiwiZGlzYWJsZU9uZUNvbHVtbk1vZGUiLCJyZW1vdmFibGUiLCJhY2NlcHRXaWRnZXRzIiwiZWwiLCJncmlkcyIsIkdyaWRTdGFjayIsImluaXRBbGwiLCJzZXR1cERyYWdJbiIsInJldmVydCIsInNjcm9sbCIsImFwcGVuZFRvIiwiaGVscGVyIiwibXlDbG9uZSIsIml0ZW1zIiwieCIsInkiLCJ3IiwiaCIsIm1heFciLCJpZCIsImNvbnRlbnQiLCJmb3JFYWNoIiwiZ3JpZCIsImkiLCJhZGRFdmVudHMiLCJsb2FkIiwiZXZlbnQiLCJ0YXJnZXQiLCJjbG9uZU5vZGUiLCJ0b2dnbGVGbG9hdCIsImJ1dHRvbiIsImdldEZsb2F0IiwiaW5uZXJIVE1MIiwiY29tcGFjdCJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQyxZQUFZO0FBQ1QsTUFBSUEsT0FBTyxHQUFHO0FBQ1ZDLElBQUFBLE1BQU0sRUFBRSxDQURFO0FBRVZDLElBQUFBLE1BQU0sRUFBRSxDQUZFO0FBRUM7QUFDWEMsSUFBQUEsVUFBVSxFQUFFLEVBSEY7QUFJVkMsSUFBQUEsb0JBQW9CLEVBQUUsSUFKWjtBQUtWLGFBQU8sS0FMRztBQU1WO0FBQ0E7QUFDQUMsSUFBQUEsU0FBUyxFQUFFLFFBUkQ7QUFRVztBQUNyQkMsSUFBQUEsYUFBYSxFQUFFLHVCQUFVQyxFQUFWLEVBQWM7QUFDekIsYUFBTyxJQUFQO0FBQ0gsS0FYUyxDQVdSOztBQVhRLEdBQWQ7QUFhQSxNQUFJQyxLQUFLLEdBQUdDLFNBQVMsQ0FBQ0MsT0FBVixDQUFrQlYsT0FBbEIsQ0FBWjtBQUNBUSxFQUFBQSxLQUFLLENBQUMsQ0FBRCxDQUFMLFVBQWUsSUFBZixFQWZTLENBaUJUOztBQUNBQyxFQUFBQSxTQUFTLENBQUNFLFdBQVYsQ0FBc0IsMkJBQXRCLEVBQW1EO0FBQy9DQyxJQUFBQSxNQUFNLEVBQUUsU0FEdUM7QUFFL0NDLElBQUFBLE1BQU0sRUFBRSxLQUZ1QztBQUcvQ0MsSUFBQUEsUUFBUSxFQUFFLE1BSHFDO0FBSS9DQyxJQUFBQSxNQUFNLEVBQUVDO0FBSnVDLEdBQW5EO0FBTUFQLEVBQUFBLFNBQVMsQ0FBQ0UsV0FBVixHQXhCUyxDQXdCZ0I7O0FBRXpCLE1BQUlNLEtBQUssR0FBRyxDQUNSO0FBQUNDLElBQUFBLENBQUMsRUFBRSxDQUFKO0FBQU9DLElBQUFBLENBQUMsRUFBRSxDQUFWO0FBQWFDLElBQUFBLENBQUMsRUFBRSxDQUFoQjtBQUFtQkMsSUFBQUEsQ0FBQyxFQUFFO0FBQXRCLEdBRFEsRUFFUjtBQUFDSCxJQUFBQSxDQUFDLEVBQUUsQ0FBSjtBQUFPQyxJQUFBQSxDQUFDLEVBQUUsQ0FBVjtBQUFhRSxJQUFBQSxDQUFDLEVBQUU7QUFBaEIsR0FGUSxFQUdSO0FBQUNILElBQUFBLENBQUMsRUFBRSxDQUFKO0FBQU9DLElBQUFBLENBQUMsRUFBRTtBQUFWLEdBSFEsRUFJUjtBQUFDRCxJQUFBQSxDQUFDLEVBQUUsQ0FBSjtBQUFPQyxJQUFBQSxDQUFDLEVBQUUsQ0FBVjtBQUFhQyxJQUFBQSxDQUFDLEVBQUUsQ0FBaEI7QUFBbUJFLElBQUFBLElBQUksRUFBRSxDQUF6QjtBQUE0QkMsSUFBQUEsRUFBRSxFQUFFLFNBQWhDO0FBQTJDQyxJQUFBQSxPQUFPLEVBQUU7QUFBcEQsR0FKUSxFQUtSO0FBQUNOLElBQUFBLENBQUMsRUFBRSxDQUFKO0FBQU9DLElBQUFBLENBQUMsRUFBRTtBQUFWLEdBTFEsQ0FBWjtBQVFBWCxFQUFBQSxLQUFLLENBQUNpQixPQUFOLENBQWMsVUFBVUMsSUFBVixFQUFnQkMsQ0FBaEIsRUFBbUI7QUFDN0JDLElBQUFBLFNBQVMsQ0FBQ0YsSUFBRCxFQUFPQyxDQUFQLENBQVQ7QUFDQUQsSUFBQUEsSUFBSSxDQUFDRyxJQUFMLENBQVVaLEtBQVY7QUFDSCxHQUhELEVBbENTLENBdUNUOztBQUNBLFdBQVNELE9BQVQsQ0FBaUJjLEtBQWpCLEVBQXdCO0FBQ3BCLFdBQU9BLEtBQUssQ0FBQ0MsTUFBTixDQUFhQyxTQUFiLENBQXVCLElBQXZCLENBQVA7QUFDSDs7QUFFRCxXQUFTQyxXQUFULENBQXFCQyxNQUFyQixFQUE2QlAsQ0FBN0IsRUFBZ0M7QUFDNUJuQixJQUFBQSxLQUFLLENBQUNtQixDQUFELENBQUwsVUFBZSxDQUFDbkIsS0FBSyxDQUFDbUIsQ0FBRCxDQUFMLENBQVNRLFFBQVQsRUFBaEI7QUFDQUQsSUFBQUEsTUFBTSxDQUFDRSxTQUFQLEdBQW1CLFlBQVk1QixLQUFLLENBQUNtQixDQUFELENBQUwsQ0FBU1EsUUFBVCxFQUEvQjtBQUNIOztBQUVELFdBQVNFLE9BQVQsQ0FBaUJWLENBQWpCLEVBQW9CO0FBQ2hCbkIsSUFBQUEsS0FBSyxDQUFDbUIsQ0FBRCxDQUFMLENBQVNVLE9BQVQ7QUFDSDtBQUNKLENBcEREIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgb3B0aW9ucyA9IHtcbiAgICAgICAgY29sdW1uOiA2LFxuICAgICAgICBtaW5Sb3c6IDEsIC8vIGRvbid0IGNvbGxhcHNlIHdoZW4gZW1wdHlcbiAgICAgICAgY2VsbEhlaWdodDogNzAsXG4gICAgICAgIGRpc2FibGVPbmVDb2x1bW5Nb2RlOiB0cnVlLFxuICAgICAgICBmbG9hdDogZmFsc2UsXG4gICAgICAgIC8vIGRyYWdJbjogJy5zaWRlYmFyIC5ncmlkLXN0YWNrLWl0ZW0nLCAvLyBhZGQgZHJhZ2dhYmxlIHRvIGNsYXNzXG4gICAgICAgIC8vIGRyYWdJbk9wdGlvbnM6IHsgcmV2ZXJ0OiAnaW52YWxpZCcsIHNjcm9sbDogZmFsc2UsIGFwcGVuZFRvOiAnYm9keScsIGhlbHBlcjogJ2Nsb25lJyB9LCAvLyBjbG9uZVxuICAgICAgICByZW1vdmFibGU6ICcudHJhc2gnLCAvLyB0cnVlIG9yIGRyYWctb3V0IGRlbGV0ZSBjbGFzc1xuICAgICAgICBhY2NlcHRXaWRnZXRzOiBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IC8vIGZ1bmN0aW9uIGV4YW1wbGUsIGJ1dCBjYW4gYWxzbyBiZTogdHJ1ZSB8IGZhbHNlIHwgJy5zb21lQ2xhc3MnIHZhbHVlXG4gICAgfTtcbiAgICBsZXQgZ3JpZHMgPSBHcmlkU3RhY2suaW5pdEFsbChvcHRpb25zKTtcbiAgICBncmlkc1sxXS5mbG9hdCh0cnVlKTtcblxuICAgIC8vIG5ldyA0Lnggc3RhdGljIG1ldGhvZCBpbnN0ZWFkIG9mIHNldHRpbmcgdXAgb3B0aW9ucyBvbiBldmVyeSBncmlkIChuZXZlciBiZWVuIHBlciBncmlkIHJlYWxseSkgYnV0IG9sZCBvcHRpb25zIHN0aWxsIHdvcmtzXG4gICAgR3JpZFN0YWNrLnNldHVwRHJhZ0luKCcuc2lkZWJhciAuZ3JpZC1zdGFjay1pdGVtJywge1xuICAgICAgICByZXZlcnQ6ICdpbnZhbGlkJyxcbiAgICAgICAgc2Nyb2xsOiBmYWxzZSxcbiAgICAgICAgYXBwZW5kVG86ICdib2R5JyxcbiAgICAgICAgaGVscGVyOiBteUNsb25lXG4gICAgfSk7XG4gICAgR3JpZFN0YWNrLnNldHVwRHJhZ0luKCk7IC8vIHNlY29uZCBjYWxsIHdpbGwgbm93IHdvcmsgKGNhY2hlIGxhc3QgdmFsdWVzKVxuXG4gICAgbGV0IGl0ZW1zID0gW1xuICAgICAgICB7eDogMCwgeTogMCwgdzogMiwgaDogMn0sXG4gICAgICAgIHt4OiAzLCB5OiAxLCBoOiAyfSxcbiAgICAgICAge3g6IDQsIHk6IDF9LFxuICAgICAgICB7eDogMiwgeTogMywgdzogMywgbWF4VzogMywgaWQ6ICdzcGVjaWFsJywgY29udGVudDogJ2hhcyBtYXhXPTMnfSxcbiAgICAgICAge3g6IDIsIHk6IDV9XG4gICAgXTtcblxuICAgIGdyaWRzLmZvckVhY2goZnVuY3Rpb24gKGdyaWQsIGkpIHtcbiAgICAgICAgYWRkRXZlbnRzKGdyaWQsIGkpO1xuICAgICAgICBncmlkLmxvYWQoaXRlbXMpO1xuICAgIH0pO1xuXG4gICAgLy8gZGVjaWRlIHdoYXQgdGhlIGRyb3BwZWQgaXRlbSB3aWxsIGJlIC0gZm9yIG5vdyBqdXN0IGEgY2xvbmUgYnV0IGNhbiBiZSBhbnl0aGluZ1xuICAgIGZ1bmN0aW9uIG15Q2xvbmUoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50LnRhcmdldC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlRmxvYXQoYnV0dG9uLCBpKSB7XG4gICAgICAgIGdyaWRzW2ldLmZsb2F0KCFncmlkc1tpXS5nZXRGbG9hdCgpKTtcbiAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9ICdmbG9hdDogJyArIGdyaWRzW2ldLmdldEZsb2F0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGFjdChpKSB7XG4gICAgICAgIGdyaWRzW2ldLmNvbXBhY3QoKTtcbiAgICB9XG59KVxuIl0sImZpbGUiOiIuL2pzL2NvbmZpZy1wYW5lbC9jb25maWcuanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./js/config-panel/config.js\n")}},__webpack_exports__={};__webpack_modules__["./js/config-panel/config.js"]()})();