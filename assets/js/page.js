/*! For license information please see page.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./js/config-custom-azuriom/page.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"spacingArray\": () => (/* binding */ spacingArray),\n/* harmony export */   \"textArray\": () => (/* binding */ textArray),\n/* harmony export */   \"textArrayValues\": () => (/* binding */ textArrayValues),\n/* harmony export */   \"fontArray\": () => (/* binding */ fontArray),\n/* harmony export */   \"btnFontIds\": () => (/* binding */ btnFontIds),\n/* harmony export */   \"btnColorCustomNiceLabels\": () => (/* binding */ btnColorCustomNiceLabels),\n/* harmony export */   \"btnGradientsCustomNiceLabels\": () => (/* binding */ btnGradientsCustomNiceLabels),\n/* harmony export */   \"btnColorLabels\": () => (/* binding */ btnColorLabels),\n/* harmony export */   \"shadowVariables\": () => (/* binding */ shadowVariables),\n/* harmony export */   \"borderRadiusValues\": () => (/* binding */ borderRadiusValues),\n/* harmony export */   \"setBtnColorCustomNiceLabels\": () => (/* binding */ setBtnColorCustomNiceLabels),\n/* harmony export */   \"setBtnGradientNiceLabels\": () => (/* binding */ setBtnGradientNiceLabels),\n/* harmony export */   \"decodeSafeURIComponent\": () => (/* binding */ decodeSafeURIComponent),\n/* harmony export */   \"getCursorValue\": () => (/* binding */ getCursorValue),\n/* harmony export */   \"getBorderType\": () => (/* binding */ getBorderType),\n/* harmony export */   \"getBorderStyle\": () => (/* binding */ getBorderStyle),\n/* harmony export */   \"getTextTransform\": () => (/* binding */ getTextTransform),\n/* harmony export */   \"getTextDecoration\": () => (/* binding */ getTextDecoration),\n/* harmony export */   \"getFontSmoothing\": () => (/* binding */ getFontSmoothing),\n/* harmony export */   \"getBoxShadowType\": () => (/* binding */ getBoxShadowType),\n/* harmony export */   \"getTransitionProperty\": () => (/* binding */ getTransitionProperty),\n/* harmony export */   \"getTransitionEase\": () => (/* binding */ getTransitionEase),\n/* harmony export */   \"getTransitionDelay\": () => (/* binding */ getTransitionDelay),\n/* harmony export */   \"getTransformProperty\": () => (/* binding */ getTransformProperty),\n/* harmony export */   \"getOutlineStyle\": () => (/* binding */ getOutlineStyle),\n/* harmony export */   \"getOutlineOffset\": () => (/* binding */ getOutlineOffset),\n/* harmony export */   \"getColorValue\": () => (/* binding */ getColorValue),\n/* harmony export */   \"getColorValueFromList\": () => (/* binding */ getColorValueFromList),\n/* harmony export */   \"getNiceLabelForCustom\": () => (/* binding */ getNiceLabelForCustom),\n/* harmony export */   \"removeOpacityFromLabel\": () => (/* binding */ removeOpacityFromLabel),\n/* harmony export */   \"getOpacityDecFromLabel\": () => (/* binding */ getOpacityDecFromLabel),\n/* harmony export */   \"checkColorIsOpacity\": () => (/* binding */ checkColorIsOpacity),\n/* harmony export */   \"getColorFbIos\": () => (/* binding */ getColorFbIos),\n/* harmony export */   \"getHSL\": () => (/* binding */ getHSL),\n/* harmony export */   \"getHSLA\": () => (/* binding */ getHSLA),\n/* harmony export */   \"setHSLAfromHSL\": () => (/* binding */ setHSLAfromHSL),\n/* harmony export */   \"getHSLFromString\": () => (/* binding */ getHSLFromString),\n/* harmony export */   \"setCssVariable\": () => (/* binding */ setCssVariable),\n/* harmony export */   \"getCssVariable\": () => (/* binding */ getCssVariable),\n/* harmony export */   \"setBodyCssVariable\": () => (/* binding */ setBodyCssVariable),\n/* harmony export */   \"setElementCssVariable\": () => (/* binding */ setElementCssVariable),\n/* harmony export */   \"windowScrollTo\": () => (/* binding */ windowScrollTo),\n/* harmony export */   \"selectIframeSection\": () => (/* binding */ selectIframeSection),\n/* harmony export */   \"selectIframeTab\": () => (/* binding */ selectIframeTab),\n/* harmony export */   \"getMq\": () => (/* binding */ getMq),\n/* harmony export */   \"getScreenSize\": () => (/* binding */ getScreenSize),\n/* harmony export */   \"getValidResponsiveValue\": () => (/* binding */ getValidResponsiveValue),\n/* harmony export */   \"getValueUnit\": () => (/* binding */ getValueUnit),\n/* harmony export */   \"getBodyNotFalse\": () => (/* binding */ getBodyNotFalse),\n/* harmony export */   \"loadGlobalsStyle\": () => (/* binding */ loadGlobalsStyle),\n/* harmony export */   \"loadColorStyle\": () => (/* binding */ loadColorStyle),\n/* harmony export */   \"loadColorDefaultStyle\": () => (/* binding */ loadColorDefaultStyle),\n/* harmony export */   \"setColorPartVariables\": () => (/* binding */ setColorPartVariables),\n/* harmony export */   \"getBWArray\": () => (/* binding */ getBWArray),\n/* harmony export */   \"loadTypographyStyle\": () => (/* binding */ loadTypographyStyle),\n/* harmony export */   \"loadTypographyDefaultStyle\": () => (/* binding */ loadTypographyDefaultStyle),\n/* harmony export */   \"loadTypographyStyleTag\": () => (/* binding */ loadTypographyStyleTag),\n/* harmony export */   \"loadTypographyCssVarStyleGuide\": () => (/* binding */ loadTypographyCssVarStyleGuide),\n/* harmony export */   \"loadTypographyStyleStyleGuide\": () => (/* binding */ loadTypographyStyleStyleGuide),\n/* harmony export */   \"getTypographyScaleVar\": () => (/* binding */ getTypographyScaleVar),\n/* harmony export */   \"getTextUnit\": () => (/* binding */ getTextUnit),\n/* harmony export */   \"getTypographyScaleVarRes\": () => (/* binding */ getTypographyScaleVarRes),\n/* harmony export */   \"loadSpacingStyle\": () => (/* binding */ loadSpacingStyle),\n/* harmony export */   \"loadSpacingDefaultStyle\": () => (/* binding */ loadSpacingDefaultStyle),\n/* harmony export */   \"loadSpacingStyleTag\": () => (/* binding */ loadSpacingStyleTag),\n/* harmony export */   \"setTypographyCssVariables\": () => (/* binding */ setTypographyCssVariables),\n/* harmony export */   \"getTypographyArray\": () => (/* binding */ getTypographyArray),\n/* harmony export */   \"getTypographyStyle\": () => (/* binding */ getTypographyStyle),\n/* harmony export */   \"updateSpacingCssVariables\": () => (/* binding */ updateSpacingCssVariables),\n/* harmony export */   \"getSpacingValues\": () => (/* binding */ getSpacingValues),\n/* harmony export */   \"getSpacingMultiplier\": () => (/* binding */ getSpacingMultiplier),\n/* harmony export */   \"getSpacingCustomScaleRatio\": () => (/* binding */ getSpacingCustomScaleRatio),\n/* harmony export */   \"getSpacingValidResponsiveValueCustomRatio\": () => (/* binding */ getSpacingValidResponsiveValueCustomRatio),\n/* harmony export */   \"getSpaceRatioCustom\": () => (/* binding */ getSpaceRatioCustom),\n/* harmony export */   \"loadButtonsStyle\": () => (/* binding */ loadButtonsStyle),\n/* harmony export */   \"loadButtonsStyleStyleGuide\": () => (/* binding */ loadButtonsStyleStyleGuide),\n/* harmony export */   \"loadSharedStyleStyleGuide\": () => (/* binding */ loadSharedStyleStyleGuide),\n/* harmony export */   \"escapeCSScharacters\": () => (/* binding */ escapeCSScharacters),\n/* harmony export */   \"loadButtonsDefaultStyle\": () => (/* binding */ loadButtonsDefaultStyle),\n/* harmony export */   \"buttonVariables\": () => (/* binding */ buttonVariables),\n/* harmony export */   \"loadButtonsStyleTag\": () => (/* binding */ loadButtonsStyleTag),\n/* harmony export */   \"loadFormsStyle\": () => (/* binding */ loadFormsStyle),\n/* harmony export */   \"loadFormsStyleStyleGuide\": () => (/* binding */ loadFormsStyleStyleGuide),\n/* harmony export */   \"formVariables\": () => (/* binding */ formVariables),\n/* harmony export */   \"loadFormsDefaultStyle\": () => (/* binding */ loadFormsDefaultStyle),\n/* harmony export */   \"loadFormsStyleTag\": () => (/* binding */ loadFormsStyleTag),\n/* harmony export */   \"boxShadowIsDefined\": () => (/* binding */ boxShadowIsDefined),\n/* harmony export */   \"getButtonsArrayStyle\": () => (/* binding */ getButtonsArrayStyle),\n/* harmony export */   \"buttonsCodeStyle\": () => (/* binding */ buttonsCodeStyle),\n/* harmony export */   \"setStatusList\": () => (/* binding */ setStatusList),\n/* harmony export */   \"buttonIconCodeStyle\": () => (/* binding */ buttonIconCodeStyle),\n/* harmony export */   \"buttonsHasTransformStyle\": () => (/* binding */ buttonsHasTransformStyle),\n/* harmony export */   \"getButtonCode\": () => (/* binding */ getButtonCode),\n/* harmony export */   \"getButtonsAppearanceStyle\": () => (/* binding */ getButtonsAppearanceStyle),\n/* harmony export */   \"getGradientBgStyle\": () => (/* binding */ getGradientBgStyle),\n/* harmony export */   \"getButtonsPaddingStyle\": () => (/* binding */ getButtonsPaddingStyle),\n/* harmony export */   \"getButtonsPaddingValue\": () => (/* binding */ getButtonsPaddingValue),\n/* harmony export */   \"getButtonsMarginStyle\": () => (/* binding */ getButtonsMarginStyle),\n/* harmony export */   \"getButtonsBorderStyle\": () => (/* binding */ getButtonsBorderStyle),\n/* harmony export */   \"getButtonsTypographyStyle\": () => (/* binding */ getButtonsTypographyStyle),\n/* harmony export */   \"getButtonsTextShadowStyle\": () => (/* binding */ getButtonsTextShadowStyle),\n/* harmony export */   \"getButtonsShadowStyle\": () => (/* binding */ getButtonsShadowStyle),\n/* harmony export */   \"getButtonsOutlineStyle\": () => (/* binding */ getButtonsOutlineStyle),\n/* harmony export */   \"getButtonsTransformStyle\": () => (/* binding */ getButtonsTransformStyle),\n/* harmony export */   \"getButtonsTransitionStyle\": () => (/* binding */ getButtonsTransitionStyle),\n/* harmony export */   \"getButtonsPlaceholderStyle\": () => (/* binding */ getButtonsPlaceholderStyle),\n/* harmony export */   \"getButtonsFontSizeValue\": () => (/* binding */ getButtonsFontSizeValue),\n/* harmony export */   \"resetFormsStyleComponents\": () => (/* binding */ resetFormsStyleComponents),\n/* harmony export */   \"getSuffixOpacity\": () => (/* binding */ getSuffixOpacity),\n/* harmony export */   \"getLuminance\": () => (/* binding */ getLuminance),\n/* harmony export */   \"getRGBsrValues\": () => (/* binding */ getRGBsrValues),\n/* harmony export */   \"getRGBValues\": () => (/* binding */ getRGBValues),\n/* harmony export */   \"getRGBfromHSL\": () => (/* binding */ getRGBfromHSL),\n/* harmony export */   \"loadedIframeCheck\": () => (/* binding */ loadedIframeCheck),\n/* harmony export */   \"initFontList\": () => (/* binding */ initFontList)\n/* harmony export */ });\n//buttons/forms default values\nvar spacingArray = ['', '0', 'var(--space-xxxxs)', 'var(--space-xxxs)', 'var(--space-xxs)', 'var(--space-xs)', 'var(--space-sm)', 'var(--space-md)', 'var(--space-lg)', 'var(--space-xl)', 'var(--space-xxl)', 'var(--space-xxxl)', 'var(--space-xxxxl)'],\n    textArray = ['', 'var(--text-xs)', 'var(--text-sm)', 'var(--text-md)', 'var(--text-lg)', 'var(--text-xl)', 'var(--text-xxl)', 'var(--text-xxxl)', 'var(--text-xxxxl)', 'inherit'],\n    textArrayValues = ['', 'var(--text-xs)', 'var(--text-sm)', 'var(--text-md)', 'var(--text-lg)', 'var(--text-xl)', 'var(--text-xxl)', 'var(--text-xxxl)', 'inherit', '', 'var(--text-xxxxl)'],\n    fontArray = ['', '--font-primary'],\n    btnFontIds = [0, 1],\n    btnColorCustomNiceLabels = [],\n    btnGradientsCustomNiceLabels = [],\n    btnColorLabels = [\"primary\", \"accent\", \"download\", \"warning\", \"success\", \"error\", \"info\"],\n    shadowVariables = ['', '', 'var(--shadow-xs)', 'var(--shadow-sm)', 'var(--shadow-md)', 'var(--shadow-lg)', 'var(--shadow-xl)'],\n    borderRadiusValues = ['', 'var(--radius-sm)', 'var(--radius-md)', 'var(--radius-lg)'];\nfunction setBtnColorCustomNiceLabels(colors, customNice) {\n  if (colors) {\n    btnColorLabels = colors;\n  }\n\n  if (customNice) {\n    btnColorCustomNiceLabels = customNice;\n  }\n}\n;\nfunction setBtnGradientNiceLabels(gradients) {\n  if (gradients && gradients.length > 0) {\n    btnGradientsCustomNiceLabels = gradients;\n  }\n}\n;\nfunction decodeSafeURIComponent(string) {\n  return decodeURIComponent(string.replace(/%\"/g, '%25\"'));\n}\n;\nfunction getCursorValue(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'auto';\n      break;\n\n    case 2:\n      return 'pointer';\n      break;\n\n    case 3:\n      return 'not-allowed';\n      break;\n\n    default:\n      return 'auto';\n  }\n}\n;\nfunction getBorderType(index) {\n  switch (index) {\n    case 0:\n      return 'border';\n      break;\n\n    case 1:\n      return 'border-top';\n      break;\n\n    case 2:\n      return 'border-right';\n      break;\n\n    case 3:\n      return 'border-bottom';\n      break;\n\n    case 4:\n      return 'border-left';\n      break;\n\n    default:\n      return 'border';\n  }\n}\n;\nfunction getBorderStyle(index) {\n  switch (index) {\n    case 0:\n      return 'none';\n      break;\n\n    case 1:\n      return 'solid';\n      break;\n\n    case 2:\n      return 'dashed';\n      break;\n\n    case 3:\n      return 'dotted';\n      break;\n\n    default:\n      return 'solid';\n  }\n}\n;\nfunction getTextTransform(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'capitalize';\n      break;\n\n    case 3:\n      return 'uppercase';\n      break;\n\n    case 4:\n      return 'lowercase';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getTextDecoration(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'underline';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getFontSmoothing() {\n  return '-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;';\n}\n;\nfunction getBoxShadowType(index) {\n  if (index == 0) return '';else return 'inset ';\n}\n;\nfunction getTransitionProperty(index) {\n  switch (index) {\n    case 0:\n      return 'all';\n      break;\n\n    case 1:\n      return 'none';\n      break;\n\n    case 2:\n      return 'background';\n      break;\n\n    case 3:\n      return 'opacity';\n      break;\n\n    case 4:\n      return 'border';\n      break;\n\n    case 5:\n      return 'box-shadow';\n      break;\n\n    case 6:\n      return 'outline';\n      break;\n\n    case 7:\n      return 'transform';\n      break;\n\n    case 8:\n      return 'color';\n      break;\n\n    default:\n      return 'all';\n  }\n}\n;\nfunction getTransitionEase(index) {\n  switch (index) {\n    case 0:\n      return 'ease';\n      break;\n\n    case 1:\n      return 'linear';\n      break;\n\n    case 2:\n      return 'ease-in';\n      break;\n\n    case 3:\n      return 'ease-out';\n      break;\n\n    case 4:\n      return 'var(--ease-in-out)';\n      break;\n\n    case 5:\n      return 'var(--ease-in)';\n      break;\n\n    case 6:\n      return 'var(--ease-out)';\n      break;\n\n    case 7:\n      return 'var(--ease-out-back)';\n      break;\n\n    default:\n      return 'ease';\n  }\n}\n;\nfunction getTransitionDelay(val) {\n  if (val == '') return '';\n  return ' ' + val + 's';\n}\n;\nfunction getTransformProperty(index) {\n  switch (index) {\n    case 0:\n      return 'none';\n      break;\n\n    case 1:\n      return 'translate';\n      break;\n\n    case 2:\n      return 'translateX';\n      break;\n\n    case 3:\n      return 'translateY';\n      break;\n\n    case 4:\n      return 'translateZ';\n      break;\n\n    case 5:\n      return 'scale';\n      break;\n\n    case 6:\n      return 'scaleX';\n      break;\n\n    case 7:\n      return 'scaleY';\n      break;\n\n    case 8:\n      return 'scaleZ';\n      break;\n\n    case 9:\n      return 'rotate';\n      break;\n\n    case 10:\n      return 'rotateX';\n      break;\n\n    case 11:\n      return 'rotateY';\n      break;\n\n    case 12:\n      return 'rotateZ';\n      break;\n\n    default:\n      return 'none';\n  }\n}\n;\nfunction getOutlineStyle(index) {\n  switch (index) {\n    case 0:\n      return '';\n      break;\n\n    case 1:\n      return 'auto';\n      break;\n\n    case 2:\n      return 'dotted';\n      break;\n\n    case 3:\n      return 'dashed';\n      break;\n\n    case 4:\n      return 'solid';\n      break;\n\n    case 5:\n      return 'double';\n      break;\n\n    case 6:\n      return 'inset';\n      break;\n\n    case 7:\n      return 'outset';\n      break;\n\n    case 8:\n      return 'none';\n      break;\n\n    default:\n      return '';\n  }\n}\n;\nfunction getOutlineOffset(val) {\n  if (val == '') return '';\n  return 'outline-offset: ' + val + ';';\n}\n;\nfunction getColorValue(val, reset) {\n  if (!val || val == null) return ''; // check if inherit/transparent/default\n\n  if (val == 'transparent' || val.indexOf('transparent') == 0) return 'transparent';\n  if (val == 'inherit' || val.indexOf('inherit') == 0) return 'inherit';\n  if (val == '' || val.indexOf('-a') == 0) return ''; //check if custom color\n\n  return getColorValueFromList(val, reset);\n}\n;\nfunction getColorValueFromList(label, reset) {\n  var fallback = '';\n  if (!label || label == null) return '';\n  label = getNiceLabelForCustom(label);\n  if (!label) return ''; //check if this is an opacity value and provide fallback\n\n  if (checkColorIsOpacity(label)) {\n    if (reset && reset == true) {\n      //need to return css value\n      var basicLabel = removeOpacityFromLabel(label);\n      return 'hsla(var(' + basicLabel + '-h), var(' + basicLabel + '-s), var(' + basicLabel + '-l), ' + getOpacityDecFromLabel(label) + ')';\n    } else {\n      //return sass mixin\n      return 'alpha(var(' + removeOpacityFromLabel(label) + '), ' + getOpacityDecFromLabel(label) + ')';\n    }\n  } else {\n    return 'var(' + label + ')';\n  }\n}\n;\nfunction getNiceLabelForCustom(label) {\n  if (label.indexOf('custom-') > -1) {\n    var prefix = label.indexOf('custom-fdb-') > -1 ? 'custom-fdb-' : 'custom-';\n    var labelArray = label.split(prefix),\n        split = labelArray[1].split('-');\n\n    if (split.length > 1) {\n      var customLabel = prefix + split[0];\n      label = btnColorCustomNiceLabels[btnColorLabels.indexOf(customLabel) - 5] + labelArray[1].replace(split[0], '');\n    } else {\n      var customLabel = prefix + labelArray[1];\n      label = btnColorCustomNiceLabels[btnColorLabels.indexOf(customLabel) - 5];\n    }\n  }\n\n  return label;\n}\n;\nfunction removeOpacityFromLabel(label) {\n  return label.slice(0, -4);\n}\n;\nfunction getOpacityDecFromLabel(label) {\n  var opacity = parseInt(label.slice(-4).replace('-a', ''));\n  if (isNaN(opacity)) return 1;\n  return parseFloat((opacity / 100).toFixed(2));\n}\n;\nfunction checkColorIsOpacity(label) {\n  var array = label.split('-');\n\n  if (array.length > 0 && array[array.length - 1].indexOf('a') == 0 && array[array.length - 1].length == 3) {\n    return true;\n  }\n\n  return false;\n}\n;\nfunction getColorFbIos($color, $varLabel, $spacing, $reset) {\n  if (!$color || $color == null) return ['', ''];\n  if ($color == 'transparent' || $color == 'inherit' || $color == '') return ['', $color];\n  return ['', getColorValue($color, $reset)];\n}\n; //if you updates this -> you'll need to update the same in the app-global.js as well\n\nvar paddingVariables = ['--space-xxxxs', '--space-xxxs', '--space-xxs', '--space-xs', '--space-sm', '--space-md', '--space-lg', '--space-xl', '--space-xxl', '--space-xxxl', '--space-xxxxl'],\n    fibonacciSeq = [0.125, 0.25, 0.375, 0.5, 0.75, 1.25, 2, 3.25, 5.25, 8.5, 13.75],\n    prFourth = [0.237, 0.316, 0.422, 0.563, 0.75, 1, 1.333, 1.777, 2.369, 3.157, 4.21],\n    auFourth = [0.177, 0.25, 0.354, 0.5, 0.707, 1, 1.414, 1.999, 2.827, 3.998, 5.65],\n    prFifth = [0.133, 0.2, 0.296, 0.444, 0.667, 1, 1.5, 2.25, 3.375, 5.063, 7.59],\n    goldenRatio = [0.09, 0.146, 0.236, 0.382, 0.618, 1, 1.618, 2.618, 4.236, 6.854, 11.08],\n    spaceRatioUnit = [false, fibonacciSeq, prFourth, auFourth, prFifth, goldenRatio, ''];\nfunction getHSL(color) {\n  if (isNaN(color[0])) color[0] = 0;\n  return 'hsl(' + Math.round(color[0]) + ', ' + Math.round(color[1] * 100) + '%, ' + Math.round(color[2] * 100) + '%)';\n}\n;\nfunction getHSLA(color, opacity) {\n  if (isNaN(color[0])) color[0] = 0;\n  return 'hsla(' + Math.round(color[0]) + ', ' + Math.round(color[1] * 100) + '%, ' + Math.round(color[2] * 100) + '%, ' + parseFloat((Number(opacity) / 100).toFixed(2)) + ')';\n}\n;\nfunction setHSLAfromHSL(color, opacity) {\n  color = color.replace('hsl(', 'hsla(');\n  color = color.replace(')', ', ' + parseFloat((Number(opacity) / 100).toFixed(2)) + ')');\n  return color;\n}\n;\nfunction getHSLFromString(color) {\n  var array = color.replace('hsl(', '').replace(')', '').split(',');\n\n  if (array && array.length > 1) {\n    return [Number(array[0].trim()), parseFloat((array[1].trim().replace('%', '') / 100).toFixed(2)), parseFloat((array[2].trim().replace('%', '') / 100).toFixed(2))];\n  } else {\n    return '';\n  }\n}\n;\nfunction setCssVariable(variable, value, priority) {\n  var root = document.documentElement;\n\n  if (priority) {\n    root.style.setProperty(variable, value, priority);\n  } else {\n    root.style.setProperty(variable, value);\n  }\n}\n;\nfunction getCssVariable(variable) {\n  return getComputedStyle(document.documentElement).getPropertyValue(variable);\n}\n;\nfunction setBodyCssVariable(variable, value) {\n  var body = document.getElementsByTagName('body')[0];\n  body.style.setProperty(variable, value);\n}\n;\nfunction setElementCssVariable(className, variable, value) {\n  var element = document.getElementsByClassName(className);\n\n  if (element.length > 0) {\n    element[0].style.setProperty(variable, value);\n  }\n}\n;\nfunction windowScrollTo(val) {\n  window.scrollTo(0, val);\n}\n;\nfunction selectIframeSection(val) {\n  var section = $('[data-section=\"' + val + '\"]');\n  $('.cd-demo-item--selected').removeClass('cd-demo-item--selected');\n\n  if (section.length > 0) {\n    section.addClass('cd-demo-item--selected');\n\n    if ($('.cd-demo-color__list--selected').length > 0) {\n      $('.cd-demo-color__list--selected').removeClass('cd-demo-color__list--selected');\n      section.addClass('cd-demo-color__list--selected');\n    }\n\n    windowScrollTo(section.parent().offset().top - 20);\n  }\n}\n;\nfunction selectIframeTab(val) {\n  //remove the selection effect\n  $('.cd-demo-item--selected').removeClass('cd-demo-item--selected');\n  var section = $('[data-tab]');\n\n  if (section.length > 0) {\n    section.addClass('cd-demo-item--is-hidden');\n    section.filter('[data-tab=\"' + val + '\"]').removeClass('cd-demo-item--is-hidden');\n\n    if (val == 'tab-lh-crop') {\n      //lhcrop in typograpgy -> select --font-primary\n      selectIframeSection('--font-1');\n    }\n  }\n}\n;\nfunction getMq() {\n  var windowWidth = $(window).outerWidth(),\n      mq = 0,\n      string = ''; // check if you can get external document width\n\n  if (window.parent && window.parent.document && window.parent.document.body && window.parent.document.body.clientWidth) {\n    windowWidth = window.parent.document.body.clientWidth;\n  }\n\n  switch (true) {\n    case windowWidth >= 1440:\n      mq = 5;\n      string = 'Visible mq: > 1440px';\n      break;\n\n    case windowWidth >= 1280:\n      mq = 4;\n      string = 'Visible mq: > 1280px';\n      break;\n\n    case windowWidth >= 1024:\n      mq = 3;\n      string = 'Visible mq: > 1024px';\n      break;\n\n    case windowWidth >= 600:\n      mq = 2;\n      string = 'Visible mq: > 600px';\n      break;\n\n    case windowWidth >= 480:\n      mq = 1;\n      string = 'Visible mq: > 480px';\n      break;\n\n    default:\n      mq = 0;\n      string = 'None';\n  }\n\n  $('.js-width').text(string);\n  return mq;\n}\n;\nfunction getScreenSize() {\n  if (window.parent && window.parent.document && window.parent.document.body && window.parent.document.body.clientWidth) {\n    return [window.parent.document.body.clientWidth, $(window).outerHeight()];\n  } else {\n    return [$(window).outerWidth(), $(window).outerHeight()];\n  }\n}\n;\nfunction getValidResponsiveValue(spaceArray, index, subIndex) {\n  var item = subIndex !== false ? spaceArray[index][subIndex] : spaceArray[index];\n  if (index == 0) return item;\n\n  if (item !== false && item !== '') {\n    return item;\n  } else {\n    return getValidResponsiveValue(spaceArray, index - 1, subIndex);\n  }\n}\n;\nfunction getValueUnit(value) {\n  if (!value || value == '') return [false, false];\n  var number = parseFloat(value),\n      unit = value.replace(number, '');\n  return [number, unit];\n}\n;\nfunction getBodyNotFalse(array, mq) {\n  var newArray = [];\n\n  for (var i = 0; i < 3; i++) {\n    newArray[i] = getValidResponsiveValue(array, mq, i);\n  }\n\n  return newArray;\n}\n;\nvar projectLoaded = '';\nvar MQ = getMq();\nfunction loadGlobalsStyle(project) {\n  //for components -> load project style\n  if (project) {\n    $('.js-cd-demo').trigger('globalsUpdating');\n    projectLoaded = project;\n  }\n\n  if (project.colors && project.colors !== '' && Object.values) {\n    //colors were saved and need to be modified\n    console.log('TOTO');\n    loadColorStyle(JSON.parse(project.colors));\n  } else {\n    console.log('Tata');\n    loadColorDefaultStyle();\n  }\n\n  if (project.typography && project.typography !== '' && Object.values) {\n    //typography was saved and need to be modified\n    loadTypographyStyle(JSON.parse(decodeSafeURIComponent(project.typography)), true, MQ);\n  } else {\n    loadTypographyDefaultStyle(true, MQ);\n  } //do the same for the other globals\n\n\n  if (project.spacing && project.spacing !== '' && Object.values) {\n    loadSpacingStyle(JSON.parse(decodeSafeURIComponent(project.spacing)), MQ);\n  } else {\n    loadSpacingDefaultStyle(MQ);\n  }\n\n  if (project.buttons && project.buttons !== '' && Object.values) {\n    loadButtonsStyle(JSON.parse(decodeSafeURIComponent(project.buttons)), MQ);\n  } else {\n    loadButtonsDefaultStyle(MQ);\n  }\n\n  if (project.form && project.form !== '' && Object.values) {\n    loadFormsStyle(JSON.parse(decodeSafeURIComponent(project.form)), MQ);\n  } else {\n    loadFormsDefaultStyle(MQ);\n  } //if you need to update style on resize\n\n\n  if (project) {\n    $('.js-cd-demo').trigger('globalsUpdate');\n  }\n\n  $('.js-cd-demo').trigger('showComponent');\n}\n;\nfunction loadColorStyle(colors) {\n  //no need to do this for custom opacities as only default one are used in components\n  var variations = ['-lighter', '-light', '', '-dark', '-darker'];\n  btnColorLabels = Object.values(colors['mainColorLabels']);\n  btnColorCustomNiceLabels = colors['customColorLabels'] ? Object.values(colors['customColorLabels']) : [];\n  btnGradientsCustomNiceLabels = colors['gradientColorLabels'] ? Object.values(colors['gradientColorLabels']) : []; //set main colors - including custom colors as well\n\n  for (var i = 0; i < btnColorLabels.length; i++) {\n    var cssVarLab = i > 4 ? btnColorCustomNiceLabels[i - 5] : '--color-' + btnColorLabels[i];\n\n    for (var j = 0; j < variations.length; j++) {\n      setCssVariable(cssVarLab + variations[j], getHSL(Object.values(colors[btnColorLabels[i]][0][j])));\n      setColorPartVariables(cssVarLab + variations[j], Object.values(colors[btnColorLabels[i]][0][j]));\n    }\n  } //set black & white\n\n\n  var bVariations = ['', '-light', '-lighter'],\n      blackArray = getBWArray(colors['blackColors'][0]),\n      whiteArray = getBWArray(colors['whiteColors'][0]);\n\n  for (var i = 0; i < blackArray.length; i++) {\n    setCssVariable('--color-black' + bVariations[i], getHSL(blackArray[i]));\n    setColorPartVariables('--color-black' + bVariations[i], blackArray[i]);\n  }\n\n  var wVariations = ['', '-dark', '-darker'];\n\n  for (var i = 0; i < whiteArray.length; i++) {\n    setCssVariable('--color-white' + wVariations[i], getHSL(whiteArray[i]));\n    setColorPartVariables('--color-white' + wVariations[i], whiteArray[i]);\n  } //set contrasts\n\n\n  var contrastLabels = ['-bg', '-contrast-lower', '-contrast-low', '-contrast-medium', '-contrast-high', '-contrast-higher'];\n\n  for (var i = 0; i < contrastLabels.length; i++) {\n    setCssVariable('--color' + contrastLabels[i], getHSL(Object.values(colors['contrastColors'][0][i])));\n    setColorPartVariables('--color' + contrastLabels[i], Object.values(colors['contrastColors'][0][i]));\n  } // set gradients\n\n\n  for (var i = 0; i < btnGradientsCustomNiceLabels.length; i++) {\n    var cssVarLab = '--gradient-' + btnGradientsCustomNiceLabels[i],\n        gradientId = colors['gradientColorIds'][i] + 'Gradients';\n    setCssVariable(cssVarLab + '-stop-1', getHSL(Object.values(colors[gradientId][0][0])));\n    setColorPartVariables(cssVarLab + '-stop-1', Object.values(colors[gradientId][0][0]));\n    setCssVariable(cssVarLab + '-stop-2', getHSL(Object.values(colors[gradientId][0][1])));\n    setColorPartVariables(cssVarLab + '-stop-2', Object.values(colors[gradientId][0][1]));\n  } //font rendering\n\n\n  var fontRenderingCode = '';\n\n  if (colors['fontRendering'] && colors['fontRendering'][0]) {\n    if (Number(colors['fontRendering'][0]) == 1) fontRenderingCode = 'body{-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}';else if (Number(colors['fontRendering'][0]) == 2) fontRenderingCode = 'body{-webkit-font-smoothing: auto;-moz-osx-font-smoothing: auto;}';\n  }\n\n  var style = '<style id=\"font-rendering-style\">' + fontRenderingCode + '</style>';\n  $('#font-rendering-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\n;\nfunction loadColorDefaultStyle() {\n  // colors array\n  var defaultColors = [['--color-primary-darker', [204, 70, 33]], ['--color-primary-dark', [204, 70, 43]], ['--color-primary', [204, 70, 53]], ['--color-primary-light', [204, 70, 63]], ['--color-primary-lighter', [204, 70, 73]], ['--color-accent-darker', [282, 44, 27]], ['--color-accent-dark', [282, 44, 37]], ['--color-accent', [282, 44, 47]], ['--color-accent-light', [282, 44, 57]], ['--color-accent-lighter', [282, 44, 67]], ['--color-download-darker', [145, 63, 22]], ['--color-download-dark', [145, 63, 32]], ['--color-download', [145, 63, 42]], ['--color-download-light', [145, 63, 52]], ['--color-download-lighter', [145, 63, 62]], ['--color-black', [240, 8, 12]], ['--color-white', [0, 0, 100]], ['--color-warning-darker', [46, 68, 29]], ['--color-warning-dark', [46, 68, 39]], ['--color-warning', [46, 68, 49]], ['--color-warning-light', [46, 68, 59]], ['--color-warning-lighter', [46, 68, 69]], ['--color-success-darker', [94, 48, 20]], ['--color-success-dark', [94, 48, 30]], ['--color-success', [94, 48, 40]], ['--color-success-light', [94, 48, 50]], ['--color-success-lighter', [94, 48, 60]], ['--color-error-darker', [6, 63, 26]], ['--color-error-dark', [6, 63, 36]], ['--color-error', [6, 63, 46]], ['--color-error-light', [6, 63, 56]], ['--color-error-lighter', [6, 63, 66]], ['--color-info-darker', [204, 62, 27]], ['--color-info-dark', [204, 62, 37]], ['--color-info', [204, 62, 47]], ['--color-info-light', [204, 62, 57]], ['--color-info-lighter', [204, 62, 67]], ['--color-bg', [220, 5, 22]], ['--color-contrast-lower', [216, 4, 25]], ['--color-contrast-low', [220, 3, 34]], ['--color-contrast-medium', [220, 2, 63]], ['--color-contrast-high', [180, 2, 90]], ['--color-contrast-higher', [0, 0, 100]]];\n\n  for (var i = 0; i < defaultColors.length; i++) {\n    setCssVariable(defaultColors[i][0], getHSL(defaultColors[i][1]));\n    setColorPartVariables(defaultColors[i][0], defaultColors[i][1]);\n  }\n}\n;\nfunction setColorPartVariables(label, colorArray) {\n  setCssVariable(label + '-h', Math.round(colorArray[0]));\n  setCssVariable(label + '-s', Math.round(colorArray[1] * 100) + '%');\n  setCssVariable(label + '-l', Math.round(colorArray[2] * 100) + '%');\n}\n;\nfunction getBWArray(obj) {\n  var array = [];\n\n  for (var property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      array.push(Object.values(obj[property]));\n    }\n  }\n\n  return array;\n}\n;\nfunction loadTypographyStyle(typography, bool, mq) {\n  if (bool) {\n    //not responsive things\n    if (typography['fontCode'] && typography != '') $(typography['fontCode']).appendTo($('head'));\n\n    for (var property in typography['fontFamilies']) {\n      if (typography['fontFamilies'].hasOwnProperty(property) && typography['fontFamilyLabels'].hasOwnProperty(property)) {\n        setBodyCssVariable(typography['fontFamilyLabels'][property], typography['fontFamilies'][property]);\n      }\n    }\n\n    if (typography['lhCropCapitalLetter']) {\n      var lhcropArray = Object.values(typography['lhCropCapitalLetter']);\n      if (lhcropArray.length > 0) setCssVariable('--font-primary-capital-letter', lhcropArray[0]);\n    }\n\n    fontArray = [''];\n    btnFontIds = [0];\n\n    for (var property in typography['fontFamilyLabels']) {\n      if (typography['fontFamilyLabels'].hasOwnProperty(property)) {\n        fontArray.push(typography['fontFamilyLabels'][property]);\n        btnFontIds.push(typography['fontFamilyIds'][property]);\n      }\n    }\n  } //body/heading style\n\n\n  var headingValues = getBodyNotFalse(getTypographyArray(typography['headingInfo']), mq),\n      bodyValues = getBodyNotFalse(getTypographyArray(typography['bodyInfo']), mq);\n  var textVariables = 'root, *{--text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));}';\n  loadTypographyStyleTag(textVariables + getTypographyStyle(headingValues, 'h1, h2, h3, h4', typography) + getTypographyStyle(bodyValues, 'body', typography));\n  setTypographyCssVariables(headingValues, bodyValues, typography, mq);\n}\n;\nfunction loadTypographyDefaultStyle(bool, mq) {\n  // set variables - get values for --text-base-size and --text-scale-ratio\n  var bodyStyle = '--font-primary: Inter, system-ui, sans-serif;--text-base-size: 1em;--text-scale-ratio: 1.2;--text-unit: 1em;--body-line-height: 1.4;--heading-line-height: 1.2;--font-primary-capital-letter: 1;',\n      allStyle = ' --text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));';\n  bodyStyle = ':root{' + bodyStyle + '}';\n  allStyle = ':root, *{' + allStyle + '}';\n  var bodyResStyle = '@media (min-width:64rem){:root{--text-base-size: 1.25em;--text-scale-ratio: 1.25;}}';\n  var headingStyle = 'h1, h2, h3, h4 {font-family: var(--font-primary);font-weight: 700;}';\n  loadTypographyStyleTag(bodyStyle + allStyle + headingStyle + bodyResStyle); // append font link\n\n  var fontLink = '<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">';\n  var typographyStyle = $('#typography-style');\n  $(fontLink).insertAfter(typographyStyle);\n}\n;\nfunction loadTypographyStyleTag(styleContent) {\n  var defaultStyle = 'mark {background-color: hsla(var(--color-accent-h), var(--color-accent-s), var(--color-accent-l), 0.2);color: inherit;}.text-component {--line-height-multiplier: 1;--text-vspace-multiplier: 1;}.text-component blockquote {padding-left: 1em;border-left: 4px solid var(--color-contrast-low);}.text-component hr {background: var(--color-contrast-low);height: 1px;}.text-component figcaption {font-size: var(--text-sm);color: var(--color-contrast-medium);}.article {--body-line-height: 1.58;--text-vspace-multiplier: 1.2;}';\n  var style = '<style id=\"typography-style\">' + styleContent + defaultStyle + '</style>';\n  $('#typography-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\nfunction loadTypographyCssVarStyleGuide(typography) {\n  var code = ':root {'; // font family definition\n\n  var fontFamilies = '',\n      fontFamilyClasses = '';\n  var scale = '';\n  var textVariables = '';\n  var scaleResponsive = '';\n\n  if (typography['fontFamilies'] && typography['fontFamilyLabels']) {\n    for (var i = 0; i < typography['fontFamilies'].length; i++) {\n      if (typography['fontFamilyLabels'][i]) {\n        fontFamilies = fontFamilies + typography['fontFamilyLabels'][i] + ': ' + typography['fontFamilies'][i] + ';';\n        fontFamilyClasses = fontFamilyClasses + typography['fontFamilyLabels'][i].replace('--', '.') + '{font-family: var(' + typography['fontFamilyLabels'][i] + ');}';\n      }\n    }\n  }\n\n  code = code + fontFamilies;\n\n  if (typography['baseSize'] && typography['scaleRatio'] && typography['bodyInfo'] && typography['headingInfo']) {\n    scale = getTypographyScaleVar(typography, 0);\n    scaleResponsive = getTypographyScaleVarRes(typography);\n    textVariables = 'root, * {--text-xs: calc((var(--text-unit) / var(--text-scale-ratio)) / var(--text-scale-ratio));--text-sm: calc(var(--text-xs) * var(--text-scale-ratio));--text-md: calc(var(--text-sm) * var(--text-scale-ratio) * var(--text-scale-ratio));--text-lg: calc(var(--text-md) * var(--text-scale-ratio));--text-xl: calc(var(--text-lg) * var(--text-scale-ratio));--text-xxl: calc(var(--text-xl) * var(--text-scale-ratio));--text-xxxl: calc(var(--text-xxl) * var(--text-scale-ratio));--text-xxxxl: calc(var(--text-xxxl) * var(--text-scale-ratio));}';\n  }\n\n  code = code + scale + '}' + textVariables + scaleResponsive + fontFamilyClasses;\n  return code;\n}\n;\nfunction loadTypographyStyleStyleGuide(typography) {\n  var mq = ['', '32rem', '48rem', '64rem', '80rem', '90rem'];\n  var code = '';\n\n  if (typography['bodyInfo'] && typography['headingInfo']) {\n    for (var i = 0; i < mq.length; i++) {\n      var style = '';\n\n      if (typography['bodyInfo'][i]) {\n        var bodyStyle = getTypographyStyle(typography['bodyInfo'][i], 'body', typography);\n        style = i > 0 ? style + '@media (min-width:' + mq[i] + ') {' + bodyStyle + '}' : style + bodyStyle;\n      }\n\n      if (typography['headingInfo'][i]) {\n        var headingStyle = getTypographyStyle(typography['headingInfo'][i], 'h1, h2, h3, h4', typography);\n        style = i > 0 ? style + '@media (min-width:' + mq[i] + ') {' + headingStyle + '}' : style + headingStyle;\n      }\n\n      code = code + style;\n    }\n  }\n\n  return code;\n}\n;\nfunction getTypographyScaleVar(typography, index) {\n  var code = '';\n  if (typography['baseSize'][index]) code = code + '--text-base-size: ' + typography['baseSize'][index] + ';';\n  if (typography['scaleRatio'][index]) code = code + '--text-scale-ratio: ' + typography['scaleRatio'][index] + ';';\n  if (typography['bodyInfo'][index] && typography['bodyInfo'][index][2]) code = code + '--body-line-height: ' + typography['bodyInfo'][index][2] + ';';\n  if (typography['headingInfo'][index] && typography['headingInfo'][index][2]) code = code + '--heading-line-height: ' + typography['headingInfo'][index][2] + ';';\n  if (index == 0) code = code + '--text-unit: ' + getTextUnit(typography);\n  return code;\n}\nfunction getTextUnit(typography) {\n  var textUnit = '1em';\n  if (typography['baseSize'][0] && (typography['baseSize'][0].indexOf('px') > -1 || typography['baseSize'][0].indexOf('rem') > -1)) textUnit = 'var(--text-base-size)';\n  return textUnit;\n}\n;\nfunction getTypographyScaleVarRes(typography) {\n  var mq = ['', '32rem', '48rem', '64rem', '80rem', '90rem'];\n  var code = '';\n\n  for (var i = 1; i < mq.length; i++) {\n    code = code + '@media (min-width:' + mq[i] + ') {:root{' + getTypographyScaleVar(typography, i) + '}}';\n  }\n\n  return code;\n}\nfunction loadSpacingStyle(spacing, mq) {\n  var spaceUnit = getValidResponsiveValue(Object.values(spacing['spaceUnit']), mq, false),\n      spaceRatioCustom = getSpaceRatioCustom(spacing['customSpaceRatio']); // var srList = getSpacingValues(Object.values(spacing['spaceRatio']), spaceUnit, mq, spaceRatioCustom),\n  // this will return only the list of the multiplier (not including the --space-unit)\n\n  var srList = getSpacingMultiplier(Object.values(spacing['spaceRatio']), mq, spaceRatioCustom),\n      paddingVariable = srList[getValidResponsiveValue(Object.values(spacing['padding']), mq, false) - 1];\n  updateSpacingCssVariables(srList, paddingVariable, spaceUnit);\n}\n;\nfunction loadSpacingDefaultStyle(mq) {\n  var responsiveSpacing = '@media (min-width:64rem){:root{--space-unit:  1.25em;}}'; // var style = '<style id=\"spacing-style\">'+responsiveSpacing+'</style>';\n  // $('#spacing-style').remove();\n  // var baseStyle = $('#cd-base-part-1');\n  // $(style).insertAfter(baseStyle);\n  // load after component style -> this will need to overwrite the default spacing style\n  // $('head').append(style);\n\n  loadSpacingStyleTag(responsiveSpacing);\n}\n;\nfunction loadSpacingStyleTag(style) {\n  var style = '<style id=\"spacing-style\">' + style + '</style>';\n  $('#spacing-style').remove();\n  var baseStyle = $('#cd-base-part-1');\n  $(style).insertAfter(baseStyle);\n}\n;\nfunction setTypographyCssVariables(headingValues, bodyValues, typography, mq) {\n  //css variables\n  if (headingValues[2] && headingValues[2] != '') {\n    setCssVariable('--heading-line-height', headingValues[2]); // setElementCssVariable('text-component', '--heading-line-height', headingValues[2]);\n  }\n\n  if (bodyValues[2] && bodyValues[2] != '') {\n    setCssVariable('--body-line-height', bodyValues[2]); // setElementCssVariable('text-component', '--body-line-height', bodyValues[2]);\n  }\n\n  setCssVariable('--text-base-size', getValidResponsiveValue(Object.values(typography['baseSize']), mq, false));\n  setCssVariable('--text-scale-ratio', getValidResponsiveValue(Object.values(typography['scaleRatio']), mq, false));\n  setCssVariable('--text-unit', getTextUnit(typography));\n}\n;\nfunction getTypographyArray(obj) {\n  var arr = [];\n\n  for (var i = 0; i < 6; i++) {\n    arr.push(Object.values(obj[i]));\n  }\n\n  return arr;\n}\n;\nfunction getTypographyStyle(array, selector, typography) {\n  var style = '';\n\n  if (parseInt(array[0]) && parseInt(array[0]) != 0) {\n    var fontIds = Object.values(typography['fontFamilyIds']); // importantCss = selector == 'body' ? '!important' : '';\n\n    style = style + 'font-family: ' + typography['fontFamilies'][fontIds.indexOf(parseInt(array[0]))] + ';';\n  }\n\n  if (array[1] && array[1] != '') style = style + 'font-weight: ' + array[1] + ';';\n  return selector + '{' + style + '}';\n}\n; // export function updateSpacingCssVariables(list, padding, spaceUnit) {\n// \tsetCssVariable('--space-unit', spaceUnit);\n// \tsetCssVariable('--component-padding', padding);\n// \tfor(var i = 0; i < list.length; i++) {\n// \t\tsetCssVariable(paddingVariables[i], list[i]);\n// \t}\n// };\n\nfunction updateSpacingCssVariables(list, padding, spaceUnit) {\n  setCssVariable('--space-unit', spaceUnit);\n  var spacingVariables = '--component-padding:' + 'calc(' + padding + ' * var(--space-unit));';\n\n  for (var i = 0; i < list.length; i++) {\n    spacingVariables = spacingVariables + paddingVariables[i] + ': calc(' + list[i] + ' * var(--space-unit));';\n  }\n\n  spacingVariables = 'root, *{' + spacingVariables + '}';\n  loadSpacingStyleTag(spacingVariables);\n}\n;\nfunction getSpacingValues(spaceRatio, su, mq, spaceRatioCustom) {\n  var list = spaceRatioUnit[getValidResponsiveValue(spaceRatio, mq, false)];\n\n  if (list == '') {\n    //custom scale\n    list = getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio);\n  }\n\n  var spaceList = [];\n  var suArray = getValueUnit(su);\n\n  if (suArray[0] === false) {\n    suArray[0] = 1;\n    suArray[1] = 'em';\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    var updated = Math.round(list[i] * suArray[0] * 1000) / 1000;\n    spaceList.push(updated + suArray[1]);\n  }\n\n  return spaceList;\n}\n;\nfunction getSpacingMultiplier(spaceRatio, mq, spaceRatioCustom) {\n  var list = spaceRatioUnit[getValidResponsiveValue(spaceRatio, mq, false)];\n\n  if (list == '') {\n    //custom scale\n    list = getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio);\n  }\n\n  return list;\n}\n;\nfunction getSpacingCustomScaleRatio(mq, spaceRatioCustom, spaceRatio) {\n  var array = [];\n\n  for (var i = 0; i < spaceRatioUnit[1].length; i++) {\n    array[i] = getSpacingValidResponsiveValueCustomRatio(spaceRatioCustom[i], mq, spaceRatio);\n  }\n\n  return array;\n}\n;\nfunction getSpacingValidResponsiveValueCustomRatio(spaceArray, index, spaceRatio) {\n  if (index == 0) return spaceArray[0];\n  var item = spaceArray[index];\n\n  if (item !== false && item !== '' && spaceRatio[index] == 6) {\n    //item defined and space ratio set to custom\n    return item;\n  } else {\n    return getSpacingValidResponsiveValueCustomRatio(spaceArray, index - 1, spaceRatio);\n  }\n}\n;\nfunction getSpaceRatioCustom(obj) {\n  var arr = [];\n\n  for (var i = 0; i < 11; i++) {\n    arr.push(Object.values(obj[i]));\n  }\n\n  return arr;\n}\n;\nfunction loadButtonsStyle(buttons) {\n  //convert obj to array;\n  var buttonsArray = getButtonsArrayStyle(buttons['style']);\n  var btnsList = ['btn', 'btn--primary', 'btn--subtle', 'btn--accent', 'btn--disabled', 'btn--sm', 'btn--md', 'btn--lg'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      code = '';\n\n  for (var i = 0; i < btnsList.length; i++) {\n    code = code + buttonsCodeStyle(buttonsArray[btnsList[i]], btnsList[i], statusList, statusPriorityList, false, true);\n  } // get code for btn--icon\n\n\n  var btnIconCode = buttonIconCodeStyle(buttonsArray['btn']); // get code for button variables\n\n  var btnVariables = buttonVariables(buttonsArray);\n  loadButtonsStyleTag(btnVariables + code + btnIconCode);\n}\n;\nfunction loadButtonsStyleStyleGuide(buttons) {\n  // buttonsArray = buttons['btnStyle']\n  if (!buttons['btnStyle']) return '';\n  var buttonsArray = buttons['btnStyle']; // button-icon class\n\n  var btnIconCode = '';\n\n  if (buttonsArray['btn']) {\n    btnIconCode = buttonIconCodeStyle(buttonsArray['btn']);\n  } // button CSS variables\n\n\n  var btnVariables = buttonVariables(buttonsArray); // buttons style\n\n  var btnsList = ['btn', 'btn--primary', 'btn--subtle', 'btn--accent', 'btn--disabled', 'btn--sm', 'btn--md', 'btn--lg'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      btnStyle = ''; // default btns style\n\n  for (var i = 0; i < btnsList.length; i++) {\n    btnStyle = btnStyle + buttonsCodeStyle(buttonsArray[btnsList[i]], btnsList[i], statusList, statusPriorityList, false, true);\n  } // custom btns code\n\n\n  if (buttons['customBtns'] && buttons['customBtns'].length > 0) {\n    for (var i = 0; i < buttons['customBtns'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(buttonsArray[buttons['customBtns'][i][1]], buttons['customBtns'][i][0], statusList, statusPriorityList, false, true);\n    }\n  }\n\n  return btnVariables + btnStyle + btnIconCode;\n}\n;\nfunction loadSharedStyleStyleGuide(shared_style) {\n  var statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      btnStyle = '';\n\n  if (shared_style['customStyles'] && shared_style['customStyles'].length > 0) {\n    for (var i = 0; i < shared_style['customStyles'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(shared_style.customStyleArray[shared_style['customStyles'][i][1]], escapeCSScharacters(shared_style['customStyles'][i][0]), statusList, statusPriorityList, false);\n    }\n  }\n\n  if (shared_style['customTextStyles'] && shared_style['customTextStyles'].length > 0) {\n    for (var i = 0; i < shared_style['customTextStyles'].length; i++) {\n      btnStyle = btnStyle + buttonsCodeStyle(shared_style.customTextStyleArray[shared_style['customTextStyles'][i][1]], escapeCSScharacters(shared_style['customTextStyles'][i][0]), statusList, statusPriorityList, false);\n    }\n  }\n\n  return btnStyle;\n}\n;\nfunction escapeCSScharacters(label) {\n  label = label.replace(/\\:/g, '\\\\:');\n  label = label.replace(/\\%/g, '\\\\%');\n  label = label.replace(/\\//g, '\\\\/');\n  return label;\n}\n;\nfunction loadButtonsDefaultStyle(mq) {\n  var btnsStyle = ':root {--btn-font-size: 1em;--btn-padding-x: var(--space-sm); --btn-padding-y: var(--space-xxs); -btn-radius: 0.25em;}.btn {line-height: 1.2;box-shadow: var(--shadow-xs);-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;transition: .2s; will-change: transform;}.btn:hover {cursor: pointer;box-shadow: var(--shadow-sm);}.btn:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-contrast-higher-h), var(--color-contrast-higher-s), var(--color-contrast-higher-l), 0.15);outline: none;}.btn:active {transform: translateY(2px);}.btn--primary {background-color: var(--color-primary);color: var(--color-white)}.btn--primary:hover {background-color: var(--color-primary-dark);}.btn--primary:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-primary-h), var(--color-primary-s), var(--color-primary-l), 0.2);}.btn--subtle {background-color: var(--color-contrast-lower);color: var(--color-contrast-higher);}.btn--accent {background-color: var(--color-accent);color: var(--color-white);}.btn--accent:hover {background-color: var(--color-accent-dark);}.btn--accent:focus {box-shadow: 0px 0px 0px 2px hsla(var(--color-accent-h), var(--color-accent-s), var(--color-accent-l), 0.2);}.btn--disabled, .btn[disabled], .btn[readonly] {opacity: 0.6;cursor: not-allowed;}.btn--sm{font-size: 0.8em;}.btn--md{font-size: 1.2em;}.btn--lg{font-size: 1.4em;}';\n  loadButtonsStyleTag(btnsStyle);\n}\n;\nfunction buttonVariables(btnStyle) {\n  var sizes = [['btn', ''], ['btn--sm', '-sm'], ['btn--md', '-md'], ['btn--lg', '-lg']];\n  var string = '';\n\n  for (var i = 0; i < sizes.length; i++) {\n    if (btnStyle[sizes[i][0]] && btnStyle[sizes[i][0]]['none'] && btnStyle[sizes[i][0]]['none']['typography']) {\n      var fontBase = getButtonsFontSizeValue(btnStyle[sizes[i][0]]['none']['typography']);\n      if (fontBase != '') string = string + '--btn-font-size' + sizes[i][1] + ':' + fontBase + ';';\n    }\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['padding'] && btnStyle['btn']['none']['padding'][1]) {\n    string = string + '--btn-padding-x:' + getButtonsPaddingValue(btnStyle['btn']['none']['padding'][1]) + ';';\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['padding'] && btnStyle['btn']['none']['padding'][0]) {\n    string = string + '--btn-padding-y:' + getButtonsPaddingValue(btnStyle['btn']['none']['padding'][0]) + ';';\n  }\n\n  if (btnStyle['btn'] && btnStyle['btn']['none'] && btnStyle['btn']['none']['appearance']) {\n    if (btnStyle['btn']['none']['appearance'][2]) {\n      string = string + '--btn-radius:' + btnStyle['btn']['none']['appearance'][2] + ';';\n    } else {\n      string = string + '--btn-radius: 0em;';\n    }\n  }\n\n  return ':root{' + string + '}';\n}\n;\nfunction loadButtonsStyleTag(style) {\n  var styleEl = '<style id=\"buttons-style\">' + style + '</style>';\n  var baseStyle = $('#cd-base-part-1');\n  $(styleEl).insertAfter(baseStyle); // $('head').append(styleEl);\n}\n;\nfunction loadFormsStyle(forms) {\n  var formsArray = getButtonsArrayStyle(forms['style']);\n  var formsList = ['form-control', '[disabled]', '[aria-invalid]', 'legend', 'form-label'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      code = '';\n  code = resetFormsStyleComponents();\n\n  for (var i = 0; i < formsList.length; i++) {\n    code = code + buttonsCodeStyle(formsArray[formsList[i]], formsList[i], statusList, statusPriorityList, true);\n  } // get code for form variables\n\n\n  var btnVariables = formVariables(formsArray['form-control']);\n  loadFormsStyleTag(btnVariables + code);\n}\n;\nfunction loadFormsStyleStyleGuide(form) {\n  // form elements style\n  if (!form['btnStyle']) return '';\n  var formsArray = form['btnStyle'];\n  var formsList = ['form-control', '[disabled]', '[aria-invalid]', 'legend', 'form-label'],\n      statusList = ['none', ':active', ':hover', ':focus'],\n      statusPriorityList = ['none', ':hover', ':focus', ':active'],\n      formStyle = '';\n\n  for (var i = 0; i < formsList.length; i++) {\n    formStyle = formStyle + buttonsCodeStyle(formsArray[formsList[i]], formsList[i], statusList, statusPriorityList, true);\n  } // get code for form variables\n\n\n  var formCSSVariables = formVariables(formsArray['form-control']);\n  return formStyle + formCSSVariables;\n}\n;\nfunction formVariables(formStyle) {\n  var string = '';\n\n  if (formStyle && formStyle['none'] && formStyle['none']['padding'] && formStyle['none']['padding'][1]) {\n    string = string + '--form-control-padding-x:' + getButtonsPaddingValue(formStyle['none']['padding'][1]) + ';';\n  }\n\n  if (formStyle && formStyle['none'] && formStyle['none']['padding'] && formStyle['none']['padding'][0]) {\n    string = string + '--form-control-padding-y:' + getButtonsPaddingValue(formStyle['none']['padding'][0]) + ';';\n  }\n\n  if (formStyle && formStyle['none'] && formStyle['none']['appearance']) {\n    if (formStyle['none']['appearance'][2]) {\n      string = string + '--form-control-radius:' + formStyle['none']['appearance'][2] + ';';\n    } else {\n      string = string + '--form-control-radius: 0em;';\n    }\n  }\n\n  return ':root{' + string + '}';\n}\n;\nfunction loadFormsDefaultStyle(mq) {\n  var formStyle = ':root {--form-control-padding-x: var(--space-xs);--form-control-padding-y: var(--space-xxs);--form-control-radius: 0.25em;}.form-control {line-height: 1.2;background-color: var(--color-bg);border: 2px solid var(--color-contrast-low);transition: 0.2s;}.form-control:focus {border-color: var(--color-primary);box-shadow: 0px 0px 0px 2px hsla(var(--color-primary-h), var(--color-primary-s),var(--color-primary-l), 0.2);outline: none;}.form-control[aria-invalid=\"true\"], .form-control--error {border-color: var(--color-error);}.form-control[aria-invalid=\"true\"]:focus, .form-control--error:focus {border-color: var(--color-error);box-shadow: 0px 0px 0px 2px hsla(var(--color-error-h), var(--color-error-s),var(--color-error-l), 0.2);}.form-control--disabled, .form-control[disabled], .form-control[readonly] {cursor: not-allowed;}.form-label {font-size: var(--text-sm);}.form-legend{font-size: var(--text-md);}';\n  formStyle = formStyle + '.form-control::placeholder{opacity: 1;color: var(--color-contrast-medium);}';\n  loadFormsStyleTag(formStyle);\n}\n;\nfunction loadFormsStyleTag(style) {\n  var defaultStyle = '.form-error-msg {background-color: hsla(var(--color-error-h),var(--color-error-s), var(--color-error-l), 0.2);color: inherit;border-radius: var(--radius-md);padding: var(--space-xs);}';\n  var styleEl = '<style id=\"forms-style\">' + style + defaultStyle + '</style>';\n  var baseStyle = $('#cd-base-part-1');\n  $(styleEl).insertAfter(baseStyle); // $('head').append(styleEl);\n}\n;\nfunction boxShadowIsDefined(array) {\n  return array && array[0] && array[0][1] && array[0][1] != '';\n}\n;\nfunction getButtonsArrayStyle(obj) {\n  var array = [];\n\n  for (var property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      array[property] = [];\n\n      for (var subproperty in obj[property]) {\n        if (obj[property].hasOwnProperty(subproperty)) {\n          array[property][subproperty] = [];\n\n          for (var val in obj[property][subproperty]) {\n            if (obj[property][subproperty].hasOwnProperty(val)) {\n              if (val == 'border' || val == 'textShadow' || val == 'shadow' || val == 'transform' || val == 'transition') {\n                array[property][subproperty][val] = [];\n\n                for (var subVal in obj[property][subproperty][val]) {\n                  if (obj[property][subproperty][val].hasOwnProperty(subVal)) {\n                    array[property][subproperty][val][subVal] = Object.values(obj[property][subproperty][val][subVal]);\n                  }\n                }\n              } else {\n                array[property][subproperty][val] = Object.values(obj[property][subproperty][val]);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return array;\n}\n;\nfunction buttonsCodeStyle(style, btnLabel, statusList, statusPriorityList, isDemoReset, isButton) {\n  var string = '';\n  if (!style) return string;\n  var btnLabelmodified = btnLabel;\n\n  if (btnLabel == '[disabled]') {\n    btnLabelmodified = 'form-control--disabled, .form-control[disabled], .form-control[readonly]';\n  } else if (btnLabel == '[aria-invalid]') {\n    btnLabelmodified = 'form-control[aria-invalid=\"true\"], .form-control--error';\n  } else if (btnLabel == 'legend') {\n    btnLabelmodified = 'form-legend';\n  } else if (btnLabel == 'btn--disabled') {\n    btnLabelmodified = 'btn--disabled, .btn[disabled], .btn[readonly]';\n  }\n\n  var btnHasTransform = isButton && buttonsHasTransformStyle(style, statusPriorityList);\n\n  for (var i = 0; i < statusPriorityList.length; i++) {\n    var styleLabel = i == 0 ? '.' + btnLabelmodified : setStatusList('.' + btnLabelmodified, statusPriorityList[i]);\n    var newCode = getButtonCode(style[statusPriorityList[i]], '', true, btnLabel, statusPriorityList[i], isDemoReset, btnHasTransform && i == 0);\n    newCode = newCode.trim();\n\n    if (newCode.slice(-1) == '}') {\n      string = string + styleLabel + '{' + newCode;\n    } else {\n      string = string + styleLabel + '{' + newCode + '}';\n    }\n  }\n\n  string = string.replace(/\\n/g, '');\n  return string;\n}\n;\nfunction setStatusList(label, status) {\n  // e.g., if label = '.form-control[aria-invalid=\"true\"], .form-control--error' and status = ':focus', return '.form-control[aria-invalid=\"true\"]:focus, .form-control--error:focus'\n  var labelArray = label.split(',');\n\n  if (labelArray.length == 1) {\n    return label + status;\n  } else {\n    var newLabel = '';\n\n    for (var i = 0; i < labelArray.length; i++) {\n      if (i > 0) newLabel = newLabel + ',';\n      newLabel = newLabel + labelArray[i] + status;\n    }\n\n    return newLabel;\n  }\n}\n;\nfunction buttonIconCodeStyle(btnStyle) {\n  var code = '';\n\n  if (btnStyle && btnStyle['none'] && btnStyle['none']['padding'] && btnStyle['none']['padding'][0] && btnStyle['none']['padding'][0] != 0) {\n    code = '.btn--icon {padding: ' + spacingArray[btnStyle['none']['padding'][0]] + ';}';\n  }\n\n  return code;\n}\n;\nfunction buttonsHasTransformStyle(style, priorityList) {\n  var hasTransform = false;\n\n  for (var i = 1; i < priorityList.length; i++) {\n    if (!style[priorityList[i]]) return;\n    var transform = style[priorityList[i]]['transform'];\n\n    if (transform.length > 1 || transform.length > 0 && transform[0][0] != 0) {\n      hasTransform = true;\n      break;\n    }\n  }\n\n  return hasTransform;\n}\n;\nfunction getButtonCode(array, spacing, reset, btnLabel, btnStatus, isDemoReset, btnHasTransform) {\n  var string = '';\n\n  for (var property in array) {\n    switch (property) {\n      case 'appearance':\n        string = string + getButtonsAppearanceStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'padding':\n        string = string + getButtonsPaddingStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'margin':\n        string = string + getButtonsMarginStyle(array[property], spacing, reset);\n        break;\n\n      case 'border':\n        string = string + getButtonsBorderStyle(array[property], spacing, reset);\n        break;\n\n      case 'typography':\n        string = string + getButtonsTypographyStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n\n      case 'textShadow':\n        string = string + getButtonsTextShadowStyle(array[property], spacing, reset);\n        break;\n\n      case 'shadow':\n        string = string + getButtonsShadowStyle(array[property], spacing, reset, isDemoReset);\n        break;\n\n      case 'outline':\n        string = string + getButtonsOutlineStyle(array[property], spacing, reset);\n        break;\n\n      case 'transform':\n        string = string + getButtonsTransformStyle(array[property], spacing, reset);\n        break;\n\n      case 'transition':\n        string = string + getButtonsTransitionStyle(array[property], spacing, reset);\n        break;\n\n      case 'placeholder':\n        string = string + getButtonsPlaceholderStyle(array[property], spacing, reset, btnLabel, btnStatus);\n        break;\n    }\n  }\n\n  if (btnHasTransform) string = string + '\\n' + spacing + 'will-change: transform;';\n  return string;\n}\n;\nfunction getButtonsAppearanceStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n\n  if (array[0]) {\n    if (array[0].indexOf('--gradient-') > -1) {\n      string = string + '\\n' + spacing + getGradientBgStyle(array[0]);\n    } else {\n      string = string + '\\n' + spacing + 'background: ' + getColorValue(array[0], reset) + ';';\n    }\n  }\n\n  if (array[1]) string = string + '\\n' + spacing + 'color: ' + getColorValue(array[1], reset) + ';';\n\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {// for copy code -> no need to add border-radius in code -> css variables already set\n  } else {\n    if (array[7] && array[7] > 0) {\n      string = string + '\\n' + spacing + 'border-radius: ' + borderRadiusValues[array[7]] + ';';\n    } else if (array[2] && array[2] != '') {\n      string = string + '\\n' + spacing + 'border-radius: ' + array[2] + ';';\n    }\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'opacity: ' + array[3] + ';';\n  if (array[4] && array[4] != 0) string = string + '\\n' + spacing + 'cursor: ' + getCursorValue(array[4]) + ';';\n  return string;\n}\n;\nfunction getGradientBgStyle(label) {\n  var angle = label.indexOf('-right') > -1 ? '90deg' : '180deg',\n      niceLabel = label.replace('-right', '').replace('-bottom', '');\n  return 'background: linear-gradient(' + angle + ', var(' + niceLabel + '-stop-1), var(' + niceLabel + '-stop-2));';\n}\n;\nfunction getButtonsPaddingStyle(array, spacing, reset, btnLabel, btnStatus) {\n  //Y - X\n  // for copy code -> no need to add padding in code -> css variables already set\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) return '';\n  var string = '';\n  if (array.length < 1) return string;\n\n  if (array[0] != 0 && array[1] != 0) {\n    string = string + '\\n' + spacing + 'padding: ' + spacingArray[array[0]] + ' ' + spacingArray[array[1]] + ';';\n  } else {\n    if (array[0] != 0) string = string + '\\n' + spacing + 'padding-top: ' + spacingArray[array[0]] + ';\\n' + spacing + 'padding-bottom: ' + spacingArray[array[0]] + ';';\n    if (array[1] != 0) string = string + '\\n' + spacing + 'padding-left: ' + spacingArray[array[1]] + ';\\n' + spacing + 'padding-right: ' + spacingArray[array[1]] + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsPaddingValue(value) {\n  // setting css variables for copy code only\n  var padding = '';\n  if (value != 0) padding = spacingArray[value];\n  return padding;\n}\n;\nfunction getButtonsMarginStyle(array, spacing, reset) {\n  //top left right bottom\n  var string = '';\n  if (array.length < 1) return string;\n\n  if (array[0] != 0 && array[1] != 0 && array[2] != 0 && array[3] != 0) {\n    string = string + '\\n' + spacing + 'margin: ' + spacingArray[array[0]] + ' ' + spacingArray[array[2]] + ' ' + spacingArray[array[3]] + ' ' + spacingArray[array[1]] + ';';\n  } else {\n    if (array[0] != 0) string = string + '\\n' + spacing + 'margin-top: ' + spacingArray[array[0]] + ';';\n    if (array[1] != 0) string = string + '\\n' + spacing + 'margin-left: ' + spacingArray[array[1]] + ';';\n    if (array[2] != 0) string = string + '\\n' + spacing + 'margin-right: ' + spacingArray[array[2]] + ';';\n    if (array[3] != 0) string = string + '\\n' + spacing + 'margin-bottom: ' + spacingArray[array[3]] + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsBorderStyle(array, spacing, reset) {\n  var string = '',\n      colorVariables = '';\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][3] == 0) string = string + '\\n' + spacing + getBorderType(array[i][1]) + ': none;';else if (array[i][2] == '') {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][0], '--color-border' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      string = string + '\\n' + spacing + getBorderType(array[i][1]) + '-color: ' + variable[1] + ';';\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][0], '--color-border' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      string = string + '\\n' + spacing + getBorderType(array[i][1]) + ': ' + array[i][2] + ' ' + getBorderStyle(array[i][3]) + ' ' + variable[1] + ';'; // string = string + '\\n'+spacing+getBorderType(array[i][1])+': '+array[i][2]+' '+getBorderStyle(array[i][3])+' '+getColorValue(array[i][0], reset)+';';\n    }\n  }\n\n  return colorVariables + string;\n}\n;\nfunction getButtonsTypographyStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n  if (array[0]) string = string + '\\n' + spacing + 'font-family: var(' + fontArray[btnFontIds.indexOf(array[0])] + ');';\n\n  if (reset && reset != true && btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {// for copy code -> no need to add font-size in code -> css variables already set\n  } else {\n    if (array[1] && array[1] != 0) {\n      var fontSize = array[1] == 9 ? array[2] : textArrayValues[array[1]];\n\n      if (btnStatus == 'none' && (btnLabel == 'btn' || btnLabel == 'form-control')) {\n        if (btnLabel == 'btn') string = string + '\\n' + spacing + '--btn-font-size: ' + fontSize + ';';else string = string + '\\n' + spacing + '--form-control-font-size: ' + fontSize + ';';\n      } else {\n        string = string + '\\n' + spacing + 'font-size: ' + fontSize + ';';\n      }\n    }\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'font-weight: ' + array[3] + ';';\n  if (array[4] && array[4] != 0) string = string + '\\n' + spacing + 'text-transform: ' + getTextTransform(array[4]) + ';';\n  if (array[5] && array[5] != 0) string = string + '\\n' + spacing + 'text-decoration: ' + getTextDecoration(array[5]) + ';';\n  if (btnLabel == 'btn' && btnStatus == 'none' && (!array[5] || array[5] == 0)) string = string + '\\n' + spacing + 'text-decoration: none;';\n  if (array[6] && array[6] != '') string = string + '\\n' + spacing + 'line-height: ' + array[6] + ';';\n  if (array[7] && array[7] != '') string = string + '\\n' + spacing + 'letter-spacing: ' + array[7] + ';';\n\n  if (array[8] && array[8] != 0) {\n    if (reset && reset === true) {\n      string = string + '\\n' + spacing + getFontSmoothing();\n    } else {\n      string = string + '\\n' + spacing + '@include fontSmooth;';\n    }\n  }\n\n  return string;\n}\n;\nfunction getButtonsTextShadowStyle(array, spacing, reset) {\n  var string = '',\n      colorVariables = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'text-shadow: none;';\n      set = false;\n      break;\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][1], '--color-text-shadow' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      if (i > 0) string = string + ', ';\n      string = string + array[i][2] + ' ' + variable[1];\n      set = true;\n    }\n  }\n\n  if (set) string = colorVariables + '\\n' + spacing + 'text-shadow: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsShadowStyle(array, spacing, reset, isDemoReset) {\n  var string = '',\n      colorVariables = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'box-shadow: none;';\n      if (isDemoReset) string = '\\n' + spacing + 'box-shadow: none !important;';\n      set = false;\n      break;\n    } else if (array[i][3] > 1) {\n      // custom shadow with framework variables\n      if (i > 0) string = string + ', ';\n      string = string + shadowVariables[array[i][3]];\n      set = true;\n    } else {\n      var app = array.length > 1 ? '-' + (i + 1) : '';\n      var variable = getColorFbIos(array[i][1], '--color-shadow' + app, spacing, reset);\n      colorVariables = colorVariables + variable[0];\n      if (i > 0) string = string + ', ';\n      string = string + getBoxShadowType(array[i][3]) + array[i][2] + ' ' + variable[1];\n      set = true;\n    }\n  }\n\n  if (set) {\n    // isDemoReset -> when loading forms for components, make sure to add important to box shadow to make sure the custom shadow is showed\n    if (isDemoReset) string = string + ' !important';\n    string = colorVariables + '\\n' + spacing + 'box-shadow: ' + string + ';';\n  }\n\n  return string;\n}\n;\nfunction getButtonsOutlineStyle(array, spacing, reset) {\n  var string = '';\n\n  if (array[1] && array[1] != 0) {\n    if (array[1] == 8) string = string + '\\n' + spacing + 'outline: none;';else string = string + '\\n' + spacing + 'outline: ' + array[2] + ' ' + getOutlineStyle(array[1]) + ' ' + getColorValue(array[0], reset) + ';';\n  }\n\n  if (array[3] && array[3] != '') string = string + '\\n' + spacing + 'outline-offset: ' + array[3] + ';';\n  return string;\n}\n;\nfunction getButtonsTransformStyle(array, spacing, reset) {\n  var string = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 0) {\n      string = '\\n' + spacing + 'transform: none;';\n      break;\n    } else {\n      if (i > 0) string = string + ' ';\n      string = string + getTransformProperty(array[i][0]) + '(' + array[i][1] + ')';\n      set = true;\n    }\n  }\n\n  if (set) string = '\\n' + spacing + 'transform: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsTransitionStyle(array, spacing, reset) {\n  var string = '',\n      set = false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (array[i][0] == 1) {\n      string = '\\n' + spacing + 'transition: none;';\n      break;\n    } else {\n      if (i > 0) string = string + ', ';\n      string = string + getTransitionProperty(array[i][0]) + ' ' + array[i][1] + 's ' + getTransitionEase(array[i][2]);\n      if (array[i][3] != '') string = string + ' ' + array[i][3] + 's';\n      set = true;\n    }\n  }\n\n  if (set) string = '\\n' + spacing + 'transition: ' + string + ';';\n  return string;\n}\n;\nfunction getButtonsPlaceholderStyle(array, spacing, reset, btnLabel, btnStatus) {\n  var string = '';\n  if (array.length < 1 || !array[0] || array[0] == '') return '';\n  var style = '\\n' + spacing + '  color: ' + getColorValue(array[0], reset) + ';';\n\n  if (reset && reset === true) {\n    string = string + '}';\n    var selector = '.' + btnLabel;\n    if (btnStatus != 'none') selector = selector + btnStatus;\n    string = string + selector + '::placeholder {\\n' + spacing + '  opacity: 1;' + spacing + style + '\\n' + spacing + '}';\n  } else {\n    string = string + '\\n\\n' + spacing + '&::placeholder {\\n' + spacing + '  opacity: 1;' + spacing + style + '\\n' + spacing + '}';\n  }\n\n  return string;\n}\n;\nfunction getButtonsFontSizeValue(array) {\n  var fontSize = '';\n\n  if (array[1] && array[1] != 0) {\n    fontSize = array[1] == 9 ? array[2] : textArrayValues[array[1]];\n  }\n\n  return fontSize;\n}\n;\nfunction resetFormsStyleComponents() {\n  var style = '';\n  style = style + '.form-legend {color: inherit;line-height: normal;}';\n  return style;\n}\n;\nfunction getSuffixOpacity(value) {\n  if (value == 0) return '-a00';\n  if (value < 10) return '-a0' + value;\n  return '-a' + value;\n}\n;\nfunction getLuminance(hsl, iframe) {\n  if (hsl[0] == 0 && hsl[1] == 0 && hsl[2] == 1) return 1; // white\n\n  if (hsl[0] == 0 && hsl[1] == 0 && hsl[2] == 0) return 0; // black\n\n  var rgbSr = getRGBsrValues(hsl, iframe);\n  return 0.2126 * rgbSr[0] + 0.7152 * rgbSr[1] + 0.0722 * rgbSr[2];\n}\n;\nfunction getRGBsrValues(value, iframe) {\n  var rgb = getRGBValues(value, iframe);\n  var rSr = rgb[0] <= 0.03928 ? rgb[0] / 12.92 : Math.pow((rgb[0] + 0.055) / 1.055, 2.4);\n  var gSr = rgb[1] <= 0.03928 ? rgb[1] / 12.92 : Math.pow((rgb[1] + 0.055) / 1.055, 2.4);\n  var bSr = rgb[2] <= 0.03928 ? rgb[2] / 12.92 : Math.pow((rgb[2] + 0.055) / 1.055, 2.4);\n  return [rSr, gSr, bSr];\n}\n;\nfunction getRGBValues(hsl, iframe) {\n  var rgb = getRGBfromHSL(hsl);\n  return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255];\n}\n;\nfunction getRGBfromHSL(hsl) {\n  return chroma.hsl(hsl).rgb();\n}\n;\nvar loadedIframeCheck = false; //select text of a contentEditable element\n\njQuery.fn.selectText = function () {\n  var doc = document;\n  var element = this[0];\n\n  if (doc.body.createTextRange) {\n    var range = document.body.createTextRange();\n    range.moveToElementText(element);\n    range.select();\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    var range = document.createRange();\n    range.selectNodeContents(element);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n};\n\nfunction initFontList(typography) {\n  fontArray = [''];\n  btnFontIds = [0];\n\n  for (var property in typography['fontFamilyLabels']) {\n    if (typography['fontFamilyLabels'].hasOwnProperty(property)) {\n      fontArray.push(typography['fontFamilyLabels'][property]);\n      btnFontIds.push(typography['fontFamilyIds'][property]);\n    }\n  }\n}\n;\n\n(function () {\n  var demoContainer = $('.js-cd-demo-container'),\n      demoViewport = $('.js-cd-demo-viewport-size'); //when double-clicking on variables -> select all text\n\n  demoContainer.on('dblclick', '.js-css-variable-label', function (event) {\n    $(event.currentTarget).selectText();\n  }); //detect click on iframe and send to main to close popups\n\n  var iframeParent = window.parent;\n\n  if (!iframeParent) {\n    iframeParent = parent;\n  }\n\n  if (iframeParent) {\n    $(window).on('click', function () {\n      if (iframeParent.closeActivePopups != null) iframeParent.closeActivePopups();\n    }); // detect shortcut for search modal\n\n    window.addEventListener('keydown', function (event) {\n      if (event.keyCode && event.keyCode == 69 || event.key && event.key.toLowerCase() == 'e') {\n        if (event.ctrlKey || event.metaKey) iframeParent.openSiteSearch();\n      }\n    });\n  } //detect resize of the page and reset iframe height\n\n\n  var resizing = false,\n      resizingID = false,\n      mqLabels = ['xs', 'sm', 'md', 'lg', 'xl'];\n\n  if (demoViewport.length > 0) {\n    window.addEventListener(\"resize\", function (event) {\n      if (!resizing) {\n        resizing = true;\n        window.requestAnimationFrame(updateLabelSizeWindow);\n      }\n    });\n  }\n\n  $('.js-cd-demo').on('globalsUpdate', function () {\n    updateComponentGlobals();\n  });\n  $('.js-cd-demo').on('showComponent', function () {\n    var compScript = $('#comp-script');\n\n    if (compScript) {\n      var newScript = compScript.clone();\n      newScript = compScript.attr('src', compScript.attr('data-src'));\n      newScript.removeAttr('data-src');\n      newScript.removeAttr('id');\n      newScript.insertBefore(compScript);\n    }\n\n    setTimeout(function () {\n      if (iframeParent) iframeParent.revealComponent();\n    }, 300);\n  });\n\n  function updateLabelSizeWindow() {\n    var mq = getMq(),\n        sizes = getScreenSize();\n\n    if (resizing) {\n      demoContainer.trigger('windowResizing');\n      var mqLabelText = mq > 0 ? ' (' + mqLabels[mq - 1] + ')' : '';\n      demoViewport.text(sizes[0] + 'px x ' + sizes[1] + 'px' + mqLabelText).show();\n      if (resizingID) clearInterval(resizingID);\n      resizingID = setTimeout(function () {\n        demoViewport.hide();\n      }, 1000);\n    }\n\n    resizing = false;\n  }\n\n  ;\n\n  function updateComponentGlobals() {\n    //components -> if there's a project set, we should listen for changes in the viewport width as well\n    //typography and spacing are the only responsive globals\n    if (projectLoaded && (projectLoaded.typography || projectLoaded.spacing)) {\n      window.addEventListener(\"resize\", function (event) {\n        if (!resizing) {\n          resizing = true;\n          window.requestAnimationFrame(updateGlobals);\n        }\n      });\n    }\n  }\n\n  ;\n\n  function updateGlobals() {\n    var mq = getMq();\n\n    if (mq == MQ) {\n      resizing = false;\n      return;\n    }\n\n    MQ = mq;\n\n    if (projectLoaded.typography && projectLoaded.typography !== '') {\n      //typography was saved and need to be modified\n      loadTypographyStyle(JSON.parse(decodeSafeURIComponent(projectLoaded.typography)), false, mq);\n    }\n\n    if (projectLoaded.spacing && projectLoaded.spacing !== '') {\n      //typography was saved and need to be modified\n      loadSpacingStyle(JSON.parse(decodeSafeURIComponent(projectLoaded.spacing)), mq);\n    }\n\n    resizing = false;\n  }\n\n  ;\n  loadedIframeCheck = true;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/config-custom-azuriom/page.js\n")}},__webpack_require__={d:(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},o:(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),r:Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})}},__webpack_exports__={};__webpack_modules__["./js/config-custom-azuriom/page.js"](0,__webpack_exports__,__webpack_require__)})();