{"version":3,"file":"css/tinymce.css","mappings":"AAAA,2BCiEE,+BAAkE,6BAAqB,6BAA4B,6BAAnH,6BAAkE,2BAAqB,2BAA4B,2BAAnH,wBAAkE,sBAAqB,sBAA4B,sBAAnH,8BAAkE,4BAAqB,4BAA4B,4BAAnH,gCAAkE,8BAAqB,8BAA4B,8BAAnH,8BAAkE,4BAAqB,4BAA4B,4BAAnH,4BAAkE,0BAAqB,0BAA4B,0BAAnH,uBAAkE,qBAAqB,qBAA4B,qBAAnH,6BAAkE,2BAAqB,2BAA4B,2BAAnH,+BAAkE,6BAAqB,6BAA4B,6BAAnH,gCAAkE,8BAAqB,8BAA4B,8BAAnH,8BAAkE,4BAAqB,4BAA4B,4BAAnH,yBAAkE,uBAAqB,uBAA4B,uBAAnH,+BAAkE,6BAAqB,6BAA4B,6BAAnH,iCAAkE,+BAAqB,+BAA4B,+BAAnH,sBAAkE,oBAAqB,mBAA4B,oBAAnH,mBAAkE,kBAAqB,mBAA4B,qBAAnH,+BAAkE,4BAAqB,6BAA4B,6BAAnH,6BAAkE,0BAAqB,2BAA4B,2BAAnH,wBAAkE,qBAAqB,sBAA4B,sBAAnH,8BAAkE,2BAAqB,4BAA4B,4BAAnH,gCAAkE,6BAAqB,8BAA4B,8BAAnH,+BAAkE,4BAAqB,6BAA4B,6BAAnH,6BAAkE,0BAAqB,2BAA4B,2BAAnH,wBAAkE,qBAAqB,sBAA4B,sBAAnH,8BAAkE,2BAAqB,4BAA4B,4BAAnH,gCAAkE,6BAAqB,8BAA4B,8BAAnH,6BAAkE,yBAAqB,2BAA4B,2BAAnH,2BAAkE,uBAAqB,yBAA4B,yBAAnH,sBAAkE,kBAAqB,oBAA4B,oBAAnH,4BAAkE,wBAAqB,0BAA4B,0BAAnH,8BAAkE,0BAAqB,4BAA4B,4BAAnH,4BAAkE,0BAAqB,0BAA4B,0BAAnH,0BAAkE,wBAAqB,wBAA4B,wBAAnH,qBAAkE,mBAAqB,mBAA4B,mBAAnH,2BAAkE,yBAAqB,yBAA4B,yBAAnH,6BAAkE,2BAAqB,2BAA4B,2BAAnH,mBAAkE,iBAAqB,gBAA4B,iBAAnH,+BAAkE,6BAAqB,4BAA4B,6BAAnH,6BAAkE,2BAAqB,0BAA4B,2BAAnH,gCAAkE,8BAAqB,6BAA4B,8BAAnH,8BAAkE,4BAAqB,2BAA4B,4BAAnH,6BAAkE,4BAAqB,6BAA4B,8BC4GrH,CAxKI,sCAEI,gCA2KR,C","sources":["webpack://Rainbow/./scss/_theme/custom-style/_colors.scss","webpack://Rainbow/./scss/_theme/base/_mixins.scss","webpack://Rainbow/./scss/tinymce.scss"],"sourcesContent":[":root, [data-theme=\"default\"] {\r\n    @include defineColorHSL(--color-primary-darker, 204, 70%, 33%);\r\n    @include defineColorHSL(--color-primary-dark, 204, 70%, 43%);\r\n    @include defineColorHSL(--color-primary, 204, 70%, 53%);\r\n    @include defineColorHSL(--color-primary-light, 204, 70%, 63%);\r\n    @include defineColorHSL(--color-primary-lighter, 204, 70%, 73%);\r\n\r\n    @include defineColorHSL(--color-accent-darker, 282, 44%, 27%);\r\n    @include defineColorHSL(--color-accent-dark, 282, 44%, 37%);\r\n    @include defineColorHSL(--color-accent, 282, 44%, 47%);\r\n    @include defineColorHSL(--color-accent-light, 282, 44%, 57%);\r\n    @include defineColorHSL(--color-accent-lighter, 282, 44%, 67%);\r\n\r\n    @include defineColorHSL(--color-download-darker, 145, 63%, 22%);\r\n    @include defineColorHSL(--color-download-dark, 145, 63%, 32%);\r\n    @include defineColorHSL(--color-download, 145, 63%, 42%);\r\n    @include defineColorHSL(--color-download-light, 145, 63%, 52%);\r\n    @include defineColorHSL(--color-download-lighter, 145, 63%, 62%);\r\n\r\n    @include defineColorHSL(--color-black, 240, 8%, 12%);\r\n    @include defineColorHSL(--color-white, 0, 0%, 100%);\r\n\r\n    // feedback\r\n    @include defineColorHSL(--color-warning-darker, 46, 68%, 29%);\r\n    @include defineColorHSL(--color-warning-dark, 46, 68%, 39%);\r\n    @include defineColorHSL(--color-warning, 46, 68%, 49%);\r\n    @include defineColorHSL(--color-warning-light, 46, 68%, 59%);\r\n    @include defineColorHSL(--color-warning-lighter, 46, 68%, 69%);\r\n\r\n    @include defineColorHSL(--color-success-darker, 94, 48%, 20%);\r\n    @include defineColorHSL(--color-success-dark, 94, 48%, 30%);\r\n    @include defineColorHSL(--color-success, 94, 48%, 40%);\r\n    @include defineColorHSL(--color-success-light, 94, 48%, 50%);\r\n    @include defineColorHSL(--color-success-lighter, 94, 48%, 60%);\r\n\r\n    @include defineColorHSL(--color-error-darker, 6, 63%, 26%);\r\n    @include defineColorHSL(--color-error-dark, 6, 63%, 36%);\r\n    @include defineColorHSL(--color-error, 6, 63%, 46%);\r\n    @include defineColorHSL(--color-error-light, 6, 63%, 56%);\r\n    @include defineColorHSL(--color-error-lighter, 6, 63%, 66%);\r\n\r\n    @include defineColorHSL(--color-info-darker, 204, 62%, 27%);\r\n    @include defineColorHSL(--color-info-dark, 204, 62%, 37%);\r\n    @include defineColorHSL(--color-info, 204, 62%, 47%);\r\n    @include defineColorHSL(--color-info-light, 204, 62%, 57%);\r\n    @include defineColorHSL(--color-info-lighter, 204, 62%, 67%);\r\n\r\n    // color contrasts\r\n    @include defineColorHSL(--color-bg, 220, 5%, 22%);\r\n    @include defineColorHSL(--color-contrast-lower, 216, 4%, 25%);\r\n    @include defineColorHSL(--color-contrast-low, 220, 3%, 34%);\r\n    @include defineColorHSL(--color-contrast-medium, 220, 2%, 63%);\r\n    @include defineColorHSL(--color-contrast-high, 180, 2%, 90%);\r\n    @include defineColorHSL(--color-contrast-higher, 0, 0%, 100%);\r\n}\r\n\r\n// --------------------------------\r\n\r\n// (END) Global editor code\r\n\r\n// --------------------------------\r\n","// --------------------------------\r\n\r\n// Typography\r\n\r\n// --------------------------------\r\n\r\n// edit font rendering -> tip: use for light text on dark backgrounds\r\n@mixin fontSmooth {\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n// crop top space on text elements - caused by line height\r\n@mixin lhCrop($line-height, $capital-letter: 1) {\r\n  &::before {\r\n    content: '';\r\n    display: block;\r\n    height: 0;\r\n    width: 0;\r\n    margin-top: calc((#{$capital-letter} - #{$line-height}) * 0.5em);\r\n  }\r\n}\r\n\r\n// edit text unit on a component level\r\n@mixin textUnit($text-unit) {\r\n  --text-unit: #{$text-unit};\r\n  font-size: var(--text-unit);\r\n}\r\n\r\n// --------------------------------\r\n\r\n// Spacing\r\n\r\n// --------------------------------\r\n\r\n// edit space unit on a component level\r\n@mixin spaceUnit($space-unit) {\r\n  --space-unit:  #{$space-unit};\r\n}\r\n\r\n// --------------------------------\r\n\r\n// Reset\r\n\r\n// --------------------------------\r\n\r\n// reset user agent style\r\n@mixin reset {\r\n  background-color: transparent;\r\n  padding: 0;\r\n  border: 0;\r\n  border-radius: 0;\r\n  color: inherit;\r\n  line-height: inherit;\r\n  appearance: none;\r\n}\r\n\r\n// --------------------------------\r\n\r\n// Colors\r\n\r\n// --------------------------------\r\n\r\n// define HSL color variable\r\n@mixin defineColorHSL($color, $hue, $saturation, $lightness){\r\n  #{$color}: unquote(\"hsl(#{$hue}, #{$saturation}, #{$lightness})\");#{$color}-h: #{$hue};#{$color}-s: #{$saturation};#{$color}-l: #{$lightness};\r\n}\r\n\r\n// return color with different opacity value\r\n@function alpha($color, $opacity){\r\n  $color: str-replace($color, 'var(');\r\n  $color: str-replace($color, ')');\r\n  $color-h: var(#{$color+'-h'});\r\n  $color-s: var(#{$color+'-s'});\r\n  $color-l: var(#{$color+'-l'});\r\n  @return hsla($color-h, $color-s, $color-l, $opacity);\r\n}\r\n\r\n// return color with different lightness value\r\n@function lightness($color, $lightnessMultiplier){\r\n  $color: str-replace($color, 'var(');\r\n  $color: str-replace($color, ')');\r\n  $color-h: var(#{$color+'-h'});\r\n  $color-s: var(#{$color+'-s'});\r\n  $color-l: var(#{$color+'-l'});\r\n  @return hsl($color-h, $color-s, calc(#{$color-l} * #{$lightnessMultiplier}));\r\n}\r\n\r\n// replace substring with another string\r\n// credits: https://css-tricks.com/snippets/sass/str-replace-function/\r\n@function str-replace($string, $search, $replace: '') {\r\n  $index: str-index($string, $search);\r\n  @if $index {\r\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\r\n  }\r\n  @return $string;\r\n}\r\n\r\n// --------------------------------\r\n\r\n// Accessibility\r\n\r\n// --------------------------------\r\n\r\n// hide - content made available only to screen readers\r\n@mixin srHide {\r\n  position: absolute;\r\n  clip: rect(1px, 1px, 1px, 1px);\r\n  clip-path: inset(50%);\r\n}\r\n\r\n// show\r\n@mixin srShow {\r\n  position: static;\r\n  clip: auto;\r\n  clip-path: none;\r\n}\r\n\r\n// --------------------------------\r\n\r\n// Grid & Layout\r\n\r\n// --------------------------------\r\n\r\n$grid-columns: 12 !default;\r\n\r\n// used to round width to a number with 2 decimal places - used for IE fallback\r\n@function round-width ($i) {\r\n  $width : floor(100% * $i * 100/ $grid-columns) / 100;\r\n  @return $width;\r\n}\r\n\r\n// used to create the auto-size columns of the grid system (.col class)\r\n@mixin autoSizedColumn {\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  max-width: 100%;\r\n}\r\n\r\n// CSS Grid Layout fallback\r\n@mixin gridFallback($gap: null) {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  @if( $gap == null ) {\r\n    $gap: var(--space-md);\r\n  }\r\n\r\n  margin: calc(#{$gap} * -1) 0 0 calc(#{$gap} * -1);\r\n\r\n  > * {\r\n    padding: #{$gap} 0 0 #{$gap};\r\n    background-clip: content-box;\r\n  }\r\n\r\n  @supports (grid-area: auto) {\r\n    margin: 0;\r\n\r\n    > * {\r\n      padding: 0;\r\n      max-width: none!important;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin column($width) {\r\n  @if unit($width) != '%' {\r\n    $width: $width * 100%;\r\n  }\r\n  flex-basis: #{$width};\r\n  max-width: #{$width};\r\n}\r\n\r\n// --------------------------------\r\n\r\n// CSS Triangle\r\n\r\n// --------------------------------\r\n\r\n@mixin triangle ($direction: up, $width: 12px, $color: red) {\r\n  width: 0;\r\n  height: 0;\r\n  border: $width solid transparent;\r\n\r\n  @if( $direction == left ) {\r\n    border-right-color: $color;\r\n  } @else if( $direction == right ) {\r\n    border-left-color: $color;\r\n  } @else if( $direction == down ) {\r\n    border-top-color: $color;\r\n  } @else {\r\n    border-bottom-color: $color;\r\n  }\r\n}","@import \"_theme/base/mixins\";\n@import \"_theme/custom-style/colors\";\n\n\n.mce-content-body {\n    &,\n    p {\n        color: var(--color-contrast-high);\n    }\n}\n\n"],"names":[],"sourceRoot":""}